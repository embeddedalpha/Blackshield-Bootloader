
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00008054  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000070e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060f4  080060f4  000070f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080060f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008054  2**0
                  CONTENTS
 10 .bss          000007f0  20000054  20000054  00008054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  00008054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008edb  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010fa  00000000  00000000  00010f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00012060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ab  00000000  00000000  000123f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013d9  00000000  00000000  000126a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000717b  00000000  00000000  00013a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fe20  00000000  00000000  0001abf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aaa17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001418  00000000  00000000  000aaa5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000abe74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c38 	.word	0x08005c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08005c38 	.word	0x08005c38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Delay_us>:
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}


__STATIC_INLINE uint32_t Delay_us(volatile float us)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 168 * us;
 8000c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c36:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000c6c <Delay_us+0x44>
 8000c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <Delay_us+0x48>)
 8000c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c44:	ee17 2a90 	vmov	r2, s15
 8000c48:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <Delay_us+0x48>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000c50:	bf00      	nop
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <Delay_us+0x48>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f9      	beq.n	8000c52 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	43280000 	.word	0x43280000
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <CRC_Init>:


#include "CRC.h"

void CRC_Init(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <CRC_Init+0x1c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <CRC_Init+0x1c>)
 8000c7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <CRC_Reset>:

void CRC_Reset(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
    CRC->CR |= CRC_CR_RESET;
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <CRC_Reset+0x1c>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <CRC_Reset+0x1c>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6093      	str	r3, [r2, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023000 	.word	0x40023000

08000cb4 <CRC_Compute_8Bit_Block>:
    CRC->DR = (word);
    return (CRC->DR);
}

uint32_t CRC_Compute_8Bit_Block(uint8_t *wordBlock, size_t length)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	CRC_Reset();
 8000cbe:	f7ff ffe9 	bl	8000c94 <CRC_Reset>
	for(uint32_t i = 0; i < length; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e00c      	b.n	8000ce2 <CRC_Compute_8Bit_Block+0x2e>
	{
		CRC -> DR = (uint32_t)(wordBlock[i]);
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <CRC_Compute_8Bit_Block+0x44>)
 8000cd2:	601a      	str	r2, [r3, #0]
		Delay_us(1);
 8000cd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000cd8:	f7ff ffa6 	bl	8000c28 <Delay_us>
	for(uint32_t i = 0; i < length; i++)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3ee      	bcc.n	8000cc8 <CRC_Compute_8Bit_Block+0x14>
	}
	return (CRC -> DR);
 8000cea:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <CRC_Compute_8Bit_Block+0x44>)
 8000cec:	681b      	ldr	r3, [r3, #0]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023000 	.word	0x40023000

08000cfc <Console_IRQ>:
//        rx_flag = 1; // Set the flag indicating data reception is complete
//    }
//}

void Console_IRQ(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
    if (rx_get_flag == 1) { // Check if reception is active
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <Console_IRQ+0x74>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d12d      	bne.n	8000d64 <Console_IRQ+0x68>
        (void)UART4->SR; // Read the status register to clear flags
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <Console_IRQ+0x78>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
        (void)UART4->DR; // Read the data register to clear flags
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <Console_IRQ+0x78>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop

        __disable_irq(); // Disable interrupts to safely update DMA configurations

        // Disable DMA stream
        serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

        // Calculate the length of received data
        RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <Console_IRQ+0x80>)
 8000d32:	601a      	str	r2, [r3, #0]

        // Prevent buffer overflow
        if (RX_Length > RX_Buffer_Length) {
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <Console_IRQ+0x80>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d3a:	dd02      	ble.n	8000d42 <Console_IRQ+0x46>
            RX_Length = RX_Buffer_Length;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <Console_IRQ+0x80>)
 8000d3e:	22c8      	movs	r2, #200	@ 0xc8
 8000d40:	601a      	str	r2, [r3, #0]
        }

        // Reset DMA stream for the next reception
        serial.USART_DMA_Instance_RX.Request.Stream->NDTR = RX_Buffer_Length;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d46:	22c8      	movs	r2, #200	@ 0xc8
 8000d48:	605a      	str	r2, [r3, #4]
        serial.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <Console_IRQ+0x7c>)
 8000d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d54:	f042 0201 	orr.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d5a:	b662      	cpsie	i
}
 8000d5c:	bf00      	nop

        __enable_irq(); // Re-enable interrupts

        rx_flag = 1; // Set the flag indicating data reception is complete
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <Console_IRQ+0x84>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
    }
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000070 	.word	0x20000070
 8000d74:	40004c00 	.word	0x40004c00
 8000d78:	20000144 	.word	0x20000144
 8000d7c:	20000078 	.word	0x20000078
 8000d80:	20000074 	.word	0x20000074

08000d84 <Console_Init>:
 * This function configures UART4 for communication, sets up DMA for
 * data handling, and prepares the GPIO pins for UART communication.
 *
 * @param baudrate Desired baud rate for UART communication.
 */
void Console_Init(int32_t baudrate) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    // Reset USART configuration to default values
    USART_Config_Reset(&serial);
 8000d8c:	4815      	ldr	r0, [pc, #84]	@ (8000de4 <Console_Init+0x60>)
 8000d8e:	f002 fbc5 	bl	800351c <USART_Config_Reset>

    // Configure USART parameters
    serial.Port = UART4; // Use UART4 for console communication
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <Console_Init+0x60>)
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <Console_Init+0x64>)
 8000d96:	601a      	str	r2, [r3, #0]
    serial.baudrate = baudrate; // Set the baud rate
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <Console_Init+0x60>)
 8000d9c:	6053      	str	r3, [r2, #4]
    serial.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <Console_Init+0x60>)
 8000da2:	721a      	strb	r2, [r3, #8]
    serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000da4:	2300      	movs	r3, #0
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <Console_Init+0x60>)
 8000daa:	741a      	strb	r2, [r3, #16]
    serial.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000dac:	220a      	movs	r2, #10
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <Console_Init+0x60>)
 8000db0:	725a      	strb	r2, [r3, #9]
    serial.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000db2:	220b      	movs	r2, #11
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <Console_Init+0x60>)
 8000db6:	729a      	strb	r2, [r3, #10]
    serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000db8:	2310      	movs	r3, #16
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <Console_Init+0x60>)
 8000dbe:	739a      	strb	r2, [r3, #14]
    serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <Console_Init+0x60>)
 8000dca:	745a      	strb	r2, [r3, #17]
    serial.ISR_Routines.Idle_Line_ISR = Console_IRQ;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <Console_Init+0x60>)
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <Console_Init+0x68>)
 8000dd0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    // Initialize USART
    if (USART_Init(&serial) != true) {
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <Console_Init+0x60>)
 8000dd6:	f003 f9df 	bl	8004198 <USART_Init>
        // Handle USART initialization failure (e.g., log error or halt execution)
    }
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000144 	.word	0x20000144
 8000de8:	40004c00 	.word	0x40004c00
 8000dec:	08000cfd 	.word	0x08000cfd

08000df0 <printConsole>:
  * using DMA. It supports formatted strings with variable arguments.
  *
  * @param msg Format string for the message to send.
  * @param ... Variable arguments for the format string.
  */
 void printConsole(char *msg, ...) {
 8000df0:	b40f      	push	{r0, r1, r2, r3}
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
     va_list args;
     va_start(args, msg);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	603b      	str	r3, [r7, #0]

     // Format the message and store it in the transmission buffer
//     vsprintf((char *)TRX_Buffer, msg, args);

     vsnprintf((char *)TRX_Buffer, RX_Buffer_Length, msg, args);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	21c8      	movs	r1, #200	@ 0xc8
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <printConsole+0x40>)
 8000e06:	f004 fa15 	bl	8005234 <vsniprintf>

     // Get the length of the formatted string
     uint16_t len = strlen((char *)TRX_Buffer);
 8000e0a:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <printConsole+0x40>)
 8000e0c:	f7ff f9e0 	bl	80001d0 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	80fb      	strh	r3, [r7, #6]

     // Transmit the buffer using DMA
     USART_TX_Buffer(&serial, (uint8_t *)&TRX_Buffer[0], len);
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4905      	ldr	r1, [pc, #20]	@ (8000e30 <printConsole+0x40>)
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <printConsole+0x44>)
 8000e1c:	f003 fe1e 	bl	8004a5c <USART_TX_Buffer>

     va_end(args);
 }
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e2a:	b004      	add	sp, #16
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000007c 	.word	0x2000007c
 8000e34:	20000144 	.word	0x20000144

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	@ (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000e78:	4b60      	ldr	r3, [pc, #384]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a60      	ldr	r2, [pc, #384]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000e7e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000e80:	4b5f      	ldr	r3, [pc, #380]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d015      	beq.n	8000eb8 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00e      	beq.n	8000eb8 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000ea4:	4b57      	ldr	r3, [pc, #348]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eaa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000eac:	4b53      	ldr	r3, [pc, #332]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a52      	ldr	r2, [pc, #328]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000eb8:	4b51      	ldr	r3, [pc, #324]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d015      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000edc:	4b49      	ldr	r3, [pc, #292]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000ee4:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000ef0:	4b43      	ldr	r3, [pc, #268]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d015      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	2204      	movs	r2, #4
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000f14:	4b3b      	ldr	r3, [pc, #236]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a36      	ldr	r2, [pc, #216]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000f28:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d02d      	beq.n	8000f90 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000f34:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d026      	beq.n	8000f90 <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000f42:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f52:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f60:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f66:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d110      	bne.n	8000f90 <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f84:	4798      	blx	r3
 8000f86:	e003      	b.n	8000f90 <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f8e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0320 	and.w	r3, r3, #32
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d02d      	beq.n	8000ff8 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d026      	beq.n	8000ff8 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d021      	beq.n	8000ff8 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x188>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d110      	bne.n	8000ff8 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fec:	4798      	blx	r3
				}
			}
		}

	}
}
 8000fee:	e003      	b.n	8000ff8 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <DMA1_Stream0_IRQHandler+0x190>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff6:	4798      	blx	r3
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40026000 	.word	0x40026000
 8001000:	20000268 	.word	0x20000268
 8001004:	20000228 	.word	0x20000228

08001008 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800100c:	4b60      	ldr	r3, [pc, #384]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a60      	ldr	r2, [pc, #384]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 8001012:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001014:	4b5f      	ldr	r3, [pc, #380]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101c:	2b00      	cmp	r3, #0
 800101e:	d015      	beq.n	800104c <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001020:	4b5d      	ldr	r3, [pc, #372]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00e      	beq.n	800104c <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800102e:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001034:	2b00      	cmp	r3, #0
 8001036:	d009      	beq.n	800104c <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001038:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800103e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001040:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4a52      	ldr	r2, [pc, #328]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 8001046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800104a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 800104c:	4b51      	ldr	r3, [pc, #324]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001058:	4b4f      	ldr	r3, [pc, #316]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00e      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001066:	4b4c      	ldr	r3, [pc, #304]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d009      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001078:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001082:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001084:	4b43      	ldr	r3, [pc, #268]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108c:	2b00      	cmp	r3, #0
 800108e:	d015      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001090:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2204      	movs	r2, #4
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00e      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800109e:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a36      	ldr	r2, [pc, #216]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ba:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d02d      	beq.n	8001124 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	2208      	movs	r2, #8
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d026      	beq.n	8001124 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80010d6:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d021      	beq.n	8001124 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010f2:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010fe:	4293      	cmp	r3, r2
 8001100:	d110      	bne.n	8001124 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001118:	4798      	blx	r3
 800111a:	e003      	b.n	8001124 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001122:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <DMA1_Stream1_IRQHandler+0x18c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800112c:	2b00      	cmp	r3, #0
 800112e:	d02d      	beq.n	800118c <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2210      	movs	r2, #16
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d026      	beq.n	800118c <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d021      	beq.n	800118c <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <DMA1_Stream1_IRQHandler+0x188>)
 8001156:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800115a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001162:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001166:	4293      	cmp	r3, r2
 8001168:	d110      	bne.n	800118c <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001180:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001182:	e003      	b.n	800118c <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <DMA1_Stream1_IRQHandler+0x190>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118a:	4798      	blx	r3
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40026000 	.word	0x40026000
 8001194:	20000268 	.word	0x20000268
 8001198:	2000022c 	.word	0x2000022c

0800119c <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80011a0:	4b64      	ldr	r3, [pc, #400]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a64      	ldr	r2, [pc, #400]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 80011a6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80011a8:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80011b4:	4b61      	ldr	r3, [pc, #388]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	2280      	movs	r2, #128	@ 0x80
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00e      	beq.n	80011e0 <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80011c2:	4b5e      	ldr	r3, [pc, #376]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d009      	beq.n	80011e0 <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80011cc:	4b5b      	ldr	r3, [pc, #364]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011d2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80011d4:	4b57      	ldr	r3, [pc, #348]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a56      	ldr	r2, [pc, #344]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 80011da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011de:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80011e0:	4b55      	ldr	r3, [pc, #340]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d015      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80011ec:	4b53      	ldr	r3, [pc, #332]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80011fa:	4b50      	ldr	r3, [pc, #320]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001204:	4b4d      	ldr	r3, [pc, #308]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800120c:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a48      	ldr	r2, [pc, #288]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001216:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001218:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01c      	beq.n	800125e <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001224:	4b45      	ldr	r3, [pc, #276]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2204      	movs	r2, #4
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d015      	beq.n	800125e <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001232:	4b42      	ldr	r3, [pc, #264]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2204      	movs	r2, #4
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00e      	beq.n	800125e <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001240:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800124a:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4a37      	ldr	r2, [pc, #220]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 8001258:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800125c:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800125e:	4b36      	ldr	r3, [pc, #216]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d02d      	beq.n	80012c6 <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2208      	movs	r2, #8
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d026      	beq.n	80012c6 <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001278:	4b30      	ldr	r3, [pc, #192]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127e:	2b00      	cmp	r3, #0
 8001280:	d021      	beq.n	80012c6 <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001282:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001288:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 8001290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001294:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d110      	bne.n	80012c6 <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ba:	4798      	blx	r3
 80012bc:	e003      	b.n	80012c6 <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c4:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <DMA1_Stream2_IRQHandler+0x19c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d02d      	beq.n	800132e <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2208      	movs	r2, #8
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d026      	beq.n	800132e <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d021      	beq.n	800132e <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <DMA1_Stream2_IRQHandler+0x198>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fc:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001304:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001308:	4293      	cmp	r3, r2
 800130a:	d110      	bne.n	800132e <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001322:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001324:	e003      	b.n	800132e <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <DMA1_Stream2_IRQHandler+0x1a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800132c:	4798      	blx	r3
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40026000 	.word	0x40026000
 8001338:	20000268 	.word	0x20000268
 800133c:	20000230 	.word	0x20000230

08001340 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001344:	4b60      	ldr	r3, [pc, #384]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a60      	ldr	r2, [pc, #384]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 800134a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 800134c:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001358:	4b5d      	ldr	r3, [pc, #372]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00e      	beq.n	8001384 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001366:	4b5a      	ldr	r3, [pc, #360]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001370:	4b57      	ldr	r3, [pc, #348]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001376:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a52      	ldr	r2, [pc, #328]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 800137e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001382:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001384:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d015      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001390:	4b4f      	ldr	r3, [pc, #316]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00e      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800139e:	4b4c      	ldr	r3, [pc, #304]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80013a8:	4b49      	ldr	r3, [pc, #292]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80013b0:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a44      	ldr	r2, [pc, #272]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 80013b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ba:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80013bc:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80013c8:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2204      	movs	r2, #4
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00e      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013e0:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80013e8:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a36      	ldr	r2, [pc, #216]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d02d      	beq.n	800145c <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001400:	4b33      	ldr	r3, [pc, #204]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2208      	movs	r2, #8
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d026      	beq.n	800145c <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800140e:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001414:	2b00      	cmp	r3, #0
 8001416:	d021      	beq.n	800145c <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001418:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a28      	ldr	r2, [pc, #160]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 8001426:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800142a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001432:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001436:	4293      	cmp	r3, r2
 8001438:	d110      	bne.n	800145c <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001450:	4798      	blx	r3
 8001452:	e003      	b.n	800145c <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <DMA1_Stream3_IRQHandler+0x18c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d02d      	beq.n	80014c4 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	2210      	movs	r2, #16
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x188>)
 800148e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001492:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800149e:	4293      	cmp	r3, r2
 80014a0:	d110      	bne.n	80014c4 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80014ba:	e003      	b.n	80014c4 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <DMA1_Stream3_IRQHandler+0x190>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	4798      	blx	r3
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40026000 	.word	0x40026000
 80014cc:	20000268 	.word	0x20000268
 80014d0:	20000234 	.word	0x20000234

080014d4 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80014d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a4f      	ldr	r2, [pc, #316]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 80014de:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00e      	beq.n	800150a <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014fc:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80014fe:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	4a45      	ldr	r2, [pc, #276]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 8001504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001508:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800150a:	4b44      	ldr	r3, [pc, #272]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00e      	beq.n	8001534 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001516:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001520:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001528:	4b3b      	ldr	r3, [pc, #236]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a3a      	ldr	r2, [pc, #232]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00e      	beq.n	800155e <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001540:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800154a:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001552:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	4a30      	ldr	r2, [pc, #192]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800155e:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d026      	beq.n	80015b8 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	2b00      	cmp	r3, #0
 8001572:	d021      	beq.n	80015b8 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001588:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001592:	4293      	cmp	r3, r2
 8001594:	d110      	bne.n	80015b8 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ac:	4798      	blx	r3
 80015ae:	e003      	b.n	80015b8 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <DMA1_Stream4_IRQHandler+0x148>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d026      	beq.n	8001612 <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015c4:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d021      	beq.n	8001612 <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <DMA1_Stream4_IRQHandler+0x144>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d110      	bne.n	8001612 <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001606:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001608:	e003      	b.n	8001612 <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800160a:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <DMA1_Stream4_IRQHandler+0x14c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	4798      	blx	r3
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40026000 	.word	0x40026000
 800161c:	2000026c 	.word	0x2000026c
 8001620:	20000238 	.word	0x20000238

08001624 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001628:	4b4f      	ldr	r3, [pc, #316]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a4f      	ldr	r2, [pc, #316]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 800162e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001630:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800163c:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001646:	4b4a      	ldr	r3, [pc, #296]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800164e:	4b46      	ldr	r3, [pc, #280]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4a45      	ldr	r2, [pc, #276]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 8001654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001658:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800165a:	4b44      	ldr	r3, [pc, #272]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00e      	beq.n	8001684 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001670:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a3a      	ldr	r2, [pc, #232]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00e      	beq.n	80016ae <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001690:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800169a:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80016a2:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ac:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d026      	beq.n	8001708 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ca:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80016cc:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a25      	ldr	r2, [pc, #148]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d6:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d110      	bne.n	8001708 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016fc:	4798      	blx	r3
 80016fe:	e003      	b.n	8001708 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <DMA1_Stream5_IRQHandler+0x148>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001710:	2b00      	cmp	r3, #0
 8001712:	d026      	beq.n	8001762 <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d021      	beq.n	8001762 <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001724:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <DMA1_Stream5_IRQHandler+0x144>)
 800172c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001730:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001738:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800173c:	4293      	cmp	r3, r2
 800173e:	d110      	bne.n	8001762 <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001756:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001758:	e003      	b.n	8001762 <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <DMA1_Stream5_IRQHandler+0x14c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	4798      	blx	r3
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40026000 	.word	0x40026000
 800176c:	2000026c 	.word	0x2000026c
 8001770:	2000023c 	.word	0x2000023c

08001774 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a4f      	ldr	r2, [pc, #316]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 800177e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001780:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800178c:	4b4c      	ldr	r3, [pc, #304]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001796:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800179e:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4a45      	ldr	r2, [pc, #276]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80017aa:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00e      	beq.n	80017d4 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017b6:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017c0:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80017c8:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a3a      	ldr	r2, [pc, #232]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00e      	beq.n	80017fe <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80017ea:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a30      	ldr	r2, [pc, #192]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 80017f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017fc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80017fe:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d026      	beq.n	8001858 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800180a:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001814:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a25      	ldr	r2, [pc, #148]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 8001822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001826:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001828:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001832:	4293      	cmp	r3, r2
 8001834:	d110      	bne.n	8001858 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800184c:	4798      	blx	r3
 800184e:	e003      	b.n	8001858 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001856:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <DMA1_Stream6_IRQHandler+0x148>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d026      	beq.n	80018b2 <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d021      	beq.n	80018b2 <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x144>)
 800187c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001880:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001888:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800188c:	4293      	cmp	r3, r2
 800188e:	d110      	bne.n	80018b2 <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a6:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018a8:	e003      	b.n	80018b2 <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <DMA1_Stream6_IRQHandler+0x14c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40026000 	.word	0x40026000
 80018bc:	2000026c 	.word	0x2000026c
 80018c0:	20000240 	.word	0x20000240

080018c4 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80018c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 80018ce:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80018d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80018dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ec:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80018ee:	4b46      	ldr	r3, [pc, #280]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4a45      	ldr	r2, [pc, #276]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80018fa:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00e      	beq.n	8001924 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001910:	4b3f      	ldr	r3, [pc, #252]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001924:	4b39      	ldr	r3, [pc, #228]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00e      	beq.n	800194e <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001930:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800193a:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001942:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	4a30      	ldr	r2, [pc, #192]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 8001948:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800194c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800194e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d026      	beq.n	80019a8 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001960:	2b00      	cmp	r3, #0
 8001962:	d021      	beq.n	80019a8 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800196c:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 8001972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001976:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001978:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001982:	4293      	cmp	r3, r2
 8001984:	d110      	bne.n	80019a8 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199c:	4798      	blx	r3
 800199e:	e003      	b.n	80019a8 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <DMA1_Stream7_IRQHandler+0x148>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d026      	beq.n	8001a02 <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80019b4:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d021      	beq.n	8001a02 <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x144>)
 80019cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019d0:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019dc:	4293      	cmp	r3, r2
 80019de:	d110      	bne.n	8001a02 <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019f6:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80019f8:	e003      	b.n	8001a02 <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <DMA1_Stream7_IRQHandler+0x14c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a00:	4798      	blx	r3
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40026000 	.word	0x40026000
 8001a0c:	2000026c 	.word	0x2000026c
 8001a10:	20000244 	.word	0x20000244

08001a14 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001a18:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a1e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001a20:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d015      	beq.n	8001a58 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00e      	beq.n	8001a58 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a44:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001a58:	4b51      	ldr	r3, [pc, #324]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a72:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a7c:	4b49      	ldr	r3, [pc, #292]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001a84:	4b45      	ldr	r3, [pc, #276]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a44      	ldr	r2, [pc, #272]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001a90:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001abc:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a36      	ldr	r2, [pc, #216]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001ac8:	4b35      	ldr	r3, [pc, #212]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02d      	beq.n	8001b30 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001ad4:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2208      	movs	r2, #8
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d026      	beq.n	8001b30 <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001ae2:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d021      	beq.n	8001b30 <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001aec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001af4:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a28      	ldr	r2, [pc, #160]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d110      	bne.n	8001b30 <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b24:	4798      	blx	r3
 8001b26:	e003      	b.n	8001b30 <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d02d      	beq.n	8001b98 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2210      	movs	r2, #16
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d026      	beq.n	8001b98 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d021      	beq.n	8001b98 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x188>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d110      	bne.n	8001b98 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8c:	4798      	blx	r3
				}
			}
		}

	}
}
 8001b8e:	e003      	b.n	8001b98 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <DMA2_Stream0_IRQHandler+0x190>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	4798      	blx	r3
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40026400 	.word	0x40026400
 8001ba0:	20000268 	.word	0x20000268
 8001ba4:	20000248 	.word	0x20000248

08001ba8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001bac:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001bb2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001bca:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bdc:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001bde:	4b44      	ldr	r3, [pc, #272]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00e      	beq.n	8001c08 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001bea:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a3a      	ldr	r2, [pc, #232]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c14:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c1e:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4a30      	ldr	r2, [pc, #192]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001c2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c30:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001c32:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d021      	beq.n	8001c8c <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c48:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001c50:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c5a:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d110      	bne.n	8001c8c <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c80:	4798      	blx	r3
 8001c82:	e003      	b.n	8001c8c <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <DMA2_Stream1_IRQHandler+0x148>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d026      	beq.n	8001ce6 <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d021      	beq.n	8001ce6 <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <DMA2_Stream1_IRQHandler+0x144>)
 8001cb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cb4:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d110      	bne.n	8001ce6 <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cda:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001cdc:	e003      	b.n	8001ce6 <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <DMA2_Stream1_IRQHandler+0x14c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	4798      	blx	r3
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40026400 	.word	0x40026400
 8001cf0:	20000268 	.word	0x20000268
 8001cf4:	2000024c 	.word	0x2000024c

08001cf8 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001d02:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001d04:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d10:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001d22:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4a45      	ldr	r2, [pc, #276]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00e      	beq.n	8001d58 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d3a:	4b42      	ldr	r3, [pc, #264]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d44:	4b3f      	ldr	r3, [pc, #252]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a3a      	ldr	r2, [pc, #232]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d56:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001d58:	4b39      	ldr	r3, [pc, #228]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d64:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4a30      	ldr	r2, [pc, #192]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d80:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001d82:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d026      	beq.n	8001ddc <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9e:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001da0:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a25      	ldr	r2, [pc, #148]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001daa:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001dac:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d110      	bne.n	8001ddc <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd0:	4798      	blx	r3
 8001dd2:	e003      	b.n	8001ddc <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dda:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <DMA2_Stream2_IRQHandler+0x148>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d026      	beq.n	8001e36 <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d021      	beq.n	8001e36 <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x144>)
 8001e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e04:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d110      	bne.n	8001e36 <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2a:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001e2c:	e003      	b.n	8001e36 <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	4798      	blx	r3
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40026400 	.word	0x40026400
 8001e40:	20000268 	.word	0x20000268
 8001e44:	20000250 	.word	0x20000250

08001e48 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e4c:	4b60      	ldr	r3, [pc, #384]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a60      	ldr	r2, [pc, #384]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e52:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001e54:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001e60:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00e      	beq.n	8001e8c <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001e78:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001e80:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001e86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001e8c:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001e98:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001eb0:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001eb8:	4b45      	ldr	r3, [pc, #276]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a44      	ldr	r2, [pc, #272]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001ec4:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001ed0:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001ede:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001ef0:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a36      	ldr	r2, [pc, #216]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001efc:	4b35      	ldr	r3, [pc, #212]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02d      	beq.n	8001f64 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d026      	beq.n	8001f64 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d021      	beq.n	8001f64 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f26:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001f28:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a28      	ldr	r2, [pc, #160]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001f2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f32:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d110      	bne.n	8001f64 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f58:	4798      	blx	r3
 8001f5a:	e003      	b.n	8001f64 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <DMA2_Stream3_IRQHandler+0x18c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d02d      	beq.n	8001fcc <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2210      	movs	r2, #16
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d026      	beq.n	8001fcc <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x188>)
 8001f96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f9a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d110      	bne.n	8001fcc <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc0:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001fc2:	e003      	b.n	8001fcc <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x190>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	4798      	blx	r3
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40026400 	.word	0x40026400
 8001fd4:	20000268 	.word	0x20000268
 8001fd8:	20000254 	.word	0x20000254

08001fdc <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 8001fe6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8002006:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a45      	ldr	r2, [pc, #276]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 800200c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002010:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8002012:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00e      	beq.n	800203c <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800201e:	4b42      	ldr	r3, [pc, #264]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002028:	4b3f      	ldr	r3, [pc, #252]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002030:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a3a      	ldr	r2, [pc, #232]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 800203c:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002048:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002052:	4b35      	ldr	r3, [pc, #212]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800205a:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a30      	ldr	r2, [pc, #192]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8002066:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d026      	beq.n	80020c0 <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002072:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800207c:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800209a:	4293      	cmp	r3, r2
 800209c:	d110      	bne.n	80020c0 <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d004      	beq.n	80020b8 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b4:	4798      	blx	r3
 80020b6:	e003      	b.n	80020c0 <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <DMA2_Stream4_IRQHandler+0x148>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d026      	beq.n	800211a <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d021      	beq.n	800211a <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <DMA2_Stream4_IRQHandler+0x144>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d110      	bne.n	800211a <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002110:	e003      	b.n	800211a <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <DMA2_Stream4_IRQHandler+0x14c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002118:	4798      	blx	r3
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40026400 	.word	0x40026400
 8002124:	2000026c 	.word	0x2000026c
 8002128:	20000258 	.word	0x20000258

0800212c <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002130:	4b4f      	ldr	r3, [pc, #316]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 8002136:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8002138:	4b4e      	ldr	r3, [pc, #312]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002144:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800214e:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002156:	4b46      	ldr	r3, [pc, #280]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4a45      	ldr	r2, [pc, #276]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 800215c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002160:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8002162:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002180:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00e      	beq.n	80021b6 <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 80021b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d026      	beq.n	8002210 <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80021c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d021      	beq.n	8002210 <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80021d4:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a25      	ldr	r2, [pc, #148]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021de:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d110      	bne.n	8002210 <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021ee:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002204:	4798      	blx	r3
 8002206:	e003      	b.n	8002210 <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <DMA2_Stream5_IRQHandler+0x148>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002218:	2b00      	cmp	r3, #0
 800221a:	d026      	beq.n	800226a <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800221c:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d021      	beq.n	800226a <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <DMA2_Stream5_IRQHandler+0x144>)
 8002234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002238:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002244:	4293      	cmp	r3, r2
 8002246:	d110      	bne.n	800226a <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225e:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002260:	e003      	b.n	800226a <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <DMA2_Stream5_IRQHandler+0x14c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40026400 	.word	0x40026400
 8002274:	2000026c 	.word	0x2000026c
 8002278:	2000025c 	.word	0x2000025c

0800227c <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002280:	4b4f      	ldr	r3, [pc, #316]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a4f      	ldr	r2, [pc, #316]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 8002286:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8002288:	4b4e      	ldr	r3, [pc, #312]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800229e:	4b4a      	ldr	r3, [pc, #296]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80022a6:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a45      	ldr	r2, [pc, #276]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80022b2:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00e      	beq.n	80022dc <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022be:	4b42      	ldr	r3, [pc, #264]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80022c8:	4b3f      	ldr	r3, [pc, #252]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a3a      	ldr	r2, [pc, #232]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 80022d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022da:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80022e8:	4b37      	ldr	r3, [pc, #220]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80022f2:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 8002300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002304:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8002306:	4b2f      	ldr	r3, [pc, #188]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d026      	beq.n	8002360 <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002312:	4b2d      	ldr	r3, [pc, #180]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800231c:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002322:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002324:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a25      	ldr	r2, [pc, #148]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800232e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002336:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800233a:	4293      	cmp	r3, r2
 800233c:	d110      	bne.n	8002360 <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800234e:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002354:	4798      	blx	r3
 8002356:	e003      	b.n	8002360 <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <DMA2_Stream6_IRQHandler+0x148>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d026      	beq.n	80023ba <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d021      	beq.n	80023ba <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4a0f      	ldr	r2, [pc, #60]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x144>)
 8002384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002388:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002394:	4293      	cmp	r3, r2
 8002396:	d110      	bne.n	80023ba <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023a8:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ae:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80023b0:	e003      	b.n	80023ba <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x14c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	4798      	blx	r3
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40026400 	.word	0x40026400
 80023c4:	2000026c 	.word	0x2000026c
 80023c8:	20000260 	.word	0x20000260

080023cc <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80023d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 80023d6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80023d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80023e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80023f6:	4b46      	ldr	r3, [pc, #280]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a45      	ldr	r2, [pc, #276]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 80023fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002400:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002418:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002420:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 800242c:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002438:	4b37      	ldr	r3, [pc, #220]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002442:	4b35      	ldr	r3, [pc, #212]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800244a:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a30      	ldr	r2, [pc, #192]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 8002450:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002454:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8002456:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d026      	beq.n	80024b0 <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	2b00      	cmp	r3, #0
 800246a:	d021      	beq.n	80024b0 <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800246c:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002472:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002474:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a25      	ldr	r2, [pc, #148]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 800247a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800247e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002486:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800248a:	4293      	cmp	r3, r2
 800248c:	d110      	bne.n	80024b0 <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a4:	4798      	blx	r3
 80024a6:	e003      	b.n	80024b0 <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <DMA2_Stream7_IRQHandler+0x148>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80024bc:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d021      	beq.n	800250a <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80024c6:	4b14      	ldr	r3, [pc, #80]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024cc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002510 <DMA2_Stream7_IRQHandler+0x144>)
 80024d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024d8:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d110      	bne.n	800250a <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024f8:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fe:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002500:	e003      	b.n	800250a <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <DMA2_Stream7_IRQHandler+0x14c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	4798      	blx	r3
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40026400 	.word	0x40026400
 8002514:	2000026c 	.word	0x2000026c
 8002518:	20000264 	.word	0x20000264

0800251c <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0c      	ldr	r2, [pc, #48]	@ (800255c <DMA_Clock_Enable+0x40>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d105      	bne.n	800253a <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <DMA_Clock_Enable+0x44>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <DMA_Clock_Enable+0x44>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <DMA_Clock_Enable+0x48>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d105      	bne.n	8002550 <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <DMA_Clock_Enable+0x44>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <DMA_Clock_Enable+0x44>)
 800254a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800254e:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40026000 	.word	0x40026000
 8002560:	40023800 	.word	0x40023800
 8002564:	40026400 	.word	0x40026400

08002568 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffd3 	bl	800251c <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00f      	beq.n	80025a4 <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8002594:	bf00      	nop
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f8      	bne.n	8002596 <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7a1b      	ldrb	r3, [r3, #8]
 80025ae:	065a      	lsls	r2, r3, #25
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2200      	movs	r2, #0
 800262a:	4293      	cmp	r3, r2
 800262c:	f000 8110 	beq.w	8002850 <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2280      	movs	r2, #128	@ 0x80
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	430a      	orrs	r2, r1
 800264c:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2210      	movs	r2, #16
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f042 0210 	orr.w	r2, r2, #16
 8002668:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2208      	movs	r2, #8
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f042 0208 	orr.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f042 0204 	orr.w	r2, r2, #4
 80026a0:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f042 0202 	orr.w	r2, r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a80      	ldr	r2, [pc, #512]	@ (80028c4 <DMA_Init+0x35c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d15f      	bne.n	8002788 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a7e      	ldr	r2, [pc, #504]	@ (80028c8 <DMA_Init+0x360>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d106      	bne.n	80026e0 <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 80026d2:	4a7e      	ldr	r2, [pc, #504]	@ (80028cc <DMA_Init+0x364>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026d8:	200b      	movs	r0, #11
 80026da:	f7fe fbad 	bl	8000e38 <__NVIC_EnableIRQ>
 80026de:	e0b7      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a7a      	ldr	r2, [pc, #488]	@ (80028d0 <DMA_Init+0x368>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d106      	bne.n	80026f8 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 80026ea:	4a7a      	ldr	r2, [pc, #488]	@ (80028d4 <DMA_Init+0x36c>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026f0:	200c      	movs	r0, #12
 80026f2:	f7fe fba1 	bl	8000e38 <__NVIC_EnableIRQ>
 80026f6:	e0ab      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a76      	ldr	r2, [pc, #472]	@ (80028d8 <DMA_Init+0x370>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d106      	bne.n	8002710 <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 8002702:	4a76      	ldr	r2, [pc, #472]	@ (80028dc <DMA_Init+0x374>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002708:	200d      	movs	r0, #13
 800270a:	f7fe fb95 	bl	8000e38 <__NVIC_EnableIRQ>
 800270e:	e09f      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <DMA_Init+0x378>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d106      	bne.n	8002728 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 800271a:	4a72      	ldr	r2, [pc, #456]	@ (80028e4 <DMA_Init+0x37c>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002720:	200e      	movs	r0, #14
 8002722:	f7fe fb89 	bl	8000e38 <__NVIC_EnableIRQ>
 8002726:	e093      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a6e      	ldr	r2, [pc, #440]	@ (80028e8 <DMA_Init+0x380>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d106      	bne.n	8002740 <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 8002732:	4a6e      	ldr	r2, [pc, #440]	@ (80028ec <DMA_Init+0x384>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002738:	200f      	movs	r0, #15
 800273a:	f7fe fb7d 	bl	8000e38 <__NVIC_EnableIRQ>
 800273e:	e087      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a6a      	ldr	r2, [pc, #424]	@ (80028f0 <DMA_Init+0x388>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d106      	bne.n	8002758 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 800274a:	4a6a      	ldr	r2, [pc, #424]	@ (80028f4 <DMA_Init+0x38c>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002750:	2010      	movs	r0, #16
 8002752:	f7fe fb71 	bl	8000e38 <__NVIC_EnableIRQ>
 8002756:	e07b      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a66      	ldr	r2, [pc, #408]	@ (80028f8 <DMA_Init+0x390>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d106      	bne.n	8002770 <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 8002762:	4a66      	ldr	r2, [pc, #408]	@ (80028fc <DMA_Init+0x394>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002768:	2011      	movs	r0, #17
 800276a:	f7fe fb65 	bl	8000e38 <__NVIC_EnableIRQ>
 800276e:	e06f      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a62      	ldr	r2, [pc, #392]	@ (8002900 <DMA_Init+0x398>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d16a      	bne.n	8002850 <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 800277a:	4a62      	ldr	r2, [pc, #392]	@ (8002904 <DMA_Init+0x39c>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002780:	202f      	movs	r0, #47	@ 0x2f
 8002782:	f7fe fb59 	bl	8000e38 <__NVIC_EnableIRQ>
 8002786:	e063      	b.n	8002850 <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <DMA_Init+0x3a0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d15e      	bne.n	8002850 <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a5d      	ldr	r2, [pc, #372]	@ (800290c <DMA_Init+0x3a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 800279c:	4a5c      	ldr	r2, [pc, #368]	@ (8002910 <DMA_Init+0x3a8>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027a2:	2038      	movs	r0, #56	@ 0x38
 80027a4:	f7fe fb48 	bl	8000e38 <__NVIC_EnableIRQ>
 80027a8:	e052      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a59      	ldr	r2, [pc, #356]	@ (8002914 <DMA_Init+0x3ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d106      	bne.n	80027c2 <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 80027b4:	4a58      	ldr	r2, [pc, #352]	@ (8002918 <DMA_Init+0x3b0>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80027ba:	2039      	movs	r0, #57	@ 0x39
 80027bc:	f7fe fb3c 	bl	8000e38 <__NVIC_EnableIRQ>
 80027c0:	e046      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a55      	ldr	r2, [pc, #340]	@ (800291c <DMA_Init+0x3b4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d106      	bne.n	80027da <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 80027cc:	4a54      	ldr	r2, [pc, #336]	@ (8002920 <DMA_Init+0x3b8>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027d2:	203a      	movs	r0, #58	@ 0x3a
 80027d4:	f7fe fb30 	bl	8000e38 <__NVIC_EnableIRQ>
 80027d8:	e03a      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a51      	ldr	r2, [pc, #324]	@ (8002924 <DMA_Init+0x3bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d106      	bne.n	80027f2 <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 80027e4:	4a50      	ldr	r2, [pc, #320]	@ (8002928 <DMA_Init+0x3c0>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80027ea:	203b      	movs	r0, #59	@ 0x3b
 80027ec:	f7fe fb24 	bl	8000e38 <__NVIC_EnableIRQ>
 80027f0:	e02e      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a4d      	ldr	r2, [pc, #308]	@ (800292c <DMA_Init+0x3c4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d106      	bne.n	800280a <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 80027fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002930 <DMA_Init+0x3c8>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002802:	203c      	movs	r0, #60	@ 0x3c
 8002804:	f7fe fb18 	bl	8000e38 <__NVIC_EnableIRQ>
 8002808:	e022      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a49      	ldr	r2, [pc, #292]	@ (8002934 <DMA_Init+0x3cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d106      	bne.n	8002822 <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <DMA_Init+0x3d0>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800281a:	2044      	movs	r0, #68	@ 0x44
 800281c:	f7fe fb0c 	bl	8000e38 <__NVIC_EnableIRQ>
 8002820:	e016      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a45      	ldr	r2, [pc, #276]	@ (800293c <DMA_Init+0x3d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d106      	bne.n	800283a <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 800282c:	4a44      	ldr	r2, [pc, #272]	@ (8002940 <DMA_Init+0x3d8>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002832:	2045      	movs	r0, #69	@ 0x45
 8002834:	f7fe fb00 	bl	8000e38 <__NVIC_EnableIRQ>
 8002838:	e00a      	b.n	8002850 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a41      	ldr	r2, [pc, #260]	@ (8002944 <DMA_Init+0x3dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d105      	bne.n	8002850 <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 8002844:	4a40      	ldr	r2, [pc, #256]	@ (8002948 <DMA_Init+0x3e0>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800284a:	2046      	movs	r0, #70	@ 0x46
 800284c:	f7fe faf4 	bl	8000e38 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8c1b      	ldrh	r3, [r3, #32]
 800285a:	4619      	mov	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e010      	b.n	80028b8 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2200      	movs	r2, #0
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e002      	b.n	80028b8 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	e000      	b.n	80028ba <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40026000 	.word	0x40026000
 80028c8:	40026010 	.word	0x40026010
 80028cc:	20000228 	.word	0x20000228
 80028d0:	40026028 	.word	0x40026028
 80028d4:	2000022c 	.word	0x2000022c
 80028d8:	40026040 	.word	0x40026040
 80028dc:	20000230 	.word	0x20000230
 80028e0:	40026058 	.word	0x40026058
 80028e4:	20000234 	.word	0x20000234
 80028e8:	40026070 	.word	0x40026070
 80028ec:	20000238 	.word	0x20000238
 80028f0:	40026088 	.word	0x40026088
 80028f4:	2000023c 	.word	0x2000023c
 80028f8:	400260a0 	.word	0x400260a0
 80028fc:	20000240 	.word	0x20000240
 8002900:	400260b8 	.word	0x400260b8
 8002904:	20000244 	.word	0x20000244
 8002908:	40026400 	.word	0x40026400
 800290c:	40026410 	.word	0x40026410
 8002910:	20000248 	.word	0x20000248
 8002914:	40026428 	.word	0x40026428
 8002918:	2000024c 	.word	0x2000024c
 800291c:	40026440 	.word	0x40026440
 8002920:	20000250 	.word	0x20000250
 8002924:	40026458 	.word	0x40026458
 8002928:	20000254 	.word	0x20000254
 800292c:	40026470 	.word	0x40026470
 8002930:	20000258 	.word	0x20000258
 8002934:	40026488 	.word	0x40026488
 8002938:	2000025c 	.word	0x2000025c
 800293c:	400264a0 	.word	0x400264a0
 8002940:	20000260 	.word	0x20000260
 8002944:	400264b8 	.word	0x400264b8
 8002948:	20000264 	.word	0x20000264

0800294c <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2200      	movs	r2, #0
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e00d      	b.n	800299c <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002988:	4293      	cmp	r3, r2
 800298a:	d107      	bne.n	800299c <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299a:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80029aa:	601a      	str	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029e8:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029f2:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <DMA_Set_Trigger+0x124>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <DMA_Set_Trigger+0x24>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <DMA_Set_Trigger+0x128>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d178      	bne.n	8002b22 <DMA_Set_Trigger+0x116>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4a41      	ldr	r2, [pc, #260]	@ (8002b38 <DMA_Set_Trigger+0x12c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d918      	bls.n	8002a6a <DMA_Set_Trigger+0x5e>
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	@ (8002b3c <DMA_Set_Trigger+0x130>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d814      	bhi.n	8002a6a <DMA_Set_Trigger+0x5e>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4b3f      	ldr	r3, [pc, #252]	@ (8002b40 <DMA_Set_Trigger+0x134>)
 8002a44:	4413      	add	r3, r2
 8002a46:	10db      	asrs	r3, r3, #3
 8002a48:	4a3e      	ldr	r2, [pc, #248]	@ (8002b44 <DMA_Set_Trigger+0x138>)
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b3d      	ldr	r3, [pc, #244]	@ (8002b48 <DMA_Set_Trigger+0x13c>)
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	213f      	movs	r1, #63	@ 0x3f
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e055      	b.n	8002b16 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4a37      	ldr	r2, [pc, #220]	@ (8002b4c <DMA_Set_Trigger+0x140>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d918      	bls.n	8002aa4 <DMA_Set_Trigger+0x98>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4a36      	ldr	r2, [pc, #216]	@ (8002b50 <DMA_Set_Trigger+0x144>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d814      	bhi.n	8002aa4 <DMA_Set_Trigger+0x98>
		{
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <DMA_Set_Trigger+0x148>)
 8002a7e:	4413      	add	r3, r2
 8002a80:	10db      	asrs	r3, r3, #3
 8002a82:	4a30      	ldr	r2, [pc, #192]	@ (8002b44 <DMA_Set_Trigger+0x138>)
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <DMA_Set_Trigger+0x14c>)
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	213f      	movs	r1, #63	@ 0x3f
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e038      	b.n	8002b16 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <DMA_Set_Trigger+0x150>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d918      	bls.n	8002ade <DMA_Set_Trigger+0xd2>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <DMA_Set_Trigger+0x154>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d814      	bhi.n	8002ade <DMA_Set_Trigger+0xd2>
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <DMA_Set_Trigger+0x158>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	10db      	asrs	r3, r3, #3
 8002abc:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <DMA_Set_Trigger+0x138>)
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <DMA_Set_Trigger+0x13c>)
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	213f      	movs	r1, #63	@ 0x3f
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	e01b      	b.n	8002b16 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <DMA_Set_Trigger+0x15c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d917      	bls.n	8002b16 <DMA_Set_Trigger+0x10a>
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <DMA_Set_Trigger+0x160>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d813      	bhi.n	8002b16 <DMA_Set_Trigger+0x10a>
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <DMA_Set_Trigger+0x164>)
 8002af2:	4413      	add	r3, r2
 8002af4:	10db      	asrs	r3, r3, #3
 8002af6:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <DMA_Set_Trigger+0x138>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <DMA_Set_Trigger+0x14c>)
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	213f      	movs	r1, #63	@ 0x3f
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	60da      	str	r2, [r3, #12]
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	601a      	str	r2, [r3, #0]
	}
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40026000 	.word	0x40026000
 8002b34:	40026400 	.word	0x40026400
 8002b38:	4002600f 	.word	0x4002600f
 8002b3c:	40026058 	.word	0x40026058
 8002b40:	bffd9ff0 	.word	0xbffd9ff0
 8002b44:	aaaaaaab 	.word	0xaaaaaaab
 8002b48:	08005c90 	.word	0x08005c90
 8002b4c:	4002606f 	.word	0x4002606f
 8002b50:	400260b8 	.word	0x400260b8
 8002b54:	bffd9f90 	.word	0xbffd9f90
 8002b58:	08005c94 	.word	0x08005c94
 8002b5c:	4002640f 	.word	0x4002640f
 8002b60:	40026458 	.word	0x40026458
 8002b64:	bffd9bf0 	.word	0xbffd9bf0
 8002b68:	4002646f 	.word	0x4002646f
 8002b6c:	400264b8 	.word	0x400264b8
 8002b70:	bffd9b90 	.word	0xbffd9b90

08002b74 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <EXTI0_IRQHandler+0x24>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <EXTI0_IRQHandler+0x12>
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <EXTI0_IRQHandler+0x24>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <EXTI0_IRQHandler+0x28>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <EXTI0_IRQHandler+0x28>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6153      	str	r3, [r2, #20]
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000270 	.word	0x20000270
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <EXTI1_IRQHandler+0x24>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <EXTI1_IRQHandler+0x12>
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <EXTI1_IRQHandler+0x24>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <EXTI1_IRQHandler+0x28>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <EXTI1_IRQHandler+0x28>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6153      	str	r3, [r2, #20]
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000270 	.word	0x20000270
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <EXTI2_IRQHandler+0x24>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <EXTI2_IRQHandler+0x12>
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <EXTI2_IRQHandler+0x24>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <EXTI2_IRQHandler+0x28>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <EXTI2_IRQHandler+0x28>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6153      	str	r3, [r2, #20]
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000270 	.word	0x20000270
 8002bf4:	40013c00 	.word	0x40013c00

08002bf8 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <EXTI3_IRQHandler+0x24>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <EXTI3_IRQHandler+0x12>
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <EXTI3_IRQHandler+0x24>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <EXTI3_IRQHandler+0x28>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <EXTI3_IRQHandler+0x28>)
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	6153      	str	r3, [r2, #20]
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000270 	.word	0x20000270
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <EXTI4_IRQHandler+0x24>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <EXTI4_IRQHandler+0x12>
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <EXTI4_IRQHandler+0x24>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <EXTI4_IRQHandler+0x28>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <EXTI4_IRQHandler+0x28>)
 8002c3c:	f043 0310 	orr.w	r3, r3, #16
 8002c40:	6153      	str	r3, [r2, #20]
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000270 	.word	0x20000270
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002c56:	2305      	movs	r3, #5
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	e020      	b.n	8002c9e <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <EXTI9_5_IRQHandler+0x60>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2101      	movs	r1, #1
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d014      	beq.n	8002c98 <EXTI9_5_IRQHandler+0x48>
 8002c6e:	4a11      	ldr	r2, [pc, #68]	@ (8002cb4 <EXTI9_5_IRQHandler+0x64>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb4 <EXTI9_5_IRQHandler+0x64>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <EXTI9_5_IRQHandler+0x60>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <EXTI9_5_IRQHandler+0x60>)
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	dddb      	ble.n	8002c5c <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40013c00 	.word	0x40013c00
 8002cb4:	20000270 	.word	0x20000270

08002cb8 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	e020      	b.n	8002d06 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <EXTI15_10_IRQHandler+0x60>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d014      	beq.n	8002d00 <EXTI15_10_IRQHandler+0x48>
 8002cd6:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <EXTI15_10_IRQHandler+0x64>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00e      	beq.n	8002d00 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d1c <EXTI15_10_IRQHandler+0x64>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cea:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <EXTI15_10_IRQHandler+0x60>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4a07      	ldr	r2, [pc, #28]	@ (8002d18 <EXTI15_10_IRQHandler+0x60>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	dddb      	ble.n	8002cc4 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40013c00 	.word	0x40013c00
 8002d1c:	20000270 	.word	0x20000270

08002d20 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <GPIO_Clock_Enable+0xcc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04b      	beq.n	8002dc8 <GPIO_Clock_Enable+0xa8>
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <GPIO_Clock_Enable+0xcc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d84f      	bhi.n	8002dd6 <GPIO_Clock_Enable+0xb6>
 8002d36:	4a2e      	ldr	r2, [pc, #184]	@ (8002df0 <GPIO_Clock_Enable+0xd0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d03e      	beq.n	8002dba <GPIO_Clock_Enable+0x9a>
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <GPIO_Clock_Enable+0xd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d849      	bhi.n	8002dd6 <GPIO_Clock_Enable+0xb6>
 8002d42:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <GPIO_Clock_Enable+0xd4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d031      	beq.n	8002dac <GPIO_Clock_Enable+0x8c>
 8002d48:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <GPIO_Clock_Enable+0xd4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d843      	bhi.n	8002dd6 <GPIO_Clock_Enable+0xb6>
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <GPIO_Clock_Enable+0xd8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d024      	beq.n	8002d9e <GPIO_Clock_Enable+0x7e>
 8002d54:	4a28      	ldr	r2, [pc, #160]	@ (8002df8 <GPIO_Clock_Enable+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d83d      	bhi.n	8002dd6 <GPIO_Clock_Enable+0xb6>
 8002d5a:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <GPIO_Clock_Enable+0xdc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d017      	beq.n	8002d90 <GPIO_Clock_Enable+0x70>
 8002d60:	4a26      	ldr	r2, [pc, #152]	@ (8002dfc <GPIO_Clock_Enable+0xdc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d837      	bhi.n	8002dd6 <GPIO_Clock_Enable+0xb6>
 8002d66:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <GPIO_Clock_Enable+0xe0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <GPIO_Clock_Enable+0x54>
 8002d6c:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <GPIO_Clock_Enable+0xe4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <GPIO_Clock_Enable+0x62>
 8002d72:	e030      	b.n	8002dd6 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d80:	e02c      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002d82:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a20      	ldr	r2, [pc, #128]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	e025      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	4a1c      	ldr	r2, [pc, #112]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9c:	e01e      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a19      	ldr	r2, [pc, #100]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	e017      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002dac:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db8:	e010      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002dc0:	f043 0320 	orr.w	r3, r3, #32
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	e009      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <GPIO_Clock_Enable+0xe8>)
 8002dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd4:	e002      	b.n	8002ddc <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e000      	b.n	8002dde <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021c00 	.word	0x40021c00
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40023800 	.word	0x40023800

08002e0c <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	70fb      	strb	r3, [r7, #3]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	70bb      	strb	r3, [r7, #2]
 8002e22:	4613      	mov	r3, r2
 8002e24:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff7a 	bl	8002d20 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	2103      	movs	r1, #3
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	43d2      	mvns	r2, r2
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	78b9      	ldrb	r1, [r7, #2]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	0052      	lsls	r2, r2, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	43d2      	mvns	r2, r2
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d008      	beq.n	8002e84 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	7879      	ldrb	r1, [r7, #1]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	0052      	lsls	r2, r2, #1
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	43d2      	mvns	r2, r2
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	7c3b      	ldrb	r3, [r7, #16]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	7c39      	ldrb	r1, [r7, #16]
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	0052      	lsls	r2, r2, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	0052      	lsls	r2, r2, #1
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	43d2      	mvns	r2, r2
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002ecc:	2204      	movs	r2, #4
 8002ece:	7d3b      	ldrb	r3, [r7, #20]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	7d39      	ldrb	r1, [r7, #20]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002ee8:	2202      	movs	r2, #2
 8002eea:	78bb      	ldrb	r3, [r7, #2]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d12f      	bne.n	8002f50 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b07      	cmp	r3, #7
 8002ef4:	d815      	bhi.n	8002f22 <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	210f      	movs	r1, #15
 8002f00:	fa01 f202 	lsl.w	r2, r1, r2
 8002f04:	43d2      	mvns	r2, r2
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	7e39      	ldrb	r1, [r7, #24]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	621a      	str	r2, [r3, #32]
 8002f20:	e016      	b.n	8002f50 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	3a08      	subs	r2, #8
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	43d2      	mvns	r2, r2
 8002f34:	401a      	ands	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	7e39      	ldrb	r1, [r7, #24]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	3a08      	subs	r2, #8
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <__NVIC_EnableIRQ>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <SystemAPB1_Clock_Speed>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff0:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <SystemAPB1_Clock_Speed+0x24>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <SystemAPB1_Clock_Speed+0x28>)
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	0a92      	lsrs	r2, r2, #10
 8002ffa:	f002 0207 	and.w	r2, r2, #7
 8002ffe:	4906      	ldr	r1, [pc, #24]	@ (8003018 <SystemAPB1_Clock_Speed+0x2c>)
 8003000:	5c8a      	ldrb	r2, [r1, r2]
 8003002:	40d3      	lsrs	r3, r2
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000
 8003014:	40023800 	.word	0x40023800
 8003018:	080060ac 	.word	0x080060ac

0800301c <SystemAPB2_Clock_Speed>:
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003020:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <SystemAPB2_Clock_Speed+0x24>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <SystemAPB2_Clock_Speed+0x28>)
 8003026:	6892      	ldr	r2, [r2, #8]
 8003028:	0b52      	lsrs	r2, r2, #13
 800302a:	f002 0207 	and.w	r2, r2, #7
 800302e:	4906      	ldr	r1, [pc, #24]	@ (8003048 <SystemAPB2_Clock_Speed+0x2c>)
 8003030:	5c8a      	ldrb	r2, [r1, r2]
 8003032:	40d3      	lsrs	r3, r2
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000
 8003044:	40023800 	.word	0x40023800
 8003048:	080060ac 	.word	0x080060ac

0800304c <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	ed87 0b02 	vstr	d0, [r7, #8]
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800305a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800305e:	f7fd fd8d 	bl	8000b7c <__aeabi_d2lz>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fa97 	bl	800059c <__aeabi_l2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003082:	f7fd f901 	bl	8000288 <__aeabi_dsub>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <USART1_TX_ISR>:
volatile bool U5RX_Complete = 0;

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
	U1TX_Complete = 1;
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <USART1_TX_ISR+0x14>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	200006ea 	.word	0x200006ea

080030b0 <USART1_RX_ISR>:

void USART1_RX_ISR() {
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
	U1RX_Complete = 1;
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <USART1_RX_ISR+0x14>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	200006eb 	.word	0x200006eb

080030c8 <USART2_TX_ISR>:

void USART2_TX_ISR() {
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	U2TX_Complete = 1;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <USART2_TX_ISR+0x14>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	200006ec 	.word	0x200006ec

080030e0 <USART2_RX_ISR>:

void USART2_RX_ISR() {
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
	U2RX_Complete = 1;
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <USART2_RX_ISR+0x14>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	200006ed 	.word	0x200006ed

080030f8 <USART3_TX_ISR>:

void USART3_TX_ISR() {
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
	U3TX_Complete = 1;
 80030fc:	4b03      	ldr	r3, [pc, #12]	@ (800310c <USART3_TX_ISR+0x14>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	200006ee 	.word	0x200006ee

08003110 <USART3_RX_ISR>:

void USART3_RX_ISR() {
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	U3RX_Complete = 1;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <USART3_RX_ISR+0x14>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	200006ef 	.word	0x200006ef

08003128 <USART4_TX_ISR>:

void USART4_TX_ISR() {
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	U4TX_Complete = 1;
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <USART4_TX_ISR+0x14>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	200006f0 	.word	0x200006f0

08003140 <USART4_RX_ISR>:

void USART4_RX_ISR() {
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	U4RX_Complete = 1;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <USART4_RX_ISR+0x14>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	200006f1 	.word	0x200006f1

08003158 <USART5_TX_ISR>:

void USART5_TX_ISR() {
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	U5TX_Complete = 1;
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <USART5_TX_ISR+0x14>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	200006f2 	.word	0x200006f2

08003170 <USART5_RX_ISR>:

void USART5_RX_ISR() {
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	U5RX_Complete = 1;
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <USART5_RX_ISR+0x14>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	200006f3 	.word	0x200006f3

08003188 <USART6_TX_ISR>:

void USART6_TX_ISR() {
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
	U6TX_Complete = 1;
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <USART6_TX_ISR+0x14>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	200006f4 	.word	0x200006f4

080031a0 <USART6_RX_ISR>:

void USART6_RX_ISR() {
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
	U6RX_Complete = 1;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <USART6_RX_ISR+0x14>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	200006f5 	.word	0x200006f5

080031b8 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 80031bc:	4b57      	ldr	r3, [pc, #348]	@ (800331c <UART4_IRQHandler+0x164>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	4b57      	ldr	r3, [pc, #348]	@ (8003320 <UART4_IRQHandler+0x168>)
 80031c4:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80031c6:	4b56      	ldr	r3, [pc, #344]	@ (8003320 <UART4_IRQHandler+0x168>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <UART4_IRQHandler+0x3e>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80031d4:	4b53      	ldr	r3, [pc, #332]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <UART4_IRQHandler+0x3e>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80031e0:	4b50      	ldr	r3, [pc, #320]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031e8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80031ea:	4b4c      	ldr	r3, [pc, #304]	@ (800331c <UART4_IRQHandler+0x164>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4b      	ldr	r2, [pc, #300]	@ (800331c <UART4_IRQHandler+0x164>)
 80031f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <UART4_IRQHandler+0x168>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <UART4_IRQHandler+0x6e>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003204:	4b47      	ldr	r3, [pc, #284]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART4_IRQHandler+0x6e>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003210:	4b44      	ldr	r3, [pc, #272]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003218:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800321a:	4b40      	ldr	r3, [pc, #256]	@ (800331c <UART4_IRQHandler+0x164>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3f      	ldr	r2, [pc, #252]	@ (800331c <UART4_IRQHandler+0x164>)
 8003220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003224:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8003226:	4b3e      	ldr	r3, [pc, #248]	@ (8003320 <UART4_IRQHandler+0x168>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <UART4_IRQHandler+0x9e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003234:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <UART4_IRQHandler+0x9e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003240:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003248:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800324a:	4b34      	ldr	r3, [pc, #208]	@ (800331c <UART4_IRQHandler+0x164>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a33      	ldr	r2, [pc, #204]	@ (800331c <UART4_IRQHandler+0x164>)
 8003250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003254:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8003256:	4b32      	ldr	r3, [pc, #200]	@ (8003320 <UART4_IRQHandler+0x168>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003264:	4b2f      	ldr	r3, [pc, #188]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003270:	4b2c      	ldr	r3, [pc, #176]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003278:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800327a:	4b28      	ldr	r3, [pc, #160]	@ (800331c <UART4_IRQHandler+0x164>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a27      	ldr	r2, [pc, #156]	@ (800331c <UART4_IRQHandler+0x164>)
 8003280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003284:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8003286:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <UART4_IRQHandler+0x168>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <UART4_IRQHandler+0xfe>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <UART4_IRQHandler+0xfe>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80032a0:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032a8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80032aa:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <UART4_IRQHandler+0x164>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <UART4_IRQHandler+0x164>)
 80032b0:	f023 0320 	bic.w	r3, r3, #32
 80032b4:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 80032b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <UART4_IRQHandler+0x168>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <UART4_IRQHandler+0x12e>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART4_IRQHandler+0x12e>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032d8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <UART4_IRQHandler+0x164>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0f      	ldr	r2, [pc, #60]	@ (800331c <UART4_IRQHandler+0x164>)
 80032e0:	f023 0310 	bic.w	r3, r3, #16
 80032e4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 80032e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <UART4_IRQHandler+0x168>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <UART4_IRQHandler+0x15e>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <UART4_IRQHandler+0x16c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART4_IRQHandler+0x15e>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <UART4_IRQHandler+0x16c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003308:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800330a:	4b04      	ldr	r3, [pc, #16]	@ (800331c <UART4_IRQHandler+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a03      	ldr	r2, [pc, #12]	@ (800331c <UART4_IRQHandler+0x164>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6013      	str	r3, [r2, #0]
		}
	}

}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40004c00 	.word	0x40004c00
 8003320:	200006e8 	.word	0x200006e8
 8003324:	200006e0 	.word	0x200006e0

08003328 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 800332c:	4b57      	ldr	r3, [pc, #348]	@ (800348c <USART1_IRQHandler+0x164>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003334:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003336:	4b56      	ldr	r3, [pc, #344]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <USART1_IRQHandler+0x3e>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8003344:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <USART1_IRQHandler+0x3e>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8003350:	4b50      	ldr	r3, [pc, #320]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003358:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800335a:	4b4c      	ldr	r3, [pc, #304]	@ (800348c <USART1_IRQHandler+0x164>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a4b      	ldr	r2, [pc, #300]	@ (800348c <USART1_IRQHandler+0x164>)
 8003360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003364:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <USART1_IRQHandler+0x6e>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003374:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <USART1_IRQHandler+0x6e>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003380:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003388:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800338a:	4b40      	ldr	r3, [pc, #256]	@ (800348c <USART1_IRQHandler+0x164>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3f      	ldr	r2, [pc, #252]	@ (800348c <USART1_IRQHandler+0x164>)
 8003390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003394:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8003396:	4b3e      	ldr	r3, [pc, #248]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <USART1_IRQHandler+0x9e>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80033a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <USART1_IRQHandler+0x16c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <USART1_IRQHandler+0x9e>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80033b0:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <USART1_IRQHandler+0x16c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80033b8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80033ba:	4b34      	ldr	r3, [pc, #208]	@ (800348c <USART1_IRQHandler+0x164>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a33      	ldr	r2, [pc, #204]	@ (800348c <USART1_IRQHandler+0x164>)
 80033c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c4:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 80033c6:	4b32      	ldr	r3, [pc, #200]	@ (8003490 <USART1_IRQHandler+0x168>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <USART1_IRQHandler+0xce>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80033d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003494 <USART1_IRQHandler+0x16c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <USART1_IRQHandler+0xce>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80033e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003494 <USART1_IRQHandler+0x16c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033e8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80033ea:	4b28      	ldr	r3, [pc, #160]	@ (800348c <USART1_IRQHandler+0x164>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a27      	ldr	r2, [pc, #156]	@ (800348c <USART1_IRQHandler+0x164>)
 80033f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 80033f6:	4b26      	ldr	r3, [pc, #152]	@ (8003490 <USART1_IRQHandler+0x168>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <USART1_IRQHandler+0xfe>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003404:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <USART1_IRQHandler+0xfe>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003418:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800341a:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <USART1_IRQHandler+0x164>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1b      	ldr	r2, [pc, #108]	@ (800348c <USART1_IRQHandler+0x164>)
 8003420:	f023 0320 	bic.w	r3, r3, #32
 8003424:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <USART1_IRQHandler+0x12e>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8003434:	4b17      	ldr	r3, [pc, #92]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <USART1_IRQHandler+0x12e>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003448:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <USART1_IRQHandler+0x164>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a0f      	ldr	r2, [pc, #60]	@ (800348c <USART1_IRQHandler+0x164>)
 8003450:	f023 0310 	bic.w	r3, r3, #16
 8003454:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <USART1_IRQHandler+0x168>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <USART1_IRQHandler+0x15e>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <USART1_IRQHandler+0x15e>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8003470:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <USART1_IRQHandler+0x16c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003478:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <USART1_IRQHandler+0x164>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a03      	ldr	r2, [pc, #12]	@ (800348c <USART1_IRQHandler+0x164>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6013      	str	r3, [r2, #0]
		}
	}

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40011000 	.word	0x40011000
 8003490:	200006e8 	.word	0x200006e8
 8003494:	200006d4 	.word	0x200006d4

08003498 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <USART_Get_Instance_Number+0x6c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <USART_Get_Instance_Number+0x16>
 80034aa:	2300      	movs	r3, #0
 80034ac:	e024      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a15      	ldr	r2, [pc, #84]	@ (8003508 <USART_Get_Instance_Number+0x70>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <USART_Get_Instance_Number+0x24>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01d      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a12      	ldr	r2, [pc, #72]	@ (800350c <USART_Get_Instance_Number+0x74>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <USART_Get_Instance_Number+0x32>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e016      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <USART_Get_Instance_Number+0x78>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <USART_Get_Instance_Number+0x40>
 80034d4:	2303      	movs	r3, #3
 80034d6:	e00f      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <USART_Get_Instance_Number+0x7c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <USART_Get_Instance_Number+0x4e>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e008      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003518 <USART_Get_Instance_Number+0x80>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <USART_Get_Instance_Number+0x5c>
 80034f0:	2305      	movs	r3, #5
 80034f2:	e001      	b.n	80034f8 <USART_Get_Instance_Number+0x60>
	else {return -1;}
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40011000 	.word	0x40011000
 8003508:	40004400 	.word	0x40004400
 800350c:	40004800 	.word	0x40004800
 8003510:	40004c00 	.word	0x40004c00
 8003514:	40005000 	.word	0x40005000
 8003518:	40011400 	.word	0x40011400

0800351c <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8003524:	2200      	movs	r2, #0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 800352a:	2200      	movs	r2, #0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003536:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	4313      	orrs	r3, r2
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8003544:	2300      	movs	r3, #0
 8003546:	b2da      	uxtb	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	739a      	strb	r2, [r3, #14]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a27      	ldr	r2, [pc, #156]	@ (8003604 <USART_Clock_Enable+0xac>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d106      	bne.n	8003578 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 800356a:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <USART_Clock_Enable+0xb0>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <USART_Clock_Enable+0xb0>)
 8003570:	f043 0310 	orr.w	r3, r3, #16
 8003574:	6453      	str	r3, [r2, #68]	@ 0x44
 8003576:	e03e      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <USART_Clock_Enable+0xb4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d106      	bne.n	8003590 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8003582:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <USART_Clock_Enable+0xb0>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	4a20      	ldr	r2, [pc, #128]	@ (8003608 <USART_Clock_Enable+0xb0>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358c:	6413      	str	r3, [r2, #64]	@ 0x40
 800358e:	e032      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <USART_Clock_Enable+0xb8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d106      	bne.n	80035a8 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800359a:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <USART_Clock_Enable+0xb0>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a6:	e026      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	@ (8003614 <USART_Clock_Enable+0xbc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d106      	bne.n	80035c0 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80035b2:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035be:	e01a      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <USART_Clock_Enable+0xc0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d106      	bne.n	80035d8 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80035ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d6:	e00e      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0f      	ldr	r2, [pc, #60]	@ (800361c <USART_Clock_Enable+0xc4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d106      	bne.n	80035f0 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <USART_Clock_Enable+0xb0>)
 80035e8:	f043 0320 	orr.w	r3, r3, #32
 80035ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ee:	e002      	b.n	80035f6 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	e000      	b.n	80035f8 <USART_Clock_Enable+0xa0>
	}
	return 1;
 80035f6:	2301      	movs	r3, #1
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40011000 	.word	0x40011000
 8003608:	40023800 	.word	0x40023800
 800360c:	40004400 	.word	0x40004400
 8003610:	40004800 	.word	0x40004800
 8003614:	40004c00 	.word	0x40004c00
 8003618:	40005000 	.word	0x40005000
 800361c:	40011400 	.word	0x40011400

08003620 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af04      	add	r7, sp, #16
 8003626:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4aa4      	ldr	r2, [pc, #656]	@ (80038c0 <PIN_Setup+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	f040 8112 	bne.w	8003858 <PIN_Setup+0x238>
	{
		__usart_1_config__ = config;
 8003634:	4aa3      	ldr	r2, [pc, #652]	@ (80038c4 <PIN_Setup+0x2a4>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]

		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7a1b      	ldrb	r3, [r3, #8]
 800363e:	2201      	movs	r2, #1
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7a1b      	ldrb	r3, [r3, #8]
 8003648:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800364a:	4293      	cmp	r3, r2
 800364c:	d00a      	beq.n	8003664 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7a1b      	ldrb	r3, [r3, #8]
 8003652:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d005      	beq.n	8003664 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7a1b      	ldrb	r3, [r3, #8]
 800365c:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800365e:	4293      	cmp	r3, r2
 8003660:	f040 80bf 	bne.w	80037e2 <PIN_Setup+0x1c2>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7a5b      	ldrb	r3, [r3, #9]
 8003668:	2209      	movs	r2, #9
 800366a:	4293      	cmp	r3, r2
 800366c:	d10f      	bne.n	800368e <PIN_Setup+0x6e>
 800366e:	2009      	movs	r0, #9
 8003670:	2402      	movs	r4, #2
 8003672:	2500      	movs	r5, #0
 8003674:	2302      	movs	r3, #2
 8003676:	2200      	movs	r2, #0
 8003678:	2107      	movs	r1, #7
 800367a:	9102      	str	r1, [sp, #8]
 800367c:	9201      	str	r2, [sp, #4]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	462b      	mov	r3, r5
 8003682:	4622      	mov	r2, r4
 8003684:	4601      	mov	r1, r0
 8003686:	4890      	ldr	r0, [pc, #576]	@ (80038c8 <PIN_Setup+0x2a8>)
 8003688:	f7ff fbc0 	bl	8002e0c <GPIO_Pin_Init>
 800368c:	e013      	b.n	80036b6 <PIN_Setup+0x96>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a5b      	ldrb	r3, [r3, #9]
 8003692:	2206      	movs	r2, #6
 8003694:	4293      	cmp	r3, r2
 8003696:	d10e      	bne.n	80036b6 <PIN_Setup+0x96>
 8003698:	2006      	movs	r0, #6
 800369a:	2402      	movs	r4, #2
 800369c:	2500      	movs	r5, #0
 800369e:	2302      	movs	r3, #2
 80036a0:	2200      	movs	r2, #0
 80036a2:	2107      	movs	r1, #7
 80036a4:	9102      	str	r1, [sp, #8]
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	462b      	mov	r3, r5
 80036ac:	4622      	mov	r2, r4
 80036ae:	4601      	mov	r1, r0
 80036b0:	4886      	ldr	r0, [pc, #536]	@ (80038cc <PIN_Setup+0x2ac>)
 80036b2:	f7ff fbab 	bl	8002e0c <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7a9b      	ldrb	r3, [r3, #10]
 80036ba:	220a      	movs	r2, #10
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10f      	bne.n	80036e0 <PIN_Setup+0xc0>
 80036c0:	200a      	movs	r0, #10
 80036c2:	2402      	movs	r4, #2
 80036c4:	2500      	movs	r5, #0
 80036c6:	2302      	movs	r3, #2
 80036c8:	2200      	movs	r2, #0
 80036ca:	2107      	movs	r1, #7
 80036cc:	9102      	str	r1, [sp, #8]
 80036ce:	9201      	str	r2, [sp, #4]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	462b      	mov	r3, r5
 80036d4:	4622      	mov	r2, r4
 80036d6:	4601      	mov	r1, r0
 80036d8:	487b      	ldr	r0, [pc, #492]	@ (80038c8 <PIN_Setup+0x2a8>)
 80036da:	f7ff fb97 	bl	8002e0c <GPIO_Pin_Init>
 80036de:	e013      	b.n	8003708 <PIN_Setup+0xe8>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7a9b      	ldrb	r3, [r3, #10]
 80036e4:	2207      	movs	r2, #7
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <PIN_Setup+0xe8>
 80036ea:	2007      	movs	r0, #7
 80036ec:	2402      	movs	r4, #2
 80036ee:	2500      	movs	r5, #0
 80036f0:	2302      	movs	r3, #2
 80036f2:	2200      	movs	r2, #0
 80036f4:	2107      	movs	r1, #7
 80036f6:	9102      	str	r1, [sp, #8]
 80036f8:	9201      	str	r2, [sp, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	462b      	mov	r3, r5
 80036fe:	4622      	mov	r2, r4
 8003700:	4601      	mov	r1, r0
 8003702:	4872      	ldr	r0, [pc, #456]	@ (80038cc <PIN_Setup+0x2ac>)
 8003704:	f7ff fb82 	bl	8002e0c <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7a1b      	ldrb	r3, [r3, #8]
 800370c:	2202      	movs	r2, #2
 800370e:	4293      	cmp	r3, r2
 8003710:	d113      	bne.n	800373a <PIN_Setup+0x11a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7adb      	ldrb	r3, [r3, #11]
 8003716:	2208      	movs	r2, #8
 8003718:	4293      	cmp	r3, r2
 800371a:	d10e      	bne.n	800373a <PIN_Setup+0x11a>
 800371c:	2008      	movs	r0, #8
 800371e:	2402      	movs	r4, #2
 8003720:	2500      	movs	r5, #0
 8003722:	2302      	movs	r3, #2
 8003724:	2200      	movs	r2, #0
 8003726:	2107      	movs	r1, #7
 8003728:	9102      	str	r1, [sp, #8]
 800372a:	9201      	str	r2, [sp, #4]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462b      	mov	r3, r5
 8003730:	4622      	mov	r2, r4
 8003732:	4601      	mov	r1, r0
 8003734:	4864      	ldr	r0, [pc, #400]	@ (80038c8 <PIN_Setup+0x2a8>)
 8003736:	f7ff fb69 	bl	8002e0c <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7bdb      	ldrb	r3, [r3, #15]
 800373e:	2200      	movs	r2, #0
 8003740:	4293      	cmp	r3, r2
 8003742:	f000 851a 	beq.w	800417a <PIN_Setup+0xb5a>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7bdb      	ldrb	r3, [r3, #15]
 800374a:	2201      	movs	r2, #1
 800374c:	4293      	cmp	r3, r2
 800374e:	d10e      	bne.n	800376e <PIN_Setup+0x14e>
 8003750:	200b      	movs	r0, #11
 8003752:	2402      	movs	r4, #2
 8003754:	2500      	movs	r5, #0
 8003756:	2302      	movs	r3, #2
 8003758:	2200      	movs	r2, #0
 800375a:	2107      	movs	r1, #7
 800375c:	9102      	str	r1, [sp, #8]
 800375e:	9201      	str	r2, [sp, #4]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462b      	mov	r3, r5
 8003764:	4622      	mov	r2, r4
 8003766:	4601      	mov	r1, r0
 8003768:	4857      	ldr	r0, [pc, #348]	@ (80038c8 <PIN_Setup+0x2a8>)
 800376a:	f7ff fb4f 	bl	8002e0c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7bdb      	ldrb	r3, [r3, #15]
 8003772:	2202      	movs	r2, #2
 8003774:	4293      	cmp	r3, r2
 8003776:	d10e      	bne.n	8003796 <PIN_Setup+0x176>
 8003778:	200c      	movs	r0, #12
 800377a:	2402      	movs	r4, #2
 800377c:	2500      	movs	r5, #0
 800377e:	2302      	movs	r3, #2
 8003780:	2200      	movs	r2, #0
 8003782:	2107      	movs	r1, #7
 8003784:	9102      	str	r1, [sp, #8]
 8003786:	9201      	str	r2, [sp, #4]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	462b      	mov	r3, r5
 800378c:	4622      	mov	r2, r4
 800378e:	4601      	mov	r1, r0
 8003790:	484d      	ldr	r0, [pc, #308]	@ (80038c8 <PIN_Setup+0x2a8>)
 8003792:	f7ff fb3b 	bl	8002e0c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7bdb      	ldrb	r3, [r3, #15]
 800379a:	2203      	movs	r2, #3
 800379c:	4293      	cmp	r3, r2
 800379e:	f040 84ec 	bne.w	800417a <PIN_Setup+0xb5a>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037a2:	200b      	movs	r0, #11
 80037a4:	2402      	movs	r4, #2
 80037a6:	2500      	movs	r5, #0
 80037a8:	2302      	movs	r3, #2
 80037aa:	2200      	movs	r2, #0
 80037ac:	2107      	movs	r1, #7
 80037ae:	9102      	str	r1, [sp, #8]
 80037b0:	9201      	str	r2, [sp, #4]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	462b      	mov	r3, r5
 80037b6:	4622      	mov	r2, r4
 80037b8:	4601      	mov	r1, r0
 80037ba:	4843      	ldr	r0, [pc, #268]	@ (80038c8 <PIN_Setup+0x2a8>)
 80037bc:	f7ff fb26 	bl	8002e0c <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037c0:	200c      	movs	r0, #12
 80037c2:	2402      	movs	r4, #2
 80037c4:	2500      	movs	r5, #0
 80037c6:	2302      	movs	r3, #2
 80037c8:	2200      	movs	r2, #0
 80037ca:	2107      	movs	r1, #7
 80037cc:	9102      	str	r1, [sp, #8]
 80037ce:	9201      	str	r2, [sp, #4]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	462b      	mov	r3, r5
 80037d4:	4622      	mov	r2, r4
 80037d6:	4601      	mov	r1, r0
 80037d8:	483b      	ldr	r0, [pc, #236]	@ (80038c8 <PIN_Setup+0x2a8>)
 80037da:	f7ff fb17 	bl	8002e0c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80037de:	f000 bccc 	b.w	800417a <PIN_Setup+0xb5a>
				}
			}
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7a1b      	ldrb	r3, [r3, #8]
 80037e6:	2206      	movs	r2, #6
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00a      	beq.n	8003802 <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7a1b      	ldrb	r3, [r3, #8]
 80037f0:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d005      	beq.n	8003802 <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7a1b      	ldrb	r3, [r3, #8]
 80037fa:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f040 84c1 	bne.w	8004184 <PIN_Setup+0xb64>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7a5b      	ldrb	r3, [r3, #9]
 8003806:	2209      	movs	r2, #9
 8003808:	4293      	cmp	r3, r2
 800380a:	d10e      	bne.n	800382a <PIN_Setup+0x20a>
 800380c:	2009      	movs	r0, #9
 800380e:	2402      	movs	r4, #2
 8003810:	2500      	movs	r5, #0
 8003812:	2302      	movs	r3, #2
 8003814:	2200      	movs	r2, #0
 8003816:	2107      	movs	r1, #7
 8003818:	9102      	str	r1, [sp, #8]
 800381a:	9201      	str	r2, [sp, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	462b      	mov	r3, r5
 8003820:	4622      	mov	r2, r4
 8003822:	4601      	mov	r1, r0
 8003824:	4828      	ldr	r0, [pc, #160]	@ (80038c8 <PIN_Setup+0x2a8>)
 8003826:	f7ff faf1 	bl	8002e0c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7a1b      	ldrb	r3, [r3, #8]
 800382e:	2207      	movs	r2, #7
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 84a7 	bne.w	8004184 <PIN_Setup+0xb64>
 8003836:	2008      	movs	r0, #8
 8003838:	2402      	movs	r4, #2
 800383a:	2500      	movs	r5, #0
 800383c:	2302      	movs	r3, #2
 800383e:	2200      	movs	r2, #0
 8003840:	2107      	movs	r1, #7
 8003842:	9102      	str	r1, [sp, #8]
 8003844:	9201      	str	r2, [sp, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	462b      	mov	r3, r5
 800384a:	4622      	mov	r2, r4
 800384c:	4601      	mov	r1, r0
 800384e:	481e      	ldr	r0, [pc, #120]	@ (80038c8 <PIN_Setup+0x2a8>)
 8003850:	f7ff fadc 	bl	8002e0c <GPIO_Pin_Init>

		}
	}


}
 8003854:	f000 bc96 	b.w	8004184 <PIN_Setup+0xb64>
	else if(config->Port == USART2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <PIN_Setup+0x2b0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 8182 	bne.w	8003b68 <PIN_Setup+0x548>
		__usart_2_config__ = config;
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <PIN_Setup+0x2b4>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7a1b      	ldrb	r3, [r3, #8]
 800386e:	2201      	movs	r2, #1
 8003870:	4293      	cmp	r3, r2
 8003872:	d00f      	beq.n	8003894 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7a1b      	ldrb	r3, [r3, #8]
 8003878:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800387a:	4293      	cmp	r3, r2
 800387c:	d00a      	beq.n	8003894 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7a1b      	ldrb	r3, [r3, #8]
 8003882:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d005      	beq.n	8003894 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a1b      	ldrb	r3, [r3, #8]
 800388c:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800388e:	4293      	cmp	r3, r2
 8003890:	f040 80fc 	bne.w	8003a8c <PIN_Setup+0x46c>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7a5b      	ldrb	r3, [r3, #9]
 8003898:	2202      	movs	r2, #2
 800389a:	4293      	cmp	r3, r2
 800389c:	d11c      	bne.n	80038d8 <PIN_Setup+0x2b8>
 800389e:	2002      	movs	r0, #2
 80038a0:	2402      	movs	r4, #2
 80038a2:	2500      	movs	r5, #0
 80038a4:	2302      	movs	r3, #2
 80038a6:	2200      	movs	r2, #0
 80038a8:	2107      	movs	r1, #7
 80038aa:	9102      	str	r1, [sp, #8]
 80038ac:	9201      	str	r2, [sp, #4]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	462b      	mov	r3, r5
 80038b2:	4622      	mov	r2, r4
 80038b4:	4601      	mov	r1, r0
 80038b6:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <PIN_Setup+0x2a8>)
 80038b8:	f7ff faa8 	bl	8002e0c <GPIO_Pin_Init>
 80038bc:	e020      	b.n	8003900 <PIN_Setup+0x2e0>
 80038be:	bf00      	nop
 80038c0:	40011000 	.word	0x40011000
 80038c4:	200006d4 	.word	0x200006d4
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40004400 	.word	0x40004400
 80038d4:	200006d8 	.word	0x200006d8
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7a5b      	ldrb	r3, [r3, #9]
 80038dc:	2205      	movs	r2, #5
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10e      	bne.n	8003900 <PIN_Setup+0x2e0>
 80038e2:	2005      	movs	r0, #5
 80038e4:	2402      	movs	r4, #2
 80038e6:	2500      	movs	r5, #0
 80038e8:	2302      	movs	r3, #2
 80038ea:	2200      	movs	r2, #0
 80038ec:	2107      	movs	r1, #7
 80038ee:	9102      	str	r1, [sp, #8]
 80038f0:	9201      	str	r2, [sp, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	462b      	mov	r3, r5
 80038f6:	4622      	mov	r2, r4
 80038f8:	4601      	mov	r1, r0
 80038fa:	4899      	ldr	r0, [pc, #612]	@ (8003b60 <PIN_Setup+0x540>)
 80038fc:	f7ff fa86 	bl	8002e0c <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7a9b      	ldrb	r3, [r3, #10]
 8003904:	2203      	movs	r2, #3
 8003906:	4293      	cmp	r3, r2
 8003908:	d10f      	bne.n	800392a <PIN_Setup+0x30a>
 800390a:	2003      	movs	r0, #3
 800390c:	2402      	movs	r4, #2
 800390e:	2500      	movs	r5, #0
 8003910:	2302      	movs	r3, #2
 8003912:	2200      	movs	r2, #0
 8003914:	2107      	movs	r1, #7
 8003916:	9102      	str	r1, [sp, #8]
 8003918:	9201      	str	r2, [sp, #4]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	462b      	mov	r3, r5
 800391e:	4622      	mov	r2, r4
 8003920:	4601      	mov	r1, r0
 8003922:	4890      	ldr	r0, [pc, #576]	@ (8003b64 <PIN_Setup+0x544>)
 8003924:	f7ff fa72 	bl	8002e0c <GPIO_Pin_Init>
 8003928:	e013      	b.n	8003952 <PIN_Setup+0x332>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7a9b      	ldrb	r3, [r3, #10]
 800392e:	2206      	movs	r2, #6
 8003930:	4293      	cmp	r3, r2
 8003932:	d10e      	bne.n	8003952 <PIN_Setup+0x332>
 8003934:	2006      	movs	r0, #6
 8003936:	2402      	movs	r4, #2
 8003938:	2500      	movs	r5, #0
 800393a:	2302      	movs	r3, #2
 800393c:	2200      	movs	r2, #0
 800393e:	2107      	movs	r1, #7
 8003940:	9102      	str	r1, [sp, #8]
 8003942:	9201      	str	r2, [sp, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	462b      	mov	r3, r5
 8003948:	4622      	mov	r2, r4
 800394a:	4601      	mov	r1, r0
 800394c:	4884      	ldr	r0, [pc, #528]	@ (8003b60 <PIN_Setup+0x540>)
 800394e:	f7ff fa5d 	bl	8002e0c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7a1b      	ldrb	r3, [r3, #8]
 8003956:	2202      	movs	r2, #2
 8003958:	4293      	cmp	r3, r2
 800395a:	d128      	bne.n	80039ae <PIN_Setup+0x38e>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7adb      	ldrb	r3, [r3, #11]
 8003960:	2204      	movs	r2, #4
 8003962:	4293      	cmp	r3, r2
 8003964:	d10f      	bne.n	8003986 <PIN_Setup+0x366>
 8003966:	2004      	movs	r0, #4
 8003968:	2402      	movs	r4, #2
 800396a:	2500      	movs	r5, #0
 800396c:	2302      	movs	r3, #2
 800396e:	2200      	movs	r2, #0
 8003970:	2107      	movs	r1, #7
 8003972:	9102      	str	r1, [sp, #8]
 8003974:	9201      	str	r2, [sp, #4]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	462b      	mov	r3, r5
 800397a:	4622      	mov	r2, r4
 800397c:	4601      	mov	r1, r0
 800397e:	4879      	ldr	r0, [pc, #484]	@ (8003b64 <PIN_Setup+0x544>)
 8003980:	f7ff fa44 	bl	8002e0c <GPIO_Pin_Init>
 8003984:	e013      	b.n	80039ae <PIN_Setup+0x38e>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7adb      	ldrb	r3, [r3, #11]
 800398a:	2207      	movs	r2, #7
 800398c:	4293      	cmp	r3, r2
 800398e:	d10e      	bne.n	80039ae <PIN_Setup+0x38e>
 8003990:	2007      	movs	r0, #7
 8003992:	2402      	movs	r4, #2
 8003994:	2500      	movs	r5, #0
 8003996:	2302      	movs	r3, #2
 8003998:	2200      	movs	r2, #0
 800399a:	2107      	movs	r1, #7
 800399c:	9102      	str	r1, [sp, #8]
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	462b      	mov	r3, r5
 80039a4:	4622      	mov	r2, r4
 80039a6:	4601      	mov	r1, r0
 80039a8:	486e      	ldr	r0, [pc, #440]	@ (8003b64 <PIN_Setup+0x544>)
 80039aa:	f7ff fa2f 	bl	8002e0c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7bdb      	ldrb	r3, [r3, #15]
 80039b2:	2200      	movs	r2, #0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d105      	bne.n	80039c4 <PIN_Setup+0x3a4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7bdb      	ldrb	r3, [r3, #15]
 80039bc:	2203      	movs	r2, #3
 80039be:	4293      	cmp	r3, r2
 80039c0:	f040 83dd 	bne.w	800417e <PIN_Setup+0xb5e>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7bdb      	ldrb	r3, [r3, #15]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d128      	bne.n	8003a20 <PIN_Setup+0x400>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7adb      	ldrb	r3, [r3, #11]
 80039d2:	2200      	movs	r2, #0
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10f      	bne.n	80039f8 <PIN_Setup+0x3d8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80039d8:	2000      	movs	r0, #0
 80039da:	2402      	movs	r4, #2
 80039dc:	2500      	movs	r5, #0
 80039de:	2302      	movs	r3, #2
 80039e0:	2200      	movs	r2, #0
 80039e2:	2107      	movs	r1, #7
 80039e4:	9102      	str	r1, [sp, #8]
 80039e6:	9201      	str	r2, [sp, #4]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	462b      	mov	r3, r5
 80039ec:	4622      	mov	r2, r4
 80039ee:	4601      	mov	r1, r0
 80039f0:	485c      	ldr	r0, [pc, #368]	@ (8003b64 <PIN_Setup+0x544>)
 80039f2:	f7ff fa0b 	bl	8002e0c <GPIO_Pin_Init>
 80039f6:	e013      	b.n	8003a20 <PIN_Setup+0x400>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7adb      	ldrb	r3, [r3, #11]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10e      	bne.n	8003a20 <PIN_Setup+0x400>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a02:	2003      	movs	r0, #3
 8003a04:	2402      	movs	r4, #2
 8003a06:	2500      	movs	r5, #0
 8003a08:	2302      	movs	r3, #2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2107      	movs	r1, #7
 8003a0e:	9102      	str	r1, [sp, #8]
 8003a10:	9201      	str	r2, [sp, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	462b      	mov	r3, r5
 8003a16:	4622      	mov	r2, r4
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4851      	ldr	r0, [pc, #324]	@ (8003b60 <PIN_Setup+0x540>)
 8003a1c:	f7ff f9f6 	bl	8002e0c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7bdb      	ldrb	r3, [r3, #15]
 8003a24:	2202      	movs	r2, #2
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d005      	beq.n	8003a36 <PIN_Setup+0x416>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7bdb      	ldrb	r3, [r3, #15]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	4293      	cmp	r3, r2
 8003a32:	f040 83a4 	bne.w	800417e <PIN_Setup+0xb5e>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7adb      	ldrb	r3, [r3, #11]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10f      	bne.n	8003a60 <PIN_Setup+0x440>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a40:	2001      	movs	r0, #1
 8003a42:	2402      	movs	r4, #2
 8003a44:	2500      	movs	r5, #0
 8003a46:	2302      	movs	r3, #2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2107      	movs	r1, #7
 8003a4c:	9102      	str	r1, [sp, #8]
 8003a4e:	9201      	str	r2, [sp, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	462b      	mov	r3, r5
 8003a54:	4622      	mov	r2, r4
 8003a56:	4601      	mov	r1, r0
 8003a58:	4842      	ldr	r0, [pc, #264]	@ (8003b64 <PIN_Setup+0x544>)
 8003a5a:	f7ff f9d7 	bl	8002e0c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003a5e:	e38e      	b.n	800417e <PIN_Setup+0xb5e>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7adb      	ldrb	r3, [r3, #11]
 8003a64:	2204      	movs	r2, #4
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f040 8389 	bne.w	800417e <PIN_Setup+0xb5e>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a6c:	2004      	movs	r0, #4
 8003a6e:	2402      	movs	r4, #2
 8003a70:	2500      	movs	r5, #0
 8003a72:	2302      	movs	r3, #2
 8003a74:	2200      	movs	r2, #0
 8003a76:	2107      	movs	r1, #7
 8003a78:	9102      	str	r1, [sp, #8]
 8003a7a:	9201      	str	r2, [sp, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	4622      	mov	r2, r4
 8003a82:	4601      	mov	r1, r0
 8003a84:	4836      	ldr	r0, [pc, #216]	@ (8003b60 <PIN_Setup+0x540>)
 8003a86:	f7ff f9c1 	bl	8002e0c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003a8a:	e378      	b.n	800417e <PIN_Setup+0xb5e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7a1b      	ldrb	r3, [r3, #8]
 8003a90:	2206      	movs	r2, #6
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00a      	beq.n	8003aac <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7a1b      	ldrb	r3, [r3, #8]
 8003a9a:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d005      	beq.n	8003aac <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7a1b      	ldrb	r3, [r3, #8]
 8003aa4:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f040 836c 	bne.w	8004184 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7a5b      	ldrb	r3, [r3, #9]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10f      	bne.n	8003ad6 <PIN_Setup+0x4b6>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	2402      	movs	r4, #2
 8003aba:	2500      	movs	r5, #0
 8003abc:	2302      	movs	r3, #2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	9102      	str	r1, [sp, #8]
 8003ac4:	9201      	str	r2, [sp, #4]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	462b      	mov	r3, r5
 8003aca:	4622      	mov	r2, r4
 8003acc:	4601      	mov	r1, r0
 8003ace:	4825      	ldr	r0, [pc, #148]	@ (8003b64 <PIN_Setup+0x544>)
 8003ad0:	f7ff f99c 	bl	8002e0c <GPIO_Pin_Init>
 8003ad4:	e013      	b.n	8003afe <PIN_Setup+0x4de>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7a5b      	ldrb	r3, [r3, #9]
 8003ada:	2205      	movs	r2, #5
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d10e      	bne.n	8003afe <PIN_Setup+0x4de>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ae0:	2005      	movs	r0, #5
 8003ae2:	2402      	movs	r4, #2
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2107      	movs	r1, #7
 8003aec:	9102      	str	r1, [sp, #8]
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	462b      	mov	r3, r5
 8003af4:	4622      	mov	r2, r4
 8003af6:	4601      	mov	r1, r0
 8003af8:	4819      	ldr	r0, [pc, #100]	@ (8003b60 <PIN_Setup+0x540>)
 8003afa:	f7ff f987 	bl	8002e0c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7a1b      	ldrb	r3, [r3, #8]
 8003b02:	2207      	movs	r2, #7
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f040 833d 	bne.w	8004184 <PIN_Setup+0xb64>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7adb      	ldrb	r3, [r3, #11]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10f      	bne.n	8003b34 <PIN_Setup+0x514>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b14:	2004      	movs	r0, #4
 8003b16:	2402      	movs	r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2107      	movs	r1, #7
 8003b20:	9102      	str	r1, [sp, #8]
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462b      	mov	r3, r5
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <PIN_Setup+0x544>)
 8003b2e:	f7ff f96d 	bl	8002e0c <GPIO_Pin_Init>
}
 8003b32:	e327      	b.n	8004184 <PIN_Setup+0xb64>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7adb      	ldrb	r3, [r3, #11]
 8003b38:	2207      	movs	r2, #7
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	f040 8322 	bne.w	8004184 <PIN_Setup+0xb64>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b40:	2007      	movs	r0, #7
 8003b42:	2402      	movs	r4, #2
 8003b44:	2500      	movs	r5, #0
 8003b46:	2302      	movs	r3, #2
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2107      	movs	r1, #7
 8003b4c:	9102      	str	r1, [sp, #8]
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	462b      	mov	r3, r5
 8003b54:	4622      	mov	r2, r4
 8003b56:	4601      	mov	r1, r0
 8003b58:	4802      	ldr	r0, [pc, #8]	@ (8003b64 <PIN_Setup+0x544>)
 8003b5a:	f7ff f957 	bl	8002e0c <GPIO_Pin_Init>
}
 8003b5e:	e311      	b.n	8004184 <PIN_Setup+0xb64>
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8003dd8 <PIN_Setup+0x7b8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f040 81b5 	bne.w	8003ede <PIN_Setup+0x8be>
		__usart_3_config__ = config;
 8003b74:	4a99      	ldr	r2, [pc, #612]	@ (8003ddc <PIN_Setup+0x7bc>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7a1b      	ldrb	r3, [r3, #8]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a1b      	ldrb	r3, [r3, #8]
 8003b88:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00a      	beq.n	8003ba4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7a1b      	ldrb	r3, [r3, #8]
 8003b92:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d005      	beq.n	8003ba4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7a1b      	ldrb	r3, [r3, #8]
 8003b9c:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f040 8124 	bne.w	8003dec <PIN_Setup+0x7cc>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7a5b      	ldrb	r3, [r3, #9]
 8003ba8:	220b      	movs	r2, #11
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10f      	bne.n	8003bce <PIN_Setup+0x5ae>
 8003bae:	200b      	movs	r0, #11
 8003bb0:	2402      	movs	r4, #2
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2107      	movs	r1, #7
 8003bba:	9102      	str	r1, [sp, #8]
 8003bbc:	9201      	str	r2, [sp, #4]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4886      	ldr	r0, [pc, #536]	@ (8003de0 <PIN_Setup+0x7c0>)
 8003bc8:	f7ff f920 	bl	8002e0c <GPIO_Pin_Init>
 8003bcc:	e028      	b.n	8003c20 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7a5b      	ldrb	r3, [r3, #9]
 8003bd2:	220a      	movs	r2, #10
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10f      	bne.n	8003bf8 <PIN_Setup+0x5d8>
 8003bd8:	200a      	movs	r0, #10
 8003bda:	2402      	movs	r4, #2
 8003bdc:	2500      	movs	r5, #0
 8003bde:	2302      	movs	r3, #2
 8003be0:	2200      	movs	r2, #0
 8003be2:	2107      	movs	r1, #7
 8003be4:	9102      	str	r1, [sp, #8]
 8003be6:	9201      	str	r2, [sp, #4]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	462b      	mov	r3, r5
 8003bec:	4622      	mov	r2, r4
 8003bee:	4601      	mov	r1, r0
 8003bf0:	487c      	ldr	r0, [pc, #496]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003bf2:	f7ff f90b 	bl	8002e0c <GPIO_Pin_Init>
 8003bf6:	e013      	b.n	8003c20 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7a5b      	ldrb	r3, [r3, #9]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10e      	bne.n	8003c20 <PIN_Setup+0x600>
 8003c02:	2008      	movs	r0, #8
 8003c04:	2402      	movs	r4, #2
 8003c06:	2500      	movs	r5, #0
 8003c08:	2302      	movs	r3, #2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2107      	movs	r1, #7
 8003c0e:	9102      	str	r1, [sp, #8]
 8003c10:	9201      	str	r2, [sp, #4]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	462b      	mov	r3, r5
 8003c16:	4622      	mov	r2, r4
 8003c18:	4601      	mov	r1, r0
 8003c1a:	4872      	ldr	r0, [pc, #456]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003c1c:	f7ff f8f6 	bl	8002e0c <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a9b      	ldrb	r3, [r3, #10]
 8003c24:	220a      	movs	r2, #10
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10f      	bne.n	8003c4a <PIN_Setup+0x62a>
 8003c2a:	200a      	movs	r0, #10
 8003c2c:	2402      	movs	r4, #2
 8003c2e:	2500      	movs	r5, #0
 8003c30:	2302      	movs	r3, #2
 8003c32:	2200      	movs	r2, #0
 8003c34:	2107      	movs	r1, #7
 8003c36:	9102      	str	r1, [sp, #8]
 8003c38:	9201      	str	r2, [sp, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	4622      	mov	r2, r4
 8003c40:	4601      	mov	r1, r0
 8003c42:	4867      	ldr	r0, [pc, #412]	@ (8003de0 <PIN_Setup+0x7c0>)
 8003c44:	f7ff f8e2 	bl	8002e0c <GPIO_Pin_Init>
 8003c48:	e028      	b.n	8003c9c <PIN_Setup+0x67c>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7a9b      	ldrb	r3, [r3, #10]
 8003c4e:	220b      	movs	r2, #11
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10f      	bne.n	8003c74 <PIN_Setup+0x654>
 8003c54:	200b      	movs	r0, #11
 8003c56:	2402      	movs	r4, #2
 8003c58:	2500      	movs	r5, #0
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2107      	movs	r1, #7
 8003c60:	9102      	str	r1, [sp, #8]
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	462b      	mov	r3, r5
 8003c68:	4622      	mov	r2, r4
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	485d      	ldr	r0, [pc, #372]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003c6e:	f7ff f8cd 	bl	8002e0c <GPIO_Pin_Init>
 8003c72:	e013      	b.n	8003c9c <PIN_Setup+0x67c>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7a5b      	ldrb	r3, [r3, #9]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10e      	bne.n	8003c9c <PIN_Setup+0x67c>
 8003c7e:	2008      	movs	r0, #8
 8003c80:	2402      	movs	r4, #2
 8003c82:	2500      	movs	r5, #0
 8003c84:	2302      	movs	r3, #2
 8003c86:	2200      	movs	r2, #0
 8003c88:	2107      	movs	r1, #7
 8003c8a:	9102      	str	r1, [sp, #8]
 8003c8c:	9201      	str	r2, [sp, #4]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	462b      	mov	r3, r5
 8003c92:	4622      	mov	r2, r4
 8003c94:	4601      	mov	r1, r0
 8003c96:	4853      	ldr	r0, [pc, #332]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003c98:	f7ff f8b8 	bl	8002e0c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7a1b      	ldrb	r3, [r3, #8]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d128      	bne.n	8003cf8 <PIN_Setup+0x6d8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7adb      	ldrb	r3, [r3, #11]
 8003caa:	220c      	movs	r2, #12
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10f      	bne.n	8003cd0 <PIN_Setup+0x6b0>
 8003cb0:	200c      	movs	r0, #12
 8003cb2:	2402      	movs	r4, #2
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2107      	movs	r1, #7
 8003cbc:	9102      	str	r1, [sp, #8]
 8003cbe:	9201      	str	r2, [sp, #4]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	4846      	ldr	r0, [pc, #280]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003cca:	f7ff f89f 	bl	8002e0c <GPIO_Pin_Init>
 8003cce:	e013      	b.n	8003cf8 <PIN_Setup+0x6d8>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7adb      	ldrb	r3, [r3, #11]
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10e      	bne.n	8003cf8 <PIN_Setup+0x6d8>
 8003cda:	200a      	movs	r0, #10
 8003cdc:	2402      	movs	r4, #2
 8003cde:	2500      	movs	r5, #0
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2107      	movs	r1, #7
 8003ce6:	9102      	str	r1, [sp, #8]
 8003ce8:	9201      	str	r2, [sp, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	462b      	mov	r3, r5
 8003cee:	4622      	mov	r2, r4
 8003cf0:	4601      	mov	r1, r0
 8003cf2:	483d      	ldr	r0, [pc, #244]	@ (8003de8 <PIN_Setup+0x7c8>)
 8003cf4:	f7ff f88a 	bl	8002e0c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7bdb      	ldrb	r3, [r3, #15]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	f000 823f 	beq.w	8004182 <PIN_Setup+0xb62>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7bdb      	ldrb	r3, [r3, #15]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <PIN_Setup+0x6f8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7bdb      	ldrb	r3, [r3, #15]
 8003d12:	2203      	movs	r2, #3
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d128      	bne.n	8003d6a <PIN_Setup+0x74a>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7adb      	ldrb	r3, [r3, #11]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10f      	bne.n	8003d42 <PIN_Setup+0x722>
 8003d22:	2000      	movs	r0, #0
 8003d24:	2402      	movs	r4, #2
 8003d26:	2500      	movs	r5, #0
 8003d28:	2302      	movs	r3, #2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2107      	movs	r1, #7
 8003d2e:	9102      	str	r1, [sp, #8]
 8003d30:	9201      	str	r2, [sp, #4]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	462b      	mov	r3, r5
 8003d36:	4622      	mov	r2, r4
 8003d38:	4601      	mov	r1, r0
 8003d3a:	482a      	ldr	r0, [pc, #168]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003d3c:	f7ff f866 	bl	8002e0c <GPIO_Pin_Init>
 8003d40:	e013      	b.n	8003d6a <PIN_Setup+0x74a>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7adb      	ldrb	r3, [r3, #11]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10e      	bne.n	8003d6a <PIN_Setup+0x74a>
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	2402      	movs	r4, #2
 8003d50:	2500      	movs	r5, #0
 8003d52:	2302      	movs	r3, #2
 8003d54:	2200      	movs	r2, #0
 8003d56:	2107      	movs	r1, #7
 8003d58:	9102      	str	r1, [sp, #8]
 8003d5a:	9201      	str	r2, [sp, #4]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	462b      	mov	r3, r5
 8003d60:	4622      	mov	r2, r4
 8003d62:	4601      	mov	r1, r0
 8003d64:	4820      	ldr	r0, [pc, #128]	@ (8003de8 <PIN_Setup+0x7c8>)
 8003d66:	f7ff f851 	bl	8002e0c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7bdb      	ldrb	r3, [r3, #15]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d005      	beq.n	8003d80 <PIN_Setup+0x760>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7bdb      	ldrb	r3, [r3, #15]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f040 8201 	bne.w	8004182 <PIN_Setup+0xb62>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7adb      	ldrb	r3, [r3, #11]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10f      	bne.n	8003daa <PIN_Setup+0x78a>
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	2402      	movs	r4, #2
 8003d8e:	2500      	movs	r5, #0
 8003d90:	2302      	movs	r3, #2
 8003d92:	2200      	movs	r2, #0
 8003d94:	2107      	movs	r1, #7
 8003d96:	9102      	str	r1, [sp, #8]
 8003d98:	9201      	str	r2, [sp, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4601      	mov	r1, r0
 8003da2:	4810      	ldr	r0, [pc, #64]	@ (8003de4 <PIN_Setup+0x7c4>)
 8003da4:	f7ff f832 	bl	8002e0c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003da8:	e1eb      	b.n	8004182 <PIN_Setup+0xb62>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7adb      	ldrb	r3, [r3, #11]
 8003dae:	2204      	movs	r2, #4
 8003db0:	4293      	cmp	r3, r2
 8003db2:	f040 81e6 	bne.w	8004182 <PIN_Setup+0xb62>
 8003db6:	2004      	movs	r0, #4
 8003db8:	2402      	movs	r4, #2
 8003dba:	2500      	movs	r5, #0
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2107      	movs	r1, #7
 8003dc2:	9102      	str	r1, [sp, #8]
 8003dc4:	9201      	str	r2, [sp, #4]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	462b      	mov	r3, r5
 8003dca:	4622      	mov	r2, r4
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4806      	ldr	r0, [pc, #24]	@ (8003de8 <PIN_Setup+0x7c8>)
 8003dd0:	f7ff f81c 	bl	8002e0c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003dd4:	e1d5      	b.n	8004182 <PIN_Setup+0xb62>
 8003dd6:	bf00      	nop
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	200006dc 	.word	0x200006dc
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40020c00 	.word	0x40020c00
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7a1b      	ldrb	r3, [r3, #8]
 8003df0:	2206      	movs	r2, #6
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00a      	beq.n	8003e0c <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d005      	beq.n	8003e0c <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7a1b      	ldrb	r3, [r3, #8]
 8003e04:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f040 81bc 	bne.w	8004184 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7a5b      	ldrb	r3, [r3, #9]
 8003e10:	220b      	movs	r2, #11
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10f      	bne.n	8003e36 <PIN_Setup+0x816>
 8003e16:	200b      	movs	r0, #11
 8003e18:	2402      	movs	r4, #2
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2107      	movs	r1, #7
 8003e22:	9102      	str	r1, [sp, #8]
 8003e24:	9201      	str	r2, [sp, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	462b      	mov	r3, r5
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	4883      	ldr	r0, [pc, #524]	@ (800403c <PIN_Setup+0xa1c>)
 8003e30:	f7fe ffec 	bl	8002e0c <GPIO_Pin_Init>
 8003e34:	e028      	b.n	8003e88 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7a5b      	ldrb	r3, [r3, #9]
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10f      	bne.n	8003e60 <PIN_Setup+0x840>
 8003e40:	200a      	movs	r0, #10
 8003e42:	2402      	movs	r4, #2
 8003e44:	2500      	movs	r5, #0
 8003e46:	2302      	movs	r3, #2
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2107      	movs	r1, #7
 8003e4c:	9102      	str	r1, [sp, #8]
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	462b      	mov	r3, r5
 8003e54:	4622      	mov	r2, r4
 8003e56:	4601      	mov	r1, r0
 8003e58:	4879      	ldr	r0, [pc, #484]	@ (8004040 <PIN_Setup+0xa20>)
 8003e5a:	f7fe ffd7 	bl	8002e0c <GPIO_Pin_Init>
 8003e5e:	e013      	b.n	8003e88 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7a5b      	ldrb	r3, [r3, #9]
 8003e64:	2208      	movs	r2, #8
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10e      	bne.n	8003e88 <PIN_Setup+0x868>
 8003e6a:	2008      	movs	r0, #8
 8003e6c:	2402      	movs	r4, #2
 8003e6e:	2500      	movs	r5, #0
 8003e70:	2302      	movs	r3, #2
 8003e72:	2200      	movs	r2, #0
 8003e74:	2107      	movs	r1, #7
 8003e76:	9102      	str	r1, [sp, #8]
 8003e78:	9201      	str	r2, [sp, #4]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4601      	mov	r1, r0
 8003e82:	486f      	ldr	r0, [pc, #444]	@ (8004040 <PIN_Setup+0xa20>)
 8003e84:	f7fe ffc2 	bl	8002e0c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7adb      	ldrb	r3, [r3, #11]
 8003e8c:	220c      	movs	r2, #12
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10f      	bne.n	8003eb2 <PIN_Setup+0x892>
 8003e92:	200c      	movs	r0, #12
 8003e94:	2402      	movs	r4, #2
 8003e96:	2500      	movs	r5, #0
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2107      	movs	r1, #7
 8003e9e:	9102      	str	r1, [sp, #8]
 8003ea0:	9201      	str	r2, [sp, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	4865      	ldr	r0, [pc, #404]	@ (8004040 <PIN_Setup+0xa20>)
 8003eac:	f7fe ffae 	bl	8002e0c <GPIO_Pin_Init>
}
 8003eb0:	e168      	b.n	8004184 <PIN_Setup+0xb64>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7adb      	ldrb	r3, [r3, #11]
 8003eb6:	220a      	movs	r2, #10
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	f040 8163 	bne.w	8004184 <PIN_Setup+0xb64>
 8003ebe:	200a      	movs	r0, #10
 8003ec0:	2402      	movs	r4, #2
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2107      	movs	r1, #7
 8003eca:	9102      	str	r1, [sp, #8]
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4601      	mov	r1, r0
 8003ed6:	485b      	ldr	r0, [pc, #364]	@ (8004044 <PIN_Setup+0xa24>)
 8003ed8:	f7fe ff98 	bl	8002e0c <GPIO_Pin_Init>
}
 8003edc:	e152      	b.n	8004184 <PIN_Setup+0xb64>
	else if(config -> Port == UART4)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a59      	ldr	r2, [pc, #356]	@ (8004048 <PIN_Setup+0xa28>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d166      	bne.n	8003fb6 <PIN_Setup+0x996>
		__usart_4_config__ = config;
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <PIN_Setup+0xa2c>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7a1b      	ldrb	r3, [r3, #8]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00a      	beq.n	8003f0e <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7a1b      	ldrb	r3, [r3, #8]
 8003efc:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d005      	beq.n	8003f0e <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.LIN))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7a1b      	ldrb	r3, [r3, #8]
 8003f06:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	f040 813b 	bne.w	8004184 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7a5b      	ldrb	r3, [r3, #9]
 8003f12:	2200      	movs	r2, #0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10f      	bne.n	8003f38 <PIN_Setup+0x918>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	2402      	movs	r4, #2
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	2302      	movs	r3, #2
 8003f20:	2200      	movs	r2, #0
 8003f22:	2108      	movs	r1, #8
 8003f24:	9102      	str	r1, [sp, #8]
 8003f26:	9201      	str	r2, [sp, #4]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	4601      	mov	r1, r0
 8003f30:	4842      	ldr	r0, [pc, #264]	@ (800403c <PIN_Setup+0xa1c>)
 8003f32:	f7fe ff6b 	bl	8002e0c <GPIO_Pin_Init>
 8003f36:	e013      	b.n	8003f60 <PIN_Setup+0x940>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7a5b      	ldrb	r3, [r3, #9]
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10e      	bne.n	8003f60 <PIN_Setup+0x940>
 8003f42:	200a      	movs	r0, #10
 8003f44:	2402      	movs	r4, #2
 8003f46:	2500      	movs	r5, #0
 8003f48:	2302      	movs	r3, #2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	9102      	str	r1, [sp, #8]
 8003f50:	9201      	str	r2, [sp, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	462b      	mov	r3, r5
 8003f56:	4622      	mov	r2, r4
 8003f58:	4601      	mov	r1, r0
 8003f5a:	483d      	ldr	r0, [pc, #244]	@ (8004050 <PIN_Setup+0xa30>)
 8003f5c:	f7fe ff56 	bl	8002e0c <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7a9b      	ldrb	r3, [r3, #10]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10f      	bne.n	8003f8a <PIN_Setup+0x96a>
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	2402      	movs	r4, #2
 8003f6e:	2500      	movs	r5, #0
 8003f70:	2302      	movs	r3, #2
 8003f72:	2200      	movs	r2, #0
 8003f74:	2108      	movs	r1, #8
 8003f76:	9102      	str	r1, [sp, #8]
 8003f78:	9201      	str	r2, [sp, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	4622      	mov	r2, r4
 8003f80:	4601      	mov	r1, r0
 8003f82:	482e      	ldr	r0, [pc, #184]	@ (800403c <PIN_Setup+0xa1c>)
 8003f84:	f7fe ff42 	bl	8002e0c <GPIO_Pin_Init>
}
 8003f88:	e0fc      	b.n	8004184 <PIN_Setup+0xb64>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7a9b      	ldrb	r3, [r3, #10]
 8003f8e:	220b      	movs	r2, #11
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f040 80f7 	bne.w	8004184 <PIN_Setup+0xb64>
 8003f96:	200b      	movs	r0, #11
 8003f98:	2402      	movs	r4, #2
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2108      	movs	r1, #8
 8003fa2:	9102      	str	r1, [sp, #8]
 8003fa4:	9201      	str	r2, [sp, #4]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462b      	mov	r3, r5
 8003faa:	4622      	mov	r2, r4
 8003fac:	4601      	mov	r1, r0
 8003fae:	4828      	ldr	r0, [pc, #160]	@ (8004050 <PIN_Setup+0xa30>)
 8003fb0:	f7fe ff2c 	bl	8002e0c <GPIO_Pin_Init>
}
 8003fb4:	e0e6      	b.n	8004184 <PIN_Setup+0xb64>
	else if(config -> Port == UART5)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <PIN_Setup+0xa34>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d14d      	bne.n	800405c <PIN_Setup+0xa3c>
		__usart_5_config__ = config;
 8003fc0:	4a25      	ldr	r2, [pc, #148]	@ (8004058 <PIN_Setup+0xa38>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7a1b      	ldrb	r3, [r3, #8]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00a      	beq.n	8003fe6 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7a1b      	ldrb	r3, [r3, #8]
 8003fd4:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d005      	beq.n	8003fe6 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.LIN))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7a1b      	ldrb	r3, [r3, #8]
 8003fde:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f040 80cf 	bne.w	8004184 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7a5b      	ldrb	r3, [r3, #9]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10e      	bne.n	800400e <PIN_Setup+0x9ee>
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	2402      	movs	r4, #2
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2108      	movs	r1, #8
 8003ffc:	9102      	str	r1, [sp, #8]
 8003ffe:	9201      	str	r2, [sp, #4]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	462b      	mov	r3, r5
 8004004:	4622      	mov	r2, r4
 8004006:	4601      	mov	r1, r0
 8004008:	480c      	ldr	r0, [pc, #48]	@ (800403c <PIN_Setup+0xa1c>)
 800400a:	f7fe feff 	bl	8002e0c <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7a9b      	ldrb	r3, [r3, #10]
 8004012:	220c      	movs	r2, #12
 8004014:	4293      	cmp	r3, r2
 8004016:	f040 80b5 	bne.w	8004184 <PIN_Setup+0xb64>
 800401a:	200c      	movs	r0, #12
 800401c:	2402      	movs	r4, #2
 800401e:	2500      	movs	r5, #0
 8004020:	2302      	movs	r3, #2
 8004022:	2200      	movs	r2, #0
 8004024:	2108      	movs	r1, #8
 8004026:	9102      	str	r1, [sp, #8]
 8004028:	9201      	str	r2, [sp, #4]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	462b      	mov	r3, r5
 800402e:	4622      	mov	r2, r4
 8004030:	4601      	mov	r1, r0
 8004032:	4802      	ldr	r0, [pc, #8]	@ (800403c <PIN_Setup+0xa1c>)
 8004034:	f7fe feea 	bl	8002e0c <GPIO_Pin_Init>
}
 8004038:	e0a4      	b.n	8004184 <PIN_Setup+0xb64>
 800403a:	bf00      	nop
 800403c:	40020000 	.word	0x40020000
 8004040:	40020400 	.word	0x40020400
 8004044:	40020c00 	.word	0x40020c00
 8004048:	40004c00 	.word	0x40004c00
 800404c:	200006e0 	.word	0x200006e0
 8004050:	40020800 	.word	0x40020800
 8004054:	40005000 	.word	0x40005000
 8004058:	200006e4 	.word	0x200006e4
	else if(config->Port == USART6)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4a      	ldr	r2, [pc, #296]	@ (800418c <PIN_Setup+0xb6c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	f040 808e 	bne.w	8004184 <PIN_Setup+0xb64>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7a1b      	ldrb	r3, [r3, #8]
 800406c:	2201      	movs	r2, #1
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7a1b      	ldrb	r3, [r3, #8]
 8004076:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7a1b      	ldrb	r3, [r3, #8]
 8004080:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.LIN) )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	7a1b      	ldrb	r3, [r3, #8]
 800408a:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800408c:	4293      	cmp	r3, r2
 800408e:	d13c      	bne.n	800410a <PIN_Setup+0xaea>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7a5b      	ldrb	r3, [r3, #9]
 8004094:	2206      	movs	r2, #6
 8004096:	4293      	cmp	r3, r2
 8004098:	d10e      	bne.n	80040b8 <PIN_Setup+0xa98>
 800409a:	2006      	movs	r0, #6
 800409c:	2402      	movs	r4, #2
 800409e:	2500      	movs	r5, #0
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	2108      	movs	r1, #8
 80040a6:	9102      	str	r1, [sp, #8]
 80040a8:	9201      	str	r2, [sp, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	462b      	mov	r3, r5
 80040ae:	4622      	mov	r2, r4
 80040b0:	4601      	mov	r1, r0
 80040b2:	4837      	ldr	r0, [pc, #220]	@ (8004190 <PIN_Setup+0xb70>)
 80040b4:	f7fe feaa 	bl	8002e0c <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7a9b      	ldrb	r3, [r3, #10]
 80040bc:	2207      	movs	r2, #7
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10e      	bne.n	80040e0 <PIN_Setup+0xac0>
 80040c2:	2007      	movs	r0, #7
 80040c4:	2402      	movs	r4, #2
 80040c6:	2500      	movs	r5, #0
 80040c8:	2302      	movs	r3, #2
 80040ca:	2200      	movs	r2, #0
 80040cc:	2108      	movs	r1, #8
 80040ce:	9102      	str	r1, [sp, #8]
 80040d0:	9201      	str	r2, [sp, #4]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	462b      	mov	r3, r5
 80040d6:	4622      	mov	r2, r4
 80040d8:	4601      	mov	r1, r0
 80040da:	482d      	ldr	r0, [pc, #180]	@ (8004190 <PIN_Setup+0xb70>)
 80040dc:	f7fe fe96 	bl	8002e0c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7adb      	ldrb	r3, [r3, #11]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d14c      	bne.n	8004184 <PIN_Setup+0xb64>
 80040ea:	2008      	movs	r0, #8
 80040ec:	2402      	movs	r4, #2
 80040ee:	2500      	movs	r5, #0
 80040f0:	2302      	movs	r3, #2
 80040f2:	2200      	movs	r2, #0
 80040f4:	2108      	movs	r1, #8
 80040f6:	9102      	str	r1, [sp, #8]
 80040f8:	9201      	str	r2, [sp, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	462b      	mov	r3, r5
 80040fe:	4622      	mov	r2, r4
 8004100:	4601      	mov	r1, r0
 8004102:	4823      	ldr	r0, [pc, #140]	@ (8004190 <PIN_Setup+0xb70>)
 8004104:	f7fe fe82 	bl	8002e0c <GPIO_Pin_Init>
 8004108:	e03c      	b.n	8004184 <PIN_Setup+0xb64>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7a1b      	ldrb	r3, [r3, #8]
 800410e:	2206      	movs	r2, #6
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7a1b      	ldrb	r3, [r3, #8]
 8004118:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7a1b      	ldrb	r3, [r3, #8]
 8004122:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004124:	4293      	cmp	r3, r2
 8004126:	d12d      	bne.n	8004184 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7a5b      	ldrb	r3, [r3, #9]
 800412c:	2206      	movs	r2, #6
 800412e:	4293      	cmp	r3, r2
 8004130:	d10e      	bne.n	8004150 <PIN_Setup+0xb30>
 8004132:	2006      	movs	r0, #6
 8004134:	2402      	movs	r4, #2
 8004136:	2500      	movs	r5, #0
 8004138:	2302      	movs	r3, #2
 800413a:	2200      	movs	r2, #0
 800413c:	2108      	movs	r1, #8
 800413e:	9102      	str	r1, [sp, #8]
 8004140:	9201      	str	r2, [sp, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462b      	mov	r3, r5
 8004146:	4622      	mov	r2, r4
 8004148:	4601      	mov	r1, r0
 800414a:	4812      	ldr	r0, [pc, #72]	@ (8004194 <PIN_Setup+0xb74>)
 800414c:	f7fe fe5e 	bl	8002e0c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7a1b      	ldrb	r3, [r3, #8]
 8004154:	2207      	movs	r2, #7
 8004156:	4293      	cmp	r3, r2
 8004158:	d114      	bne.n	8004184 <PIN_Setup+0xb64>
 800415a:	2008      	movs	r0, #8
 800415c:	2402      	movs	r4, #2
 800415e:	2500      	movs	r5, #0
 8004160:	2302      	movs	r3, #2
 8004162:	2200      	movs	r2, #0
 8004164:	2108      	movs	r1, #8
 8004166:	9102      	str	r1, [sp, #8]
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	462b      	mov	r3, r5
 800416e:	4622      	mov	r2, r4
 8004170:	4601      	mov	r1, r0
 8004172:	4808      	ldr	r0, [pc, #32]	@ (8004194 <PIN_Setup+0xb74>)
 8004174:	f7fe fe4a 	bl	8002e0c <GPIO_Pin_Init>
}
 8004178:	e004      	b.n	8004184 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <PIN_Setup+0xb64>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004182:	bf00      	nop
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bdb0      	pop	{r4, r5, r7, pc}
 800418c:	40011400 	.word	0x40011400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020000 	.word	0x40020000

08004198 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b08e      	sub	sp, #56	@ 0x38
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff f9d9 	bl	8003558 <USART_Clock_Enable>
	PIN_Setup(config);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fa3a 	bl	8003620 <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff f973 	bl	8003498 <USART_Get_Instance_Number>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	4b74      	ldr	r3, [pc, #464]	@ (8004388 <USART_Init+0x1f0>)
 80041b8:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 80041ba:	4b73      	ldr	r3, [pc, #460]	@ (8004388 <USART_Init+0x1f0>)
 80041bc:	f993 3000 	ldrsb.w	r3, [r3]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d103      	bne.n	80041ce <USART_Init+0x36>
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	f000 bc26 	b.w	8004a1a <USART_Init+0x882>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if((config -> Port == USART1) || (config -> Port == USART6))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6e      	ldr	r2, [pc, #440]	@ (800438c <USART_Init+0x1f4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <USART_Init+0x4a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004390 <USART_Init+0x1f8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d150      	bne.n	8004284 <USART_Init+0xec>
	{
		uint32_t freq = SystemAPB2_Clock_Speed();
 80041e2:	f7fe ff1b 	bl	800301c <SystemAPB2_Clock_Speed>
 80041e6:	4603      	mov	r3, r0
 80041e8:	61fb      	str	r3, [r7, #28]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 80041ea:	69f8      	ldr	r0, [r7, #28]
 80041ec:	f7fc f98a 	bl	8000504 <__aeabi_ui2d>
 80041f0:	4604      	mov	r4, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f983 	bl	8000504 <__aeabi_ui2d>
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4b64      	ldr	r3, [pc, #400]	@ (8004394 <USART_Init+0x1fc>)
 8004204:	f7fc f9f8 	bl	80005f8 <__aeabi_dmul>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4620      	mov	r0, r4
 800420e:	4629      	mov	r1, r5
 8004210:	f7fc fb1c 	bl	800084c <__aeabi_ddiv>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 800421c:	f107 0208 	add.w	r2, r7, #8
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	ed97 0b08 	vldr	d0, [r7, #32]
 800422c:	f7fe ff0e 	bl	800304c <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 8004230:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	4b57      	ldr	r3, [pc, #348]	@ (8004398 <USART_Init+0x200>)
 800423a:	f7fc f9dd 	bl	80005f8 <__aeabi_dmul>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	ec43 2b17 	vmov	d7, r2, r3
 8004246:	eeb0 0a47 	vmov.f32	s0, s14
 800424a:	eef0 0a67 	vmov.f32	s1, s15
 800424e:	f001 fc77 	bl	8005b40 <ceil>
 8004252:	ec53 2b10 	vmov	r2, r3, d0
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f7fc fc67 	bl	8000b2c <__aeabi_d2iz>
 800425e:	4603      	mov	r3, r0
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 8004262:	ed97 7b02 	vldr	d7, [r7, #8]
 8004266:	eeb0 0a47 	vmov.f32	s0, s14
 800426a:	eef0 0a67 	vmov.f32	s1, s15
 800426e:	f001 fc67 	bl	8005b40 <ceil>
 8004272:	ec53 2b10 	vmov	r2, r3, d0
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	f7fc fc57 	bl	8000b2c <__aeabi_d2iz>
 800427e:	4603      	mov	r3, r0
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
	{
 8004282:	e04f      	b.n	8004324 <USART_Init+0x18c>
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
 8004284:	f7fe feb2 	bl	8002fec <SystemAPB1_Clock_Speed>
 8004288:	4603      	mov	r3, r0
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 800428c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800428e:	f7fc f939 	bl	8000504 <__aeabi_ui2d>
 8004292:	4604      	mov	r4, r0
 8004294:	460d      	mov	r5, r1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f932 	bl	8000504 <__aeabi_ui2d>
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <USART_Init+0x200>)
 80042a6:	f7fc f9a7 	bl	80005f8 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4620      	mov	r0, r4
 80042b0:	4629      	mov	r1, r5
 80042b2:	f7fc facb 	bl	800084c <__aeabi_ddiv>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80042be:	f107 0208 	add.w	r2, r7, #8
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	ed97 0b08 	vldr	d0, [r7, #32]
 80042ce:	f7fe febd 	bl	800304c <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80042d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <USART_Init+0x200>)
 80042dc:	f7fc f98c 	bl	80005f8 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	ec43 2b17 	vmov	d7, r2, r3
 80042e8:	eeb0 0a47 	vmov.f32	s0, s14
 80042ec:	eef0 0a67 	vmov.f32	s1, s15
 80042f0:	f001 fc26 	bl	8005b40 <ceil>
 80042f4:	ec53 2b10 	vmov	r2, r3, d0
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	f7fc fc16 	bl	8000b2c <__aeabi_d2iz>
 8004300:	4603      	mov	r3, r0
 8004302:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 8004304:	ed97 7b02 	vldr	d7, [r7, #8]
 8004308:	eeb0 0a47 	vmov.f32	s0, s14
 800430c:	eef0 0a67 	vmov.f32	s1, s15
 8004310:	f001 fc16 	bl	8005b40 <ceil>
 8004314:	ec53 2b10 	vmov	r2, r3, d0
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f7fc fc06 	bl	8000b2c <__aeabi_d2iz>
 8004320:	4603      	mov	r3, r0
 8004322:	633b      	str	r3, [r7, #48]	@ 0x30

	}

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	011a      	lsls	r2, r3, #4
 8004328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity ;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7c9b      	ldrb	r3, [r3, #18]
 800433c:	4619      	mov	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7b9b      	ldrb	r3, [r3, #14]
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	429a      	cmp	r2, r3
 8004350:	d124      	bne.n	800439c <USART_Init+0x204>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004360:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004370:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6153      	str	r3, [r2, #20]
 8004386:	e0c8      	b.n	800451a <USART_Init+0x382>
 8004388:	200006d0 	.word	0x200006d0
 800438c:	40011000 	.word	0x40011000
 8004390:	40011400 	.word	0x40011400
 8004394:	40400000 	.word	0x40400000
 8004398:	40300000 	.word	0x40300000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7b9b      	ldrb	r3, [r3, #14]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043a6:	4013      	ands	r3, r2
 80043a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d107      	bne.n	80043c0 <USART_Init+0x228>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043be:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7b9b      	ldrb	r3, [r3, #14]
 80043c4:	461a      	mov	r2, r3
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	4013      	ands	r3, r2
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d107      	bne.n	80043e0 <USART_Init+0x248>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043de:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7b9b      	ldrb	r3, [r3, #14]
 80043e4:	461a      	mov	r2, r3
 80043e6:	2340      	movs	r3, #64	@ 0x40
 80043e8:	4013      	ands	r3, r2
 80043ea:	2240      	movs	r2, #64	@ 0x40
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d107      	bne.n	8004400 <USART_Init+0x268>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043fe:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7b9b      	ldrb	r3, [r3, #14]
 8004404:	461a      	mov	r2, r3
 8004406:	2320      	movs	r3, #32
 8004408:	4013      	ands	r3, r2
 800440a:	2220      	movs	r2, #32
 800440c:	4293      	cmp	r3, r2
 800440e:	d107      	bne.n	8004420 <USART_Init+0x288>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0220 	orr.w	r2, r2, #32
 800441e:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7b9b      	ldrb	r3, [r3, #14]
 8004424:	461a      	mov	r2, r3
 8004426:	2310      	movs	r3, #16
 8004428:	4013      	ands	r3, r2
 800442a:	2210      	movs	r2, #16
 800442c:	4293      	cmp	r3, r2
 800442e:	d107      	bne.n	8004440 <USART_Init+0x2a8>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0210 	orr.w	r2, r2, #16
 800443e:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7b9b      	ldrb	r3, [r3, #14]
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800444a:	4013      	ands	r3, r2
 800444c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004450:	4293      	cmp	r3, r2
 8004452:	d107      	bne.n	8004464 <USART_Init+0x2cc>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004462:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7b9b      	ldrb	r3, [r3, #14]
 8004468:	461a      	mov	r2, r3
 800446a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800446e:	4013      	ands	r3, r2
 8004470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004474:	4293      	cmp	r3, r2
 8004476:	d107      	bne.n	8004488 <USART_Init+0x2f0>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004486:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7b9b      	ldrb	r3, [r3, #14]
 800448c:	461a      	mov	r2, r3
 800448e:	2301      	movs	r3, #1
 8004490:	4013      	ands	r3, r2
 8004492:	2201      	movs	r2, #1
 8004494:	4293      	cmp	r3, r2
 8004496:	d107      	bne.n	80044a8 <USART_Init+0x310>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4aa4      	ldr	r2, [pc, #656]	@ (8004740 <USART_Init+0x5a8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d107      	bne.n	80044c2 <USART_Init+0x32a>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 80044b2:	2100      	movs	r1, #0
 80044b4:	2025      	movs	r0, #37	@ 0x25
 80044b6:	f7fe fd6f 	bl	8002f98 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 80044ba:	2025      	movs	r0, #37	@ 0x25
 80044bc:	f7fe fd4e 	bl	8002f5c <__NVIC_EnableIRQ>
 80044c0:	e02b      	b.n	800451a <USART_Init+0x382>
		}
		else if(config -> Port == USART2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a9f      	ldr	r2, [pc, #636]	@ (8004744 <USART_Init+0x5ac>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <USART_Init+0x33c>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80044cc:	2026      	movs	r0, #38	@ 0x26
 80044ce:	f7fe fd45 	bl	8002f5c <__NVIC_EnableIRQ>
 80044d2:	e022      	b.n	800451a <USART_Init+0x382>
		}
		else if(config -> Port == USART3)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a9b      	ldr	r2, [pc, #620]	@ (8004748 <USART_Init+0x5b0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d103      	bne.n	80044e6 <USART_Init+0x34e>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 80044de:	2027      	movs	r0, #39	@ 0x27
 80044e0:	f7fe fd3c 	bl	8002f5c <__NVIC_EnableIRQ>
 80044e4:	e019      	b.n	800451a <USART_Init+0x382>
		}
		else if(config -> Port == UART4)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a98      	ldr	r2, [pc, #608]	@ (800474c <USART_Init+0x5b4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <USART_Init+0x360>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 80044f0:	2034      	movs	r0, #52	@ 0x34
 80044f2:	f7fe fd33 	bl	8002f5c <__NVIC_EnableIRQ>
 80044f6:	e010      	b.n	800451a <USART_Init+0x382>
		}
		else if(config -> Port == UART5)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a94      	ldr	r2, [pc, #592]	@ (8004750 <USART_Init+0x5b8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d103      	bne.n	800450a <USART_Init+0x372>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 8004502:	2035      	movs	r0, #53	@ 0x35
 8004504:	f7fe fd2a 	bl	8002f5c <__NVIC_EnableIRQ>
 8004508:	e007      	b.n	800451a <USART_Init+0x382>
		}
		else if(config -> Port == USART6)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a91      	ldr	r2, [pc, #580]	@ (8004754 <USART_Init+0x5bc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d102      	bne.n	800451a <USART_Init+0x382>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004514:	2047      	movs	r0, #71	@ 0x47
 8004516:	f7fe fd21 	bl	8002f5c <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7c1b      	ldrb	r3, [r3, #16]
 8004524:	4619      	mov	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7c5b      	ldrb	r3, [r3, #17]
 8004532:	2202      	movs	r2, #2
 8004534:	4013      	ands	r3, r2
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2202      	movs	r2, #2
 800453a:	4293      	cmp	r3, r2
 800453c:	f040 811e 	bne.w	800477c <USART_Init+0x5e4>
	{


		if(config->Port == USART1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7e      	ldr	r2, [pc, #504]	@ (8004740 <USART_Init+0x5a8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10e      	bne.n	8004568 <USART_Init+0x3d0>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 800454a:	4a83      	ldr	r2, [pc, #524]	@ (8004758 <USART_Init+0x5c0>)
 800454c:	4b83      	ldr	r3, [pc, #524]	@ (800475c <USART_Init+0x5c4>)
 800454e:	4614      	mov	r4, r2
 8004550:	33c0      	adds	r3, #192	@ 0xc0
 8004552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800455a:	2210      	movs	r2, #16
 800455c:	4b7e      	ldr	r3, [pc, #504]	@ (8004758 <USART_Init+0x5c0>)
 800455e:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 8004560:	4b7d      	ldr	r3, [pc, #500]	@ (8004758 <USART_Init+0x5c0>)
 8004562:	4a7f      	ldr	r2, [pc, #508]	@ (8004760 <USART_Init+0x5c8>)
 8004564:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004566:	e067      	b.n	8004638 <USART_Init+0x4a0>
		}
		else if(config->Port == USART2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a75      	ldr	r2, [pc, #468]	@ (8004744 <USART_Init+0x5ac>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10e      	bne.n	8004590 <USART_Init+0x3f8>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8004572:	4b79      	ldr	r3, [pc, #484]	@ (8004758 <USART_Init+0x5c0>)
 8004574:	4a79      	ldr	r2, [pc, #484]	@ (800475c <USART_Init+0x5c4>)
 8004576:	3358      	adds	r3, #88	@ 0x58
 8004578:	32d8      	adds	r2, #216	@ 0xd8
 800457a:	ca07      	ldmia	r2, {r0, r1, r2}
 800457c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004580:	2210      	movs	r2, #16
 8004582:	4b75      	ldr	r3, [pc, #468]	@ (8004758 <USART_Init+0x5c0>)
 8004584:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 8004586:	4b74      	ldr	r3, [pc, #464]	@ (8004758 <USART_Init+0x5c0>)
 8004588:	4a76      	ldr	r2, [pc, #472]	@ (8004764 <USART_Init+0x5cc>)
 800458a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800458e:	e053      	b.n	8004638 <USART_Init+0x4a0>
		}
		else if(config->Port == USART3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6c      	ldr	r2, [pc, #432]	@ (8004748 <USART_Init+0x5b0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10f      	bne.n	80045ba <USART_Init+0x422>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 800459a:	4b6f      	ldr	r3, [pc, #444]	@ (8004758 <USART_Init+0x5c0>)
 800459c:	4a6f      	ldr	r2, [pc, #444]	@ (800475c <USART_Init+0x5c4>)
 800459e:	33b0      	adds	r3, #176	@ 0xb0
 80045a0:	32f0      	adds	r2, #240	@ 0xf0
 80045a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80045a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80045a8:	2210      	movs	r2, #16
 80045aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004758 <USART_Init+0x5c0>)
 80045ac:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 80045b0:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <USART_Init+0x5c0>)
 80045b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004768 <USART_Init+0x5d0>)
 80045b4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80045b8:	e03e      	b.n	8004638 <USART_Init+0x4a0>
		}
		else if(config->Port == UART4)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a63      	ldr	r2, [pc, #396]	@ (800474c <USART_Init+0x5b4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <USART_Init+0x450>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 80045c4:	4b64      	ldr	r3, [pc, #400]	@ (8004758 <USART_Init+0x5c0>)
 80045c6:	4a65      	ldr	r2, [pc, #404]	@ (800475c <USART_Init+0x5c4>)
 80045c8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80045cc:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80045d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80045d6:	2210      	movs	r2, #16
 80045d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004758 <USART_Init+0x5c0>)
 80045da:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 80045de:	4b5e      	ldr	r3, [pc, #376]	@ (8004758 <USART_Init+0x5c0>)
 80045e0:	4a62      	ldr	r2, [pc, #392]	@ (800476c <USART_Init+0x5d4>)
 80045e2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80045e6:	e027      	b.n	8004638 <USART_Init+0x4a0>
		}
		else if(config->Port == UART5)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <USART_Init+0x5b8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d111      	bne.n	8004616 <USART_Init+0x47e>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80045f2:	4b59      	ldr	r3, [pc, #356]	@ (8004758 <USART_Init+0x5c0>)
 80045f4:	4a59      	ldr	r2, [pc, #356]	@ (800475c <USART_Init+0x5c4>)
 80045f6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80045fa:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80045fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004604:	2210      	movs	r2, #16
 8004606:	4b54      	ldr	r3, [pc, #336]	@ (8004758 <USART_Init+0x5c0>)
 8004608:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 800460c:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <USART_Init+0x5c0>)
 800460e:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <USART_Init+0x5d8>)
 8004610:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004614:	e010      	b.n	8004638 <USART_Init+0x4a0>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8004616:	4b50      	ldr	r3, [pc, #320]	@ (8004758 <USART_Init+0x5c0>)
 8004618:	4a50      	ldr	r2, [pc, #320]	@ (800475c <USART_Init+0x5c4>)
 800461a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800461e:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 8004622:	ca07      	ldmia	r2, {r0, r1, r2}
 8004624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004628:	2210      	movs	r2, #16
 800462a:	4b4b      	ldr	r3, [pc, #300]	@ (8004758 <USART_Init+0x5c0>)
 800462c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 8004630:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <USART_Init+0x5c0>)
 8004632:	4a50      	ldr	r2, [pc, #320]	@ (8004774 <USART_Init+0x5dc>)
 8004634:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004638:	4b4f      	ldr	r3, [pc, #316]	@ (8004778 <USART_Init+0x5e0>)
 800463a:	f993 3000 	ldrsb.w	r3, [r3]
 800463e:	4618      	mov	r0, r3
 8004640:	2200      	movs	r2, #0
 8004642:	4945      	ldr	r1, [pc, #276]	@ (8004758 <USART_Init+0x5c0>)
 8004644:	2358      	movs	r3, #88	@ 0x58
 8004646:	fb00 f303 	mul.w	r3, r0, r3
 800464a:	440b      	add	r3, r1
 800464c:	3318      	adds	r3, #24
 800464e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004650:	4b49      	ldr	r3, [pc, #292]	@ (8004778 <USART_Init+0x5e0>)
 8004652:	f993 3000 	ldrsb.w	r3, [r3]
 8004656:	4618      	mov	r0, r3
 8004658:	2200      	movs	r2, #0
 800465a:	493f      	ldr	r1, [pc, #252]	@ (8004758 <USART_Init+0x5c0>)
 800465c:	2358      	movs	r3, #88	@ 0x58
 800465e:	fb00 f303 	mul.w	r3, r0, r3
 8004662:	440b      	add	r3, r1
 8004664:	330c      	adds	r3, #12
 8004666:	601a      	str	r2, [r3, #0]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004668:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <USART_Init+0x5e0>)
 800466a:	f993 3000 	ldrsb.w	r3, [r3]
 800466e:	4618      	mov	r0, r3
 8004670:	2200      	movs	r2, #0
 8004672:	4939      	ldr	r1, [pc, #228]	@ (8004758 <USART_Init+0x5c0>)
 8004674:	2358      	movs	r3, #88	@ 0x58
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	440b      	add	r3, r1
 800467c:	3328      	adds	r3, #40	@ 0x28
 800467e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004680:	4b3d      	ldr	r3, [pc, #244]	@ (8004778 <USART_Init+0x5e0>)
 8004682:	f993 3000 	ldrsb.w	r3, [r3]
 8004686:	4618      	mov	r0, r3
 8004688:	2200      	movs	r2, #0
 800468a:	4933      	ldr	r1, [pc, #204]	@ (8004758 <USART_Init+0x5c0>)
 800468c:	2358      	movs	r3, #88	@ 0x58
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	440b      	add	r3, r1
 8004694:	3324      	adds	r3, #36	@ 0x24
 8004696:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8004698:	2200      	movs	r2, #0
 800469a:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <USART_Init+0x5e0>)
 800469c:	f993 3000 	ldrsb.w	r3, [r3]
 80046a0:	4618      	mov	r0, r3
 80046a2:	b291      	uxth	r1, r2
 80046a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004758 <USART_Init+0x5c0>)
 80046a6:	2358      	movs	r3, #88	@ 0x58
 80046a8:	fb00 f303 	mul.w	r3, r0, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3322      	adds	r3, #34	@ 0x22
 80046b0:	460a      	mov	r2, r1
 80046b2:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80046b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004778 <USART_Init+0x5e0>)
 80046ba:	f993 3000 	ldrsb.w	r3, [r3]
 80046be:	4618      	mov	r0, r3
 80046c0:	b291      	uxth	r1, r2
 80046c2:	4a25      	ldr	r2, [pc, #148]	@ (8004758 <USART_Init+0x5c0>)
 80046c4:	2358      	movs	r3, #88	@ 0x58
 80046c6:	fb00 f303 	mul.w	r3, r0, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3320      	adds	r3, #32
 80046ce:	460a      	mov	r2, r1
 80046d0:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 80046d2:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <USART_Init+0x5e0>)
 80046d4:	f993 3000 	ldrsb.w	r3, [r3]
 80046d8:	4618      	mov	r0, r3
 80046da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046de:	491e      	ldr	r1, [pc, #120]	@ (8004758 <USART_Init+0x5c0>)
 80046e0:	2358      	movs	r3, #88	@ 0x58
 80046e2:	fb00 f303 	mul.w	r3, r0, r3
 80046e6:	440b      	add	r3, r1
 80046e8:	3314      	adds	r3, #20
 80046ea:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80046ec:	4b22      	ldr	r3, [pc, #136]	@ (8004778 <USART_Init+0x5e0>)
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	4618      	mov	r0, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	4918      	ldr	r1, [pc, #96]	@ (8004758 <USART_Init+0x5c0>)
 80046f8:	2358      	movs	r3, #88	@ 0x58
 80046fa:	fb00 f303 	mul.w	r3, r0, r3
 80046fe:	440b      	add	r3, r1
 8004700:	3310      	adds	r3, #16
 8004702:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <USART_Init+0x5e0>)
 8004706:	f993 3000 	ldrsb.w	r3, [r3]
 800470a:	4618      	mov	r0, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4912      	ldr	r1, [pc, #72]	@ (8004758 <USART_Init+0x5c0>)
 8004710:	2258      	movs	r2, #88	@ 0x58
 8004712:	fb00 f202 	mul.w	r2, r0, r2
 8004716:	440a      	add	r2, r1
 8004718:	336c      	adds	r3, #108	@ 0x6c
 800471a:	4611      	mov	r1, r2
 800471c:	2258      	movs	r2, #88	@ 0x58
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fdc2 	bl	80052a8 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8004724:	4b14      	ldr	r3, [pc, #80]	@ (8004778 <USART_Init+0x5e0>)
 8004726:	f993 3000 	ldrsb.w	r3, [r3]
 800472a:	461a      	mov	r2, r3
 800472c:	2358      	movs	r3, #88	@ 0x58
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	@ (8004758 <USART_Init+0x5c0>)
 8004734:	4413      	add	r3, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f7fd ff16 	bl	8002568 <DMA_Init>
 800473c:	e026      	b.n	800478c <USART_Init+0x5f4>
 800473e:	bf00      	nop
 8004740:	40011000 	.word	0x40011000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	40005000 	.word	0x40005000
 8004754:	40011400 	.word	0x40011400
 8004758:	200002b0 	.word	0x200002b0
 800475c:	08005c98 	.word	0x08005c98
 8004760:	080030b1 	.word	0x080030b1
 8004764:	080030e1 	.word	0x080030e1
 8004768:	08003111 	.word	0x08003111
 800476c:	08003141 	.word	0x08003141
 8004770:	08003171 	.word	0x08003171
 8004774:	080031a1 	.word	0x080031a1
 8004778:	200006d0 	.word	0x200006d0
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478a:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7c5b      	ldrb	r3, [r3, #17]
 8004790:	2201      	movs	r2, #1
 8004792:	4013      	ands	r3, r2
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2201      	movs	r2, #1
 8004798:	4293      	cmp	r3, r2
 800479a:	f040 810b 	bne.w	80049b4 <USART_Init+0x81c>
	{



		if(config->Port == USART1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4aa0      	ldr	r2, [pc, #640]	@ (8004a24 <USART_Init+0x88c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10e      	bne.n	80047c6 <USART_Init+0x62e>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 80047a8:	4a9f      	ldr	r2, [pc, #636]	@ (8004a28 <USART_Init+0x890>)
 80047aa:	4ba0      	ldr	r3, [pc, #640]	@ (8004a2c <USART_Init+0x894>)
 80047ac:	4614      	mov	r4, r2
 80047ae:	33cc      	adds	r3, #204	@ 0xcc
 80047b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80047b8:	2210      	movs	r2, #16
 80047ba:	4b9b      	ldr	r3, [pc, #620]	@ (8004a28 <USART_Init+0x890>)
 80047bc:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 80047be:	4b9a      	ldr	r3, [pc, #616]	@ (8004a28 <USART_Init+0x890>)
 80047c0:	4a9b      	ldr	r2, [pc, #620]	@ (8004a30 <USART_Init+0x898>)
 80047c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80047c4:	e067      	b.n	8004896 <USART_Init+0x6fe>
		}
		else if(config->Port == USART2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a9a      	ldr	r2, [pc, #616]	@ (8004a34 <USART_Init+0x89c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10e      	bne.n	80047ee <USART_Init+0x656>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 80047d0:	4b95      	ldr	r3, [pc, #596]	@ (8004a28 <USART_Init+0x890>)
 80047d2:	4a96      	ldr	r2, [pc, #600]	@ (8004a2c <USART_Init+0x894>)
 80047d4:	3358      	adds	r3, #88	@ 0x58
 80047d6:	32e4      	adds	r2, #228	@ 0xe4
 80047d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80047da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80047de:	2210      	movs	r2, #16
 80047e0:	4b91      	ldr	r3, [pc, #580]	@ (8004a28 <USART_Init+0x890>)
 80047e2:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 80047e4:	4b90      	ldr	r3, [pc, #576]	@ (8004a28 <USART_Init+0x890>)
 80047e6:	4a94      	ldr	r2, [pc, #592]	@ (8004a38 <USART_Init+0x8a0>)
 80047e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80047ec:	e053      	b.n	8004896 <USART_Init+0x6fe>
		}
		else if(config->Port == USART3)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a92      	ldr	r2, [pc, #584]	@ (8004a3c <USART_Init+0x8a4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10f      	bne.n	8004818 <USART_Init+0x680>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 80047f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004a28 <USART_Init+0x890>)
 80047fa:	4a8c      	ldr	r2, [pc, #560]	@ (8004a2c <USART_Init+0x894>)
 80047fc:	33b0      	adds	r3, #176	@ 0xb0
 80047fe:	32fc      	adds	r2, #252	@ 0xfc
 8004800:	ca07      	ldmia	r2, {r0, r1, r2}
 8004802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004806:	2210      	movs	r2, #16
 8004808:	4b87      	ldr	r3, [pc, #540]	@ (8004a28 <USART_Init+0x890>)
 800480a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 800480e:	4b86      	ldr	r3, [pc, #536]	@ (8004a28 <USART_Init+0x890>)
 8004810:	4a8b      	ldr	r2, [pc, #556]	@ (8004a40 <USART_Init+0x8a8>)
 8004812:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8004816:	e03e      	b.n	8004896 <USART_Init+0x6fe>
		}
		else if(config->Port == UART4)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a89      	ldr	r2, [pc, #548]	@ (8004a44 <USART_Init+0x8ac>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d111      	bne.n	8004846 <USART_Init+0x6ae>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8004822:	4b81      	ldr	r3, [pc, #516]	@ (8004a28 <USART_Init+0x890>)
 8004824:	4a81      	ldr	r2, [pc, #516]	@ (8004a2c <USART_Init+0x894>)
 8004826:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800482a:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 800482e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004834:	2210      	movs	r2, #16
 8004836:	4b7c      	ldr	r3, [pc, #496]	@ (8004a28 <USART_Init+0x890>)
 8004838:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 800483c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a28 <USART_Init+0x890>)
 800483e:	4a82      	ldr	r2, [pc, #520]	@ (8004a48 <USART_Init+0x8b0>)
 8004840:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004844:	e027      	b.n	8004896 <USART_Init+0x6fe>
		}
		else if(config->Port == UART5)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a80      	ldr	r2, [pc, #512]	@ (8004a4c <USART_Init+0x8b4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <USART_Init+0x6dc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8004850:	4b75      	ldr	r3, [pc, #468]	@ (8004a28 <USART_Init+0x890>)
 8004852:	4a76      	ldr	r2, [pc, #472]	@ (8004a2c <USART_Init+0x894>)
 8004854:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004858:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 800485c:	ca07      	ldmia	r2, {r0, r1, r2}
 800485e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004862:	2210      	movs	r2, #16
 8004864:	4b70      	ldr	r3, [pc, #448]	@ (8004a28 <USART_Init+0x890>)
 8004866:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 800486a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a28 <USART_Init+0x890>)
 800486c:	4a78      	ldr	r2, [pc, #480]	@ (8004a50 <USART_Init+0x8b8>)
 800486e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004872:	e010      	b.n	8004896 <USART_Init+0x6fe>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8004874:	4b6c      	ldr	r3, [pc, #432]	@ (8004a28 <USART_Init+0x890>)
 8004876:	4a6d      	ldr	r2, [pc, #436]	@ (8004a2c <USART_Init+0x894>)
 8004878:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800487c:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8004880:	ca07      	ldmia	r2, {r0, r1, r2}
 8004882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004886:	2210      	movs	r2, #16
 8004888:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <USART_Init+0x890>)
 800488a:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 800488e:	4b66      	ldr	r3, [pc, #408]	@ (8004a28 <USART_Init+0x890>)
 8004890:	4a70      	ldr	r2, [pc, #448]	@ (8004a54 <USART_Init+0x8bc>)
 8004892:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004896:	4b70      	ldr	r3, [pc, #448]	@ (8004a58 <USART_Init+0x8c0>)
 8004898:	f993 3000 	ldrsb.w	r3, [r3]
 800489c:	4618      	mov	r0, r3
 800489e:	2200      	movs	r2, #0
 80048a0:	4961      	ldr	r1, [pc, #388]	@ (8004a28 <USART_Init+0x890>)
 80048a2:	2358      	movs	r3, #88	@ 0x58
 80048a4:	fb00 f303 	mul.w	r3, r0, r3
 80048a8:	440b      	add	r3, r1
 80048aa:	3318      	adds	r3, #24
 80048ac:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80048ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <USART_Init+0x8c0>)
 80048b0:	f993 3000 	ldrsb.w	r3, [r3]
 80048b4:	4618      	mov	r0, r3
 80048b6:	2200      	movs	r2, #0
 80048b8:	495b      	ldr	r1, [pc, #364]	@ (8004a28 <USART_Init+0x890>)
 80048ba:	2358      	movs	r3, #88	@ 0x58
 80048bc:	fb00 f303 	mul.w	r3, r0, r3
 80048c0:	440b      	add	r3, r1
 80048c2:	330c      	adds	r3, #12
 80048c4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80048c6:	4b64      	ldr	r3, [pc, #400]	@ (8004a58 <USART_Init+0x8c0>)
 80048c8:	f993 3000 	ldrsb.w	r3, [r3]
 80048cc:	4618      	mov	r0, r3
 80048ce:	2210      	movs	r2, #16
 80048d0:	4955      	ldr	r1, [pc, #340]	@ (8004a28 <USART_Init+0x890>)
 80048d2:	2358      	movs	r3, #88	@ 0x58
 80048d4:	fb00 f303 	mul.w	r3, r0, r3
 80048d8:	440b      	add	r3, r1
 80048da:	331c      	adds	r3, #28
 80048dc:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80048de:	4b5e      	ldr	r3, [pc, #376]	@ (8004a58 <USART_Init+0x8c0>)
 80048e0:	f993 3000 	ldrsb.w	r3, [r3]
 80048e4:	4618      	mov	r0, r3
 80048e6:	2200      	movs	r2, #0
 80048e8:	494f      	ldr	r1, [pc, #316]	@ (8004a28 <USART_Init+0x890>)
 80048ea:	2358      	movs	r3, #88	@ 0x58
 80048ec:	fb00 f303 	mul.w	r3, r0, r3
 80048f0:	440b      	add	r3, r1
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80048f6:	4b58      	ldr	r3, [pc, #352]	@ (8004a58 <USART_Init+0x8c0>)
 80048f8:	f993 3000 	ldrsb.w	r3, [r3]
 80048fc:	4618      	mov	r0, r3
 80048fe:	2200      	movs	r2, #0
 8004900:	4949      	ldr	r1, [pc, #292]	@ (8004a28 <USART_Init+0x890>)
 8004902:	2358      	movs	r3, #88	@ 0x58
 8004904:	fb00 f303 	mul.w	r3, r0, r3
 8004908:	440b      	add	r3, r1
 800490a:	3324      	adds	r3, #36	@ 0x24
 800490c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800490e:	2200      	movs	r2, #0
 8004910:	4b51      	ldr	r3, [pc, #324]	@ (8004a58 <USART_Init+0x8c0>)
 8004912:	f993 3000 	ldrsb.w	r3, [r3]
 8004916:	4618      	mov	r0, r3
 8004918:	b291      	uxth	r1, r2
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <USART_Init+0x890>)
 800491c:	2358      	movs	r3, #88	@ 0x58
 800491e:	fb00 f303 	mul.w	r3, r0, r3
 8004922:	4413      	add	r3, r2
 8004924:	3322      	adds	r3, #34	@ 0x22
 8004926:	460a      	mov	r2, r1
 8004928:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800492a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800492e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <USART_Init+0x8c0>)
 8004930:	f993 3000 	ldrsb.w	r3, [r3]
 8004934:	4618      	mov	r0, r3
 8004936:	b291      	uxth	r1, r2
 8004938:	4a3b      	ldr	r2, [pc, #236]	@ (8004a28 <USART_Init+0x890>)
 800493a:	2358      	movs	r3, #88	@ 0x58
 800493c:	fb00 f303 	mul.w	r3, r0, r3
 8004940:	4413      	add	r3, r2
 8004942:	3320      	adds	r3, #32
 8004944:	460a      	mov	r2, r1
 8004946:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8004948:	4b43      	ldr	r3, [pc, #268]	@ (8004a58 <USART_Init+0x8c0>)
 800494a:	f993 3000 	ldrsb.w	r3, [r3]
 800494e:	4618      	mov	r0, r3
 8004950:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004954:	4934      	ldr	r1, [pc, #208]	@ (8004a28 <USART_Init+0x890>)
 8004956:	2358      	movs	r3, #88	@ 0x58
 8004958:	fb00 f303 	mul.w	r3, r0, r3
 800495c:	440b      	add	r3, r1
 800495e:	3314      	adds	r3, #20
 8004960:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8004962:	4b3d      	ldr	r3, [pc, #244]	@ (8004a58 <USART_Init+0x8c0>)
 8004964:	f993 3000 	ldrsb.w	r3, [r3]
 8004968:	4618      	mov	r0, r3
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	492e      	ldr	r1, [pc, #184]	@ (8004a28 <USART_Init+0x890>)
 800496e:	2358      	movs	r3, #88	@ 0x58
 8004970:	fb00 f303 	mul.w	r3, r0, r3
 8004974:	440b      	add	r3, r1
 8004976:	3310      	adds	r3, #16
 8004978:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 800497a:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <USART_Init+0x8c0>)
 800497c:	f993 3000 	ldrsb.w	r3, [r3]
 8004980:	4618      	mov	r0, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4928      	ldr	r1, [pc, #160]	@ (8004a28 <USART_Init+0x890>)
 8004986:	2258      	movs	r2, #88	@ 0x58
 8004988:	fb00 f202 	mul.w	r2, r0, r2
 800498c:	440a      	add	r2, r1
 800498e:	3314      	adds	r3, #20
 8004990:	4611      	mov	r1, r2
 8004992:	2258      	movs	r2, #88	@ 0x58
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fc87 	bl	80052a8 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 800499a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <USART_Init+0x8c0>)
 800499c:	f993 3000 	ldrsb.w	r3, [r3]
 80049a0:	461a      	mov	r2, r3
 80049a2:	2358      	movs	r3, #88	@ 0x58
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <USART_Init+0x890>)
 80049aa:	4413      	add	r3, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd fddb 	bl	8002568 <DMA_Init>
 80049b2:	e007      	b.n	80049c4 <USART_Init+0x82c>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c2:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7a1b      	ldrb	r3, [r3, #8]
 80049c8:	2203      	movs	r2, #3
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d107      	bne.n	80049de <USART_Init+0x846>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0208 	orr.w	r2, r2, #8
 80049dc:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7a1b      	ldrb	r3, [r3, #8]
 80049e2:	2205      	movs	r2, #5
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d107      	bne.n	80049f8 <USART_Init+0x860>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f6:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 020c 	orr.w	r2, r2, #12
 8004a06:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a16:	60da      	str	r2, [r3, #12]

	return 1;
 8004a18:	2301      	movs	r3, #1
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3738      	adds	r7, #56	@ 0x38
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40011000 	.word	0x40011000
 8004a28:	200004c0 	.word	0x200004c0
 8004a2c:	08005c98 	.word	0x08005c98
 8004a30:	08003099 	.word	0x08003099
 8004a34:	40004400 	.word	0x40004400
 8004a38:	080030c9 	.word	0x080030c9
 8004a3c:	40004800 	.word	0x40004800
 8004a40:	080030f9 	.word	0x080030f9
 8004a44:	40004c00 	.word	0x40004c00
 8004a48:	08003129 	.word	0x08003129
 8004a4c:	40005000 	.word	0x40005000
 8004a50:	08003159 	.word	0x08003159
 8004a54:	08003189 	.word	0x08003189
 8004a58:	200006d0 	.word	0x200006d0

08004a5c <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7fe fd14 	bl	8003498 <USART_Get_Instance_Number>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b73      	ldr	r3, [pc, #460]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004a76:	701a      	strb	r2, [r3, #0]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	7c5b      	ldrb	r3, [r3, #17]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	745a      	strb	r2, [r3, #17]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	7c5b      	ldrb	r3, [r3, #17]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80bb 	beq.w	8004c06 <USART_TX_Buffer+0x1aa>
		config -> Port -> SR &= ~USART_SR_TC;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8004aa0:	4b68      	ldr	r3, [pc, #416]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	4967      	ldr	r1, [pc, #412]	@ (8004c48 <USART_TX_Buffer+0x1ec>)
 8004aac:	2358      	movs	r3, #88	@ 0x58
 8004aae:	fb00 f303 	mul.w	r3, r0, r3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3330      	adds	r3, #48	@ 0x30
 8004ab6:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	4b61      	ldr	r3, [pc, #388]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c48 <USART_TX_Buffer+0x1ec>)
 8004aca:	2358      	movs	r3, #88	@ 0x58
 8004acc:	fb00 f303 	mul.w	r3, r0, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	332c      	adds	r3, #44	@ 0x2c
 8004ad4:	6019      	str	r1, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8004adc:	4619      	mov	r1, r3
 8004ade:	4a5a      	ldr	r2, [pc, #360]	@ (8004c48 <USART_TX_Buffer+0x1ec>)
 8004ae0:	2358      	movs	r3, #88	@ 0x58
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3334      	adds	r3, #52	@ 0x34
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8004aee:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004af0:	f993 3000 	ldrsb.w	r3, [r3]
 8004af4:	461a      	mov	r2, r3
 8004af6:	2358      	movs	r3, #88	@ 0x58
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	4a52      	ldr	r2, [pc, #328]	@ (8004c48 <USART_TX_Buffer+0x1ec>)
 8004afe:	4413      	add	r3, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd ff23 	bl	800294c <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004b06:	4b4f      	ldr	r3, [pc, #316]	@ (8004c44 <USART_TX_Buffer+0x1e8>)
 8004b08:	f993 3000 	ldrsb.w	r3, [r3]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2358      	movs	r3, #88	@ 0x58
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	4a4c      	ldr	r2, [pc, #304]	@ (8004c48 <USART_TX_Buffer+0x1ec>)
 8004b16:	4413      	add	r3, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fd ff77 	bl	8002a0c <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b2c:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a46      	ldr	r2, [pc, #280]	@ (8004c4c <USART_TX_Buffer+0x1f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10c      	bne.n	8004b52 <USART_TX_Buffer+0xf6>
		{
			while(!U1TX_Complete){}
 8004b38:	bf00      	nop
 8004b3a:	4b45      	ldr	r3, [pc, #276]	@ (8004c50 <USART_TX_Buffer+0x1f4>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f083 0301 	eor.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f7      	bne.n	8004b3a <USART_TX_Buffer+0xde>
			U1TX_Complete = 0;
 8004b4a:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <USART_TX_Buffer+0x1f4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e072      	b.n	8004c38 <USART_TX_Buffer+0x1dc>

		}
		else if(config->Port == USART2)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3f      	ldr	r2, [pc, #252]	@ (8004c54 <USART_TX_Buffer+0x1f8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10c      	bne.n	8004b76 <USART_TX_Buffer+0x11a>
		{
			while(!U2TX_Complete){}
 8004b5c:	bf00      	nop
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c58 <USART_TX_Buffer+0x1fc>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f083 0301 	eor.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f7      	bne.n	8004b5e <USART_TX_Buffer+0x102>
			U2TX_Complete = 0;
 8004b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c58 <USART_TX_Buffer+0x1fc>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e060      	b.n	8004c38 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART3)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a38      	ldr	r2, [pc, #224]	@ (8004c5c <USART_TX_Buffer+0x200>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10c      	bne.n	8004b9a <USART_TX_Buffer+0x13e>
		{
			while(!U3TX_Complete){}
 8004b80:	bf00      	nop
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <USART_TX_Buffer+0x204>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f083 0301 	eor.w	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f7      	bne.n	8004b82 <USART_TX_Buffer+0x126>
			U3TX_Complete = 0;
 8004b92:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <USART_TX_Buffer+0x204>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e04e      	b.n	8004c38 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART4)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a31      	ldr	r2, [pc, #196]	@ (8004c64 <USART_TX_Buffer+0x208>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10c      	bne.n	8004bbe <USART_TX_Buffer+0x162>
		{
			while(!U4TX_Complete){}
 8004ba4:	bf00      	nop
 8004ba6:	4b30      	ldr	r3, [pc, #192]	@ (8004c68 <USART_TX_Buffer+0x20c>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f7      	bne.n	8004ba6 <USART_TX_Buffer+0x14a>
			U4TX_Complete = 0;
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c68 <USART_TX_Buffer+0x20c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e03c      	b.n	8004c38 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART5)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <USART_TX_Buffer+0x210>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <USART_TX_Buffer+0x186>
		{
			while(!U5TX_Complete){}
 8004bc8:	bf00      	nop
 8004bca:	4b29      	ldr	r3, [pc, #164]	@ (8004c70 <USART_TX_Buffer+0x214>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f083 0301 	eor.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f7      	bne.n	8004bca <USART_TX_Buffer+0x16e>
			U5TX_Complete = 0;
 8004bda:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <USART_TX_Buffer+0x214>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	e02a      	b.n	8004c38 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART6)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <USART_TX_Buffer+0x218>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d125      	bne.n	8004c38 <USART_TX_Buffer+0x1dc>
		{
			while(!U6TX_Complete){}
 8004bec:	bf00      	nop
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <USART_TX_Buffer+0x21c>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f083 0301 	eor.w	r3, r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f7      	bne.n	8004bee <USART_TX_Buffer+0x192>
			U6TX_Complete = 0;
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <USART_TX_Buffer+0x21c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e018      	b.n	8004c38 <USART_TX_Buffer+0x1dc>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e011      	b.n	8004c30 <USART_TX_Buffer+0x1d4>
		{
			config->Port->DR = tx_buffer[i];
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4413      	add	r3, r2
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004c1a:	bf00      	nop
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f8      	beq.n	8004c1c <USART_TX_Buffer+0x1c0>
		for(int i = 0; i <= length; i++)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	dde9      	ble.n	8004c0c <USART_TX_Buffer+0x1b0>
		}
	}

	return 1;
 8004c38:	2301      	movs	r3, #1

}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200006d0 	.word	0x200006d0
 8004c48:	200004c0 	.word	0x200004c0
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	200006ea 	.word	0x200006ea
 8004c54:	40004400 	.word	0x40004400
 8004c58:	200006ec 	.word	0x200006ec
 8004c5c:	40004800 	.word	0x40004800
 8004c60:	200006ee 	.word	0x200006ee
 8004c64:	40004c00 	.word	0x40004c00
 8004c68:	200006f0 	.word	0x200006f0
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	200006f2 	.word	0x200006f2
 8004c74:	40011400 	.word	0x40011400
 8004c78:	200006f4 	.word	0x200006f4

08004c7c <__NVIC_SetPriority>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	6039      	str	r1, [r7, #0]
 8004c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	db0a      	blt.n	8004ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	490c      	ldr	r1, [pc, #48]	@ (8004cc8 <__NVIC_SetPriority+0x4c>)
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	0112      	lsls	r2, r2, #4
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ca4:	e00a      	b.n	8004cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4908      	ldr	r1, [pc, #32]	@ (8004ccc <__NVIC_SetPriority+0x50>)
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	3b04      	subs	r3, #4
 8004cb4:	0112      	lsls	r2, r2, #4
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	440b      	add	r3, r1
 8004cba:	761a      	strb	r2, [r3, #24]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	e000e100 	.word	0xe000e100
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ce0:	d301      	bcc.n	8004ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00f      	b.n	8004d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d10 <SysTick_Config+0x40>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cee:	210f      	movs	r1, #15
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f7ff ffc2 	bl	8004c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <SysTick_Config+0x40>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfe:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <SysTick_Config+0x40>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	.word	0xe000e010

08004d14 <MCU_Clock_Setup>:
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
	SystemInit();
 8004d1a:	f000 f9a5 	bl	8005068 <SystemInit>
	uint8_t pll_m = 8;
 8004d1e:	2308      	movs	r3, #8
 8004d20:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004d22:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004d26:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004d2c:	2307      	movs	r3, #7
 8004d2e:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004d30:	4b3c      	ldr	r3, [pc, #240]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004d36:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004d42:	bf00      	nop
 8004d44:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f9      	beq.n	8004d44 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004d50:	4b34      	ldr	r3, [pc, #208]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	4a33      	ldr	r2, [pc, #204]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004d5c:	4b32      	ldr	r3, [pc, #200]	@ (8004e28 <MCU_Clock_Setup+0x114>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a31      	ldr	r2, [pc, #196]	@ (8004e28 <MCU_Clock_Setup+0x114>)
 8004d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d66:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004d68:	4b30      	ldr	r3, [pc, #192]	@ (8004e2c <MCU_Clock_Setup+0x118>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e2c <MCU_Clock_Setup+0x118>)
 8004d6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d72:	f043 0305 	orr.w	r3, r3, #5
 8004d76:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004d78:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	78ba      	ldrb	r2, [r7, #2]
 8004d7e:	0611      	lsls	r1, r2, #24
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	0412      	lsls	r2, r2, #16
 8004d84:	4311      	orrs	r1, r2
 8004d86:	88ba      	ldrh	r2, [r7, #4]
 8004d88:	0192      	lsls	r2, r2, #6
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	79fa      	ldrb	r2, [r7, #7]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	4a24      	ldr	r2, [pc, #144]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004d98:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004da2:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004da4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004da6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004db2:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004db6:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dc2:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004dc4:	4b17      	ldr	r3, [pc, #92]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a16      	ldr	r2, [pc, #88]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004dd0:	bf00      	nop
 8004dd2:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f9      	beq.n	8004dd2 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004dde:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4a10      	ldr	r2, [pc, #64]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004de4:	f043 0302 	orr.w	r3, r3, #2
 8004de8:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004dea:	bf00      	nop
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d1f9      	bne.n	8004dec <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004df8:	f000 f948 	bl	800508c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e30 <MCU_Clock_Setup+0x11c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <MCU_Clock_Setup+0x120>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff60 	bl	8004cd0 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004e10:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e14:	4a03      	ldr	r2, [pc, #12]	@ (8004e24 <MCU_Clock_Setup+0x110>)
 8004e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e1a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	40023c00 	.word	0x40023c00
 8004e30:	20000000 	.word	0x20000000
 8004e34:	18618619 	.word	0x18618619

08004e38 <Delay_Config>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <Delay_Config+0x2c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <Delay_Config+0x2c>)
 8004e44:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004e48:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <Delay_Config+0x2c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004e50:	4b04      	ldr	r3, [pc, #16]	@ (8004e64 <Delay_Config+0x2c>)
 8004e52:	2205      	movs	r2, #5
 8004e54:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	e000e010 	.word	0xe000e010

08004e68 <Delay_ms>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8004e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e76:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004ebc <Delay_ms+0x54>
 8004e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e82:	ee17 3a90 	vmov	r3, s15
 8004e86:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004e88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <Delay_ms+0x58>)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <Delay_ms+0x58>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <Delay_ms+0x58>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <Delay_ms+0x58>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004ea0:	bf00      	nop
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <Delay_ms+0x58>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f9      	beq.n	8004ea2 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	48241000 	.word	0x48241000
 8004ec0:	e000e010 	.word	0xe000e010

08004ec4 <Delay_milli>:
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8004ece:	e00b      	b.n	8004ee8 <Delay_milli+0x24>
		Delay_ms(1);
 8004ed0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ed4:	f7ff ffc8 	bl	8004e68 <Delay_ms>
	for (; ms>0; ms--)
 8004ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ee4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef4:	dcec      	bgt.n	8004ed0 <Delay_milli+0xc>
	return ms;
 8004ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efe:	ee17 3a90 	vmov	r3, s15
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <main>:




int main(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	@ 0x28
 8004f10:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004f12:	f7ff feff 	bl	8004d14 <MCU_Clock_Setup>
	Delay_Config();
 8004f16:	f7ff ff8f 	bl	8004e38 <Delay_Config>
	Console_Init(115200);
 8004f1a:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8004f1e:	f7fb ff31 	bl	8000d84 <Console_Init>
	CRC_Init();
 8004f22:	f7fb fea7 	bl	8000c74 <CRC_Init>



	uint32_t finalCRC[2] = {0};
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
	uint8_t buffer[10];
	char buffer1[] = "Kunal";
 8004f30:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <main+0xd8>)
 8004f32:	463b      	mov	r3, r7
 8004f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f38:	6018      	str	r0, [r3, #0]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	8019      	strh	r1, [r3, #0]




	finalCRC[1] = CRC_Compute_8Bit_Block(buffer1, 5);
 8004f3e:	463b      	mov	r3, r7
 8004f40:	2105      	movs	r1, #5
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb feb6 	bl	8000cb4 <CRC_Compute_8Bit_Block>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	61bb      	str	r3, [r7, #24]

	for(int i  = 0; i < 5; i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f50:	e00c      	b.n	8004f6c <main+0x60>
	{
		buffer[i] = buffer1[i];
 8004f52:	463a      	mov	r2, r7
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	4413      	add	r3, r2
 8004f58:	7819      	ldrb	r1, [r3, #0]
 8004f5a:	f107 0208 	add.w	r2, r7, #8
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	4413      	add	r3, r2
 8004f62:	460a      	mov	r2, r1
 8004f64:	701a      	strb	r2, [r3, #0]
	for(int i  = 0; i < 5; i++)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	3301      	adds	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	ddef      	ble.n	8004f52 <main+0x46>
	}

	for(int i = 0; i < 4; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	e00f      	b.n	8004f98 <main+0x8c>
	{
		buffer[i+5] = finalCRC[1] >> (8 * (3-i));
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f1c3 0303 	rsb	r3, r3, #3
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	40da      	lsrs	r2, r3
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	3305      	adds	r3, #5
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	3328      	adds	r3, #40	@ 0x28
 8004f8c:	443b      	add	r3, r7
 8004f8e:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(int i = 0; i < 4; i++)
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	3301      	adds	r3, #1
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	ddec      	ble.n	8004f78 <main+0x6c>



	for(;;)
	{
		printConsole("Value of your CRC = 0x%x \r\n",finalCRC[1]);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4811      	ldr	r0, [pc, #68]	@ (8004fe8 <main+0xdc>)
 8004fa4:	f7fb ff24 	bl	8000df0 <printConsole>
		printConsole("Final Packet: ");
 8004fa8:	4810      	ldr	r0, [pc, #64]	@ (8004fec <main+0xe0>)
 8004faa:	f7fb ff21 	bl	8000df0 <printConsole>
		for(int i = 0; i < 10; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e00b      	b.n	8004fcc <main+0xc0>
		{
			printConsole("0x%x,",buffer[i]);
 8004fb4:	f107 0208 	add.w	r2, r7, #8
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480b      	ldr	r0, [pc, #44]	@ (8004ff0 <main+0xe4>)
 8004fc2:	f7fb ff15 	bl	8000df0 <printConsole>
		for(int i = 0; i < 10; i++)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	ddf0      	ble.n	8004fb4 <main+0xa8>
		}
		printConsole("\r\n");
 8004fd2:	4808      	ldr	r0, [pc, #32]	@ (8004ff4 <main+0xe8>)
 8004fd4:	f7fb ff0c 	bl	8000df0 <printConsole>
		Delay_milli(750);
 8004fd8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8004ff8 <main+0xec>
 8004fdc:	f7ff ff72 	bl	8004ec4 <Delay_milli>
		printConsole("Value of your CRC = 0x%x \r\n",finalCRC[1]);
 8004fe0:	e7dd      	b.n	8004f9e <main+0x92>
 8004fe2:	bf00      	nop
 8004fe4:	08005c88 	.word	0x08005c88
 8004fe8:	08005c50 	.word	0x08005c50
 8004fec:	08005c6c 	.word	0x08005c6c
 8004ff0:	08005c7c 	.word	0x08005c7c
 8004ff4:	08005c84 	.word	0x08005c84
 8004ff8:	443b8000 	.word	0x443b8000

08004ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <_sbrk+0x5c>)
 8005006:	4b15      	ldr	r3, [pc, #84]	@ (800505c <_sbrk+0x60>)
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005010:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <_sbrk+0x64>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005018:	4b11      	ldr	r3, [pc, #68]	@ (8005060 <_sbrk+0x64>)
 800501a:	4a12      	ldr	r2, [pc, #72]	@ (8005064 <_sbrk+0x68>)
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800501e:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <_sbrk+0x64>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	429a      	cmp	r2, r3
 800502a:	d207      	bcs.n	800503c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800502c:	f000 f910 	bl	8005250 <__errno>
 8005030:	4603      	mov	r3, r0
 8005032:	220c      	movs	r2, #12
 8005034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005036:	f04f 33ff 	mov.w	r3, #4294967295
 800503a:	e009      	b.n	8005050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800503c:	4b08      	ldr	r3, [pc, #32]	@ (8005060 <_sbrk+0x64>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005042:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <_sbrk+0x64>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	4a05      	ldr	r2, [pc, #20]	@ (8005060 <_sbrk+0x64>)
 800504c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20020000 	.word	0x20020000
 800505c:	00000400 	.word	0x00000400
 8005060:	200006f8 	.word	0x200006f8
 8005064:	20000848 	.word	0x20000848

08005068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800506c:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <SystemInit+0x20>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	4a05      	ldr	r2, [pc, #20]	@ (8005088 <SystemInit+0x20>)
 8005074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	2302      	movs	r3, #2
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	2302      	movs	r3, #2
 80050a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80050a6:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d011      	beq.n	80050da <SystemCoreClockUpdate+0x4e>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d844      	bhi.n	8005146 <SystemCoreClockUpdate+0xba>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <SystemCoreClockUpdate+0x3e>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d004      	beq.n	80050d2 <SystemCoreClockUpdate+0x46>
 80050c8:	e03d      	b.n	8005146 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80050ca:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 80050cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <SystemCoreClockUpdate+0xf4>)
 80050ce:	601a      	str	r2, [r3, #0]
      break;
 80050d0:	e03d      	b.n	800514e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80050d2:	4b2a      	ldr	r3, [pc, #168]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 80050d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005184 <SystemCoreClockUpdate+0xf8>)
 80050d6:	601a      	str	r2, [r3, #0]
      break;
 80050d8:	e039      	b.n	800514e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80050da:	4b27      	ldr	r3, [pc, #156]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	0d9b      	lsrs	r3, r3, #22
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80050f6:	4a23      	ldr	r2, [pc, #140]	@ (8005184 <SystemCoreClockUpdate+0xf8>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 8005100:	6852      	ldr	r2, [r2, #4]
 8005102:	0992      	lsrs	r2, r2, #6
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e00b      	b.n	8005128 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005110:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <SystemCoreClockUpdate+0xf4>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 800511a:	6852      	ldr	r2, [r2, #4]
 800511c:	0992      	lsrs	r2, r2, #6
 800511e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	4a0e      	ldr	r2, [pc, #56]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 8005142:	6013      	str	r3, [r2, #0]
      break;
 8005144:	e003      	b.n	800514e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 8005148:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <SystemCoreClockUpdate+0xf4>)
 800514a:	601a      	str	r2, [r3, #0]
      break;
 800514c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <SystemCoreClockUpdate+0xec>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4a0b      	ldr	r2, [pc, #44]	@ (8005188 <SystemCoreClockUpdate+0xfc>)
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800515e:	4b07      	ldr	r3, [pc, #28]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	4a04      	ldr	r2, [pc, #16]	@ (800517c <SystemCoreClockUpdate+0xf0>)
 800516a:	6013      	str	r3, [r2, #0]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40023800 	.word	0x40023800
 800517c:	20000000 	.word	0x20000000
 8005180:	00f42400 	.word	0x00f42400
 8005184:	007a1200 	.word	0x007a1200
 8005188:	0800609c 	.word	0x0800609c

0800518c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800518c:	480d      	ldr	r0, [pc, #52]	@ (80051c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800518e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005190:	f7ff ff6a 	bl	8005068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005194:	480c      	ldr	r0, [pc, #48]	@ (80051c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005196:	490d      	ldr	r1, [pc, #52]	@ (80051cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005198:	4a0d      	ldr	r2, [pc, #52]	@ (80051d0 <LoopForever+0xe>)
  movs r3, #0
 800519a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800519c:	e002      	b.n	80051a4 <LoopCopyDataInit>

0800519e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800519e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051a2:	3304      	adds	r3, #4

080051a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051a8:	d3f9      	bcc.n	800519e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051aa:	4a0a      	ldr	r2, [pc, #40]	@ (80051d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051ac:	4c0a      	ldr	r4, [pc, #40]	@ (80051d8 <LoopForever+0x16>)
  movs r3, #0
 80051ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051b0:	e001      	b.n	80051b6 <LoopFillZerobss>

080051b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051b4:	3204      	adds	r2, #4

080051b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051b8:	d3fb      	bcc.n	80051b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051ba:	f000 f84f 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051be:	f7ff fea5 	bl	8004f0c <main>

080051c2 <LoopForever>:

LoopForever:
  b LoopForever
 80051c2:	e7fe      	b.n	80051c2 <LoopForever>
  ldr   r0, =_estack
 80051c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051cc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80051d0:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 80051d4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80051d8:	20000844 	.word	0x20000844

080051dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051dc:	e7fe      	b.n	80051dc <ADC_IRQHandler>

080051de <_vsniprintf_r>:
 80051de:	b530      	push	{r4, r5, lr}
 80051e0:	4614      	mov	r4, r2
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	b09b      	sub	sp, #108	@ 0x6c
 80051e6:	4605      	mov	r5, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	da05      	bge.n	80051f8 <_vsniprintf_r+0x1a>
 80051ec:	238b      	movs	r3, #139	@ 0x8b
 80051ee:	6003      	str	r3, [r0, #0]
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	b01b      	add	sp, #108	@ 0x6c
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005200:	bf14      	ite	ne
 8005202:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005206:	4623      	moveq	r3, r4
 8005208:	9302      	str	r3, [sp, #8]
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005210:	9100      	str	r1, [sp, #0]
 8005212:	9104      	str	r1, [sp, #16]
 8005214:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005218:	4669      	mov	r1, sp
 800521a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800521c:	f000 f9a6 	bl	800556c <_svfiprintf_r>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	bfbc      	itt	lt
 8005224:	238b      	movlt	r3, #139	@ 0x8b
 8005226:	602b      	strlt	r3, [r5, #0]
 8005228:	2c00      	cmp	r4, #0
 800522a:	d0e3      	beq.n	80051f4 <_vsniprintf_r+0x16>
 800522c:	9b00      	ldr	r3, [sp, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e7df      	b.n	80051f4 <_vsniprintf_r+0x16>

08005234 <vsniprintf>:
 8005234:	b507      	push	{r0, r1, r2, lr}
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	460a      	mov	r2, r1
 800523c:	4601      	mov	r1, r0
 800523e:	4803      	ldr	r0, [pc, #12]	@ (800524c <vsniprintf+0x18>)
 8005240:	6800      	ldr	r0, [r0, #0]
 8005242:	f7ff ffcc 	bl	80051de <_vsniprintf_r>
 8005246:	b003      	add	sp, #12
 8005248:	f85d fb04 	ldr.w	pc, [sp], #4
 800524c:	20000004 	.word	0x20000004

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000004 	.word	0x20000004

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	@ (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	@ (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	@ (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	@ (80052a0 <__libc_init_array+0x44>)
 8005270:	f000 fce2 	bl	8005c38 <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	080060f0 	.word	0x080060f0
 8005298:	080060f0 	.word	0x080060f0
 800529c:	080060f0 	.word	0x080060f0
 80052a0:	080060f4 	.word	0x080060f4

080052a4 <__retarget_lock_acquire_recursive>:
 80052a4:	4770      	bx	lr

080052a6 <__retarget_lock_release_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <memcpy>:
 80052a8:	440a      	add	r2, r1
 80052aa:	4291      	cmp	r1, r2
 80052ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80052b0:	d100      	bne.n	80052b4 <memcpy+0xc>
 80052b2:	4770      	bx	lr
 80052b4:	b510      	push	{r4, lr}
 80052b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052be:	4291      	cmp	r1, r2
 80052c0:	d1f9      	bne.n	80052b6 <memcpy+0xe>
 80052c2:	bd10      	pop	{r4, pc}

080052c4 <_free_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4605      	mov	r5, r0
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d041      	beq.n	8005350 <_free_r+0x8c>
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f0c      	subs	r4, r1, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	18e4      	addlt	r4, r4, r3
 80052d8:	f000 f8e0 	bl	800549c <__malloc_lock>
 80052dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005354 <_free_r+0x90>)
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	b933      	cbnz	r3, 80052f0 <_free_r+0x2c>
 80052e2:	6063      	str	r3, [r4, #4]
 80052e4:	6014      	str	r4, [r2, #0]
 80052e6:	4628      	mov	r0, r5
 80052e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ec:	f000 b8dc 	b.w	80054a8 <__malloc_unlock>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d908      	bls.n	8005306 <_free_r+0x42>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	1821      	adds	r1, r4, r0
 80052f8:	428b      	cmp	r3, r1
 80052fa:	bf01      	itttt	eq
 80052fc:	6819      	ldreq	r1, [r3, #0]
 80052fe:	685b      	ldreq	r3, [r3, #4]
 8005300:	1809      	addeq	r1, r1, r0
 8005302:	6021      	streq	r1, [r4, #0]
 8005304:	e7ed      	b.n	80052e2 <_free_r+0x1e>
 8005306:	461a      	mov	r2, r3
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	b10b      	cbz	r3, 8005310 <_free_r+0x4c>
 800530c:	42a3      	cmp	r3, r4
 800530e:	d9fa      	bls.n	8005306 <_free_r+0x42>
 8005310:	6811      	ldr	r1, [r2, #0]
 8005312:	1850      	adds	r0, r2, r1
 8005314:	42a0      	cmp	r0, r4
 8005316:	d10b      	bne.n	8005330 <_free_r+0x6c>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	4401      	add	r1, r0
 800531c:	1850      	adds	r0, r2, r1
 800531e:	4283      	cmp	r3, r0
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	d1e0      	bne.n	80052e6 <_free_r+0x22>
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	6053      	str	r3, [r2, #4]
 800532a:	4408      	add	r0, r1
 800532c:	6010      	str	r0, [r2, #0]
 800532e:	e7da      	b.n	80052e6 <_free_r+0x22>
 8005330:	d902      	bls.n	8005338 <_free_r+0x74>
 8005332:	230c      	movs	r3, #12
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	e7d6      	b.n	80052e6 <_free_r+0x22>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	1821      	adds	r1, r4, r0
 800533c:	428b      	cmp	r3, r1
 800533e:	bf04      	itt	eq
 8005340:	6819      	ldreq	r1, [r3, #0]
 8005342:	685b      	ldreq	r3, [r3, #4]
 8005344:	6063      	str	r3, [r4, #4]
 8005346:	bf04      	itt	eq
 8005348:	1809      	addeq	r1, r1, r0
 800534a:	6021      	streq	r1, [r4, #0]
 800534c:	6054      	str	r4, [r2, #4]
 800534e:	e7ca      	b.n	80052e6 <_free_r+0x22>
 8005350:	bd38      	pop	{r3, r4, r5, pc}
 8005352:	bf00      	nop
 8005354:	20000840 	.word	0x20000840

08005358 <sbrk_aligned>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4e0f      	ldr	r6, [pc, #60]	@ (8005398 <sbrk_aligned+0x40>)
 800535c:	460c      	mov	r4, r1
 800535e:	6831      	ldr	r1, [r6, #0]
 8005360:	4605      	mov	r5, r0
 8005362:	b911      	cbnz	r1, 800536a <sbrk_aligned+0x12>
 8005364:	f000 fba6 	bl	8005ab4 <_sbrk_r>
 8005368:	6030      	str	r0, [r6, #0]
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 fba1 	bl	8005ab4 <_sbrk_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d103      	bne.n	800537e <sbrk_aligned+0x26>
 8005376:	f04f 34ff 	mov.w	r4, #4294967295
 800537a:	4620      	mov	r0, r4
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	1cc4      	adds	r4, r0, #3
 8005380:	f024 0403 	bic.w	r4, r4, #3
 8005384:	42a0      	cmp	r0, r4
 8005386:	d0f8      	beq.n	800537a <sbrk_aligned+0x22>
 8005388:	1a21      	subs	r1, r4, r0
 800538a:	4628      	mov	r0, r5
 800538c:	f000 fb92 	bl	8005ab4 <_sbrk_r>
 8005390:	3001      	adds	r0, #1
 8005392:	d1f2      	bne.n	800537a <sbrk_aligned+0x22>
 8005394:	e7ef      	b.n	8005376 <sbrk_aligned+0x1e>
 8005396:	bf00      	nop
 8005398:	2000083c 	.word	0x2000083c

0800539c <_malloc_r>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	1ccd      	adds	r5, r1, #3
 80053a2:	f025 0503 	bic.w	r5, r5, #3
 80053a6:	3508      	adds	r5, #8
 80053a8:	2d0c      	cmp	r5, #12
 80053aa:	bf38      	it	cc
 80053ac:	250c      	movcc	r5, #12
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	4606      	mov	r6, r0
 80053b2:	db01      	blt.n	80053b8 <_malloc_r+0x1c>
 80053b4:	42a9      	cmp	r1, r5
 80053b6:	d904      	bls.n	80053c2 <_malloc_r+0x26>
 80053b8:	230c      	movs	r3, #12
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	2000      	movs	r0, #0
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005498 <_malloc_r+0xfc>
 80053c6:	f000 f869 	bl	800549c <__malloc_lock>
 80053ca:	f8d8 3000 	ldr.w	r3, [r8]
 80053ce:	461c      	mov	r4, r3
 80053d0:	bb44      	cbnz	r4, 8005424 <_malloc_r+0x88>
 80053d2:	4629      	mov	r1, r5
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ffbf 	bl	8005358 <sbrk_aligned>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	4604      	mov	r4, r0
 80053de:	d158      	bne.n	8005492 <_malloc_r+0xf6>
 80053e0:	f8d8 4000 	ldr.w	r4, [r8]
 80053e4:	4627      	mov	r7, r4
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	d143      	bne.n	8005472 <_malloc_r+0xd6>
 80053ea:	2c00      	cmp	r4, #0
 80053ec:	d04b      	beq.n	8005486 <_malloc_r+0xea>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	4639      	mov	r1, r7
 80053f2:	4630      	mov	r0, r6
 80053f4:	eb04 0903 	add.w	r9, r4, r3
 80053f8:	f000 fb5c 	bl	8005ab4 <_sbrk_r>
 80053fc:	4581      	cmp	r9, r0
 80053fe:	d142      	bne.n	8005486 <_malloc_r+0xea>
 8005400:	6821      	ldr	r1, [r4, #0]
 8005402:	1a6d      	subs	r5, r5, r1
 8005404:	4629      	mov	r1, r5
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff ffa6 	bl	8005358 <sbrk_aligned>
 800540c:	3001      	adds	r0, #1
 800540e:	d03a      	beq.n	8005486 <_malloc_r+0xea>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	442b      	add	r3, r5
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	f8d8 3000 	ldr.w	r3, [r8]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	bb62      	cbnz	r2, 8005478 <_malloc_r+0xdc>
 800541e:	f8c8 7000 	str.w	r7, [r8]
 8005422:	e00f      	b.n	8005444 <_malloc_r+0xa8>
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	1b52      	subs	r2, r2, r5
 8005428:	d420      	bmi.n	800546c <_malloc_r+0xd0>
 800542a:	2a0b      	cmp	r2, #11
 800542c:	d917      	bls.n	800545e <_malloc_r+0xc2>
 800542e:	1961      	adds	r1, r4, r5
 8005430:	42a3      	cmp	r3, r4
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	bf18      	it	ne
 8005436:	6059      	strne	r1, [r3, #4]
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	bf08      	it	eq
 800543c:	f8c8 1000 	streq.w	r1, [r8]
 8005440:	5162      	str	r2, [r4, r5]
 8005442:	604b      	str	r3, [r1, #4]
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f82f 	bl	80054a8 <__malloc_unlock>
 800544a:	f104 000b 	add.w	r0, r4, #11
 800544e:	1d23      	adds	r3, r4, #4
 8005450:	f020 0007 	bic.w	r0, r0, #7
 8005454:	1ac2      	subs	r2, r0, r3
 8005456:	bf1c      	itt	ne
 8005458:	1a1b      	subne	r3, r3, r0
 800545a:	50a3      	strne	r3, [r4, r2]
 800545c:	e7af      	b.n	80053be <_malloc_r+0x22>
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	42a3      	cmp	r3, r4
 8005462:	bf0c      	ite	eq
 8005464:	f8c8 2000 	streq.w	r2, [r8]
 8005468:	605a      	strne	r2, [r3, #4]
 800546a:	e7eb      	b.n	8005444 <_malloc_r+0xa8>
 800546c:	4623      	mov	r3, r4
 800546e:	6864      	ldr	r4, [r4, #4]
 8005470:	e7ae      	b.n	80053d0 <_malloc_r+0x34>
 8005472:	463c      	mov	r4, r7
 8005474:	687f      	ldr	r7, [r7, #4]
 8005476:	e7b6      	b.n	80053e6 <_malloc_r+0x4a>
 8005478:	461a      	mov	r2, r3
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	42a3      	cmp	r3, r4
 800547e:	d1fb      	bne.n	8005478 <_malloc_r+0xdc>
 8005480:	2300      	movs	r3, #0
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e7de      	b.n	8005444 <_malloc_r+0xa8>
 8005486:	230c      	movs	r3, #12
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f80c 	bl	80054a8 <__malloc_unlock>
 8005490:	e794      	b.n	80053bc <_malloc_r+0x20>
 8005492:	6005      	str	r5, [r0, #0]
 8005494:	e7d6      	b.n	8005444 <_malloc_r+0xa8>
 8005496:	bf00      	nop
 8005498:	20000840 	.word	0x20000840

0800549c <__malloc_lock>:
 800549c:	4801      	ldr	r0, [pc, #4]	@ (80054a4 <__malloc_lock+0x8>)
 800549e:	f7ff bf01 	b.w	80052a4 <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	20000838 	.word	0x20000838

080054a8 <__malloc_unlock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	@ (80054b0 <__malloc_unlock+0x8>)
 80054aa:	f7ff befc 	b.w	80052a6 <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000838 	.word	0x20000838

080054b4 <__ssputs_r>:
 80054b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	688e      	ldr	r6, [r1, #8]
 80054ba:	461f      	mov	r7, r3
 80054bc:	42be      	cmp	r6, r7
 80054be:	680b      	ldr	r3, [r1, #0]
 80054c0:	4682      	mov	sl, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	4690      	mov	r8, r2
 80054c6:	d82d      	bhi.n	8005524 <__ssputs_r+0x70>
 80054c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054d0:	d026      	beq.n	8005520 <__ssputs_r+0x6c>
 80054d2:	6965      	ldr	r5, [r4, #20]
 80054d4:	6909      	ldr	r1, [r1, #16]
 80054d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054da:	eba3 0901 	sub.w	r9, r3, r1
 80054de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054e2:	1c7b      	adds	r3, r7, #1
 80054e4:	444b      	add	r3, r9
 80054e6:	106d      	asrs	r5, r5, #1
 80054e8:	429d      	cmp	r5, r3
 80054ea:	bf38      	it	cc
 80054ec:	461d      	movcc	r5, r3
 80054ee:	0553      	lsls	r3, r2, #21
 80054f0:	d527      	bpl.n	8005542 <__ssputs_r+0x8e>
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7ff ff52 	bl	800539c <_malloc_r>
 80054f8:	4606      	mov	r6, r0
 80054fa:	b360      	cbz	r0, 8005556 <__ssputs_r+0xa2>
 80054fc:	6921      	ldr	r1, [r4, #16]
 80054fe:	464a      	mov	r2, r9
 8005500:	f7ff fed2 	bl	80052a8 <memcpy>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800550a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	6126      	str	r6, [r4, #16]
 8005512:	6165      	str	r5, [r4, #20]
 8005514:	444e      	add	r6, r9
 8005516:	eba5 0509 	sub.w	r5, r5, r9
 800551a:	6026      	str	r6, [r4, #0]
 800551c:	60a5      	str	r5, [r4, #8]
 800551e:	463e      	mov	r6, r7
 8005520:	42be      	cmp	r6, r7
 8005522:	d900      	bls.n	8005526 <__ssputs_r+0x72>
 8005524:	463e      	mov	r6, r7
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	4632      	mov	r2, r6
 800552a:	4641      	mov	r1, r8
 800552c:	f000 faa8 	bl	8005a80 <memmove>
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	1b9b      	subs	r3, r3, r6
 8005534:	60a3      	str	r3, [r4, #8]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	4433      	add	r3, r6
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	2000      	movs	r0, #0
 800553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005542:	462a      	mov	r2, r5
 8005544:	f000 fac6 	bl	8005ad4 <_realloc_r>
 8005548:	4606      	mov	r6, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d1e0      	bne.n	8005510 <__ssputs_r+0x5c>
 800554e:	6921      	ldr	r1, [r4, #16]
 8005550:	4650      	mov	r0, sl
 8005552:	f7ff feb7 	bl	80052c4 <_free_r>
 8005556:	230c      	movs	r3, #12
 8005558:	f8ca 3000 	str.w	r3, [sl]
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	e7e9      	b.n	800553e <__ssputs_r+0x8a>
	...

0800556c <_svfiprintf_r>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	4698      	mov	r8, r3
 8005572:	898b      	ldrh	r3, [r1, #12]
 8005574:	061b      	lsls	r3, r3, #24
 8005576:	b09d      	sub	sp, #116	@ 0x74
 8005578:	4607      	mov	r7, r0
 800557a:	460d      	mov	r5, r1
 800557c:	4614      	mov	r4, r2
 800557e:	d510      	bpl.n	80055a2 <_svfiprintf_r+0x36>
 8005580:	690b      	ldr	r3, [r1, #16]
 8005582:	b973      	cbnz	r3, 80055a2 <_svfiprintf_r+0x36>
 8005584:	2140      	movs	r1, #64	@ 0x40
 8005586:	f7ff ff09 	bl	800539c <_malloc_r>
 800558a:	6028      	str	r0, [r5, #0]
 800558c:	6128      	str	r0, [r5, #16]
 800558e:	b930      	cbnz	r0, 800559e <_svfiprintf_r+0x32>
 8005590:	230c      	movs	r3, #12
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	b01d      	add	sp, #116	@ 0x74
 800559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559e:	2340      	movs	r3, #64	@ 0x40
 80055a0:	616b      	str	r3, [r5, #20]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a6:	2320      	movs	r3, #32
 80055a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80055b0:	2330      	movs	r3, #48	@ 0x30
 80055b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005750 <_svfiprintf_r+0x1e4>
 80055b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ba:	f04f 0901 	mov.w	r9, #1
 80055be:	4623      	mov	r3, r4
 80055c0:	469a      	mov	sl, r3
 80055c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c6:	b10a      	cbz	r2, 80055cc <_svfiprintf_r+0x60>
 80055c8:	2a25      	cmp	r2, #37	@ 0x25
 80055ca:	d1f9      	bne.n	80055c0 <_svfiprintf_r+0x54>
 80055cc:	ebba 0b04 	subs.w	fp, sl, r4
 80055d0:	d00b      	beq.n	80055ea <_svfiprintf_r+0x7e>
 80055d2:	465b      	mov	r3, fp
 80055d4:	4622      	mov	r2, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	4638      	mov	r0, r7
 80055da:	f7ff ff6b 	bl	80054b4 <__ssputs_r>
 80055de:	3001      	adds	r0, #1
 80055e0:	f000 80a7 	beq.w	8005732 <_svfiprintf_r+0x1c6>
 80055e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e6:	445a      	add	r2, fp
 80055e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ea:	f89a 3000 	ldrb.w	r3, [sl]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 809f 	beq.w	8005732 <_svfiprintf_r+0x1c6>
 80055f4:	2300      	movs	r3, #0
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055fe:	f10a 0a01 	add.w	sl, sl, #1
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	9307      	str	r3, [sp, #28]
 8005606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800560a:	931a      	str	r3, [sp, #104]	@ 0x68
 800560c:	4654      	mov	r4, sl
 800560e:	2205      	movs	r2, #5
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	484e      	ldr	r0, [pc, #312]	@ (8005750 <_svfiprintf_r+0x1e4>)
 8005616:	f7fa fde3 	bl	80001e0 <memchr>
 800561a:	9a04      	ldr	r2, [sp, #16]
 800561c:	b9d8      	cbnz	r0, 8005656 <_svfiprintf_r+0xea>
 800561e:	06d0      	lsls	r0, r2, #27
 8005620:	bf44      	itt	mi
 8005622:	2320      	movmi	r3, #32
 8005624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005628:	0711      	lsls	r1, r2, #28
 800562a:	bf44      	itt	mi
 800562c:	232b      	movmi	r3, #43	@ 0x2b
 800562e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005632:	f89a 3000 	ldrb.w	r3, [sl]
 8005636:	2b2a      	cmp	r3, #42	@ 0x2a
 8005638:	d015      	beq.n	8005666 <_svfiprintf_r+0xfa>
 800563a:	9a07      	ldr	r2, [sp, #28]
 800563c:	4654      	mov	r4, sl
 800563e:	2000      	movs	r0, #0
 8005640:	f04f 0c0a 	mov.w	ip, #10
 8005644:	4621      	mov	r1, r4
 8005646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800564a:	3b30      	subs	r3, #48	@ 0x30
 800564c:	2b09      	cmp	r3, #9
 800564e:	d94b      	bls.n	80056e8 <_svfiprintf_r+0x17c>
 8005650:	b1b0      	cbz	r0, 8005680 <_svfiprintf_r+0x114>
 8005652:	9207      	str	r2, [sp, #28]
 8005654:	e014      	b.n	8005680 <_svfiprintf_r+0x114>
 8005656:	eba0 0308 	sub.w	r3, r0, r8
 800565a:	fa09 f303 	lsl.w	r3, r9, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	46a2      	mov	sl, r4
 8005664:	e7d2      	b.n	800560c <_svfiprintf_r+0xa0>
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	9103      	str	r1, [sp, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	bfbb      	ittet	lt
 8005672:	425b      	neglt	r3, r3
 8005674:	f042 0202 	orrlt.w	r2, r2, #2
 8005678:	9307      	strge	r3, [sp, #28]
 800567a:	9307      	strlt	r3, [sp, #28]
 800567c:	bfb8      	it	lt
 800567e:	9204      	strlt	r2, [sp, #16]
 8005680:	7823      	ldrb	r3, [r4, #0]
 8005682:	2b2e      	cmp	r3, #46	@ 0x2e
 8005684:	d10a      	bne.n	800569c <_svfiprintf_r+0x130>
 8005686:	7863      	ldrb	r3, [r4, #1]
 8005688:	2b2a      	cmp	r3, #42	@ 0x2a
 800568a:	d132      	bne.n	80056f2 <_svfiprintf_r+0x186>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005698:	3402      	adds	r4, #2
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005760 <_svfiprintf_r+0x1f4>
 80056a0:	7821      	ldrb	r1, [r4, #0]
 80056a2:	2203      	movs	r2, #3
 80056a4:	4650      	mov	r0, sl
 80056a6:	f7fa fd9b 	bl	80001e0 <memchr>
 80056aa:	b138      	cbz	r0, 80056bc <_svfiprintf_r+0x150>
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	eba0 000a 	sub.w	r0, r0, sl
 80056b2:	2240      	movs	r2, #64	@ 0x40
 80056b4:	4082      	lsls	r2, r0
 80056b6:	4313      	orrs	r3, r2
 80056b8:	3401      	adds	r4, #1
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c0:	4824      	ldr	r0, [pc, #144]	@ (8005754 <_svfiprintf_r+0x1e8>)
 80056c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056c6:	2206      	movs	r2, #6
 80056c8:	f7fa fd8a 	bl	80001e0 <memchr>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d036      	beq.n	800573e <_svfiprintf_r+0x1d2>
 80056d0:	4b21      	ldr	r3, [pc, #132]	@ (8005758 <_svfiprintf_r+0x1ec>)
 80056d2:	bb1b      	cbnz	r3, 800571c <_svfiprintf_r+0x1b0>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	3307      	adds	r3, #7
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	3308      	adds	r3, #8
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e2:	4433      	add	r3, r6
 80056e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e6:	e76a      	b.n	80055be <_svfiprintf_r+0x52>
 80056e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ec:	460c      	mov	r4, r1
 80056ee:	2001      	movs	r0, #1
 80056f0:	e7a8      	b.n	8005644 <_svfiprintf_r+0xd8>
 80056f2:	2300      	movs	r3, #0
 80056f4:	3401      	adds	r4, #1
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	4619      	mov	r1, r3
 80056fa:	f04f 0c0a 	mov.w	ip, #10
 80056fe:	4620      	mov	r0, r4
 8005700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005704:	3a30      	subs	r2, #48	@ 0x30
 8005706:	2a09      	cmp	r2, #9
 8005708:	d903      	bls.n	8005712 <_svfiprintf_r+0x1a6>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0c6      	beq.n	800569c <_svfiprintf_r+0x130>
 800570e:	9105      	str	r1, [sp, #20]
 8005710:	e7c4      	b.n	800569c <_svfiprintf_r+0x130>
 8005712:	fb0c 2101 	mla	r1, ip, r1, r2
 8005716:	4604      	mov	r4, r0
 8005718:	2301      	movs	r3, #1
 800571a:	e7f0      	b.n	80056fe <_svfiprintf_r+0x192>
 800571c:	ab03      	add	r3, sp, #12
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	462a      	mov	r2, r5
 8005722:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <_svfiprintf_r+0x1f0>)
 8005724:	a904      	add	r1, sp, #16
 8005726:	4638      	mov	r0, r7
 8005728:	f3af 8000 	nop.w
 800572c:	1c42      	adds	r2, r0, #1
 800572e:	4606      	mov	r6, r0
 8005730:	d1d6      	bne.n	80056e0 <_svfiprintf_r+0x174>
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	065b      	lsls	r3, r3, #25
 8005736:	f53f af2d 	bmi.w	8005594 <_svfiprintf_r+0x28>
 800573a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800573c:	e72c      	b.n	8005598 <_svfiprintf_r+0x2c>
 800573e:	ab03      	add	r3, sp, #12
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	462a      	mov	r2, r5
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <_svfiprintf_r+0x1f0>)
 8005746:	a904      	add	r1, sp, #16
 8005748:	4638      	mov	r0, r7
 800574a:	f000 f879 	bl	8005840 <_printf_i>
 800574e:	e7ed      	b.n	800572c <_svfiprintf_r+0x1c0>
 8005750:	080060b4 	.word	0x080060b4
 8005754:	080060be 	.word	0x080060be
 8005758:	00000000 	.word	0x00000000
 800575c:	080054b5 	.word	0x080054b5
 8005760:	080060ba 	.word	0x080060ba

08005764 <_printf_common>:
 8005764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	4616      	mov	r6, r2
 800576a:	4698      	mov	r8, r3
 800576c:	688a      	ldr	r2, [r1, #8]
 800576e:	690b      	ldr	r3, [r1, #16]
 8005770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005774:	4293      	cmp	r3, r2
 8005776:	bfb8      	it	lt
 8005778:	4613      	movlt	r3, r2
 800577a:	6033      	str	r3, [r6, #0]
 800577c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005780:	4607      	mov	r7, r0
 8005782:	460c      	mov	r4, r1
 8005784:	b10a      	cbz	r2, 800578a <_printf_common+0x26>
 8005786:	3301      	adds	r3, #1
 8005788:	6033      	str	r3, [r6, #0]
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	0699      	lsls	r1, r3, #26
 800578e:	bf42      	ittt	mi
 8005790:	6833      	ldrmi	r3, [r6, #0]
 8005792:	3302      	addmi	r3, #2
 8005794:	6033      	strmi	r3, [r6, #0]
 8005796:	6825      	ldr	r5, [r4, #0]
 8005798:	f015 0506 	ands.w	r5, r5, #6
 800579c:	d106      	bne.n	80057ac <_printf_common+0x48>
 800579e:	f104 0a19 	add.w	sl, r4, #25
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	6832      	ldr	r2, [r6, #0]
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	42ab      	cmp	r3, r5
 80057aa:	dc26      	bgt.n	80057fa <_printf_common+0x96>
 80057ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	3b00      	subs	r3, #0
 80057b4:	bf18      	it	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	0692      	lsls	r2, r2, #26
 80057ba:	d42b      	bmi.n	8005814 <_printf_common+0xb0>
 80057bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057c0:	4641      	mov	r1, r8
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c8      	blx	r9
 80057c6:	3001      	adds	r0, #1
 80057c8:	d01e      	beq.n	8005808 <_printf_common+0xa4>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	f003 0306 	and.w	r3, r3, #6
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf02      	ittt	eq
 80057d6:	68e5      	ldreq	r5, [r4, #12]
 80057d8:	6833      	ldreq	r3, [r6, #0]
 80057da:	1aed      	subeq	r5, r5, r3
 80057dc:	68a3      	ldr	r3, [r4, #8]
 80057de:	bf0c      	ite	eq
 80057e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e4:	2500      	movne	r5, #0
 80057e6:	4293      	cmp	r3, r2
 80057e8:	bfc4      	itt	gt
 80057ea:	1a9b      	subgt	r3, r3, r2
 80057ec:	18ed      	addgt	r5, r5, r3
 80057ee:	2600      	movs	r6, #0
 80057f0:	341a      	adds	r4, #26
 80057f2:	42b5      	cmp	r5, r6
 80057f4:	d11a      	bne.n	800582c <_printf_common+0xc8>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e008      	b.n	800580c <_printf_common+0xa8>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4652      	mov	r2, sl
 80057fe:	4641      	mov	r1, r8
 8005800:	4638      	mov	r0, r7
 8005802:	47c8      	blx	r9
 8005804:	3001      	adds	r0, #1
 8005806:	d103      	bne.n	8005810 <_printf_common+0xac>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	3501      	adds	r5, #1
 8005812:	e7c6      	b.n	80057a2 <_printf_common+0x3e>
 8005814:	18e1      	adds	r1, r4, r3
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	2030      	movs	r0, #48	@ 0x30
 800581a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800581e:	4422      	add	r2, r4
 8005820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005828:	3302      	adds	r3, #2
 800582a:	e7c7      	b.n	80057bc <_printf_common+0x58>
 800582c:	2301      	movs	r3, #1
 800582e:	4622      	mov	r2, r4
 8005830:	4641      	mov	r1, r8
 8005832:	4638      	mov	r0, r7
 8005834:	47c8      	blx	r9
 8005836:	3001      	adds	r0, #1
 8005838:	d0e6      	beq.n	8005808 <_printf_common+0xa4>
 800583a:	3601      	adds	r6, #1
 800583c:	e7d9      	b.n	80057f2 <_printf_common+0x8e>
	...

08005840 <_printf_i>:
 8005840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	7e0f      	ldrb	r7, [r1, #24]
 8005846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005848:	2f78      	cmp	r7, #120	@ 0x78
 800584a:	4691      	mov	r9, r2
 800584c:	4680      	mov	r8, r0
 800584e:	460c      	mov	r4, r1
 8005850:	469a      	mov	sl, r3
 8005852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005856:	d807      	bhi.n	8005868 <_printf_i+0x28>
 8005858:	2f62      	cmp	r7, #98	@ 0x62
 800585a:	d80a      	bhi.n	8005872 <_printf_i+0x32>
 800585c:	2f00      	cmp	r7, #0
 800585e:	f000 80d2 	beq.w	8005a06 <_printf_i+0x1c6>
 8005862:	2f58      	cmp	r7, #88	@ 0x58
 8005864:	f000 80b9 	beq.w	80059da <_printf_i+0x19a>
 8005868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800586c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005870:	e03a      	b.n	80058e8 <_printf_i+0xa8>
 8005872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005876:	2b15      	cmp	r3, #21
 8005878:	d8f6      	bhi.n	8005868 <_printf_i+0x28>
 800587a:	a101      	add	r1, pc, #4	@ (adr r1, 8005880 <_printf_i+0x40>)
 800587c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058ed 	.word	0x080058ed
 8005888:	08005869 	.word	0x08005869
 800588c:	08005869 	.word	0x08005869
 8005890:	08005869 	.word	0x08005869
 8005894:	08005869 	.word	0x08005869
 8005898:	080058ed 	.word	0x080058ed
 800589c:	08005869 	.word	0x08005869
 80058a0:	08005869 	.word	0x08005869
 80058a4:	08005869 	.word	0x08005869
 80058a8:	08005869 	.word	0x08005869
 80058ac:	080059ed 	.word	0x080059ed
 80058b0:	08005917 	.word	0x08005917
 80058b4:	080059a7 	.word	0x080059a7
 80058b8:	08005869 	.word	0x08005869
 80058bc:	08005869 	.word	0x08005869
 80058c0:	08005a0f 	.word	0x08005a0f
 80058c4:	08005869 	.word	0x08005869
 80058c8:	08005917 	.word	0x08005917
 80058cc:	08005869 	.word	0x08005869
 80058d0:	08005869 	.word	0x08005869
 80058d4:	080059af 	.word	0x080059af
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6032      	str	r2, [r6, #0]
 80058e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058e8:	2301      	movs	r3, #1
 80058ea:	e09d      	b.n	8005a28 <_printf_i+0x1e8>
 80058ec:	6833      	ldr	r3, [r6, #0]
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	1d19      	adds	r1, r3, #4
 80058f2:	6031      	str	r1, [r6, #0]
 80058f4:	0606      	lsls	r6, r0, #24
 80058f6:	d501      	bpl.n	80058fc <_printf_i+0xbc>
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	e003      	b.n	8005904 <_printf_i+0xc4>
 80058fc:	0645      	lsls	r5, r0, #25
 80058fe:	d5fb      	bpl.n	80058f8 <_printf_i+0xb8>
 8005900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005904:	2d00      	cmp	r5, #0
 8005906:	da03      	bge.n	8005910 <_printf_i+0xd0>
 8005908:	232d      	movs	r3, #45	@ 0x2d
 800590a:	426d      	negs	r5, r5
 800590c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005910:	4859      	ldr	r0, [pc, #356]	@ (8005a78 <_printf_i+0x238>)
 8005912:	230a      	movs	r3, #10
 8005914:	e011      	b.n	800593a <_printf_i+0xfa>
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	0608      	lsls	r0, r1, #24
 800591c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005920:	d402      	bmi.n	8005928 <_printf_i+0xe8>
 8005922:	0649      	lsls	r1, r1, #25
 8005924:	bf48      	it	mi
 8005926:	b2ad      	uxthmi	r5, r5
 8005928:	2f6f      	cmp	r7, #111	@ 0x6f
 800592a:	4853      	ldr	r0, [pc, #332]	@ (8005a78 <_printf_i+0x238>)
 800592c:	6033      	str	r3, [r6, #0]
 800592e:	bf14      	ite	ne
 8005930:	230a      	movne	r3, #10
 8005932:	2308      	moveq	r3, #8
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800593a:	6866      	ldr	r6, [r4, #4]
 800593c:	60a6      	str	r6, [r4, #8]
 800593e:	2e00      	cmp	r6, #0
 8005940:	bfa2      	ittt	ge
 8005942:	6821      	ldrge	r1, [r4, #0]
 8005944:	f021 0104 	bicge.w	r1, r1, #4
 8005948:	6021      	strge	r1, [r4, #0]
 800594a:	b90d      	cbnz	r5, 8005950 <_printf_i+0x110>
 800594c:	2e00      	cmp	r6, #0
 800594e:	d04b      	beq.n	80059e8 <_printf_i+0x1a8>
 8005950:	4616      	mov	r6, r2
 8005952:	fbb5 f1f3 	udiv	r1, r5, r3
 8005956:	fb03 5711 	mls	r7, r3, r1, r5
 800595a:	5dc7      	ldrb	r7, [r0, r7]
 800595c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005960:	462f      	mov	r7, r5
 8005962:	42bb      	cmp	r3, r7
 8005964:	460d      	mov	r5, r1
 8005966:	d9f4      	bls.n	8005952 <_printf_i+0x112>
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10b      	bne.n	8005984 <_printf_i+0x144>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	07df      	lsls	r7, r3, #31
 8005970:	d508      	bpl.n	8005984 <_printf_i+0x144>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4299      	cmp	r1, r3
 8005978:	bfde      	ittt	le
 800597a:	2330      	movle	r3, #48	@ 0x30
 800597c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005984:	1b92      	subs	r2, r2, r6
 8005986:	6122      	str	r2, [r4, #16]
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	464b      	mov	r3, r9
 800598e:	aa03      	add	r2, sp, #12
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fee6 	bl	8005764 <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	d14a      	bne.n	8005a32 <_printf_i+0x1f2>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f043 0320 	orr.w	r3, r3, #32
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	4833      	ldr	r0, [pc, #204]	@ (8005a7c <_printf_i+0x23c>)
 80059b0:	2778      	movs	r7, #120	@ 0x78
 80059b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	6831      	ldr	r1, [r6, #0]
 80059ba:	061f      	lsls	r7, r3, #24
 80059bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80059c0:	d402      	bmi.n	80059c8 <_printf_i+0x188>
 80059c2:	065f      	lsls	r7, r3, #25
 80059c4:	bf48      	it	mi
 80059c6:	b2ad      	uxthmi	r5, r5
 80059c8:	6031      	str	r1, [r6, #0]
 80059ca:	07d9      	lsls	r1, r3, #31
 80059cc:	bf44      	itt	mi
 80059ce:	f043 0320 	orrmi.w	r3, r3, #32
 80059d2:	6023      	strmi	r3, [r4, #0]
 80059d4:	b11d      	cbz	r5, 80059de <_printf_i+0x19e>
 80059d6:	2310      	movs	r3, #16
 80059d8:	e7ac      	b.n	8005934 <_printf_i+0xf4>
 80059da:	4827      	ldr	r0, [pc, #156]	@ (8005a78 <_printf_i+0x238>)
 80059dc:	e7e9      	b.n	80059b2 <_printf_i+0x172>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f023 0320 	bic.w	r3, r3, #32
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	e7f6      	b.n	80059d6 <_printf_i+0x196>
 80059e8:	4616      	mov	r6, r2
 80059ea:	e7bd      	b.n	8005968 <_printf_i+0x128>
 80059ec:	6833      	ldr	r3, [r6, #0]
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	6961      	ldr	r1, [r4, #20]
 80059f2:	1d18      	adds	r0, r3, #4
 80059f4:	6030      	str	r0, [r6, #0]
 80059f6:	062e      	lsls	r6, r5, #24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	d501      	bpl.n	8005a00 <_printf_i+0x1c0>
 80059fc:	6019      	str	r1, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <_printf_i+0x1c6>
 8005a00:	0668      	lsls	r0, r5, #25
 8005a02:	d5fb      	bpl.n	80059fc <_printf_i+0x1bc>
 8005a04:	8019      	strh	r1, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	e7bc      	b.n	8005988 <_printf_i+0x148>
 8005a0e:	6833      	ldr	r3, [r6, #0]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	6032      	str	r2, [r6, #0]
 8005a14:	681e      	ldr	r6, [r3, #0]
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7fa fbe0 	bl	80001e0 <memchr>
 8005a20:	b108      	cbz	r0, 8005a26 <_printf_i+0x1e6>
 8005a22:	1b80      	subs	r0, r0, r6
 8005a24:	6060      	str	r0, [r4, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a30:	e7aa      	b.n	8005988 <_printf_i+0x148>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	4632      	mov	r2, r6
 8005a36:	4649      	mov	r1, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	47d0      	blx	sl
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d0ad      	beq.n	800599c <_printf_i+0x15c>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	079b      	lsls	r3, r3, #30
 8005a44:	d413      	bmi.n	8005a6e <_printf_i+0x22e>
 8005a46:	68e0      	ldr	r0, [r4, #12]
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	4298      	cmp	r0, r3
 8005a4c:	bfb8      	it	lt
 8005a4e:	4618      	movlt	r0, r3
 8005a50:	e7a6      	b.n	80059a0 <_printf_i+0x160>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4632      	mov	r2, r6
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d09d      	beq.n	800599c <_printf_i+0x15c>
 8005a60:	3501      	adds	r5, #1
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	9903      	ldr	r1, [sp, #12]
 8005a66:	1a5b      	subs	r3, r3, r1
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	dcf2      	bgt.n	8005a52 <_printf_i+0x212>
 8005a6c:	e7eb      	b.n	8005a46 <_printf_i+0x206>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	f104 0619 	add.w	r6, r4, #25
 8005a74:	e7f5      	b.n	8005a62 <_printf_i+0x222>
 8005a76:	bf00      	nop
 8005a78:	080060c5 	.word	0x080060c5
 8005a7c:	080060d6 	.word	0x080060d6

08005a80 <memmove>:
 8005a80:	4288      	cmp	r0, r1
 8005a82:	b510      	push	{r4, lr}
 8005a84:	eb01 0402 	add.w	r4, r1, r2
 8005a88:	d902      	bls.n	8005a90 <memmove+0x10>
 8005a8a:	4284      	cmp	r4, r0
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	d807      	bhi.n	8005aa0 <memmove+0x20>
 8005a90:	1e43      	subs	r3, r0, #1
 8005a92:	42a1      	cmp	r1, r4
 8005a94:	d008      	beq.n	8005aa8 <memmove+0x28>
 8005a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a9e:	e7f8      	b.n	8005a92 <memmove+0x12>
 8005aa0:	4402      	add	r2, r0
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	428a      	cmp	r2, r1
 8005aa6:	d100      	bne.n	8005aaa <memmove+0x2a>
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab2:	e7f7      	b.n	8005aa4 <memmove+0x24>

08005ab4 <_sbrk_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d06      	ldr	r5, [pc, #24]	@ (8005ad0 <_sbrk_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7ff fa9c 	bl	8004ffc <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_sbrk_r+0x1a>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_sbrk_r+0x1a>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000834 	.word	0x20000834

08005ad4 <_realloc_r>:
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4615      	mov	r5, r2
 8005adc:	460c      	mov	r4, r1
 8005ade:	b921      	cbnz	r1, 8005aea <_realloc_r+0x16>
 8005ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	f7ff bc59 	b.w	800539c <_malloc_r>
 8005aea:	b92a      	cbnz	r2, 8005af8 <_realloc_r+0x24>
 8005aec:	f7ff fbea 	bl	80052c4 <_free_r>
 8005af0:	2400      	movs	r4, #0
 8005af2:	4620      	mov	r0, r4
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af8:	f000 f81a 	bl	8005b30 <_malloc_usable_size_r>
 8005afc:	4285      	cmp	r5, r0
 8005afe:	4606      	mov	r6, r0
 8005b00:	d802      	bhi.n	8005b08 <_realloc_r+0x34>
 8005b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b06:	d8f4      	bhi.n	8005af2 <_realloc_r+0x1e>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fc46 	bl	800539c <_malloc_r>
 8005b10:	4607      	mov	r7, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0ec      	beq.n	8005af0 <_realloc_r+0x1c>
 8005b16:	42b5      	cmp	r5, r6
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	bf28      	it	cs
 8005b1e:	4632      	movcs	r2, r6
 8005b20:	f7ff fbc2 	bl	80052a8 <memcpy>
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7ff fbcc 	bl	80052c4 <_free_r>
 8005b2c:	463c      	mov	r4, r7
 8005b2e:	e7e0      	b.n	8005af2 <_realloc_r+0x1e>

08005b30 <_malloc_usable_size_r>:
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f18      	subs	r0, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfbc      	itt	lt
 8005b3a:	580b      	ldrlt	r3, [r1, r0]
 8005b3c:	18c0      	addlt	r0, r0, r3
 8005b3e:	4770      	bx	lr

08005b40 <ceil>:
 8005b40:	ec51 0b10 	vmov	r0, r1, d0
 8005b44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005b50:	2e13      	cmp	r6, #19
 8005b52:	460c      	mov	r4, r1
 8005b54:	4605      	mov	r5, r0
 8005b56:	4680      	mov	r8, r0
 8005b58:	dc2e      	bgt.n	8005bb8 <ceil+0x78>
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	da11      	bge.n	8005b82 <ceil+0x42>
 8005b5e:	a332      	add	r3, pc, #200	@ (adr r3, 8005c28 <ceil+0xe8>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fb92 	bl	800028c <__adddf3>
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f7fa ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 8005b70:	b120      	cbz	r0, 8005b7c <ceil+0x3c>
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	db4f      	blt.n	8005c16 <ceil+0xd6>
 8005b76:	4325      	orrs	r5, r4
 8005b78:	d151      	bne.n	8005c1e <ceil+0xde>
 8005b7a:	462c      	mov	r4, r5
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	e023      	b.n	8005bca <ceil+0x8a>
 8005b82:	4f2b      	ldr	r7, [pc, #172]	@ (8005c30 <ceil+0xf0>)
 8005b84:	4137      	asrs	r7, r6
 8005b86:	ea01 0307 	and.w	r3, r1, r7
 8005b8a:	4303      	orrs	r3, r0
 8005b8c:	d01d      	beq.n	8005bca <ceil+0x8a>
 8005b8e:	a326      	add	r3, pc, #152	@ (adr r3, 8005c28 <ceil+0xe8>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fb7a 	bl	800028c <__adddf3>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f7fa ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0eb      	beq.n	8005b7c <ceil+0x3c>
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	bfc2      	ittt	gt
 8005ba8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005bac:	4133      	asrgt	r3, r6
 8005bae:	18e4      	addgt	r4, r4, r3
 8005bb0:	ea24 0407 	bic.w	r4, r4, r7
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	e7e1      	b.n	8005b7c <ceil+0x3c>
 8005bb8:	2e33      	cmp	r6, #51	@ 0x33
 8005bba:	dd0a      	ble.n	8005bd2 <ceil+0x92>
 8005bbc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005bc0:	d103      	bne.n	8005bca <ceil+0x8a>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	f7fa fb61 	bl	800028c <__adddf3>
 8005bca:	ec41 0b10 	vmov	d0, r0, r1
 8005bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005bda:	40df      	lsrs	r7, r3
 8005bdc:	4238      	tst	r0, r7
 8005bde:	d0f4      	beq.n	8005bca <ceil+0x8a>
 8005be0:	a311      	add	r3, pc, #68	@ (adr r3, 8005c28 <ceil+0xe8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fb51 	bl	800028c <__adddf3>
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f7fa ff93 	bl	8000b18 <__aeabi_dcmpgt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d0c2      	beq.n	8005b7c <ceil+0x3c>
 8005bf6:	2c00      	cmp	r4, #0
 8005bf8:	dd0a      	ble.n	8005c10 <ceil+0xd0>
 8005bfa:	2e14      	cmp	r6, #20
 8005bfc:	d101      	bne.n	8005c02 <ceil+0xc2>
 8005bfe:	3401      	adds	r4, #1
 8005c00:	e006      	b.n	8005c10 <ceil+0xd0>
 8005c02:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005c06:	2301      	movs	r3, #1
 8005c08:	40b3      	lsls	r3, r6
 8005c0a:	441d      	add	r5, r3
 8005c0c:	45a8      	cmp	r8, r5
 8005c0e:	d8f6      	bhi.n	8005bfe <ceil+0xbe>
 8005c10:	ea25 0507 	bic.w	r5, r5, r7
 8005c14:	e7b2      	b.n	8005b7c <ceil+0x3c>
 8005c16:	2500      	movs	r5, #0
 8005c18:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005c1c:	e7ae      	b.n	8005b7c <ceil+0x3c>
 8005c1e:	4c05      	ldr	r4, [pc, #20]	@ (8005c34 <ceil+0xf4>)
 8005c20:	2500      	movs	r5, #0
 8005c22:	e7ab      	b.n	8005b7c <ceil+0x3c>
 8005c24:	f3af 8000 	nop.w
 8005c28:	8800759c 	.word	0x8800759c
 8005c2c:	7e37e43c 	.word	0x7e37e43c
 8005c30:	000fffff 	.word	0x000fffff
 8005c34:	3ff00000 	.word	0x3ff00000

08005c38 <_init>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr

08005c44 <_fini>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr
