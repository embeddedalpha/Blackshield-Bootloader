
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006518  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .app_section  00000000  08010000  08010000  00008054  2**0
                  CONTENTS
  3 .rodata       000004a0  080066a8  080066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006b48  08006b48  00008054  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08006b50  08006b50  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006b50  08006b50  00007b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000054  20000000  08006b58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00008054  2**0
                  CONTENTS
 11 .bss          00000af0  20000054  20000054  00008054  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b44  20000b44  00008054  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b499  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014aa  00000000  00000000  0001351d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000420  00000000  00000000  000149c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000315  00000000  00000000  00014de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000016f9  00000000  00000000  000150fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007d09  00000000  00000000  000167f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009036c  00000000  00000000  0001e4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000ae86b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000015f8  00000000  00000000  000ae8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  000afea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006690 	.word	0x08006690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08006690 	.word	0x08006690

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <CRC_Init>:


#include "CRC.h"

void CRC_Init(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <CRC_Init+0x1c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <CRC_Init+0x1c>)
 8000c32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c36:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <CRC_Reset>:

void CRC_Reset(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	CRC->CR |= CRC_CR_RESET;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <CRC_Reset+0x1c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <CRC_Reset+0x1c>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6093      	str	r3, [r2, #8]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023000 	.word	0x40023000

08000c68 <CRC_Compute_8Bit_Block>:
	CRC->DR = (uint32_t)(word);
	return (CRC->DR);
}

uint32_t CRC_Compute_8Bit_Block(volatile uint8_t *wordBlock, size_t length)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	uint8_t temp=0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	72fb      	strb	r3, [r7, #11]
	CRC_Reset();
 8000c76:	f7ff ffe7 	bl	8000c48 <CRC_Reset>
	for(uint32_t i = 0; i < length; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e00a      	b.n	8000c96 <CRC_Compute_8Bit_Block+0x2e>
	{
		temp = wordBlock[i];
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	72fb      	strb	r3, [r7, #11]
		CRC -> DR = 0x00000000 | (temp);
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <CRC_Compute_8Bit_Block+0x44>)
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 0; i < length; i++)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3f0      	bcc.n	8000c80 <CRC_Compute_8Bit_Block+0x18>

	}
	return (CRC -> DR);
 8000c9e:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <CRC_Compute_8Bit_Block+0x44>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023000 	.word	0x40023000

08000cb0 <Console_IRQ>:
//
//        rx_flag = 1; // Set the flag indicating data reception is complete
//    }
//}

void Console_IRQ(void){
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    if (rx_get_flag == 1) { // Check if reception is active
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <Console_IRQ+0x74>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d12d      	bne.n	8000d18 <Console_IRQ+0x68>
        (void)UART4->SR; // Read the status register to clear flags
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <Console_IRQ+0x78>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
        (void)UART4->DR; // Read the data register to clear flags
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <Console_IRQ+0x78>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop

        __disable_irq(); // Disable interrupts to safely update DMA configurations

        // Disable DMA stream
        serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <Console_IRQ+0x7c>)
 8000cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <Console_IRQ+0x7c>)
 8000cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

        // Calculate the length of received data
        RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <Console_IRQ+0x7c>)
 8000cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <Console_IRQ+0x80>)
 8000ce6:	601a      	str	r2, [r3, #0]

        // Prevent buffer overflow
        if (RX_Length > RX_Buffer_Length) {
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <Console_IRQ+0x80>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2bc8      	cmp	r3, #200	@ 0xc8
 8000cee:	dd02      	ble.n	8000cf6 <Console_IRQ+0x46>
            RX_Length = RX_Buffer_Length;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <Console_IRQ+0x80>)
 8000cf2:	22c8      	movs	r2, #200	@ 0xc8
 8000cf4:	601a      	str	r2, [r3, #0]
        }

        // Reset DMA stream for the next reception
        serial.USART_DMA_Instance_RX.Request.Stream->NDTR = RX_Buffer_Length;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <Console_IRQ+0x7c>)
 8000cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cfa:	22c8      	movs	r2, #200	@ 0xc8
 8000cfc:	605a      	str	r2, [r3, #4]
        serial.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <Console_IRQ+0x7c>)
 8000d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <Console_IRQ+0x7c>)
 8000d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d0e:	b662      	cpsie	i
}
 8000d10:	bf00      	nop

        __enable_irq(); // Re-enable interrupts

        rx_flag = 1; // Set the flag indicating data reception is complete
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <Console_IRQ+0x84>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
    }
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000070 	.word	0x20000070
 8000d28:	40004c00 	.word	0x40004c00
 8000d2c:	20000144 	.word	0x20000144
 8000d30:	20000078 	.word	0x20000078
 8000d34:	20000074 	.word	0x20000074

08000d38 <Console_Init>:
 * This function configures UART4 for communication, sets up DMA for
 * data handling, and prepares the GPIO pins for UART communication.
 *
 * @param baudrate Desired baud rate for UART communication.
 */
void Console_Init(int32_t baudrate) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    // Reset USART configuration to default values
    USART_Config_Reset(&serial);
 8000d40:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <Console_Init+0x60>)
 8000d42:	f002 fd6f 	bl	8003824 <USART_Config_Reset>

    // Configure USART parameters
    serial.Port = UART4; // Use UART4 for console communication
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <Console_Init+0x60>)
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <Console_Init+0x64>)
 8000d4a:	601a      	str	r2, [r3, #0]
    serial.baudrate = baudrate; // Set the baud rate
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <Console_Init+0x60>)
 8000d50:	6053      	str	r3, [r2, #4]
    serial.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000d52:	2201      	movs	r2, #1
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <Console_Init+0x60>)
 8000d56:	721a      	strb	r2, [r3, #8]
    serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000d58:	2300      	movs	r3, #0
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <Console_Init+0x60>)
 8000d5e:	741a      	strb	r2, [r3, #16]
    serial.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000d60:	220a      	movs	r2, #10
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <Console_Init+0x60>)
 8000d64:	725a      	strb	r2, [r3, #9]
    serial.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000d66:	220b      	movs	r2, #11
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <Console_Init+0x60>)
 8000d6a:	729a      	strb	r2, [r3, #10]
    serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <Console_Init+0x60>)
 8000d72:	739a      	strb	r2, [r3, #14]
    serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000d74:	2201      	movs	r2, #1
 8000d76:	2302      	movs	r3, #2
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <Console_Init+0x60>)
 8000d7e:	745a      	strb	r2, [r3, #17]
    serial.ISR_Routines.Idle_Line_ISR = Console_IRQ;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <Console_Init+0x60>)
 8000d82:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <Console_Init+0x68>)
 8000d84:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    // Initialize USART
    if (USART_Init(&serial) != true) {
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <Console_Init+0x60>)
 8000d8a:	f003 fb89 	bl	80044a0 <USART_Init>
        // Handle USART initialization failure (e.g., log error or halt execution)
    }
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000144 	.word	0x20000144
 8000d9c:	40004c00 	.word	0x40004c00
 8000da0:	08000cb1 	.word	0x08000cb1

08000da4 <printConsole>:
  * using DMA. It supports formatted strings with variable arguments.
  *
  * @param msg Format string for the message to send.
  * @param ... Variable arguments for the format string.
  */
 void printConsole(char *msg, ...) {
 8000da4:	b40f      	push	{r0, r1, r2, r3}
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
     va_list args;
     va_start(args, msg);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	603b      	str	r3, [r7, #0]

     // Format the message and store it in the transmission buffer
//     vsprintf((char *)TRX_Buffer, msg, args);

     vsnprintf((char *)TRX_Buffer, RX_Buffer_Length, msg, args);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	21c8      	movs	r1, #200	@ 0xc8
 8000db8:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <printConsole+0x40>)
 8000dba:	f004 ff69 	bl	8005c90 <vsniprintf>

     // Get the length of the formatted string
     uint16_t len = strlen((char *)TRX_Buffer);
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <printConsole+0x40>)
 8000dc0:	f7ff fa06 	bl	80001d0 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	80fb      	strh	r3, [r7, #6]

     // Transmit the buffer using DMA
     USART_TX_Buffer(&serial, (uint8_t *)&TRX_Buffer[0], len);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4905      	ldr	r1, [pc, #20]	@ (8000de4 <printConsole+0x40>)
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <printConsole+0x44>)
 8000dd0:	f003 ffc8 	bl	8004d64 <USART_TX_Buffer>

     va_end(args);
 }
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dde:	b004      	add	sp, #16
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000007c 	.word	0x2000007c
 8000de8:	20000144 	.word	0x20000144

08000dec <Custom_Console_IRQ>:
volatile uint8_t Custom_TRX_Buffer[Custom_RX_Buffer_Length]; // Buffer for received and transmitted data

// USART configuration structure
USART_Config Custom_Comm;

void Custom_Console_IRQ(void){
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	if (custom_rx_get_flag == 1) { // Check if reception is active
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <Custom_Console_IRQ+0x78>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d130      	bne.n	8000e5a <Custom_Console_IRQ+0x6e>
		(void)UART4->SR; // Read the status register to clear flags
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <Custom_Console_IRQ+0x7c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
		(void)UART4->DR; // Read the data register to clear flags
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <Custom_Console_IRQ+0x7c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop

		__disable_irq(); // Disable interrupts to safely update DMA configurations

		// Disable DMA stream
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e0e:	f022 0201 	bic.w	r2, r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

		// Calculate the length of received data
		Custom_RX_Length = Custom_RX_Buffer_Length - Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <Custom_Console_IRQ+0x84>)
 8000e22:	601a      	str	r2, [r3, #0]

		// Prevent buffer overflow
		if (Custom_RX_Length > Custom_RX_Buffer_Length) {
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <Custom_Console_IRQ+0x84>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e2c:	dd03      	ble.n	8000e36 <Custom_Console_IRQ+0x4a>
			Custom_RX_Length = Custom_RX_Buffer_Length;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <Custom_Console_IRQ+0x84>)
 8000e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e34:	601a      	str	r2, [r3, #0]
		}

		// Reset DMA stream for the next reception
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR = Custom_RX_Buffer_Length;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e3e:	605a      	str	r2, [r3, #4]
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <Custom_Console_IRQ+0x80>)
 8000e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e50:	b662      	cpsie	i
}
 8000e52:	bf00      	nop

		__enable_irq(); // Re-enable interrupts

		custom_rx_flag = 1; // Set the flag indicating data reception is complete
 8000e54:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <Custom_Console_IRQ+0x88>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000228 	.word	0x20000228
 8000e68:	40004c00 	.word	0x40004c00
 8000e6c:	20000334 	.word	0x20000334
 8000e70:	20000230 	.word	0x20000230
 8000e74:	2000022c 	.word	0x2000022c

08000e78 <Custom_Comm_Init>:


void Custom_Comm_Init(int32_t baudrate) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	// Reset USART configuration to default values
	USART_Config_Reset(&Custom_Comm);
 8000e80:	4815      	ldr	r0, [pc, #84]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000e82:	f002 fccf 	bl	8003824 <USART_Config_Reset>

	// Configure USART parameters
	Custom_Comm.Port = UART4; // Use UART4 for console communication
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <Custom_Comm_Init+0x64>)
 8000e8a:	601a      	str	r2, [r3, #0]
	Custom_Comm.baudrate = baudrate; // Set the baud rate
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000e90:	6053      	str	r3, [r2, #4]
	Custom_Comm.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000e92:	2201      	movs	r2, #1
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000e96:	721a      	strb	r2, [r3, #8]
	Custom_Comm.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000e98:	2300      	movs	r3, #0
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000e9e:	741a      	strb	r2, [r3, #16]
	Custom_Comm.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000ea4:	725a      	strb	r2, [r3, #9]
	Custom_Comm.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000ea6:	220b      	movs	r2, #11
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000eaa:	729a      	strb	r2, [r3, #10]
	Custom_Comm.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000eac:	2310      	movs	r3, #16
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000eb2:	739a      	strb	r2, [r3, #14]
	Custom_Comm.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000ebe:	745a      	strb	r2, [r3, #17]
	Custom_Comm.ISR_Routines.Idle_Line_ISR = Custom_Console_IRQ;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000ec2:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <Custom_Comm_Init+0x68>)
 8000ec4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// Initialize USART
	if (USART_Init(&Custom_Comm) != true) {}
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <Custom_Comm_Init+0x60>)
 8000eca:	f003 fae9 	bl	80044a0 <USART_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000334 	.word	0x20000334
 8000edc:	40004c00 	.word	0x40004c00
 8000ee0:	08000ded 	.word	0x08000ded

08000ee4 <Custom_Comm_Send>:


void Custom_Comm_Send(volatile uint8_t *buffer, size_t buffer_size) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	if(buffer_size == 1)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d106      	bne.n	8000f02 <Custom_Comm_Send+0x1e>
	{
		USART_TX_Single_Byte(&Custom_Comm, buffer[0]);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <Custom_Comm_Send+0x34>)
 8000efe:	f004 f963 	bl	80051c8 <USART_TX_Single_Byte>
	}

	// Transmit the buffer using DMA
	USART_TX_Buffer(&Custom_Comm, (uint8_t *)&buffer[0], buffer_size);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <Custom_Comm_Send+0x34>)
 8000f0c:	f003 ff2a 	bl	8004d64 <USART_TX_Buffer>

}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000334 	.word	0x20000334

08000f1c <Custom_Comm_Receive>:


uint16_t Custom_Comm_Receive(volatile uint8_t *buffer)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	6078      	str	r0, [r7, #4]
	int result;

	custom_rx_get_flag = 1; // Enable reception
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <Custom_Comm_Receive+0x7c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

	// Start DMA reception
	USART_RX_Buffer(&Custom_Comm, (uint8_t *)Custom_TRX_Buffer, Custom_RX_Buffer_Length, 0);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f30:	491a      	ldr	r1, [pc, #104]	@ (8000f9c <Custom_Comm_Receive+0x80>)
 8000f32:	481b      	ldr	r0, [pc, #108]	@ (8000fa0 <Custom_Comm_Receive+0x84>)
 8000f34:	f004 f826 	bl	8004f84 <USART_RX_Buffer>

	// Wait until data reception is complete
	while (custom_rx_flag == 0) {
 8000f38:	bf00      	nop
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <Custom_Comm_Receive+0x88>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0fb      	beq.n	8000f3a <Custom_Comm_Receive+0x1e>
		// Wait loop
	}

	// Check for valid input length
	if (Custom_RX_Length < 2) {
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <Custom_Comm_Receive+0x8c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	dc08      	bgt.n	8000f5c <Custom_Comm_Receive+0x40>
		// Reset flags and return error
		custom_rx_get_flag = 0;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <Custom_Comm_Receive+0x7c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		custom_rx_flag = 0;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <Custom_Comm_Receive+0x88>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		return -1;
 8000f56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5a:	e018      	b.n	8000f8e <Custom_Comm_Receive+0x72>
	}

	result = Custom_RX_Length;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <Custom_Comm_Receive+0x8c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]

	DMA_Memory_To_Memory_Transfer(Custom_TRX_Buffer, 8,1,  buffer, 8, 1, Custom_RX_Length);
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <Custom_Comm_Receive+0x8c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2308      	movs	r3, #8
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	2108      	movs	r1, #8
 8000f78:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <Custom_Comm_Receive+0x80>)
 8000f7a:	f001 feb5 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>

	custom_rx_get_flag = 0; // Indicates if the reception is active
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <Custom_Comm_Receive+0x7c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	custom_rx_flag = 0;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <Custom_Comm_Receive+0x88>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]


	return result;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	b29b      	uxth	r3, r3


}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000228 	.word	0x20000228
 8000f9c:	20000234 	.word	0x20000234
 8000fa0:	20000334 	.word	0x20000334
 8000fa4:	2000022c 	.word	0x2000022c
 8000fa8:	20000230 	.word	0x20000230

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000fec:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a60      	ldr	r2, [pc, #384]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 8000ff2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001000:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2280      	movs	r2, #128	@ 0x80
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00e      	beq.n	800102c <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800100e:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001014:	2b00      	cmp	r3, #0
 8001016:	d009      	beq.n	800102c <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001018:	4b57      	ldr	r3, [pc, #348]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800101e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001020:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 800102c:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001038:	4b4f      	ldr	r3, [pc, #316]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00e      	beq.n	8001064 <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001046:	4b4c      	ldr	r3, [pc, #304]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001050:	4b49      	ldr	r3, [pc, #292]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001058:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a44      	ldr	r2, [pc, #272]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001064:	4b43      	ldr	r3, [pc, #268]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d015      	beq.n	800109c <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001070:	4b41      	ldr	r3, [pc, #260]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2204      	movs	r2, #4
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00e      	beq.n	800109c <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800107e:	4b3e      	ldr	r3, [pc, #248]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001088:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001090:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a36      	ldr	r2, [pc, #216]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02d      	beq.n	8001104 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80010a8:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2208      	movs	r2, #8
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d026      	beq.n	8001104 <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80010b6:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d021      	beq.n	8001104 <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a28      	ldr	r2, [pc, #160]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010de:	4293      	cmp	r3, r2
 80010e0:	d110      	bne.n	8001104 <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f8:	4798      	blx	r3
 80010fa:	e003      	b.n	8001104 <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001102:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <DMA1_Stream0_IRQHandler+0x18c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	d02d      	beq.n	800116c <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2210      	movs	r2, #16
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d026      	beq.n	800116c <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d021      	beq.n	800116c <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <DMA1_Stream0_IRQHandler+0x188>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001142:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001146:	4293      	cmp	r3, r2
 8001148:	d110      	bne.n	800116c <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001160:	4798      	blx	r3
				}
			}
		}

	}
}
 8001162:	e003      	b.n	800116c <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <DMA1_Stream0_IRQHandler+0x190>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116a:	4798      	blx	r3
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40026000 	.word	0x40026000
 8001174:	20000458 	.word	0x20000458
 8001178:	20000418 	.word	0x20000418

0800117c <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001180:	4b60      	ldr	r3, [pc, #384]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a60      	ldr	r2, [pc, #384]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 8001186:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001188:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	d015      	beq.n	80011c0 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001194:	4b5d      	ldr	r3, [pc, #372]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00e      	beq.n	80011c0 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80011a2:	4b5a      	ldr	r3, [pc, #360]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d009      	beq.n	80011c0 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80011ac:	4b57      	ldr	r3, [pc, #348]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011b2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80011b4:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a52      	ldr	r2, [pc, #328]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80011ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011be:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80011c0:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d015      	beq.n	80011f8 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80011cc:	4b4f      	ldr	r3, [pc, #316]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00e      	beq.n	80011f8 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80011da:	4b4c      	ldr	r3, [pc, #304]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d009      	beq.n	80011f8 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80011e4:	4b49      	ldr	r3, [pc, #292]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80011ec:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80011f8:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001200:	2b00      	cmp	r3, #0
 8001202:	d015      	beq.n	8001230 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001204:	4b41      	ldr	r3, [pc, #260]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00e      	beq.n	8001230 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001212:	4b3e      	ldr	r3, [pc, #248]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800121c:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001224:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a36      	ldr	r2, [pc, #216]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001230:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02d      	beq.n	8001298 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800123c:	4b33      	ldr	r3, [pc, #204]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2208      	movs	r2, #8
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d026      	beq.n	8001298 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001250:	2b00      	cmp	r3, #0
 8001252:	d021      	beq.n	8001298 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001266:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001272:	4293      	cmp	r3, r2
 8001274:	d110      	bne.n	8001298 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800128c:	4798      	blx	r3
 800128e:	e003      	b.n	8001298 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001290:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001296:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <DMA1_Stream1_IRQHandler+0x18c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02d      	beq.n	8001300 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2210      	movs	r2, #16
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d026      	beq.n	8001300 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <DMA1_Stream1_IRQHandler+0x188>)
 80012ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012ce:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012da:	4293      	cmp	r3, r2
 80012dc:	d110      	bne.n	8001300 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012f4:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80012f6:	e003      	b.n	8001300 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <DMA1_Stream1_IRQHandler+0x190>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fe:	4798      	blx	r3
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40026000 	.word	0x40026000
 8001308:	20000458 	.word	0x20000458
 800130c:	2000041c 	.word	0x2000041c

08001310 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001314:	4b64      	ldr	r3, [pc, #400]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a64      	ldr	r2, [pc, #400]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 800131a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 800131c:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d015      	beq.n	8001354 <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001328:	4b61      	ldr	r3, [pc, #388]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00e      	beq.n	8001354 <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001336:	4b5e      	ldr	r3, [pc, #376]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001340:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001346:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001348:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a56      	ldr	r2, [pc, #344]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001352:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001354:	4b55      	ldr	r3, [pc, #340]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d015      	beq.n	800138c <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800136e:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001378:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001380:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a48      	ldr	r2, [pc, #288]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 800138c:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001398:	4b45      	ldr	r3, [pc, #276]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2204      	movs	r2, #4
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d015      	beq.n	80013d2 <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00e      	beq.n	80013d2 <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013b4:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013be:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c4:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80013c6:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4a37      	ldr	r2, [pc, #220]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 80013cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013d0:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 80013d2:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02d      	beq.n	800143a <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2208      	movs	r2, #8
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d026      	beq.n	800143a <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d021      	beq.n	800143a <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fc:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001408:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001410:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001414:	4293      	cmp	r3, r2
 8001416:	d110      	bne.n	800143a <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142e:	4798      	blx	r3
 8001430:	e003      	b.n	800143a <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001438:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <DMA1_Stream2_IRQHandler+0x19c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d02d      	beq.n	80014a2 <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2210      	movs	r2, #16
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d026      	beq.n	80014a2 <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d021      	beq.n	80014a2 <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <DMA1_Stream2_IRQHandler+0x198>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001470:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001478:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800147c:	4293      	cmp	r3, r2
 800147e:	d110      	bne.n	80014a2 <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001496:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001498:	e003      	b.n	80014a2 <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <DMA1_Stream2_IRQHandler+0x1a0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a0:	4798      	blx	r3
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40026000 	.word	0x40026000
 80014ac:	20000458 	.word	0x20000458
 80014b0:	20000420 	.word	0x20000420

080014b4 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80014b8:	4b60      	ldr	r3, [pc, #384]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a60      	ldr	r2, [pc, #384]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 80014be:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80014c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d015      	beq.n	80014f8 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80014cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2280      	movs	r2, #128	@ 0x80
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00e      	beq.n	80014f8 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014da:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d009      	beq.n	80014f8 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014e4:	4b57      	ldr	r3, [pc, #348]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ea:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a52      	ldr	r2, [pc, #328]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 80014f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f6:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80014f8:	4b51      	ldr	r3, [pc, #324]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001504:	4b4f      	ldr	r3, [pc, #316]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2202      	movs	r2, #2
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00e      	beq.n	8001530 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001512:	4b4c      	ldr	r3, [pc, #304]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800151c:	4b49      	ldr	r3, [pc, #292]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001524:	4b45      	ldr	r3, [pc, #276]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a44      	ldr	r2, [pc, #272]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001530:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d015      	beq.n	8001568 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800153c:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00e      	beq.n	8001568 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001554:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a36      	ldr	r2, [pc, #216]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001566:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02d      	beq.n	80015d0 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001574:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	2208      	movs	r2, #8
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d026      	beq.n	80015d0 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001588:	2b00      	cmp	r3, #0
 800158a:	d021      	beq.n	80015d0 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800158c:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001594:	4b29      	ldr	r3, [pc, #164]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a28      	ldr	r2, [pc, #160]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 800159a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800159e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d110      	bne.n	80015d0 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015ae:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c4:	4798      	blx	r3
 80015c6:	e003      	b.n	80015d0 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <DMA1_Stream3_IRQHandler+0x18c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d02d      	beq.n	8001638 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2210      	movs	r2, #16
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d026      	beq.n	8001638 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d021      	beq.n	8001638 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <DMA1_Stream3_IRQHandler+0x188>)
 8001602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001606:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001612:	4293      	cmp	r3, r2
 8001614:	d110      	bne.n	8001638 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800162e:	e003      	b.n	8001638 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <DMA1_Stream3_IRQHandler+0x190>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001636:	4798      	blx	r3
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40026000 	.word	0x40026000
 8001640:	20000458 	.word	0x20000458
 8001644:	20000424 	.word	0x20000424

08001648 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800164c:	4b4f      	ldr	r3, [pc, #316]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a4f      	ldr	r2, [pc, #316]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 8001652:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001654:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00e      	beq.n	800167e <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001660:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800166a:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001670:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001672:	4b46      	ldr	r3, [pc, #280]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4a45      	ldr	r2, [pc, #276]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 8001678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800167c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800167e:	4b44      	ldr	r3, [pc, #272]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00e      	beq.n	80016a8 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800168a:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001694:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800169c:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a3a      	ldr	r2, [pc, #232]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4a30      	ldr	r2, [pc, #192]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80016d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d026      	beq.n	800172c <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ee:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001702:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001706:	4293      	cmp	r3, r2
 8001708:	d110      	bne.n	800172c <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001720:	4798      	blx	r3
 8001722:	e003      	b.n	800172c <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <DMA1_Stream4_IRQHandler+0x148>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d026      	beq.n	8001786 <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d021      	beq.n	8001786 <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <DMA1_Stream4_IRQHandler+0x144>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001760:	4293      	cmp	r3, r2
 8001762:	d110      	bne.n	8001786 <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800177a:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800177c:	e003      	b.n	8001786 <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <DMA1_Stream4_IRQHandler+0x14c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001784:	4798      	blx	r3
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40026000 	.word	0x40026000
 8001790:	2000045c 	.word	0x2000045c
 8001794:	20000428 	.word	0x20000428

08001798 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800179c:	4b4f      	ldr	r3, [pc, #316]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a4f      	ldr	r2, [pc, #316]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 80017a2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80017a4:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80017b0:	4b4c      	ldr	r3, [pc, #304]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4a45      	ldr	r2, [pc, #276]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017cc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80017ce:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017da:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017e4:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a3a      	ldr	r2, [pc, #232]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001804:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 800181c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001820:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d026      	beq.n	800187c <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d021      	beq.n	800187c <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001838:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001840:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a25      	ldr	r2, [pc, #148]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001852:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001856:	4293      	cmp	r3, r2
 8001858:	d110      	bne.n	800187c <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001870:	4798      	blx	r3
 8001872:	e003      	b.n	800187c <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x148>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001884:	2b00      	cmp	r3, #0
 8001886:	d026      	beq.n	80018d6 <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d021      	beq.n	80018d6 <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <DMA1_Stream5_IRQHandler+0x144>)
 80018a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a4:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d110      	bne.n	80018d6 <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ca:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018cc:	e003      	b.n	80018d6 <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x14c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d4:	4798      	blx	r3
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40026000 	.word	0x40026000
 80018e0:	2000045c 	.word	0x2000045c
 80018e4:	2000042c 	.word	0x2000042c

080018e8 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 80018f2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80018f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001900:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800190a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001912:	4b46      	ldr	r3, [pc, #280]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4a45      	ldr	r2, [pc, #276]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 800191e:	4b44      	ldr	r3, [pc, #272]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00e      	beq.n	8001948 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800192a:	4b42      	ldr	r3, [pc, #264]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001934:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 800193c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a3a      	ldr	r2, [pc, #232]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001942:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001946:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001948:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001966:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a30      	ldr	r2, [pc, #192]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 800196c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001970:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d026      	beq.n	80019cc <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001984:	2b00      	cmp	r3, #0
 8001986:	d021      	beq.n	80019cc <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a25      	ldr	r2, [pc, #148]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 8001996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800199a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d110      	bne.n	80019cc <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c0:	4798      	blx	r3
 80019c2:	e003      	b.n	80019cc <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <DMA1_Stream6_IRQHandler+0x148>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d026      	beq.n	8001a26 <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80019d8:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d021      	beq.n	8001a26 <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <DMA1_Stream6_IRQHandler+0x144>)
 80019f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019f4:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d110      	bne.n	8001a26 <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1a:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001a1c:	e003      	b.n	8001a26 <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <DMA1_Stream6_IRQHandler+0x14c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	4798      	blx	r3
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40026000 	.word	0x40026000
 8001a30:	2000045c 	.word	0x2000045c
 8001a34:	20000430 	.word	0x20000430

08001a38 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001a42:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001a44:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001a50:	4b4c      	ldr	r3, [pc, #304]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a60:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001a62:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a45      	ldr	r2, [pc, #276]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00e      	beq.n	8001a98 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a7a:	4b42      	ldr	r3, [pc, #264]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a84:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a3a      	ldr	r2, [pc, #232]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a96:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001a98:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00e      	beq.n	8001ac2 <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001aa4:	4b37      	ldr	r3, [pc, #220]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001aae:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001ab6:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4a30      	ldr	r2, [pc, #192]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d026      	beq.n	8001b1c <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001ace:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d021      	beq.n	8001b1c <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ade:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001ae6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d110      	bne.n	8001b1c <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b10:	4798      	blx	r3
 8001b12:	e003      	b.n	8001b1c <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <DMA1_Stream7_IRQHandler+0x148>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d026      	beq.n	8001b76 <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d021      	beq.n	8001b76 <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b38:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <DMA1_Stream7_IRQHandler+0x144>)
 8001b40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b44:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d110      	bne.n	8001b76 <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6a:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001b6c:	e003      	b.n	8001b76 <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <DMA1_Stream7_IRQHandler+0x14c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	4798      	blx	r3
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40026000 	.word	0x40026000
 8001b80:	2000045c 	.word	0x2000045c
 8001b84:	20000434 	.word	0x20000434

08001b88 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001b8c:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a60      	ldr	r2, [pc, #384]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b92:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001b94:	4b5f      	ldr	r3, [pc, #380]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d015      	beq.n	8001bcc <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001bae:	4b5a      	ldr	r3, [pc, #360]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001bb8:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbe:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001bc0:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001bcc:	4b51      	ldr	r3, [pc, #324]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00e      	beq.n	8001c04 <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001be6:	4b4c      	ldr	r3, [pc, #304]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001bf0:	4b49      	ldr	r3, [pc, #292]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001bf8:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a44      	ldr	r2, [pc, #272]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001c10:	4b41      	ldr	r3, [pc, #260]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00e      	beq.n	8001c3c <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001c30:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001c3c:	4b35      	ldr	r3, [pc, #212]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02d      	beq.n	8001ca4 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d026      	beq.n	8001ca4 <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c56:	4b30      	ldr	r3, [pc, #192]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d021      	beq.n	8001ca4 <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c66:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001c68:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c74:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d110      	bne.n	8001ca4 <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c98:	4798      	blx	r3
 8001c9a:	e003      	b.n	8001ca4 <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <DMA2_Stream0_IRQHandler+0x18c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d02d      	beq.n	8001d0c <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d026      	beq.n	8001d0c <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d021      	beq.n	8001d0c <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d10 <DMA2_Stream0_IRQHandler+0x188>)
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d110      	bne.n	8001d0c <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d00:	4798      	blx	r3
				}
			}
		}

	}
}
 8001d02:	e003      	b.n	8001d0c <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <DMA2_Stream0_IRQHandler+0x190>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	4798      	blx	r3
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40026400 	.word	0x40026400
 8001d14:	20000458 	.word	0x20000458
 8001d18:	20000438 	.word	0x20000438

08001d1c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001d20:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001d26:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001d28:	4b4e      	ldr	r3, [pc, #312]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00e      	beq.n	8001d52 <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d34:	4b4c      	ldr	r3, [pc, #304]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4a45      	ldr	r2, [pc, #276]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d50:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d5e:	4b42      	ldr	r3, [pc, #264]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d68:	4b3f      	ldr	r3, [pc, #252]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001d70:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a3a      	ldr	r2, [pc, #232]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7a:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001d7c:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d88:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001da0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d026      	beq.n	8001e00 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d021      	beq.n	8001e00 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc2:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d110      	bne.n	8001e00 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dee:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df4:	4798      	blx	r3
 8001df6:	e003      	b.n	8001e00 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <DMA2_Stream1_IRQHandler+0x148>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d026      	beq.n	8001e5a <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d021      	beq.n	8001e5a <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <DMA2_Stream1_IRQHandler+0x144>)
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e28:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d110      	bne.n	8001e5a <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e48:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4e:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001e50:	e003      	b.n	8001e5a <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <DMA2_Stream1_IRQHandler+0x14c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	4798      	blx	r3
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40026400 	.word	0x40026400
 8001e64:	20000458 	.word	0x20000458
 8001e68:	2000043c 	.word	0x2000043c

08001e6c <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001e76:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001e78:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00e      	beq.n	8001ea2 <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e94:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a45      	ldr	r2, [pc, #276]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001ea2:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00e      	beq.n	8001ecc <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001eae:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eca:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001ecc:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00e      	beq.n	8001ef6 <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001ed8:	4b37      	ldr	r3, [pc, #220]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001ee2:	4b35      	ldr	r3, [pc, #212]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001eea:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ef4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d026      	beq.n	8001f50 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d021      	beq.n	8001f50 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a25      	ldr	r2, [pc, #148]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d110      	bne.n	8001f50 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f44:	4798      	blx	r3
 8001f46:	e003      	b.n	8001f50 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <DMA2_Stream2_IRQHandler+0x148>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d026      	beq.n	8001faa <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d021      	beq.n	8001faa <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <DMA2_Stream2_IRQHandler+0x144>)
 8001f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f78:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d110      	bne.n	8001faa <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f98:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001fa0:	e003      	b.n	8001faa <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	4798      	blx	r3
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40026400 	.word	0x40026400
 8001fb4:	20000458 	.word	0x20000458
 8001fb8:	20000440 	.word	0x20000440

08001fbc <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001fc0:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a60      	ldr	r2, [pc, #384]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 8001fc6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00e      	beq.n	8002000 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001fec:	4b57      	ldr	r3, [pc, #348]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001ff4:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8001ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ffe:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8002000:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800200c:	4b4f      	ldr	r3, [pc, #316]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800201a:	4b4c      	ldr	r3, [pc, #304]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002024:	4b49      	ldr	r3, [pc, #292]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800202c:	4b45      	ldr	r3, [pc, #276]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a44      	ldr	r2, [pc, #272]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002036:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8002038:	4b43      	ldr	r3, [pc, #268]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002044:	4b41      	ldr	r3, [pc, #260]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2204      	movs	r2, #4
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002052:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 800206a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800206e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8002070:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02d      	beq.n	80020d8 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2208      	movs	r2, #8
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d026      	beq.n	80020d8 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d021      	beq.n	80020d8 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800209c:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a28      	ldr	r2, [pc, #160]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 80020a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020a6:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020a8:	4b28      	ldr	r3, [pc, #160]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d110      	bne.n	80020d8 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020b6:	4b25      	ldr	r3, [pc, #148]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020cc:	4798      	blx	r3
 80020ce:	e003      	b.n	80020d8 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020d0:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <DMA2_Stream3_IRQHandler+0x18c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02d      	beq.n	8002140 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	2210      	movs	r2, #16
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d026      	beq.n	8002140 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d021      	beq.n	8002140 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a0e      	ldr	r2, [pc, #56]	@ (8002144 <DMA2_Stream3_IRQHandler+0x188>)
 800210a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800210e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002116:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800211a:	4293      	cmp	r3, r2
 800211c:	d110      	bne.n	8002140 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8002136:	e003      	b.n	8002140 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <DMA2_Stream3_IRQHandler+0x190>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213e:	4798      	blx	r3
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40026400 	.word	0x40026400
 8002148:	20000458 	.word	0x20000458
 800214c:	20000444 	.word	0x20000444

08002150 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002154:	4b4f      	ldr	r3, [pc, #316]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 800215a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800215c:	4b4e      	ldr	r3, [pc, #312]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002168:	4b4c      	ldr	r3, [pc, #304]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002178:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4a45      	ldr	r2, [pc, #276]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 8002180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002184:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8002186:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002192:	4b42      	ldr	r3, [pc, #264]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800219c:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80021bc:	4b37      	ldr	r3, [pc, #220]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80021c6:	4b35      	ldr	r3, [pc, #212]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a30      	ldr	r2, [pc, #192]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d026      	beq.n	8002234 <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80021e6:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d021      	beq.n	8002234 <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80021f8:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a25      	ldr	r2, [pc, #148]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 80021fe:	f043 0310 	orr.w	r3, r3, #16
 8002202:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800220e:	4293      	cmp	r3, r2
 8002210:	d110      	bne.n	8002234 <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002228:	4798      	blx	r3
 800222a:	e003      	b.n	8002234 <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <DMA2_Stream4_IRQHandler+0x148>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d026      	beq.n	800228e <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d021      	beq.n	800228e <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002250:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <DMA2_Stream4_IRQHandler+0x144>)
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002268:	4293      	cmp	r3, r2
 800226a:	d110      	bne.n	800228e <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002284:	e003      	b.n	800228e <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <DMA2_Stream4_IRQHandler+0x14c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228c:	4798      	blx	r3
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40026400 	.word	0x40026400
 8002298:	2000045c 	.word	0x2000045c
 800229c:	20000448 	.word	0x20000448

080022a0 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80022a4:	4b4f      	ldr	r3, [pc, #316]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a4f      	ldr	r2, [pc, #316]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 80022aa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80022ac:	4b4e      	ldr	r3, [pc, #312]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80022c2:	4b4a      	ldr	r3, [pc, #296]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80022ca:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80022d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80022d6:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00e      	beq.n	8002300 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022e2:	4b42      	ldr	r3, [pc, #264]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80022ec:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80022f4:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a3a      	ldr	r2, [pc, #232]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8002300:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800230c:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002316:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800231e:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4a30      	ldr	r2, [pc, #192]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 8002324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002328:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800232a:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d026      	beq.n	8002384 <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002336:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233c:	2b00      	cmp	r3, #0
 800233e:	d021      	beq.n	8002384 <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002340:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002346:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002348:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a25      	ldr	r2, [pc, #148]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002352:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002354:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800235e:	4293      	cmp	r3, r2
 8002360:	d110      	bne.n	8002384 <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002362:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002378:	4798      	blx	r3
 800237a:	e003      	b.n	8002384 <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002382:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <DMA2_Stream5_IRQHandler+0x148>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800238c:	2b00      	cmp	r3, #0
 800238e:	d026      	beq.n	80023de <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d021      	beq.n	80023de <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <DMA2_Stream5_IRQHandler+0x144>)
 80023a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023ac:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d110      	bne.n	80023de <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d2:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80023d4:	e003      	b.n	80023de <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <DMA2_Stream5_IRQHandler+0x14c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	4798      	blx	r3
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40026400 	.word	0x40026400
 80023e8:	2000045c 	.word	0x2000045c
 80023ec:	2000044c 	.word	0x2000044c

080023f0 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80023f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 80023fa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80023fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00e      	beq.n	8002426 <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002408:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800241a:	4b46      	ldr	r3, [pc, #280]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a45      	ldr	r2, [pc, #276]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002432:	4b42      	ldr	r3, [pc, #264]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800243c:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 800244a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8002450:	4b39      	ldr	r3, [pc, #228]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00e      	beq.n	800247a <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800245c:	4b37      	ldr	r3, [pc, #220]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002466:	4b35      	ldr	r3, [pc, #212]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800246e:	4b31      	ldr	r3, [pc, #196]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a30      	ldr	r2, [pc, #192]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 8002474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002478:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800247a:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d026      	beq.n	80024d4 <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d021      	beq.n	80024d4 <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002496:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002498:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 800249e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a2:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d110      	bne.n	80024d4 <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024b2:	4b22      	ldr	r3, [pc, #136]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c8:	4798      	blx	r3
 80024ca:	e003      	b.n	80024d4 <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <DMA2_Stream6_IRQHandler+0x148>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d026      	beq.n	800252e <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d021      	beq.n	800252e <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <DMA2_Stream6_IRQHandler+0x144>)
 80024f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024fc:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002508:	4293      	cmp	r3, r2
 800250a:	d110      	bne.n	800252e <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002522:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002524:	e003      	b.n	800252e <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <DMA2_Stream6_IRQHandler+0x14c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	4798      	blx	r3
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40026400 	.word	0x40026400
 8002538:	2000045c 	.word	0x2000045c
 800253c:	20000450 	.word	0x20000450

08002540 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002544:	4b4f      	ldr	r3, [pc, #316]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 800254a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 800254c:	4b4e      	ldr	r3, [pc, #312]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00e      	beq.n	8002576 <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002558:	4b4c      	ldr	r3, [pc, #304]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002562:	4b4a      	ldr	r3, [pc, #296]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800256a:	4b46      	ldr	r3, [pc, #280]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4a45      	ldr	r2, [pc, #276]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 8002570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002574:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00e      	beq.n	80025a0 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800258c:	4b3f      	ldr	r3, [pc, #252]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002594:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a3a      	ldr	r2, [pc, #232]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80025a0:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80025ac:	4b37      	ldr	r3, [pc, #220]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80025b6:	4b35      	ldr	r3, [pc, #212]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025bc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a30      	ldr	r2, [pc, #192]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 80025c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 80025ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d026      	beq.n	8002624 <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80025d6:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80025e8:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a25      	ldr	r2, [pc, #148]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 80025ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025f2:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80025fe:	4293      	cmp	r3, r2
 8002600:	d110      	bne.n	8002624 <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002602:	4b22      	ldr	r3, [pc, #136]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002618:	4798      	blx	r3
 800261a:	e003      	b.n	8002624 <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8002624:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <DMA2_Stream7_IRQHandler+0x148>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d026      	beq.n	800267e <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002630:	4b16      	ldr	r3, [pc, #88]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d021      	beq.n	800267e <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002640:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4a0f      	ldr	r2, [pc, #60]	@ (8002684 <DMA2_Stream7_IRQHandler+0x144>)
 8002648:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800264c:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002658:	4293      	cmp	r3, r2
 800265a:	d110      	bne.n	800267e <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800266c:	4b07      	ldr	r3, [pc, #28]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002672:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002674:	e003      	b.n	800267e <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <DMA2_Stream7_IRQHandler+0x14c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	4798      	blx	r3
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40026400 	.word	0x40026400
 8002688:	2000045c 	.word	0x2000045c
 800268c:	20000454 	.word	0x20000454

08002690 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0c      	ldr	r2, [pc, #48]	@ (80026d0 <DMA_Clock_Enable+0x40>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d105      	bne.n	80026ae <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <DMA_Clock_Enable+0x44>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <DMA_Clock_Enable+0x44>)
 80026a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <DMA_Clock_Enable+0x48>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d105      	bne.n	80026c4 <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <DMA_Clock_Enable+0x44>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <DMA_Clock_Enable+0x44>)
 80026be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026c2:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40026000 	.word	0x40026000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40026400 	.word	0x40026400

080026dc <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffd3 	bl	8002690 <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00f      	beq.n	8002718 <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8002708:	bf00      	nop
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f8      	bne.n	800270a <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7a1b      	ldrb	r3, [r3, #8]
 8002722:	065a      	lsls	r2, r3, #25
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2200      	movs	r2, #0
 800279e:	4293      	cmp	r3, r2
 80027a0:	f000 8110 	beq.w	80029c4 <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	6959      	ldr	r1, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2210      	movs	r2, #16
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f042 0210 	orr.w	r2, r2, #16
 80027dc:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2208      	movs	r2, #8
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f042 0208 	orr.w	r2, r2, #8
 80027f8:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f042 0204 	orr.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2202      	movs	r2, #2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f042 0202 	orr.w	r2, r2, #2
 8002830:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a80      	ldr	r2, [pc, #512]	@ (8002a38 <DMA_Init+0x35c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d15f      	bne.n	80028fc <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a7e      	ldr	r2, [pc, #504]	@ (8002a3c <DMA_Init+0x360>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d106      	bne.n	8002854 <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 8002846:	4a7e      	ldr	r2, [pc, #504]	@ (8002a40 <DMA_Init+0x364>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800284c:	200b      	movs	r0, #11
 800284e:	f7fe fbad 	bl	8000fac <__NVIC_EnableIRQ>
 8002852:	e0b7      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a7a      	ldr	r2, [pc, #488]	@ (8002a44 <DMA_Init+0x368>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d106      	bne.n	800286c <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 800285e:	4a7a      	ldr	r2, [pc, #488]	@ (8002a48 <DMA_Init+0x36c>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002864:	200c      	movs	r0, #12
 8002866:	f7fe fba1 	bl	8000fac <__NVIC_EnableIRQ>
 800286a:	e0ab      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a76      	ldr	r2, [pc, #472]	@ (8002a4c <DMA_Init+0x370>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d106      	bne.n	8002884 <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 8002876:	4a76      	ldr	r2, [pc, #472]	@ (8002a50 <DMA_Init+0x374>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800287c:	200d      	movs	r0, #13
 800287e:	f7fe fb95 	bl	8000fac <__NVIC_EnableIRQ>
 8002882:	e09f      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a72      	ldr	r2, [pc, #456]	@ (8002a54 <DMA_Init+0x378>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d106      	bne.n	800289c <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 800288e:	4a72      	ldr	r2, [pc, #456]	@ (8002a58 <DMA_Init+0x37c>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002894:	200e      	movs	r0, #14
 8002896:	f7fe fb89 	bl	8000fac <__NVIC_EnableIRQ>
 800289a:	e093      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a5c <DMA_Init+0x380>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d106      	bne.n	80028b4 <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <DMA_Init+0x384>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028ac:	200f      	movs	r0, #15
 80028ae:	f7fe fb7d 	bl	8000fac <__NVIC_EnableIRQ>
 80028b2:	e087      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <DMA_Init+0x388>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d106      	bne.n	80028cc <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 80028be:	4a6a      	ldr	r2, [pc, #424]	@ (8002a68 <DMA_Init+0x38c>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028c4:	2010      	movs	r0, #16
 80028c6:	f7fe fb71 	bl	8000fac <__NVIC_EnableIRQ>
 80028ca:	e07b      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <DMA_Init+0x390>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d106      	bne.n	80028e4 <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 80028d6:	4a66      	ldr	r2, [pc, #408]	@ (8002a70 <DMA_Init+0x394>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80028dc:	2011      	movs	r0, #17
 80028de:	f7fe fb65 	bl	8000fac <__NVIC_EnableIRQ>
 80028e2:	e06f      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a62      	ldr	r2, [pc, #392]	@ (8002a74 <DMA_Init+0x398>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d16a      	bne.n	80029c4 <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 80028ee:	4a62      	ldr	r2, [pc, #392]	@ (8002a78 <DMA_Init+0x39c>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80028f4:	202f      	movs	r0, #47	@ 0x2f
 80028f6:	f7fe fb59 	bl	8000fac <__NVIC_EnableIRQ>
 80028fa:	e063      	b.n	80029c4 <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5e      	ldr	r2, [pc, #376]	@ (8002a7c <DMA_Init+0x3a0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d15e      	bne.n	80029c4 <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a5d      	ldr	r2, [pc, #372]	@ (8002a80 <DMA_Init+0x3a4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d106      	bne.n	800291e <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 8002910:	4a5c      	ldr	r2, [pc, #368]	@ (8002a84 <DMA_Init+0x3a8>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002916:	2038      	movs	r0, #56	@ 0x38
 8002918:	f7fe fb48 	bl	8000fac <__NVIC_EnableIRQ>
 800291c:	e052      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a59      	ldr	r2, [pc, #356]	@ (8002a88 <DMA_Init+0x3ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d106      	bne.n	8002936 <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 8002928:	4a58      	ldr	r2, [pc, #352]	@ (8002a8c <DMA_Init+0x3b0>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800292e:	2039      	movs	r0, #57	@ 0x39
 8002930:	f7fe fb3c 	bl	8000fac <__NVIC_EnableIRQ>
 8002934:	e046      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a55      	ldr	r2, [pc, #340]	@ (8002a90 <DMA_Init+0x3b4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d106      	bne.n	800294e <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 8002940:	4a54      	ldr	r2, [pc, #336]	@ (8002a94 <DMA_Init+0x3b8>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002946:	203a      	movs	r0, #58	@ 0x3a
 8002948:	f7fe fb30 	bl	8000fac <__NVIC_EnableIRQ>
 800294c:	e03a      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a51      	ldr	r2, [pc, #324]	@ (8002a98 <DMA_Init+0x3bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d106      	bne.n	8002966 <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 8002958:	4a50      	ldr	r2, [pc, #320]	@ (8002a9c <DMA_Init+0x3c0>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800295e:	203b      	movs	r0, #59	@ 0x3b
 8002960:	f7fe fb24 	bl	8000fac <__NVIC_EnableIRQ>
 8002964:	e02e      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa0 <DMA_Init+0x3c4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d106      	bne.n	800297e <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 8002970:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa4 <DMA_Init+0x3c8>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002976:	203c      	movs	r0, #60	@ 0x3c
 8002978:	f7fe fb18 	bl	8000fac <__NVIC_EnableIRQ>
 800297c:	e022      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <DMA_Init+0x3cc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d106      	bne.n	8002996 <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 8002988:	4a48      	ldr	r2, [pc, #288]	@ (8002aac <DMA_Init+0x3d0>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800298e:	2044      	movs	r0, #68	@ 0x44
 8002990:	f7fe fb0c 	bl	8000fac <__NVIC_EnableIRQ>
 8002994:	e016      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a45      	ldr	r2, [pc, #276]	@ (8002ab0 <DMA_Init+0x3d4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d106      	bne.n	80029ae <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 80029a0:	4a44      	ldr	r2, [pc, #272]	@ (8002ab4 <DMA_Init+0x3d8>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80029a6:	2045      	movs	r0, #69	@ 0x45
 80029a8:	f7fe fb00 	bl	8000fac <__NVIC_EnableIRQ>
 80029ac:	e00a      	b.n	80029c4 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a41      	ldr	r2, [pc, #260]	@ (8002ab8 <DMA_Init+0x3dc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d105      	bne.n	80029c4 <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 80029b8:	4a40      	ldr	r2, [pc, #256]	@ (8002abc <DMA_Init+0x3e0>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80029be:	2046      	movs	r0, #70	@ 0x46
 80029c0:	f7fe faf4 	bl	8000fac <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8c1b      	ldrh	r3, [r3, #32]
 80029ce:	4619      	mov	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80029e2:	4619      	mov	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e010      	b.n	8002a2c <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e002      	b.n	8002a2c <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e000      	b.n	8002a2e <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 8002a2c:	2301      	movs	r3, #1
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40026000 	.word	0x40026000
 8002a3c:	40026010 	.word	0x40026010
 8002a40:	20000418 	.word	0x20000418
 8002a44:	40026028 	.word	0x40026028
 8002a48:	2000041c 	.word	0x2000041c
 8002a4c:	40026040 	.word	0x40026040
 8002a50:	20000420 	.word	0x20000420
 8002a54:	40026058 	.word	0x40026058
 8002a58:	20000424 	.word	0x20000424
 8002a5c:	40026070 	.word	0x40026070
 8002a60:	20000428 	.word	0x20000428
 8002a64:	40026088 	.word	0x40026088
 8002a68:	2000042c 	.word	0x2000042c
 8002a6c:	400260a0 	.word	0x400260a0
 8002a70:	20000430 	.word	0x20000430
 8002a74:	400260b8 	.word	0x400260b8
 8002a78:	20000434 	.word	0x20000434
 8002a7c:	40026400 	.word	0x40026400
 8002a80:	40026410 	.word	0x40026410
 8002a84:	20000438 	.word	0x20000438
 8002a88:	40026428 	.word	0x40026428
 8002a8c:	2000043c 	.word	0x2000043c
 8002a90:	40026440 	.word	0x40026440
 8002a94:	20000440 	.word	0x20000440
 8002a98:	40026458 	.word	0x40026458
 8002a9c:	20000444 	.word	0x20000444
 8002aa0:	40026470 	.word	0x40026470
 8002aa4:	20000448 	.word	0x20000448
 8002aa8:	40026488 	.word	0x40026488
 8002aac:	2000044c 	.word	0x2000044c
 8002ab0:	400264a0 	.word	0x400264a0
 8002ab4:	20000450 	.word	0x20000450
 8002ab8:	400264b8 	.word	0x400264b8
 8002abc:	20000454 	.word	0x20000454

08002ac0 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2200      	movs	r2, #0
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e00d      	b.n	8002b10 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d107      	bne.n	8002b10 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0e:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8002b1e:	601a      	str	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b66:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	613b      	str	r3, [r7, #16]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4a43      	ldr	r2, [pc, #268]	@ (8002ca4 <DMA_Set_Trigger+0x124>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <DMA_Set_Trigger+0x24>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4a42      	ldr	r2, [pc, #264]	@ (8002ca8 <DMA_Set_Trigger+0x128>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d178      	bne.n	8002c96 <DMA_Set_Trigger+0x116>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4a41      	ldr	r2, [pc, #260]	@ (8002cac <DMA_Set_Trigger+0x12c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d918      	bls.n	8002bde <DMA_Set_Trigger+0x5e>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4a40      	ldr	r2, [pc, #256]	@ (8002cb0 <DMA_Set_Trigger+0x130>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d814      	bhi.n	8002bde <DMA_Set_Trigger+0x5e>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <DMA_Set_Trigger+0x134>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb8 <DMA_Set_Trigger+0x138>)
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <DMA_Set_Trigger+0x13c>)
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	213f      	movs	r1, #63	@ 0x3f
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	e055      	b.n	8002c8a <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4a37      	ldr	r2, [pc, #220]	@ (8002cc0 <DMA_Set_Trigger+0x140>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d918      	bls.n	8002c18 <DMA_Set_Trigger+0x98>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4a36      	ldr	r2, [pc, #216]	@ (8002cc4 <DMA_Set_Trigger+0x144>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d814      	bhi.n	8002c18 <DMA_Set_Trigger+0x98>
		{
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <DMA_Set_Trigger+0x148>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	10db      	asrs	r3, r3, #3
 8002bf6:	4a30      	ldr	r2, [pc, #192]	@ (8002cb8 <DMA_Set_Trigger+0x138>)
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <DMA_Set_Trigger+0x14c>)
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	213f      	movs	r1, #63	@ 0x3f
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	431a      	orrs	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	e038      	b.n	8002c8a <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd0 <DMA_Set_Trigger+0x150>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d918      	bls.n	8002c52 <DMA_Set_Trigger+0xd2>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd4 <DMA_Set_Trigger+0x154>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d814      	bhi.n	8002c52 <DMA_Set_Trigger+0xd2>
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <DMA_Set_Trigger+0x158>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	10db      	asrs	r3, r3, #3
 8002c30:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <DMA_Set_Trigger+0x138>)
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <DMA_Set_Trigger+0x13c>)
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	213f      	movs	r1, #63	@ 0x3f
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e01b      	b.n	8002c8a <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <DMA_Set_Trigger+0x15c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d917      	bls.n	8002c8a <DMA_Set_Trigger+0x10a>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ce0 <DMA_Set_Trigger+0x160>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d813      	bhi.n	8002c8a <DMA_Set_Trigger+0x10a>
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <DMA_Set_Trigger+0x164>)
 8002c66:	4413      	add	r3, r2
 8002c68:	10db      	asrs	r3, r3, #3
 8002c6a:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <DMA_Set_Trigger+0x138>)
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <DMA_Set_Trigger+0x14c>)
 8002c74:	5c9b      	ldrb	r3, [r3, r2]
 8002c76:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	213f      	movs	r1, #63	@ 0x3f
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	60da      	str	r2, [r3, #12]
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	601a      	str	r2, [r3, #0]
	}
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40026000 	.word	0x40026000
 8002ca8:	40026400 	.word	0x40026400
 8002cac:	4002600f 	.word	0x4002600f
 8002cb0:	40026058 	.word	0x40026058
 8002cb4:	bffd9ff0 	.word	0xbffd9ff0
 8002cb8:	aaaaaaab 	.word	0xaaaaaaab
 8002cbc:	080066bc 	.word	0x080066bc
 8002cc0:	4002606f 	.word	0x4002606f
 8002cc4:	400260b8 	.word	0x400260b8
 8002cc8:	bffd9f90 	.word	0xbffd9f90
 8002ccc:	080066c0 	.word	0x080066c0
 8002cd0:	4002640f 	.word	0x4002640f
 8002cd4:	40026458 	.word	0x40026458
 8002cd8:	bffd9bf0 	.word	0xbffd9bf0
 8002cdc:	4002646f 	.word	0x4002646f
 8002ce0:	400264b8 	.word	0x400264b8
 8002ce4:	bffd9b90 	.word	0xbffd9b90

08002ce8 <DMA_Memory_To_Memory_Transfer>:

void DMA_Memory_To_Memory_Transfer(volatile void *source,
		uint8_t source_data_size, bool source_increment,
		volatile void *destination, uint8_t dest_data_size,
		bool destination_increment, uint16_t length)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	72fb      	strb	r3, [r7, #11]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	72bb      	strb	r3, [r7, #10]
	// Enable DMA2 clock
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <DMA_Memory_To_Memory_Transfer+0x188>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002e70 <DMA_Memory_To_Memory_Transfer+0x188>)
 8002d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30

	// Clear the channel selection and set the transfer direction to memory-to-memory
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 8002d06:	4b5b      	ldr	r3, [pc, #364]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d0c:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8002d10:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 8002d12:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2180      	movs	r1, #128	@ 0x80
 8002d18:	4a56      	ldr	r2, [pc, #344]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6013      	str	r3, [r2, #0]

	// Set the transfer complete interrupt and priority level
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8002d1e:	4b55      	ldr	r3, [pc, #340]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a54      	ldr	r2, [pc, #336]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d24:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6013      	str	r3, [r2, #0]

	// Set the peripheral data size based on the source data size
	if(source_data_size == 32)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d106      	bne.n	8002d42 <DMA_Memory_To_Memory_Transfer+0x5a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 8002d34:	4b4f      	ldr	r3, [pc, #316]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a4e      	ldr	r2, [pc, #312]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d3a:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e015      	b.n	8002d6e <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else if(source_data_size == 16)
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d10c      	bne.n	8002d62 <DMA_Memory_To_Memory_Transfer+0x7a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8002d48:	4b4a      	ldr	r3, [pc, #296]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a49      	ldr	r2, [pc, #292]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d52:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8002d54:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a46      	ldr	r2, [pc, #280]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e005      	b.n	8002d6e <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8002d62:	4b44      	ldr	r3, [pc, #272]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a43      	ldr	r2, [pc, #268]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d68:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002d6c:	6013      	str	r3, [r2, #0]
	}

	// Set the memory data size based on the destination data size
	if(dest_data_size == 32)
 8002d6e:	7e3b      	ldrb	r3, [r7, #24]
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d106      	bne.n	8002d82 <DMA_Memory_To_Memory_Transfer+0x9a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8002d74:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3e      	ldr	r2, [pc, #248]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d7a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e015      	b.n	8002dae <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else if(dest_data_size == 16)
 8002d82:	7e3b      	ldrb	r3, [r7, #24]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d10c      	bne.n	8002da2 <DMA_Memory_To_Memory_Transfer+0xba>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8002d88:	4b3a      	ldr	r3, [pc, #232]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a39      	ldr	r2, [pc, #228]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d92:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8002d94:	4b37      	ldr	r3, [pc, #220]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	e005      	b.n	8002dae <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8002da2:	4b34      	ldr	r3, [pc, #208]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a33      	ldr	r2, [pc, #204]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002da8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002dac:	6013      	str	r3, [r2, #0]
	}

	// Configure source address increment mode
	if(source_increment)
 8002dae:	7abb      	ldrb	r3, [r7, #10]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 8002db4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e005      	b.n	8002dce <DMA_Memory_To_Memory_Transfer+0xe6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dcc:	6013      	str	r3, [r2, #0]
	}

	// Configure destination address increment mode
	if(destination_increment)
 8002dce:	7f3b      	ldrb	r3, [r7, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <DMA_Memory_To_Memory_Transfer+0xfa>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e005      	b.n	8002dee <DMA_Memory_To_Memory_Transfer+0x106>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dec:	6013      	str	r3, [r2, #0]
	}

	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8002dee:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4a20      	ldr	r2, [pc, #128]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6153      	str	r3, [r2, #20]

	// Set the peripheral address (source)
	DMA2_Stream0->PAR = (uint32_t)(source);
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6093      	str	r3, [r2, #8]

	// Set the memory address (destination)
	DMA2_Stream0->M0AR = (uint32_t)(destination);
 8002e00:	4a1c      	ldr	r2, [pc, #112]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60d3      	str	r3, [r2, #12]

	// Set the number of data items to transfer
	DMA2_Stream0->NDTR = (uint16_t)length;
 8002e06:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e08:	8c3b      	ldrh	r3, [r7, #32]
 8002e0a:	6053      	str	r3, [r2, #4]

	// Enable the DMA stream
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

	// Wait for the transfer to complete
	while((DMA2->LISR & (DMA_LISR_TCIF0_Msk)) == 0) {}
 8002e18:	bf00      	nop
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f9      	beq.n	8002e1a <DMA_Memory_To_Memory_Transfer+0x132>

	// Clear the transfer complete flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002e2c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002e30:	6093      	str	r3, [r2, #8]

	// Disable the DMA stream

	DMA2_Stream0->CR = 0;
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
	DMA2_Stream0->FCR = 0;
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
	DMA2_Stream0->M0AR = 0;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = 0;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR= 0;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->PAR = 0;
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a06      	ldr	r2, [pc, #24]	@ (8002e74 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6013      	str	r3, [r2, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40026410 	.word	0x40026410
 8002e78:	40026400 	.word	0x40026400

08002e7c <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002e80:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <EXTI0_IRQHandler+0x24>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <EXTI0_IRQHandler+0x12>
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <EXTI0_IRQHandler+0x24>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <EXTI0_IRQHandler+0x28>)
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <EXTI0_IRQHandler+0x28>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6153      	str	r3, [r2, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000460 	.word	0x20000460
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <EXTI1_IRQHandler+0x24>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <EXTI1_IRQHandler+0x12>
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <EXTI1_IRQHandler+0x24>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <EXTI1_IRQHandler+0x28>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4a04      	ldr	r2, [pc, #16]	@ (8002ed0 <EXTI1_IRQHandler+0x28>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6153      	str	r3, [r2, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000460 	.word	0x20000460
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <EXTI2_IRQHandler+0x24>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <EXTI2_IRQHandler+0x12>
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <EXTI2_IRQHandler+0x24>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <EXTI2_IRQHandler+0x28>)
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <EXTI2_IRQHandler+0x28>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6153      	str	r3, [r2, #20]
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000460 	.word	0x20000460
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <EXTI3_IRQHandler+0x24>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <EXTI3_IRQHandler+0x12>
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <EXTI3_IRQHandler+0x24>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002f12:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <EXTI3_IRQHandler+0x28>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <EXTI3_IRQHandler+0x28>)
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	6153      	str	r3, [r2, #20]
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000460 	.word	0x20000460
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <EXTI4_IRQHandler+0x24>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <EXTI4_IRQHandler+0x12>
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <EXTI4_IRQHandler+0x24>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <EXTI4_IRQHandler+0x28>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <EXTI4_IRQHandler+0x28>)
 8002f44:	f043 0310 	orr.w	r3, r3, #16
 8002f48:	6153      	str	r3, [r2, #20]
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000460 	.word	0x20000460
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002f5e:	2305      	movs	r3, #5
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	e020      	b.n	8002fa6 <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <EXTI9_5_IRQHandler+0x60>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d014      	beq.n	8002fa0 <EXTI9_5_IRQHandler+0x48>
 8002f76:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <EXTI9_5_IRQHandler+0x64>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002f82:	4a0e      	ldr	r2, [pc, #56]	@ (8002fbc <EXTI9_5_IRQHandler+0x64>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8a:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <EXTI9_5_IRQHandler+0x60>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2101      	movs	r1, #1
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4a07      	ldr	r2, [pc, #28]	@ (8002fb8 <EXTI9_5_IRQHandler+0x60>)
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b09      	cmp	r3, #9
 8002faa:	dddb      	ble.n	8002f64 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40013c00 	.word	0x40013c00
 8002fbc:	20000460 	.word	0x20000460

08002fc0 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	e020      	b.n	800300e <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <EXTI15_10_IRQHandler+0x60>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <EXTI15_10_IRQHandler+0x48>
 8002fde:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <EXTI15_10_IRQHandler+0x64>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002fea:	4a0e      	ldr	r2, [pc, #56]	@ (8003024 <EXTI15_10_IRQHandler+0x64>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff2:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <EXTI15_10_IRQHandler+0x60>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4611      	mov	r1, r2
 8003002:	4a07      	ldr	r2, [pc, #28]	@ (8003020 <EXTI15_10_IRQHandler+0x60>)
 8003004:	430b      	orrs	r3, r1
 8003006:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3301      	adds	r3, #1
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	dddb      	ble.n	8002fcc <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40013c00 	.word	0x40013c00
 8003024:	20000460 	.word	0x20000460

08003028 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a30      	ldr	r2, [pc, #192]	@ (80030f4 <GPIO_Clock_Enable+0xcc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04b      	beq.n	80030d0 <GPIO_Clock_Enable+0xa8>
 8003038:	4a2e      	ldr	r2, [pc, #184]	@ (80030f4 <GPIO_Clock_Enable+0xcc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d84f      	bhi.n	80030de <GPIO_Clock_Enable+0xb6>
 800303e:	4a2e      	ldr	r2, [pc, #184]	@ (80030f8 <GPIO_Clock_Enable+0xd0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d03e      	beq.n	80030c2 <GPIO_Clock_Enable+0x9a>
 8003044:	4a2c      	ldr	r2, [pc, #176]	@ (80030f8 <GPIO_Clock_Enable+0xd0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d849      	bhi.n	80030de <GPIO_Clock_Enable+0xb6>
 800304a:	4a2c      	ldr	r2, [pc, #176]	@ (80030fc <GPIO_Clock_Enable+0xd4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d031      	beq.n	80030b4 <GPIO_Clock_Enable+0x8c>
 8003050:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <GPIO_Clock_Enable+0xd4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d843      	bhi.n	80030de <GPIO_Clock_Enable+0xb6>
 8003056:	4a2a      	ldr	r2, [pc, #168]	@ (8003100 <GPIO_Clock_Enable+0xd8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d024      	beq.n	80030a6 <GPIO_Clock_Enable+0x7e>
 800305c:	4a28      	ldr	r2, [pc, #160]	@ (8003100 <GPIO_Clock_Enable+0xd8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d83d      	bhi.n	80030de <GPIO_Clock_Enable+0xb6>
 8003062:	4a28      	ldr	r2, [pc, #160]	@ (8003104 <GPIO_Clock_Enable+0xdc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d017      	beq.n	8003098 <GPIO_Clock_Enable+0x70>
 8003068:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <GPIO_Clock_Enable+0xdc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d837      	bhi.n	80030de <GPIO_Clock_Enable+0xb6>
 800306e:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <GPIO_Clock_Enable+0xe0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <GPIO_Clock_Enable+0x54>
 8003074:	4a25      	ldr	r2, [pc, #148]	@ (800310c <GPIO_Clock_Enable+0xe4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <GPIO_Clock_Enable+0x62>
 800307a:	e030      	b.n	80030de <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 800307c:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6313      	str	r3, [r2, #48]	@ 0x30
 8003088:	e02c      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	4a20      	ldr	r2, [pc, #128]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6313      	str	r3, [r2, #48]	@ 0x30
 8003096:	e025      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8003098:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a4:	e01e      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 80030a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a19      	ldr	r2, [pc, #100]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	e017      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a15      	ldr	r2, [pc, #84]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030ba:	f043 0310 	orr.w	r3, r3, #16
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	e010      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030c8:	f043 0320 	orr.w	r3, r3, #32
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	e009      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003110 <GPIO_Clock_Enable+0xe8>)
 80030d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030da:	6313      	str	r3, [r2, #48]	@ 0x30
 80030dc:	e002      	b.n	80030e4 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	e000      	b.n	80030e6 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021c00 	.word	0x40021c00
 80030f8:	40021400 	.word	0x40021400
 80030fc:	40021000 	.word	0x40021000
 8003100:	40020c00 	.word	0x40020c00
 8003104:	40020800 	.word	0x40020800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40023800 	.word	0x40023800

08003114 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	70fb      	strb	r3, [r7, #3]
 8003126:	460b      	mov	r3, r1
 8003128:	70bb      	strb	r3, [r7, #2]
 800312a:	4613      	mov	r3, r2
 800312c:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff7a 	bl	8003028 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	0052      	lsls	r2, r2, #1
 800313c:	2103      	movs	r1, #3
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	43d2      	mvns	r2, r2
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78b9      	ldrb	r1, [r7, #2]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	0052      	lsls	r2, r2, #1
 8003154:	fa01 f202 	lsl.w	r2, r1, r2
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	43d2      	mvns	r2, r2
 800316c:	401a      	ands	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8003172:	2202      	movs	r2, #2
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	4293      	cmp	r3, r2
 8003178:	d008      	beq.n	800318c <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	7879      	ldrb	r1, [r7, #1]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	fa01 f202 	lsl.w	r2, r1, r2
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	0052      	lsls	r2, r2, #1
 8003194:	2103      	movs	r1, #3
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	43d2      	mvns	r2, r2
 800319c:	401a      	ands	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 80031a2:	2204      	movs	r2, #4
 80031a4:	7c3b      	ldrb	r3, [r7, #16]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	7c39      	ldrb	r1, [r7, #16]
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	0052      	lsls	r2, r2, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	2103      	movs	r1, #3
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	43d2      	mvns	r2, r2
 80031ce:	401a      	ands	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 80031d4:	2204      	movs	r2, #4
 80031d6:	7d3b      	ldrb	r3, [r7, #20]
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	7d39      	ldrb	r1, [r7, #20]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	0052      	lsls	r2, r2, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 80031f0:	2202      	movs	r2, #2
 80031f2:	78bb      	ldrb	r3, [r7, #2]
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d12f      	bne.n	8003258 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2b07      	cmp	r3, #7
 80031fc:	d815      	bhi.n	800322a <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	210f      	movs	r1, #15
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	43d2      	mvns	r2, r2
 800320e:	401a      	ands	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	7e39      	ldrb	r1, [r7, #24]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	e016      	b.n	8003258 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	3a08      	subs	r2, #8
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	210f      	movs	r1, #15
 8003236:	fa01 f202 	lsl.w	r2, r1, r2
 800323a:	43d2      	mvns	r2, r2
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	7e39      	ldrb	r1, [r7, #24]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	3a08      	subs	r2, #8
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	fa01 f202 	lsl.w	r2, r1, r2
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <__NVIC_EnableIRQ>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	2b00      	cmp	r3, #0
 8003274:	db0b      	blt.n	800328e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4907      	ldr	r1, [pc, #28]	@ (800329c <__NVIC_EnableIRQ+0x38>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2001      	movs	r0, #1
 8003286:	fa00 f202 	lsl.w	r2, r0, r2
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	@ (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <SystemAPB1_Clock_Speed>:


void BSP_Init(void);

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <SystemAPB1_Clock_Speed+0x24>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a07      	ldr	r2, [pc, #28]	@ (800331c <SystemAPB1_Clock_Speed+0x28>)
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	0a92      	lsrs	r2, r2, #10
 8003302:	f002 0207 	and.w	r2, r2, #7
 8003306:	4906      	ldr	r1, [pc, #24]	@ (8003320 <SystemAPB1_Clock_Speed+0x2c>)
 8003308:	5c8a      	ldrb	r2, [r1, r2]
 800330a:	40d3      	lsrs	r3, r2
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000000 	.word	0x20000000
 800331c:	40023800 	.word	0x40023800
 8003320:	08006b0c 	.word	0x08006b0c

08003324 <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003328:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <SystemAPB2_Clock_Speed+0x24>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a07      	ldr	r2, [pc, #28]	@ (800334c <SystemAPB2_Clock_Speed+0x28>)
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	0b52      	lsrs	r2, r2, #13
 8003332:	f002 0207 	and.w	r2, r2, #7
 8003336:	4906      	ldr	r1, [pc, #24]	@ (8003350 <SystemAPB2_Clock_Speed+0x2c>)
 8003338:	5c8a      	ldrb	r2, [r1, r2]
 800333a:	40d3      	lsrs	r3, r2
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000000 	.word	0x20000000
 800334c:	40023800 	.word	0x40023800
 8003350:	08006b0c 	.word	0x08006b0c

08003354 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	ed87 0b02 	vstr	d0, [r7, #8]
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8003362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003366:	f7fd fc09 	bl	8000b7c <__aeabi_d2lz>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	f7fd f913 	bl	800059c <__aeabi_l2d>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	6839      	ldr	r1, [r7, #0]
 800337c:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800338a:	f7fc ff7d 	bl	8000288 <__aeabi_dsub>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <USART1_TX_ISR>:
volatile bool U5RX_Complete = 0;

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	U1TX_Complete = 1;
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <USART1_TX_ISR+0x14>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	200008da 	.word	0x200008da

080033b8 <USART1_RX_ISR>:

void USART1_RX_ISR() {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
	U1RX_Complete = 1;
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <USART1_RX_ISR+0x14>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	200008db 	.word	0x200008db

080033d0 <USART2_TX_ISR>:

void USART2_TX_ISR() {
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
	U2TX_Complete = 1;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <USART2_TX_ISR+0x14>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200008dc 	.word	0x200008dc

080033e8 <USART2_RX_ISR>:

void USART2_RX_ISR() {
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	U2RX_Complete = 1;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <USART2_RX_ISR+0x14>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	200008dd 	.word	0x200008dd

08003400 <USART3_TX_ISR>:

void USART3_TX_ISR() {
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	U3TX_Complete = 1;
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <USART3_TX_ISR+0x14>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	200008de 	.word	0x200008de

08003418 <USART3_RX_ISR>:

void USART3_RX_ISR() {
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
	U3RX_Complete = 1;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <USART3_RX_ISR+0x14>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	200008df 	.word	0x200008df

08003430 <USART4_TX_ISR>:

void USART4_TX_ISR() {
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	U4TX_Complete = 1;
 8003434:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <USART4_TX_ISR+0x14>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	200008e0 	.word	0x200008e0

08003448 <USART4_RX_ISR>:

void USART4_RX_ISR() {
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
	U4RX_Complete = 1;
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <USART4_RX_ISR+0x14>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	200008e1 	.word	0x200008e1

08003460 <USART5_TX_ISR>:

void USART5_TX_ISR() {
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
	U5TX_Complete = 1;
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <USART5_TX_ISR+0x14>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	200008e2 	.word	0x200008e2

08003478 <USART5_RX_ISR>:

void USART5_RX_ISR() {
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	U5RX_Complete = 1;
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <USART5_RX_ISR+0x14>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	200008e3 	.word	0x200008e3

08003490 <USART6_TX_ISR>:

void USART6_TX_ISR() {
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	U6TX_Complete = 1;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <USART6_TX_ISR+0x14>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	200008e4 	.word	0x200008e4

080034a8 <USART6_RX_ISR>:

void USART6_RX_ISR() {
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
	U6RX_Complete = 1;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <USART6_RX_ISR+0x14>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	200008e5 	.word	0x200008e5

080034c0 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 80034c4:	4b57      	ldr	r3, [pc, #348]	@ (8003624 <UART4_IRQHandler+0x164>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	4b57      	ldr	r3, [pc, #348]	@ (8003628 <UART4_IRQHandler+0x168>)
 80034cc:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80034ce:	4b56      	ldr	r3, [pc, #344]	@ (8003628 <UART4_IRQHandler+0x168>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <UART4_IRQHandler+0x3e>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80034dc:	4b53      	ldr	r3, [pc, #332]	@ (800362c <UART4_IRQHandler+0x16c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <UART4_IRQHandler+0x3e>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80034e8:	4b50      	ldr	r3, [pc, #320]	@ (800362c <UART4_IRQHandler+0x16c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034f0:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80034f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003624 <UART4_IRQHandler+0x164>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4b      	ldr	r2, [pc, #300]	@ (8003624 <UART4_IRQHandler+0x164>)
 80034f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034fc:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <UART4_IRQHandler+0x168>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <UART4_IRQHandler+0x6e>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 800350c:	4b47      	ldr	r3, [pc, #284]	@ (800362c <UART4_IRQHandler+0x16c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART4_IRQHandler+0x6e>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003518:	4b44      	ldr	r3, [pc, #272]	@ (800362c <UART4_IRQHandler+0x16c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003520:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8003522:	4b40      	ldr	r3, [pc, #256]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3f      	ldr	r2, [pc, #252]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800352c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 800352e:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <UART4_IRQHandler+0x168>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <UART4_IRQHandler+0x9e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 800353c:	4b3b      	ldr	r3, [pc, #236]	@ (800362c <UART4_IRQHandler+0x16c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART4_IRQHandler+0x9e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003548:	4b38      	ldr	r3, [pc, #224]	@ (800362c <UART4_IRQHandler+0x16c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003550:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8003552:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800355c:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 800355e:	4b32      	ldr	r3, [pc, #200]	@ (8003628 <UART4_IRQHandler+0x168>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 800356c:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <UART4_IRQHandler+0x16c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003578:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <UART4_IRQHandler+0x16c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003580:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8003582:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800358c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 800358e:	4b26      	ldr	r3, [pc, #152]	@ (8003628 <UART4_IRQHandler+0x168>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <UART4_IRQHandler+0xfe>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 800359c:	4b23      	ldr	r3, [pc, #140]	@ (800362c <UART4_IRQHandler+0x16c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART4_IRQHandler+0xfe>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80035a8:	4b20      	ldr	r3, [pc, #128]	@ (800362c <UART4_IRQHandler+0x16c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035b0:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <UART4_IRQHandler+0x164>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003624 <UART4_IRQHandler+0x164>)
 80035b8:	f023 0320 	bic.w	r3, r3, #32
 80035bc:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <UART4_IRQHandler+0x168>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <UART4_IRQHandler+0x12e>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80035cc:	4b17      	ldr	r3, [pc, #92]	@ (800362c <UART4_IRQHandler+0x16c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART4_IRQHandler+0x12e>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <UART4_IRQHandler+0x16c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035e0:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80035e2:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <UART4_IRQHandler+0x164>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003624 <UART4_IRQHandler+0x164>)
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <UART4_IRQHandler+0x168>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <UART4_IRQHandler+0x15e>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <UART4_IRQHandler+0x16c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART4_IRQHandler+0x15e>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8003608:	4b08      	ldr	r3, [pc, #32]	@ (800362c <UART4_IRQHandler+0x16c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003610:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a03      	ldr	r2, [pc, #12]	@ (8003624 <UART4_IRQHandler+0x164>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6013      	str	r3, [r2, #0]
		}
	}

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40004c00 	.word	0x40004c00
 8003628:	200008d8 	.word	0x200008d8
 800362c:	200008d0 	.word	0x200008d0

08003630 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8003634:	4b57      	ldr	r3, [pc, #348]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b57      	ldr	r3, [pc, #348]	@ (8003798 <USART1_IRQHandler+0x168>)
 800363c:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 800363e:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <USART1_IRQHandler+0x168>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <USART1_IRQHandler+0x3e>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 800364c:	4b53      	ldr	r3, [pc, #332]	@ (800379c <USART1_IRQHandler+0x16c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <USART1_IRQHandler+0x3e>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8003658:	4b50      	ldr	r3, [pc, #320]	@ (800379c <USART1_IRQHandler+0x16c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003660:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8003662:	4b4c      	ldr	r3, [pc, #304]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4b      	ldr	r2, [pc, #300]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800366c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 800366e:	4b4a      	ldr	r3, [pc, #296]	@ (8003798 <USART1_IRQHandler+0x168>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <USART1_IRQHandler+0x6e>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 800367c:	4b47      	ldr	r3, [pc, #284]	@ (800379c <USART1_IRQHandler+0x16c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <USART1_IRQHandler+0x6e>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003688:	4b44      	ldr	r3, [pc, #272]	@ (800379c <USART1_IRQHandler+0x16c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003690:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8003692:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3f      	ldr	r2, [pc, #252]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 800369e:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <USART1_IRQHandler+0x168>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <USART1_IRQHandler+0x9e>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80036ac:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <USART1_IRQHandler+0x16c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <USART1_IRQHandler+0x9e>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80036b8:	4b38      	ldr	r3, [pc, #224]	@ (800379c <USART1_IRQHandler+0x16c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80036c0:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <USART1_IRQHandler+0x164>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a33      	ldr	r2, [pc, #204]	@ (8003794 <USART1_IRQHandler+0x164>)
 80036c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036cc:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 80036ce:	4b32      	ldr	r3, [pc, #200]	@ (8003798 <USART1_IRQHandler+0x168>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <USART1_IRQHandler+0xce>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80036dc:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <USART1_IRQHandler+0x16c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <USART1_IRQHandler+0xce>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80036e8:	4b2c      	ldr	r3, [pc, #176]	@ (800379c <USART1_IRQHandler+0x16c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80036f0:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80036f2:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <USART1_IRQHandler+0x164>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a27      	ldr	r2, [pc, #156]	@ (8003794 <USART1_IRQHandler+0x164>)
 80036f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036fc:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 80036fe:	4b26      	ldr	r3, [pc, #152]	@ (8003798 <USART1_IRQHandler+0x168>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <USART1_IRQHandler+0xfe>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <USART1_IRQHandler+0x16c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <USART1_IRQHandler+0xfe>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8003718:	4b20      	ldr	r3, [pc, #128]	@ (800379c <USART1_IRQHandler+0x16c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003720:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8003722:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003728:	f023 0320 	bic.w	r3, r3, #32
 800372c:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <USART1_IRQHandler+0x168>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <USART1_IRQHandler+0x12e>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 800373c:	4b17      	ldr	r3, [pc, #92]	@ (800379c <USART1_IRQHandler+0x16c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <USART1_IRQHandler+0x12e>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <USART1_IRQHandler+0x16c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003750:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8003752:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003758:	f023 0310 	bic.w	r3, r3, #16
 800375c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <USART1_IRQHandler+0x168>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d010      	beq.n	800378e <USART1_IRQHandler+0x15e>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <USART1_IRQHandler+0x16c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <USART1_IRQHandler+0x15e>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <USART1_IRQHandler+0x16c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003780:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8003782:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a03      	ldr	r2, [pc, #12]	@ (8003794 <USART1_IRQHandler+0x164>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6013      	str	r3, [r2, #0]
		}
	}

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40011000 	.word	0x40011000
 8003798:	200008d8 	.word	0x200008d8
 800379c:	200008c4 	.word	0x200008c4

080037a0 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a17      	ldr	r2, [pc, #92]	@ (800380c <USART_Get_Instance_Number+0x6c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <USART_Get_Instance_Number+0x16>
 80037b2:	2300      	movs	r3, #0
 80037b4:	e024      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <USART_Get_Instance_Number+0x70>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <USART_Get_Instance_Number+0x24>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e01d      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <USART_Get_Instance_Number+0x74>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <USART_Get_Instance_Number+0x32>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e016      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a10      	ldr	r2, [pc, #64]	@ (8003818 <USART_Get_Instance_Number+0x78>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <USART_Get_Instance_Number+0x40>
 80037dc:	2303      	movs	r3, #3
 80037de:	e00f      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <USART_Get_Instance_Number+0x7c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <USART_Get_Instance_Number+0x4e>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e008      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003820 <USART_Get_Instance_Number+0x80>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <USART_Get_Instance_Number+0x5c>
 80037f8:	2305      	movs	r3, #5
 80037fa:	e001      	b.n	8003800 <USART_Get_Instance_Number+0x60>
	else {return -1;}
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40011000 	.word	0x40011000
 8003810:	40004400 	.word	0x40004400
 8003814:	40004800 	.word	0x40004800
 8003818:	40004c00 	.word	0x40004c00
 800381c:	40005000 	.word	0x40005000
 8003820:	40011400 	.word	0x40011400

08003824 <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 800382c:	2200      	movs	r2, #0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 8003832:	2200      	movs	r2, #0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800383e:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8003840:	2200      	movs	r2, #0
 8003842:	2300      	movs	r3, #0
 8003844:	4313      	orrs	r3, r2
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 800384c:	2300      	movs	r3, #0
 800384e:	b2da      	uxtb	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	739a      	strb	r2, [r3, #14]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a27      	ldr	r2, [pc, #156]	@ (800390c <USART_Clock_Enable+0xac>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d106      	bne.n	8003880 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8003872:	4b27      	ldr	r3, [pc, #156]	@ (8003910 <USART_Clock_Enable+0xb0>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	4a26      	ldr	r2, [pc, #152]	@ (8003910 <USART_Clock_Enable+0xb0>)
 8003878:	f043 0310 	orr.w	r3, r3, #16
 800387c:	6453      	str	r3, [r2, #68]	@ 0x44
 800387e:	e03e      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <USART_Clock_Enable+0xb4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d106      	bne.n	8003898 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800388a:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <USART_Clock_Enable+0xb0>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <USART_Clock_Enable+0xb0>)
 8003890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003894:	6413      	str	r3, [r2, #64]	@ 0x40
 8003896:	e032      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1e      	ldr	r2, [pc, #120]	@ (8003918 <USART_Clock_Enable+0xb8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d106      	bne.n	80038b0 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ae:	e026      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a19      	ldr	r2, [pc, #100]	@ (800391c <USART_Clock_Enable+0xbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d106      	bne.n	80038c8 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	e01a      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <USART_Clock_Enable+0xc0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d106      	bne.n	80038e0 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80038d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038de:	e00e      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003924 <USART_Clock_Enable+0xc4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d106      	bne.n	80038f8 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <USART_Clock_Enable+0xb0>)
 80038f0:	f043 0320 	orr.w	r3, r3, #32
 80038f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f6:	e002      	b.n	80038fe <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e000      	b.n	8003900 <USART_Clock_Enable+0xa0>
	}
	return 1;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40011000 	.word	0x40011000
 8003910:	40023800 	.word	0x40023800
 8003914:	40004400 	.word	0x40004400
 8003918:	40004800 	.word	0x40004800
 800391c:	40004c00 	.word	0x40004c00
 8003920:	40005000 	.word	0x40005000
 8003924:	40011400 	.word	0x40011400

08003928 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af04      	add	r7, sp, #16
 800392e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4aa4      	ldr	r2, [pc, #656]	@ (8003bc8 <PIN_Setup+0x2a0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	f040 8112 	bne.w	8003b60 <PIN_Setup+0x238>
	{
		__usart_1_config__ = config;
 800393c:	4aa3      	ldr	r2, [pc, #652]	@ (8003bcc <PIN_Setup+0x2a4>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]

		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7a1b      	ldrb	r3, [r3, #8]
 8003946:	2201      	movs	r2, #1
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7a1b      	ldrb	r3, [r3, #8]
 8003950:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003952:	4293      	cmp	r3, r2
 8003954:	d00a      	beq.n	800396c <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7a1b      	ldrb	r3, [r3, #8]
 800395a:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 800395c:	4293      	cmp	r3, r2
 800395e:	d005      	beq.n	800396c <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7a1b      	ldrb	r3, [r3, #8]
 8003964:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003966:	4293      	cmp	r3, r2
 8003968:	f040 80bf 	bne.w	8003aea <PIN_Setup+0x1c2>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a5b      	ldrb	r3, [r3, #9]
 8003970:	2209      	movs	r2, #9
 8003972:	4293      	cmp	r3, r2
 8003974:	d10f      	bne.n	8003996 <PIN_Setup+0x6e>
 8003976:	2009      	movs	r0, #9
 8003978:	2402      	movs	r4, #2
 800397a:	2500      	movs	r5, #0
 800397c:	2302      	movs	r3, #2
 800397e:	2200      	movs	r2, #0
 8003980:	2107      	movs	r1, #7
 8003982:	9102      	str	r1, [sp, #8]
 8003984:	9201      	str	r2, [sp, #4]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	462b      	mov	r3, r5
 800398a:	4622      	mov	r2, r4
 800398c:	4601      	mov	r1, r0
 800398e:	4890      	ldr	r0, [pc, #576]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003990:	f7ff fbc0 	bl	8003114 <GPIO_Pin_Init>
 8003994:	e013      	b.n	80039be <PIN_Setup+0x96>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7a5b      	ldrb	r3, [r3, #9]
 800399a:	2206      	movs	r2, #6
 800399c:	4293      	cmp	r3, r2
 800399e:	d10e      	bne.n	80039be <PIN_Setup+0x96>
 80039a0:	2006      	movs	r0, #6
 80039a2:	2402      	movs	r4, #2
 80039a4:	2500      	movs	r5, #0
 80039a6:	2302      	movs	r3, #2
 80039a8:	2200      	movs	r2, #0
 80039aa:	2107      	movs	r1, #7
 80039ac:	9102      	str	r1, [sp, #8]
 80039ae:	9201      	str	r2, [sp, #4]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	462b      	mov	r3, r5
 80039b4:	4622      	mov	r2, r4
 80039b6:	4601      	mov	r1, r0
 80039b8:	4886      	ldr	r0, [pc, #536]	@ (8003bd4 <PIN_Setup+0x2ac>)
 80039ba:	f7ff fbab 	bl	8003114 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7a9b      	ldrb	r3, [r3, #10]
 80039c2:	220a      	movs	r2, #10
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10f      	bne.n	80039e8 <PIN_Setup+0xc0>
 80039c8:	200a      	movs	r0, #10
 80039ca:	2402      	movs	r4, #2
 80039cc:	2500      	movs	r5, #0
 80039ce:	2302      	movs	r3, #2
 80039d0:	2200      	movs	r2, #0
 80039d2:	2107      	movs	r1, #7
 80039d4:	9102      	str	r1, [sp, #8]
 80039d6:	9201      	str	r2, [sp, #4]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	462b      	mov	r3, r5
 80039dc:	4622      	mov	r2, r4
 80039de:	4601      	mov	r1, r0
 80039e0:	487b      	ldr	r0, [pc, #492]	@ (8003bd0 <PIN_Setup+0x2a8>)
 80039e2:	f7ff fb97 	bl	8003114 <GPIO_Pin_Init>
 80039e6:	e013      	b.n	8003a10 <PIN_Setup+0xe8>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7a9b      	ldrb	r3, [r3, #10]
 80039ec:	2207      	movs	r2, #7
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10e      	bne.n	8003a10 <PIN_Setup+0xe8>
 80039f2:	2007      	movs	r0, #7
 80039f4:	2402      	movs	r4, #2
 80039f6:	2500      	movs	r5, #0
 80039f8:	2302      	movs	r3, #2
 80039fa:	2200      	movs	r2, #0
 80039fc:	2107      	movs	r1, #7
 80039fe:	9102      	str	r1, [sp, #8]
 8003a00:	9201      	str	r2, [sp, #4]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	462b      	mov	r3, r5
 8003a06:	4622      	mov	r2, r4
 8003a08:	4601      	mov	r1, r0
 8003a0a:	4872      	ldr	r0, [pc, #456]	@ (8003bd4 <PIN_Setup+0x2ac>)
 8003a0c:	f7ff fb82 	bl	8003114 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7a1b      	ldrb	r3, [r3, #8]
 8003a14:	2202      	movs	r2, #2
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d113      	bne.n	8003a42 <PIN_Setup+0x11a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7adb      	ldrb	r3, [r3, #11]
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10e      	bne.n	8003a42 <PIN_Setup+0x11a>
 8003a24:	2008      	movs	r0, #8
 8003a26:	2402      	movs	r4, #2
 8003a28:	2500      	movs	r5, #0
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2107      	movs	r1, #7
 8003a30:	9102      	str	r1, [sp, #8]
 8003a32:	9201      	str	r2, [sp, #4]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	462b      	mov	r3, r5
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	4864      	ldr	r0, [pc, #400]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003a3e:	f7ff fb69 	bl	8003114 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7bdb      	ldrb	r3, [r3, #15]
 8003a46:	2200      	movs	r2, #0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f000 851a 	beq.w	8004482 <PIN_Setup+0xb5a>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7bdb      	ldrb	r3, [r3, #15]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10e      	bne.n	8003a76 <PIN_Setup+0x14e>
 8003a58:	200b      	movs	r0, #11
 8003a5a:	2402      	movs	r4, #2
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	2302      	movs	r3, #2
 8003a60:	2200      	movs	r2, #0
 8003a62:	2107      	movs	r1, #7
 8003a64:	9102      	str	r1, [sp, #8]
 8003a66:	9201      	str	r2, [sp, #4]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4601      	mov	r1, r0
 8003a70:	4857      	ldr	r0, [pc, #348]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003a72:	f7ff fb4f 	bl	8003114 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7bdb      	ldrb	r3, [r3, #15]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10e      	bne.n	8003a9e <PIN_Setup+0x176>
 8003a80:	200c      	movs	r0, #12
 8003a82:	2402      	movs	r4, #2
 8003a84:	2500      	movs	r5, #0
 8003a86:	2302      	movs	r3, #2
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2107      	movs	r1, #7
 8003a8c:	9102      	str	r1, [sp, #8]
 8003a8e:	9201      	str	r2, [sp, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	462b      	mov	r3, r5
 8003a94:	4622      	mov	r2, r4
 8003a96:	4601      	mov	r1, r0
 8003a98:	484d      	ldr	r0, [pc, #308]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003a9a:	f7ff fb3b 	bl	8003114 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7bdb      	ldrb	r3, [r3, #15]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f040 84ec 	bne.w	8004482 <PIN_Setup+0xb5a>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003aaa:	200b      	movs	r0, #11
 8003aac:	2402      	movs	r4, #2
 8003aae:	2500      	movs	r5, #0
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2107      	movs	r1, #7
 8003ab6:	9102      	str	r1, [sp, #8]
 8003ab8:	9201      	str	r2, [sp, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	462b      	mov	r3, r5
 8003abe:	4622      	mov	r2, r4
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4843      	ldr	r0, [pc, #268]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003ac4:	f7ff fb26 	bl	8003114 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003ac8:	200c      	movs	r0, #12
 8003aca:	2402      	movs	r4, #2
 8003acc:	2500      	movs	r5, #0
 8003ace:	2302      	movs	r3, #2
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2107      	movs	r1, #7
 8003ad4:	9102      	str	r1, [sp, #8]
 8003ad6:	9201      	str	r2, [sp, #4]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	462b      	mov	r3, r5
 8003adc:	4622      	mov	r2, r4
 8003ade:	4601      	mov	r1, r0
 8003ae0:	483b      	ldr	r0, [pc, #236]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003ae2:	f7ff fb17 	bl	8003114 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003ae6:	f000 bccc 	b.w	8004482 <PIN_Setup+0xb5a>
				}
			}
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7a1b      	ldrb	r3, [r3, #8]
 8003aee:	2206      	movs	r2, #6
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00a      	beq.n	8003b0a <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7a1b      	ldrb	r3, [r3, #8]
 8003af8:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d005      	beq.n	8003b0a <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7a1b      	ldrb	r3, [r3, #8]
 8003b02:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f040 84c1 	bne.w	800448c <PIN_Setup+0xb64>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7a5b      	ldrb	r3, [r3, #9]
 8003b0e:	2209      	movs	r2, #9
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10e      	bne.n	8003b32 <PIN_Setup+0x20a>
 8003b14:	2009      	movs	r0, #9
 8003b16:	2402      	movs	r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2107      	movs	r1, #7
 8003b20:	9102      	str	r1, [sp, #8]
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462b      	mov	r3, r5
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	4828      	ldr	r0, [pc, #160]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003b2e:	f7ff faf1 	bl	8003114 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	2207      	movs	r2, #7
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f040 84a7 	bne.w	800448c <PIN_Setup+0xb64>
 8003b3e:	2008      	movs	r0, #8
 8003b40:	2402      	movs	r4, #2
 8003b42:	2500      	movs	r5, #0
 8003b44:	2302      	movs	r3, #2
 8003b46:	2200      	movs	r2, #0
 8003b48:	2107      	movs	r1, #7
 8003b4a:	9102      	str	r1, [sp, #8]
 8003b4c:	9201      	str	r2, [sp, #4]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462b      	mov	r3, r5
 8003b52:	4622      	mov	r2, r4
 8003b54:	4601      	mov	r1, r0
 8003b56:	481e      	ldr	r0, [pc, #120]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003b58:	f7ff fadc 	bl	8003114 <GPIO_Pin_Init>

		}
	}


}
 8003b5c:	f000 bc96 	b.w	800448c <PIN_Setup+0xb64>
	else if(config->Port == USART2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <PIN_Setup+0x2b0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 8182 	bne.w	8003e70 <PIN_Setup+0x548>
		__usart_2_config__ = config;
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <PIN_Setup+0x2b4>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7a1b      	ldrb	r3, [r3, #8]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7a1b      	ldrb	r3, [r3, #8]
 8003b80:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00a      	beq.n	8003b9c <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7a1b      	ldrb	r3, [r3, #8]
 8003b8a:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d005      	beq.n	8003b9c <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7a1b      	ldrb	r3, [r3, #8]
 8003b94:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f040 80fc 	bne.w	8003d94 <PIN_Setup+0x46c>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7a5b      	ldrb	r3, [r3, #9]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d11c      	bne.n	8003be0 <PIN_Setup+0x2b8>
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	2402      	movs	r4, #2
 8003baa:	2500      	movs	r5, #0
 8003bac:	2302      	movs	r3, #2
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	9102      	str	r1, [sp, #8]
 8003bb4:	9201      	str	r2, [sp, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	462b      	mov	r3, r5
 8003bba:	4622      	mov	r2, r4
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4804      	ldr	r0, [pc, #16]	@ (8003bd0 <PIN_Setup+0x2a8>)
 8003bc0:	f7ff faa8 	bl	8003114 <GPIO_Pin_Init>
 8003bc4:	e020      	b.n	8003c08 <PIN_Setup+0x2e0>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	200008c4 	.word	0x200008c4
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	40004400 	.word	0x40004400
 8003bdc:	200008c8 	.word	0x200008c8
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7a5b      	ldrb	r3, [r3, #9]
 8003be4:	2205      	movs	r2, #5
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10e      	bne.n	8003c08 <PIN_Setup+0x2e0>
 8003bea:	2005      	movs	r0, #5
 8003bec:	2402      	movs	r4, #2
 8003bee:	2500      	movs	r5, #0
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2107      	movs	r1, #7
 8003bf6:	9102      	str	r1, [sp, #8]
 8003bf8:	9201      	str	r2, [sp, #4]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4601      	mov	r1, r0
 8003c02:	4899      	ldr	r0, [pc, #612]	@ (8003e68 <PIN_Setup+0x540>)
 8003c04:	f7ff fa86 	bl	8003114 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7a9b      	ldrb	r3, [r3, #10]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10f      	bne.n	8003c32 <PIN_Setup+0x30a>
 8003c12:	2003      	movs	r0, #3
 8003c14:	2402      	movs	r4, #2
 8003c16:	2500      	movs	r5, #0
 8003c18:	2302      	movs	r3, #2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2107      	movs	r1, #7
 8003c1e:	9102      	str	r1, [sp, #8]
 8003c20:	9201      	str	r2, [sp, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	462b      	mov	r3, r5
 8003c26:	4622      	mov	r2, r4
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4890      	ldr	r0, [pc, #576]	@ (8003e6c <PIN_Setup+0x544>)
 8003c2c:	f7ff fa72 	bl	8003114 <GPIO_Pin_Init>
 8003c30:	e013      	b.n	8003c5a <PIN_Setup+0x332>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7a9b      	ldrb	r3, [r3, #10]
 8003c36:	2206      	movs	r2, #6
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10e      	bne.n	8003c5a <PIN_Setup+0x332>
 8003c3c:	2006      	movs	r0, #6
 8003c3e:	2402      	movs	r4, #2
 8003c40:	2500      	movs	r5, #0
 8003c42:	2302      	movs	r3, #2
 8003c44:	2200      	movs	r2, #0
 8003c46:	2107      	movs	r1, #7
 8003c48:	9102      	str	r1, [sp, #8]
 8003c4a:	9201      	str	r2, [sp, #4]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	462b      	mov	r3, r5
 8003c50:	4622      	mov	r2, r4
 8003c52:	4601      	mov	r1, r0
 8003c54:	4884      	ldr	r0, [pc, #528]	@ (8003e68 <PIN_Setup+0x540>)
 8003c56:	f7ff fa5d 	bl	8003114 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	7a1b      	ldrb	r3, [r3, #8]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d128      	bne.n	8003cb6 <PIN_Setup+0x38e>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7adb      	ldrb	r3, [r3, #11]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10f      	bne.n	8003c8e <PIN_Setup+0x366>
 8003c6e:	2004      	movs	r0, #4
 8003c70:	2402      	movs	r4, #2
 8003c72:	2500      	movs	r5, #0
 8003c74:	2302      	movs	r3, #2
 8003c76:	2200      	movs	r2, #0
 8003c78:	2107      	movs	r1, #7
 8003c7a:	9102      	str	r1, [sp, #8]
 8003c7c:	9201      	str	r2, [sp, #4]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	462b      	mov	r3, r5
 8003c82:	4622      	mov	r2, r4
 8003c84:	4601      	mov	r1, r0
 8003c86:	4879      	ldr	r0, [pc, #484]	@ (8003e6c <PIN_Setup+0x544>)
 8003c88:	f7ff fa44 	bl	8003114 <GPIO_Pin_Init>
 8003c8c:	e013      	b.n	8003cb6 <PIN_Setup+0x38e>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7adb      	ldrb	r3, [r3, #11]
 8003c92:	2207      	movs	r2, #7
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10e      	bne.n	8003cb6 <PIN_Setup+0x38e>
 8003c98:	2007      	movs	r0, #7
 8003c9a:	2402      	movs	r4, #2
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2107      	movs	r1, #7
 8003ca4:	9102      	str	r1, [sp, #8]
 8003ca6:	9201      	str	r2, [sp, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462b      	mov	r3, r5
 8003cac:	4622      	mov	r2, r4
 8003cae:	4601      	mov	r1, r0
 8003cb0:	486e      	ldr	r0, [pc, #440]	@ (8003e6c <PIN_Setup+0x544>)
 8003cb2:	f7ff fa2f 	bl	8003114 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7bdb      	ldrb	r3, [r3, #15]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d105      	bne.n	8003ccc <PIN_Setup+0x3a4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7bdb      	ldrb	r3, [r3, #15]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 83dd 	bne.w	8004486 <PIN_Setup+0xb5e>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7bdb      	ldrb	r3, [r3, #15]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d128      	bne.n	8003d28 <PIN_Setup+0x400>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7adb      	ldrb	r3, [r3, #11]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10f      	bne.n	8003d00 <PIN_Setup+0x3d8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	2402      	movs	r4, #2
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2107      	movs	r1, #7
 8003cec:	9102      	str	r1, [sp, #8]
 8003cee:	9201      	str	r2, [sp, #4]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	485c      	ldr	r0, [pc, #368]	@ (8003e6c <PIN_Setup+0x544>)
 8003cfa:	f7ff fa0b 	bl	8003114 <GPIO_Pin_Init>
 8003cfe:	e013      	b.n	8003d28 <PIN_Setup+0x400>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7adb      	ldrb	r3, [r3, #11]
 8003d04:	2203      	movs	r2, #3
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10e      	bne.n	8003d28 <PIN_Setup+0x400>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	2402      	movs	r4, #2
 8003d0e:	2500      	movs	r5, #0
 8003d10:	2302      	movs	r3, #2
 8003d12:	2200      	movs	r2, #0
 8003d14:	2107      	movs	r1, #7
 8003d16:	9102      	str	r1, [sp, #8]
 8003d18:	9201      	str	r2, [sp, #4]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4601      	mov	r1, r0
 8003d22:	4851      	ldr	r0, [pc, #324]	@ (8003e68 <PIN_Setup+0x540>)
 8003d24:	f7ff f9f6 	bl	8003114 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7bdb      	ldrb	r3, [r3, #15]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d005      	beq.n	8003d3e <PIN_Setup+0x416>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7bdb      	ldrb	r3, [r3, #15]
 8003d36:	2203      	movs	r2, #3
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	f040 83a4 	bne.w	8004486 <PIN_Setup+0xb5e>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7adb      	ldrb	r3, [r3, #11]
 8003d42:	2201      	movs	r2, #1
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10f      	bne.n	8003d68 <PIN_Setup+0x440>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d48:	2001      	movs	r0, #1
 8003d4a:	2402      	movs	r4, #2
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	2302      	movs	r3, #2
 8003d50:	2200      	movs	r2, #0
 8003d52:	2107      	movs	r1, #7
 8003d54:	9102      	str	r1, [sp, #8]
 8003d56:	9201      	str	r2, [sp, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4842      	ldr	r0, [pc, #264]	@ (8003e6c <PIN_Setup+0x544>)
 8003d62:	f7ff f9d7 	bl	8003114 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d66:	e38e      	b.n	8004486 <PIN_Setup+0xb5e>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7adb      	ldrb	r3, [r3, #11]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f040 8389 	bne.w	8004486 <PIN_Setup+0xb5e>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d74:	2004      	movs	r0, #4
 8003d76:	2402      	movs	r4, #2
 8003d78:	2500      	movs	r5, #0
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2107      	movs	r1, #7
 8003d80:	9102      	str	r1, [sp, #8]
 8003d82:	9201      	str	r2, [sp, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462b      	mov	r3, r5
 8003d88:	4622      	mov	r2, r4
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	4836      	ldr	r0, [pc, #216]	@ (8003e68 <PIN_Setup+0x540>)
 8003d8e:	f7ff f9c1 	bl	8003114 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d92:	e378      	b.n	8004486 <PIN_Setup+0xb5e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7a1b      	ldrb	r3, [r3, #8]
 8003d98:	2206      	movs	r2, #6
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00a      	beq.n	8003db4 <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7a1b      	ldrb	r3, [r3, #8]
 8003da2:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d005      	beq.n	8003db4 <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7a1b      	ldrb	r3, [r3, #8]
 8003dac:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f040 836c 	bne.w	800448c <PIN_Setup+0xb64>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7a5b      	ldrb	r3, [r3, #9]
 8003db8:	2202      	movs	r2, #2
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10f      	bne.n	8003dde <PIN_Setup+0x4b6>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	2402      	movs	r4, #2
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2107      	movs	r1, #7
 8003dca:	9102      	str	r1, [sp, #8]
 8003dcc:	9201      	str	r2, [sp, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	4825      	ldr	r0, [pc, #148]	@ (8003e6c <PIN_Setup+0x544>)
 8003dd8:	f7ff f99c 	bl	8003114 <GPIO_Pin_Init>
 8003ddc:	e013      	b.n	8003e06 <PIN_Setup+0x4de>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7a5b      	ldrb	r3, [r3, #9]
 8003de2:	2205      	movs	r2, #5
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10e      	bne.n	8003e06 <PIN_Setup+0x4de>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003de8:	2005      	movs	r0, #5
 8003dea:	2402      	movs	r4, #2
 8003dec:	2500      	movs	r5, #0
 8003dee:	2302      	movs	r3, #2
 8003df0:	2200      	movs	r2, #0
 8003df2:	2107      	movs	r1, #7
 8003df4:	9102      	str	r1, [sp, #8]
 8003df6:	9201      	str	r2, [sp, #4]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4601      	mov	r1, r0
 8003e00:	4819      	ldr	r0, [pc, #100]	@ (8003e68 <PIN_Setup+0x540>)
 8003e02:	f7ff f987 	bl	8003114 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7a1b      	ldrb	r3, [r3, #8]
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	f040 833d 	bne.w	800448c <PIN_Setup+0xb64>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7adb      	ldrb	r3, [r3, #11]
 8003e16:	2204      	movs	r2, #4
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10f      	bne.n	8003e3c <PIN_Setup+0x514>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003e1c:	2004      	movs	r0, #4
 8003e1e:	2402      	movs	r4, #2
 8003e20:	2500      	movs	r5, #0
 8003e22:	2302      	movs	r3, #2
 8003e24:	2200      	movs	r2, #0
 8003e26:	2107      	movs	r1, #7
 8003e28:	9102      	str	r1, [sp, #8]
 8003e2a:	9201      	str	r2, [sp, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	462b      	mov	r3, r5
 8003e30:	4622      	mov	r2, r4
 8003e32:	4601      	mov	r1, r0
 8003e34:	480d      	ldr	r0, [pc, #52]	@ (8003e6c <PIN_Setup+0x544>)
 8003e36:	f7ff f96d 	bl	8003114 <GPIO_Pin_Init>
}
 8003e3a:	e327      	b.n	800448c <PIN_Setup+0xb64>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7adb      	ldrb	r3, [r3, #11]
 8003e40:	2207      	movs	r2, #7
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 8322 	bne.w	800448c <PIN_Setup+0xb64>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003e48:	2007      	movs	r0, #7
 8003e4a:	2402      	movs	r4, #2
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	2302      	movs	r3, #2
 8003e50:	2200      	movs	r2, #0
 8003e52:	2107      	movs	r1, #7
 8003e54:	9102      	str	r1, [sp, #8]
 8003e56:	9201      	str	r2, [sp, #4]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	4601      	mov	r1, r0
 8003e60:	4802      	ldr	r0, [pc, #8]	@ (8003e6c <PIN_Setup+0x544>)
 8003e62:	f7ff f957 	bl	8003114 <GPIO_Pin_Init>
}
 8003e66:	e311      	b.n	800448c <PIN_Setup+0xb64>
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a9a      	ldr	r2, [pc, #616]	@ (80040e0 <PIN_Setup+0x7b8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f040 81b5 	bne.w	80041e6 <PIN_Setup+0x8be>
		__usart_3_config__ = config;
 8003e7c:	4a99      	ldr	r2, [pc, #612]	@ (80040e4 <PIN_Setup+0x7bc>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7a1b      	ldrb	r3, [r3, #8]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7a1b      	ldrb	r3, [r3, #8]
 8003e90:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00a      	beq.n	8003eac <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7a1b      	ldrb	r3, [r3, #8]
 8003e9a:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d005      	beq.n	8003eac <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7a1b      	ldrb	r3, [r3, #8]
 8003ea4:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f040 8124 	bne.w	80040f4 <PIN_Setup+0x7cc>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7a5b      	ldrb	r3, [r3, #9]
 8003eb0:	220b      	movs	r2, #11
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10f      	bne.n	8003ed6 <PIN_Setup+0x5ae>
 8003eb6:	200b      	movs	r0, #11
 8003eb8:	2402      	movs	r4, #2
 8003eba:	2500      	movs	r5, #0
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2107      	movs	r1, #7
 8003ec2:	9102      	str	r1, [sp, #8]
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462b      	mov	r3, r5
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4886      	ldr	r0, [pc, #536]	@ (80040e8 <PIN_Setup+0x7c0>)
 8003ed0:	f7ff f920 	bl	8003114 <GPIO_Pin_Init>
 8003ed4:	e028      	b.n	8003f28 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7a5b      	ldrb	r3, [r3, #9]
 8003eda:	220a      	movs	r2, #10
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10f      	bne.n	8003f00 <PIN_Setup+0x5d8>
 8003ee0:	200a      	movs	r0, #10
 8003ee2:	2402      	movs	r4, #2
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2107      	movs	r1, #7
 8003eec:	9102      	str	r1, [sp, #8]
 8003eee:	9201      	str	r2, [sp, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	487c      	ldr	r0, [pc, #496]	@ (80040ec <PIN_Setup+0x7c4>)
 8003efa:	f7ff f90b 	bl	8003114 <GPIO_Pin_Init>
 8003efe:	e013      	b.n	8003f28 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	7a5b      	ldrb	r3, [r3, #9]
 8003f04:	2208      	movs	r2, #8
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10e      	bne.n	8003f28 <PIN_Setup+0x600>
 8003f0a:	2008      	movs	r0, #8
 8003f0c:	2402      	movs	r4, #2
 8003f0e:	2500      	movs	r5, #0
 8003f10:	2302      	movs	r3, #2
 8003f12:	2200      	movs	r2, #0
 8003f14:	2107      	movs	r1, #7
 8003f16:	9102      	str	r1, [sp, #8]
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4601      	mov	r1, r0
 8003f22:	4872      	ldr	r0, [pc, #456]	@ (80040ec <PIN_Setup+0x7c4>)
 8003f24:	f7ff f8f6 	bl	8003114 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7a9b      	ldrb	r3, [r3, #10]
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10f      	bne.n	8003f52 <PIN_Setup+0x62a>
 8003f32:	200a      	movs	r0, #10
 8003f34:	2402      	movs	r4, #2
 8003f36:	2500      	movs	r5, #0
 8003f38:	2302      	movs	r3, #2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2107      	movs	r1, #7
 8003f3e:	9102      	str	r1, [sp, #8]
 8003f40:	9201      	str	r2, [sp, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	462b      	mov	r3, r5
 8003f46:	4622      	mov	r2, r4
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4867      	ldr	r0, [pc, #412]	@ (80040e8 <PIN_Setup+0x7c0>)
 8003f4c:	f7ff f8e2 	bl	8003114 <GPIO_Pin_Init>
 8003f50:	e028      	b.n	8003fa4 <PIN_Setup+0x67c>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7a9b      	ldrb	r3, [r3, #10]
 8003f56:	220b      	movs	r2, #11
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10f      	bne.n	8003f7c <PIN_Setup+0x654>
 8003f5c:	200b      	movs	r0, #11
 8003f5e:	2402      	movs	r4, #2
 8003f60:	2500      	movs	r5, #0
 8003f62:	2302      	movs	r3, #2
 8003f64:	2200      	movs	r2, #0
 8003f66:	2107      	movs	r1, #7
 8003f68:	9102      	str	r1, [sp, #8]
 8003f6a:	9201      	str	r2, [sp, #4]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	462b      	mov	r3, r5
 8003f70:	4622      	mov	r2, r4
 8003f72:	4601      	mov	r1, r0
 8003f74:	485d      	ldr	r0, [pc, #372]	@ (80040ec <PIN_Setup+0x7c4>)
 8003f76:	f7ff f8cd 	bl	8003114 <GPIO_Pin_Init>
 8003f7a:	e013      	b.n	8003fa4 <PIN_Setup+0x67c>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7a5b      	ldrb	r3, [r3, #9]
 8003f80:	2208      	movs	r2, #8
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10e      	bne.n	8003fa4 <PIN_Setup+0x67c>
 8003f86:	2008      	movs	r0, #8
 8003f88:	2402      	movs	r4, #2
 8003f8a:	2500      	movs	r5, #0
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2107      	movs	r1, #7
 8003f92:	9102      	str	r1, [sp, #8]
 8003f94:	9201      	str	r2, [sp, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	462b      	mov	r3, r5
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4601      	mov	r1, r0
 8003f9e:	4853      	ldr	r0, [pc, #332]	@ (80040ec <PIN_Setup+0x7c4>)
 8003fa0:	f7ff f8b8 	bl	8003114 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7a1b      	ldrb	r3, [r3, #8]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d128      	bne.n	8004000 <PIN_Setup+0x6d8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7adb      	ldrb	r3, [r3, #11]
 8003fb2:	220c      	movs	r2, #12
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10f      	bne.n	8003fd8 <PIN_Setup+0x6b0>
 8003fb8:	200c      	movs	r0, #12
 8003fba:	2402      	movs	r4, #2
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2107      	movs	r1, #7
 8003fc4:	9102      	str	r1, [sp, #8]
 8003fc6:	9201      	str	r2, [sp, #4]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	462b      	mov	r3, r5
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4601      	mov	r1, r0
 8003fd0:	4846      	ldr	r0, [pc, #280]	@ (80040ec <PIN_Setup+0x7c4>)
 8003fd2:	f7ff f89f 	bl	8003114 <GPIO_Pin_Init>
 8003fd6:	e013      	b.n	8004000 <PIN_Setup+0x6d8>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7adb      	ldrb	r3, [r3, #11]
 8003fdc:	220a      	movs	r2, #10
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10e      	bne.n	8004000 <PIN_Setup+0x6d8>
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	2402      	movs	r4, #2
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	2302      	movs	r3, #2
 8003fea:	2200      	movs	r2, #0
 8003fec:	2107      	movs	r1, #7
 8003fee:	9102      	str	r1, [sp, #8]
 8003ff0:	9201      	str	r2, [sp, #4]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	483d      	ldr	r0, [pc, #244]	@ (80040f0 <PIN_Setup+0x7c8>)
 8003ffc:	f7ff f88a 	bl	8003114 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7bdb      	ldrb	r3, [r3, #15]
 8004004:	2200      	movs	r2, #0
 8004006:	4293      	cmp	r3, r2
 8004008:	f000 823f 	beq.w	800448a <PIN_Setup+0xb62>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7bdb      	ldrb	r3, [r3, #15]
 8004010:	2201      	movs	r2, #1
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <PIN_Setup+0x6f8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7bdb      	ldrb	r3, [r3, #15]
 800401a:	2203      	movs	r2, #3
 800401c:	4293      	cmp	r3, r2
 800401e:	d128      	bne.n	8004072 <PIN_Setup+0x74a>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7adb      	ldrb	r3, [r3, #11]
 8004024:	2200      	movs	r2, #0
 8004026:	4293      	cmp	r3, r2
 8004028:	d10f      	bne.n	800404a <PIN_Setup+0x722>
 800402a:	2000      	movs	r0, #0
 800402c:	2402      	movs	r4, #2
 800402e:	2500      	movs	r5, #0
 8004030:	2302      	movs	r3, #2
 8004032:	2200      	movs	r2, #0
 8004034:	2107      	movs	r1, #7
 8004036:	9102      	str	r1, [sp, #8]
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	462b      	mov	r3, r5
 800403e:	4622      	mov	r2, r4
 8004040:	4601      	mov	r1, r0
 8004042:	482a      	ldr	r0, [pc, #168]	@ (80040ec <PIN_Setup+0x7c4>)
 8004044:	f7ff f866 	bl	8003114 <GPIO_Pin_Init>
 8004048:	e013      	b.n	8004072 <PIN_Setup+0x74a>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7adb      	ldrb	r3, [r3, #11]
 800404e:	2203      	movs	r2, #3
 8004050:	4293      	cmp	r3, r2
 8004052:	d10e      	bne.n	8004072 <PIN_Setup+0x74a>
 8004054:	2003      	movs	r0, #3
 8004056:	2402      	movs	r4, #2
 8004058:	2500      	movs	r5, #0
 800405a:	2302      	movs	r3, #2
 800405c:	2200      	movs	r2, #0
 800405e:	2107      	movs	r1, #7
 8004060:	9102      	str	r1, [sp, #8]
 8004062:	9201      	str	r2, [sp, #4]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	462b      	mov	r3, r5
 8004068:	4622      	mov	r2, r4
 800406a:	4601      	mov	r1, r0
 800406c:	4820      	ldr	r0, [pc, #128]	@ (80040f0 <PIN_Setup+0x7c8>)
 800406e:	f7ff f851 	bl	8003114 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7bdb      	ldrb	r3, [r3, #15]
 8004076:	2202      	movs	r2, #2
 8004078:	4293      	cmp	r3, r2
 800407a:	d005      	beq.n	8004088 <PIN_Setup+0x760>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7bdb      	ldrb	r3, [r3, #15]
 8004080:	2203      	movs	r2, #3
 8004082:	4293      	cmp	r3, r2
 8004084:	f040 8201 	bne.w	800448a <PIN_Setup+0xb62>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7adb      	ldrb	r3, [r3, #11]
 800408c:	2201      	movs	r2, #1
 800408e:	4293      	cmp	r3, r2
 8004090:	d10f      	bne.n	80040b2 <PIN_Setup+0x78a>
 8004092:	2001      	movs	r0, #1
 8004094:	2402      	movs	r4, #2
 8004096:	2500      	movs	r5, #0
 8004098:	2302      	movs	r3, #2
 800409a:	2200      	movs	r2, #0
 800409c:	2107      	movs	r1, #7
 800409e:	9102      	str	r1, [sp, #8]
 80040a0:	9201      	str	r2, [sp, #4]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	462b      	mov	r3, r5
 80040a6:	4622      	mov	r2, r4
 80040a8:	4601      	mov	r1, r0
 80040aa:	4810      	ldr	r0, [pc, #64]	@ (80040ec <PIN_Setup+0x7c4>)
 80040ac:	f7ff f832 	bl	8003114 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80040b0:	e1eb      	b.n	800448a <PIN_Setup+0xb62>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7adb      	ldrb	r3, [r3, #11]
 80040b6:	2204      	movs	r2, #4
 80040b8:	4293      	cmp	r3, r2
 80040ba:	f040 81e6 	bne.w	800448a <PIN_Setup+0xb62>
 80040be:	2004      	movs	r0, #4
 80040c0:	2402      	movs	r4, #2
 80040c2:	2500      	movs	r5, #0
 80040c4:	2302      	movs	r3, #2
 80040c6:	2200      	movs	r2, #0
 80040c8:	2107      	movs	r1, #7
 80040ca:	9102      	str	r1, [sp, #8]
 80040cc:	9201      	str	r2, [sp, #4]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	462b      	mov	r3, r5
 80040d2:	4622      	mov	r2, r4
 80040d4:	4601      	mov	r1, r0
 80040d6:	4806      	ldr	r0, [pc, #24]	@ (80040f0 <PIN_Setup+0x7c8>)
 80040d8:	f7ff f81c 	bl	8003114 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80040dc:	e1d5      	b.n	800448a <PIN_Setup+0xb62>
 80040de:	bf00      	nop
 80040e0:	40004800 	.word	0x40004800
 80040e4:	200008cc 	.word	0x200008cc
 80040e8:	40020000 	.word	0x40020000
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020c00 	.word	0x40020c00
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7a1b      	ldrb	r3, [r3, #8]
 80040f8:	2206      	movs	r2, #6
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00a      	beq.n	8004114 <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7a1b      	ldrb	r3, [r3, #8]
 8004102:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004104:	4293      	cmp	r3, r2
 8004106:	d005      	beq.n	8004114 <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7a1b      	ldrb	r3, [r3, #8]
 800410c:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800410e:	4293      	cmp	r3, r2
 8004110:	f040 81bc 	bne.w	800448c <PIN_Setup+0xb64>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7a5b      	ldrb	r3, [r3, #9]
 8004118:	220b      	movs	r2, #11
 800411a:	4293      	cmp	r3, r2
 800411c:	d10f      	bne.n	800413e <PIN_Setup+0x816>
 800411e:	200b      	movs	r0, #11
 8004120:	2402      	movs	r4, #2
 8004122:	2500      	movs	r5, #0
 8004124:	2302      	movs	r3, #2
 8004126:	2200      	movs	r2, #0
 8004128:	2107      	movs	r1, #7
 800412a:	9102      	str	r1, [sp, #8]
 800412c:	9201      	str	r2, [sp, #4]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	462b      	mov	r3, r5
 8004132:	4622      	mov	r2, r4
 8004134:	4601      	mov	r1, r0
 8004136:	4883      	ldr	r0, [pc, #524]	@ (8004344 <PIN_Setup+0xa1c>)
 8004138:	f7fe ffec 	bl	8003114 <GPIO_Pin_Init>
 800413c:	e028      	b.n	8004190 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7a5b      	ldrb	r3, [r3, #9]
 8004142:	220a      	movs	r2, #10
 8004144:	4293      	cmp	r3, r2
 8004146:	d10f      	bne.n	8004168 <PIN_Setup+0x840>
 8004148:	200a      	movs	r0, #10
 800414a:	2402      	movs	r4, #2
 800414c:	2500      	movs	r5, #0
 800414e:	2302      	movs	r3, #2
 8004150:	2200      	movs	r2, #0
 8004152:	2107      	movs	r1, #7
 8004154:	9102      	str	r1, [sp, #8]
 8004156:	9201      	str	r2, [sp, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	462b      	mov	r3, r5
 800415c:	4622      	mov	r2, r4
 800415e:	4601      	mov	r1, r0
 8004160:	4879      	ldr	r0, [pc, #484]	@ (8004348 <PIN_Setup+0xa20>)
 8004162:	f7fe ffd7 	bl	8003114 <GPIO_Pin_Init>
 8004166:	e013      	b.n	8004190 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7a5b      	ldrb	r3, [r3, #9]
 800416c:	2208      	movs	r2, #8
 800416e:	4293      	cmp	r3, r2
 8004170:	d10e      	bne.n	8004190 <PIN_Setup+0x868>
 8004172:	2008      	movs	r0, #8
 8004174:	2402      	movs	r4, #2
 8004176:	2500      	movs	r5, #0
 8004178:	2302      	movs	r3, #2
 800417a:	2200      	movs	r2, #0
 800417c:	2107      	movs	r1, #7
 800417e:	9102      	str	r1, [sp, #8]
 8004180:	9201      	str	r2, [sp, #4]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	462b      	mov	r3, r5
 8004186:	4622      	mov	r2, r4
 8004188:	4601      	mov	r1, r0
 800418a:	486f      	ldr	r0, [pc, #444]	@ (8004348 <PIN_Setup+0xa20>)
 800418c:	f7fe ffc2 	bl	8003114 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7adb      	ldrb	r3, [r3, #11]
 8004194:	220c      	movs	r2, #12
 8004196:	4293      	cmp	r3, r2
 8004198:	d10f      	bne.n	80041ba <PIN_Setup+0x892>
 800419a:	200c      	movs	r0, #12
 800419c:	2402      	movs	r4, #2
 800419e:	2500      	movs	r5, #0
 80041a0:	2302      	movs	r3, #2
 80041a2:	2200      	movs	r2, #0
 80041a4:	2107      	movs	r1, #7
 80041a6:	9102      	str	r1, [sp, #8]
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462b      	mov	r3, r5
 80041ae:	4622      	mov	r2, r4
 80041b0:	4601      	mov	r1, r0
 80041b2:	4865      	ldr	r0, [pc, #404]	@ (8004348 <PIN_Setup+0xa20>)
 80041b4:	f7fe ffae 	bl	8003114 <GPIO_Pin_Init>
}
 80041b8:	e168      	b.n	800448c <PIN_Setup+0xb64>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7adb      	ldrb	r3, [r3, #11]
 80041be:	220a      	movs	r2, #10
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f040 8163 	bne.w	800448c <PIN_Setup+0xb64>
 80041c6:	200a      	movs	r0, #10
 80041c8:	2402      	movs	r4, #2
 80041ca:	2500      	movs	r5, #0
 80041cc:	2302      	movs	r3, #2
 80041ce:	2200      	movs	r2, #0
 80041d0:	2107      	movs	r1, #7
 80041d2:	9102      	str	r1, [sp, #8]
 80041d4:	9201      	str	r2, [sp, #4]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462b      	mov	r3, r5
 80041da:	4622      	mov	r2, r4
 80041dc:	4601      	mov	r1, r0
 80041de:	485b      	ldr	r0, [pc, #364]	@ (800434c <PIN_Setup+0xa24>)
 80041e0:	f7fe ff98 	bl	8003114 <GPIO_Pin_Init>
}
 80041e4:	e152      	b.n	800448c <PIN_Setup+0xb64>
	else if(config -> Port == UART4)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a59      	ldr	r2, [pc, #356]	@ (8004350 <PIN_Setup+0xa28>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d166      	bne.n	80042be <PIN_Setup+0x996>
		__usart_4_config__ = config;
 80041f0:	4a58      	ldr	r2, [pc, #352]	@ (8004354 <PIN_Setup+0xa2c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7a1b      	ldrb	r3, [r3, #8]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00a      	beq.n	8004216 <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7a1b      	ldrb	r3, [r3, #8]
 8004204:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004206:	4293      	cmp	r3, r2
 8004208:	d005      	beq.n	8004216 <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.LIN))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7a1b      	ldrb	r3, [r3, #8]
 800420e:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004210:	4293      	cmp	r3, r2
 8004212:	f040 813b 	bne.w	800448c <PIN_Setup+0xb64>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7a5b      	ldrb	r3, [r3, #9]
 800421a:	2200      	movs	r2, #0
 800421c:	4293      	cmp	r3, r2
 800421e:	d10f      	bne.n	8004240 <PIN_Setup+0x918>
 8004220:	2000      	movs	r0, #0
 8004222:	2402      	movs	r4, #2
 8004224:	2500      	movs	r5, #0
 8004226:	2302      	movs	r3, #2
 8004228:	2200      	movs	r2, #0
 800422a:	2108      	movs	r1, #8
 800422c:	9102      	str	r1, [sp, #8]
 800422e:	9201      	str	r2, [sp, #4]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	462b      	mov	r3, r5
 8004234:	4622      	mov	r2, r4
 8004236:	4601      	mov	r1, r0
 8004238:	4842      	ldr	r0, [pc, #264]	@ (8004344 <PIN_Setup+0xa1c>)
 800423a:	f7fe ff6b 	bl	8003114 <GPIO_Pin_Init>
 800423e:	e013      	b.n	8004268 <PIN_Setup+0x940>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7a5b      	ldrb	r3, [r3, #9]
 8004244:	220a      	movs	r2, #10
 8004246:	4293      	cmp	r3, r2
 8004248:	d10e      	bne.n	8004268 <PIN_Setup+0x940>
 800424a:	200a      	movs	r0, #10
 800424c:	2402      	movs	r4, #2
 800424e:	2500      	movs	r5, #0
 8004250:	2302      	movs	r3, #2
 8004252:	2200      	movs	r2, #0
 8004254:	2108      	movs	r1, #8
 8004256:	9102      	str	r1, [sp, #8]
 8004258:	9201      	str	r2, [sp, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	462b      	mov	r3, r5
 800425e:	4622      	mov	r2, r4
 8004260:	4601      	mov	r1, r0
 8004262:	483d      	ldr	r0, [pc, #244]	@ (8004358 <PIN_Setup+0xa30>)
 8004264:	f7fe ff56 	bl	8003114 <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7a9b      	ldrb	r3, [r3, #10]
 800426c:	2201      	movs	r2, #1
 800426e:	4293      	cmp	r3, r2
 8004270:	d10f      	bne.n	8004292 <PIN_Setup+0x96a>
 8004272:	2001      	movs	r0, #1
 8004274:	2402      	movs	r4, #2
 8004276:	2500      	movs	r5, #0
 8004278:	2302      	movs	r3, #2
 800427a:	2200      	movs	r2, #0
 800427c:	2108      	movs	r1, #8
 800427e:	9102      	str	r1, [sp, #8]
 8004280:	9201      	str	r2, [sp, #4]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462b      	mov	r3, r5
 8004286:	4622      	mov	r2, r4
 8004288:	4601      	mov	r1, r0
 800428a:	482e      	ldr	r0, [pc, #184]	@ (8004344 <PIN_Setup+0xa1c>)
 800428c:	f7fe ff42 	bl	8003114 <GPIO_Pin_Init>
}
 8004290:	e0fc      	b.n	800448c <PIN_Setup+0xb64>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7a9b      	ldrb	r3, [r3, #10]
 8004296:	220b      	movs	r2, #11
 8004298:	4293      	cmp	r3, r2
 800429a:	f040 80f7 	bne.w	800448c <PIN_Setup+0xb64>
 800429e:	200b      	movs	r0, #11
 80042a0:	2402      	movs	r4, #2
 80042a2:	2500      	movs	r5, #0
 80042a4:	2302      	movs	r3, #2
 80042a6:	2200      	movs	r2, #0
 80042a8:	2108      	movs	r1, #8
 80042aa:	9102      	str	r1, [sp, #8]
 80042ac:	9201      	str	r2, [sp, #4]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	462b      	mov	r3, r5
 80042b2:	4622      	mov	r2, r4
 80042b4:	4601      	mov	r1, r0
 80042b6:	4828      	ldr	r0, [pc, #160]	@ (8004358 <PIN_Setup+0xa30>)
 80042b8:	f7fe ff2c 	bl	8003114 <GPIO_Pin_Init>
}
 80042bc:	e0e6      	b.n	800448c <PIN_Setup+0xb64>
	else if(config -> Port == UART5)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a26      	ldr	r2, [pc, #152]	@ (800435c <PIN_Setup+0xa34>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d14d      	bne.n	8004364 <PIN_Setup+0xa3c>
		__usart_5_config__ = config;
 80042c8:	4a25      	ldr	r2, [pc, #148]	@ (8004360 <PIN_Setup+0xa38>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7a1b      	ldrb	r3, [r3, #8]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00a      	beq.n	80042ee <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7a1b      	ldrb	r3, [r3, #8]
 80042dc:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80042de:	4293      	cmp	r3, r2
 80042e0:	d005      	beq.n	80042ee <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.LIN))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7a1b      	ldrb	r3, [r3, #8]
 80042e6:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80042e8:	4293      	cmp	r3, r2
 80042ea:	f040 80cf 	bne.w	800448c <PIN_Setup+0xb64>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7a5b      	ldrb	r3, [r3, #9]
 80042f2:	2202      	movs	r2, #2
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10e      	bne.n	8004316 <PIN_Setup+0x9ee>
 80042f8:	2002      	movs	r0, #2
 80042fa:	2402      	movs	r4, #2
 80042fc:	2500      	movs	r5, #0
 80042fe:	2302      	movs	r3, #2
 8004300:	2200      	movs	r2, #0
 8004302:	2108      	movs	r1, #8
 8004304:	9102      	str	r1, [sp, #8]
 8004306:	9201      	str	r2, [sp, #4]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	462b      	mov	r3, r5
 800430c:	4622      	mov	r2, r4
 800430e:	4601      	mov	r1, r0
 8004310:	480c      	ldr	r0, [pc, #48]	@ (8004344 <PIN_Setup+0xa1c>)
 8004312:	f7fe feff 	bl	8003114 <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7a9b      	ldrb	r3, [r3, #10]
 800431a:	220c      	movs	r2, #12
 800431c:	4293      	cmp	r3, r2
 800431e:	f040 80b5 	bne.w	800448c <PIN_Setup+0xb64>
 8004322:	200c      	movs	r0, #12
 8004324:	2402      	movs	r4, #2
 8004326:	2500      	movs	r5, #0
 8004328:	2302      	movs	r3, #2
 800432a:	2200      	movs	r2, #0
 800432c:	2108      	movs	r1, #8
 800432e:	9102      	str	r1, [sp, #8]
 8004330:	9201      	str	r2, [sp, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	462b      	mov	r3, r5
 8004336:	4622      	mov	r2, r4
 8004338:	4601      	mov	r1, r0
 800433a:	4802      	ldr	r0, [pc, #8]	@ (8004344 <PIN_Setup+0xa1c>)
 800433c:	f7fe feea 	bl	8003114 <GPIO_Pin_Init>
}
 8004340:	e0a4      	b.n	800448c <PIN_Setup+0xb64>
 8004342:	bf00      	nop
 8004344:	40020000 	.word	0x40020000
 8004348:	40020400 	.word	0x40020400
 800434c:	40020c00 	.word	0x40020c00
 8004350:	40004c00 	.word	0x40004c00
 8004354:	200008d0 	.word	0x200008d0
 8004358:	40020800 	.word	0x40020800
 800435c:	40005000 	.word	0x40005000
 8004360:	200008d4 	.word	0x200008d4
	else if(config->Port == USART6)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a4a      	ldr	r2, [pc, #296]	@ (8004494 <PIN_Setup+0xb6c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f040 808e 	bne.w	800448c <PIN_Setup+0xb64>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7a1b      	ldrb	r3, [r3, #8]
 8004374:	2201      	movs	r2, #1
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7a1b      	ldrb	r3, [r3, #8]
 800437e:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7a1b      	ldrb	r3, [r3, #8]
 8004388:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.LIN) )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7a1b      	ldrb	r3, [r3, #8]
 8004392:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d13c      	bne.n	8004412 <PIN_Setup+0xaea>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7a5b      	ldrb	r3, [r3, #9]
 800439c:	2206      	movs	r2, #6
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10e      	bne.n	80043c0 <PIN_Setup+0xa98>
 80043a2:	2006      	movs	r0, #6
 80043a4:	2402      	movs	r4, #2
 80043a6:	2500      	movs	r5, #0
 80043a8:	2302      	movs	r3, #2
 80043aa:	2200      	movs	r2, #0
 80043ac:	2108      	movs	r1, #8
 80043ae:	9102      	str	r1, [sp, #8]
 80043b0:	9201      	str	r2, [sp, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	462b      	mov	r3, r5
 80043b6:	4622      	mov	r2, r4
 80043b8:	4601      	mov	r1, r0
 80043ba:	4837      	ldr	r0, [pc, #220]	@ (8004498 <PIN_Setup+0xb70>)
 80043bc:	f7fe feaa 	bl	8003114 <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7a9b      	ldrb	r3, [r3, #10]
 80043c4:	2207      	movs	r2, #7
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10e      	bne.n	80043e8 <PIN_Setup+0xac0>
 80043ca:	2007      	movs	r0, #7
 80043cc:	2402      	movs	r4, #2
 80043ce:	2500      	movs	r5, #0
 80043d0:	2302      	movs	r3, #2
 80043d2:	2200      	movs	r2, #0
 80043d4:	2108      	movs	r1, #8
 80043d6:	9102      	str	r1, [sp, #8]
 80043d8:	9201      	str	r2, [sp, #4]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	462b      	mov	r3, r5
 80043de:	4622      	mov	r2, r4
 80043e0:	4601      	mov	r1, r0
 80043e2:	482d      	ldr	r0, [pc, #180]	@ (8004498 <PIN_Setup+0xb70>)
 80043e4:	f7fe fe96 	bl	8003114 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7adb      	ldrb	r3, [r3, #11]
 80043ec:	2208      	movs	r2, #8
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d14c      	bne.n	800448c <PIN_Setup+0xb64>
 80043f2:	2008      	movs	r0, #8
 80043f4:	2402      	movs	r4, #2
 80043f6:	2500      	movs	r5, #0
 80043f8:	2302      	movs	r3, #2
 80043fa:	2200      	movs	r2, #0
 80043fc:	2108      	movs	r1, #8
 80043fe:	9102      	str	r1, [sp, #8]
 8004400:	9201      	str	r2, [sp, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	462b      	mov	r3, r5
 8004406:	4622      	mov	r2, r4
 8004408:	4601      	mov	r1, r0
 800440a:	4823      	ldr	r0, [pc, #140]	@ (8004498 <PIN_Setup+0xb70>)
 800440c:	f7fe fe82 	bl	8003114 <GPIO_Pin_Init>
 8004410:	e03c      	b.n	800448c <PIN_Setup+0xb64>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7a1b      	ldrb	r3, [r3, #8]
 8004416:	2206      	movs	r2, #6
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7a1b      	ldrb	r3, [r3, #8]
 8004420:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7a1b      	ldrb	r3, [r3, #8]
 800442a:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800442c:	4293      	cmp	r3, r2
 800442e:	d12d      	bne.n	800448c <PIN_Setup+0xb64>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7a5b      	ldrb	r3, [r3, #9]
 8004434:	2206      	movs	r2, #6
 8004436:	4293      	cmp	r3, r2
 8004438:	d10e      	bne.n	8004458 <PIN_Setup+0xb30>
 800443a:	2006      	movs	r0, #6
 800443c:	2402      	movs	r4, #2
 800443e:	2500      	movs	r5, #0
 8004440:	2302      	movs	r3, #2
 8004442:	2200      	movs	r2, #0
 8004444:	2108      	movs	r1, #8
 8004446:	9102      	str	r1, [sp, #8]
 8004448:	9201      	str	r2, [sp, #4]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	462b      	mov	r3, r5
 800444e:	4622      	mov	r2, r4
 8004450:	4601      	mov	r1, r0
 8004452:	4812      	ldr	r0, [pc, #72]	@ (800449c <PIN_Setup+0xb74>)
 8004454:	f7fe fe5e 	bl	8003114 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7a1b      	ldrb	r3, [r3, #8]
 800445c:	2207      	movs	r2, #7
 800445e:	4293      	cmp	r3, r2
 8004460:	d114      	bne.n	800448c <PIN_Setup+0xb64>
 8004462:	2008      	movs	r0, #8
 8004464:	2402      	movs	r4, #2
 8004466:	2500      	movs	r5, #0
 8004468:	2302      	movs	r3, #2
 800446a:	2200      	movs	r2, #0
 800446c:	2108      	movs	r1, #8
 800446e:	9102      	str	r1, [sp, #8]
 8004470:	9201      	str	r2, [sp, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	462b      	mov	r3, r5
 8004476:	4622      	mov	r2, r4
 8004478:	4601      	mov	r1, r0
 800447a:	4808      	ldr	r0, [pc, #32]	@ (800449c <PIN_Setup+0xb74>)
 800447c:	f7fe fe4a 	bl	8003114 <GPIO_Pin_Init>
}
 8004480:	e004      	b.n	800448c <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <PIN_Setup+0xb64>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800448a:	bf00      	nop
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bdb0      	pop	{r4, r5, r7, pc}
 8004494:	40011400 	.word	0x40011400
 8004498:	40020800 	.word	0x40020800
 800449c:	40020000 	.word	0x40020000

080044a0 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b08e      	sub	sp, #56	@ 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff f9d9 	bl	8003860 <USART_Clock_Enable>
	PIN_Setup(config);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fa3a 	bl	8003928 <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff f973 	bl	80037a0 <USART_Get_Instance_Number>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	4b74      	ldr	r3, [pc, #464]	@ (8004690 <USART_Init+0x1f0>)
 80044c0:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 80044c2:	4b73      	ldr	r3, [pc, #460]	@ (8004690 <USART_Init+0x1f0>)
 80044c4:	f993 3000 	ldrsb.w	r3, [r3]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d103      	bne.n	80044d6 <USART_Init+0x36>
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	f000 bc26 	b.w	8004d22 <USART_Init+0x882>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if((config -> Port == USART1) || (config -> Port == USART6))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6e      	ldr	r2, [pc, #440]	@ (8004694 <USART_Init+0x1f4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <USART_Init+0x4a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004698 <USART_Init+0x1f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d150      	bne.n	800458c <USART_Init+0xec>
	{
		uint32_t freq = SystemAPB2_Clock_Speed();
 80044ea:	f7fe ff1b 	bl	8003324 <SystemAPB2_Clock_Speed>
 80044ee:	4603      	mov	r3, r0
 80044f0:	61fb      	str	r3, [r7, #28]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 80044f2:	69f8      	ldr	r0, [r7, #28]
 80044f4:	f7fc f806 	bl	8000504 <__aeabi_ui2d>
 80044f8:	4604      	mov	r4, r0
 80044fa:	460d      	mov	r5, r1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb ffff 	bl	8000504 <__aeabi_ui2d>
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	4b64      	ldr	r3, [pc, #400]	@ (800469c <USART_Init+0x1fc>)
 800450c:	f7fc f874 	bl	80005f8 <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4620      	mov	r0, r4
 8004516:	4629      	mov	r1, r5
 8004518:	f7fc f998 	bl	800084c <__aeabi_ddiv>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8004524:	f107 0208 	add.w	r2, r7, #8
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	ed97 0b08 	vldr	d0, [r7, #32]
 8004534:	f7fe ff0e 	bl	8003354 <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 8004538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	4b57      	ldr	r3, [pc, #348]	@ (80046a0 <USART_Init+0x200>)
 8004542:	f7fc f859 	bl	80005f8 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	ec43 2b17 	vmov	d7, r2, r3
 800454e:	eeb0 0a47 	vmov.f32	s0, s14
 8004552:	eef0 0a67 	vmov.f32	s1, s15
 8004556:	f002 f81f 	bl	8006598 <ceil>
 800455a:	ec53 2b10 	vmov	r2, r3, d0
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	f7fc fae3 	bl	8000b2c <__aeabi_d2iz>
 8004566:	4603      	mov	r3, r0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 800456a:	ed97 7b02 	vldr	d7, [r7, #8]
 800456e:	eeb0 0a47 	vmov.f32	s0, s14
 8004572:	eef0 0a67 	vmov.f32	s1, s15
 8004576:	f002 f80f 	bl	8006598 <ceil>
 800457a:	ec53 2b10 	vmov	r2, r3, d0
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	f7fc fad3 	bl	8000b2c <__aeabi_d2iz>
 8004586:	4603      	mov	r3, r0
 8004588:	633b      	str	r3, [r7, #48]	@ 0x30
	{
 800458a:	e04f      	b.n	800462c <USART_Init+0x18c>
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
 800458c:	f7fe feb2 	bl	80032f4 <SystemAPB1_Clock_Speed>
 8004590:	4603      	mov	r3, r0
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 8004594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004596:	f7fb ffb5 	bl	8000504 <__aeabi_ui2d>
 800459a:	4604      	mov	r4, r0
 800459c:	460d      	mov	r5, r1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fb ffae 	bl	8000504 <__aeabi_ui2d>
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	4b3c      	ldr	r3, [pc, #240]	@ (80046a0 <USART_Init+0x200>)
 80045ae:	f7fc f823 	bl	80005f8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fc f947 	bl	800084c <__aeabi_ddiv>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80045c6:	f107 0208 	add.w	r2, r7, #8
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	ed97 0b08 	vldr	d0, [r7, #32]
 80045d6:	f7fe febd 	bl	8003354 <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80045da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	4b2f      	ldr	r3, [pc, #188]	@ (80046a0 <USART_Init+0x200>)
 80045e4:	f7fc f808 	bl	80005f8 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	ec43 2b17 	vmov	d7, r2, r3
 80045f0:	eeb0 0a47 	vmov.f32	s0, s14
 80045f4:	eef0 0a67 	vmov.f32	s1, s15
 80045f8:	f001 ffce 	bl	8006598 <ceil>
 80045fc:	ec53 2b10 	vmov	r2, r3, d0
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f7fc fa92 	bl	8000b2c <__aeabi_d2iz>
 8004608:	4603      	mov	r3, r0
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 800460c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004610:	eeb0 0a47 	vmov.f32	s0, s14
 8004614:	eef0 0a67 	vmov.f32	s1, s15
 8004618:	f001 ffbe 	bl	8006598 <ceil>
 800461c:	ec53 2b10 	vmov	r2, r3, d0
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7fc fa82 	bl	8000b2c <__aeabi_d2iz>
 8004628:	4603      	mov	r3, r0
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30

	}

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	011a      	lsls	r2, r3, #4
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity ;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7c9b      	ldrb	r3, [r3, #18]
 8004644:	4619      	mov	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7b9b      	ldrb	r3, [r3, #14]
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	429a      	cmp	r2, r3
 8004658:	d124      	bne.n	80046a4 <USART_Init+0x204>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004668:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004678:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6153      	str	r3, [r2, #20]
 800468e:	e0c8      	b.n	8004822 <USART_Init+0x382>
 8004690:	200008c0 	.word	0x200008c0
 8004694:	40011000 	.word	0x40011000
 8004698:	40011400 	.word	0x40011400
 800469c:	40400000 	.word	0x40400000
 80046a0:	40300000 	.word	0x40300000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7b9b      	ldrb	r3, [r3, #14]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046ae:	4013      	ands	r3, r2
 80046b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d107      	bne.n	80046c8 <USART_Init+0x228>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c6:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7b9b      	ldrb	r3, [r3, #14]
 80046cc:	461a      	mov	r2, r3
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	4013      	ands	r3, r2
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d107      	bne.n	80046e8 <USART_Init+0x248>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046e6:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7b9b      	ldrb	r3, [r3, #14]
 80046ec:	461a      	mov	r2, r3
 80046ee:	2340      	movs	r3, #64	@ 0x40
 80046f0:	4013      	ands	r3, r2
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d107      	bne.n	8004708 <USART_Init+0x268>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004706:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7b9b      	ldrb	r3, [r3, #14]
 800470c:	461a      	mov	r2, r3
 800470e:	2320      	movs	r3, #32
 8004710:	4013      	ands	r3, r2
 8004712:	2220      	movs	r2, #32
 8004714:	4293      	cmp	r3, r2
 8004716:	d107      	bne.n	8004728 <USART_Init+0x288>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0220 	orr.w	r2, r2, #32
 8004726:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7b9b      	ldrb	r3, [r3, #14]
 800472c:	461a      	mov	r2, r3
 800472e:	2310      	movs	r3, #16
 8004730:	4013      	ands	r3, r2
 8004732:	2210      	movs	r2, #16
 8004734:	4293      	cmp	r3, r2
 8004736:	d107      	bne.n	8004748 <USART_Init+0x2a8>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0210 	orr.w	r2, r2, #16
 8004746:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7b9b      	ldrb	r3, [r3, #14]
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004752:	4013      	ands	r3, r2
 8004754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004758:	4293      	cmp	r3, r2
 800475a:	d107      	bne.n	800476c <USART_Init+0x2cc>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800476a:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7b9b      	ldrb	r3, [r3, #14]
 8004770:	461a      	mov	r2, r3
 8004772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004776:	4013      	ands	r3, r2
 8004778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800477c:	4293      	cmp	r3, r2
 800477e:	d107      	bne.n	8004790 <USART_Init+0x2f0>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800478e:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7b9b      	ldrb	r3, [r3, #14]
 8004794:	461a      	mov	r2, r3
 8004796:	2301      	movs	r3, #1
 8004798:	4013      	ands	r3, r2
 800479a:	2201      	movs	r2, #1
 800479c:	4293      	cmp	r3, r2
 800479e:	d107      	bne.n	80047b0 <USART_Init+0x310>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4aa4      	ldr	r2, [pc, #656]	@ (8004a48 <USART_Init+0x5a8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d107      	bne.n	80047ca <USART_Init+0x32a>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 80047ba:	2100      	movs	r1, #0
 80047bc:	2025      	movs	r0, #37	@ 0x25
 80047be:	f7fe fd6f 	bl	80032a0 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 80047c2:	2025      	movs	r0, #37	@ 0x25
 80047c4:	f7fe fd4e 	bl	8003264 <__NVIC_EnableIRQ>
 80047c8:	e02b      	b.n	8004822 <USART_Init+0x382>
		}
		else if(config -> Port == USART2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a9f      	ldr	r2, [pc, #636]	@ (8004a4c <USART_Init+0x5ac>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <USART_Init+0x33c>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80047d4:	2026      	movs	r0, #38	@ 0x26
 80047d6:	f7fe fd45 	bl	8003264 <__NVIC_EnableIRQ>
 80047da:	e022      	b.n	8004822 <USART_Init+0x382>
		}
		else if(config -> Port == USART3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a9b      	ldr	r2, [pc, #620]	@ (8004a50 <USART_Init+0x5b0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d103      	bne.n	80047ee <USART_Init+0x34e>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 80047e6:	2027      	movs	r0, #39	@ 0x27
 80047e8:	f7fe fd3c 	bl	8003264 <__NVIC_EnableIRQ>
 80047ec:	e019      	b.n	8004822 <USART_Init+0x382>
		}
		else if(config -> Port == UART4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a98      	ldr	r2, [pc, #608]	@ (8004a54 <USART_Init+0x5b4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <USART_Init+0x360>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 80047f8:	2034      	movs	r0, #52	@ 0x34
 80047fa:	f7fe fd33 	bl	8003264 <__NVIC_EnableIRQ>
 80047fe:	e010      	b.n	8004822 <USART_Init+0x382>
		}
		else if(config -> Port == UART5)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a94      	ldr	r2, [pc, #592]	@ (8004a58 <USART_Init+0x5b8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d103      	bne.n	8004812 <USART_Init+0x372>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 800480a:	2035      	movs	r0, #53	@ 0x35
 800480c:	f7fe fd2a 	bl	8003264 <__NVIC_EnableIRQ>
 8004810:	e007      	b.n	8004822 <USART_Init+0x382>
		}
		else if(config -> Port == USART6)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a91      	ldr	r2, [pc, #580]	@ (8004a5c <USART_Init+0x5bc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d102      	bne.n	8004822 <USART_Init+0x382>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800481c:	2047      	movs	r0, #71	@ 0x47
 800481e:	f7fe fd21 	bl	8003264 <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7c1b      	ldrb	r3, [r3, #16]
 800482c:	4619      	mov	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7c5b      	ldrb	r3, [r3, #17]
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2202      	movs	r2, #2
 8004842:	4293      	cmp	r3, r2
 8004844:	f040 811e 	bne.w	8004a84 <USART_Init+0x5e4>
	{


		if(config->Port == USART1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a7e      	ldr	r2, [pc, #504]	@ (8004a48 <USART_Init+0x5a8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10e      	bne.n	8004870 <USART_Init+0x3d0>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8004852:	4a83      	ldr	r2, [pc, #524]	@ (8004a60 <USART_Init+0x5c0>)
 8004854:	4b83      	ldr	r3, [pc, #524]	@ (8004a64 <USART_Init+0x5c4>)
 8004856:	4614      	mov	r4, r2
 8004858:	33c0      	adds	r3, #192	@ 0xc0
 800485a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800485e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004862:	2210      	movs	r2, #16
 8004864:	4b7e      	ldr	r3, [pc, #504]	@ (8004a60 <USART_Init+0x5c0>)
 8004866:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 8004868:	4b7d      	ldr	r3, [pc, #500]	@ (8004a60 <USART_Init+0x5c0>)
 800486a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a68 <USART_Init+0x5c8>)
 800486c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800486e:	e067      	b.n	8004940 <USART_Init+0x4a0>
		}
		else if(config->Port == USART2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a75      	ldr	r2, [pc, #468]	@ (8004a4c <USART_Init+0x5ac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10e      	bne.n	8004898 <USART_Init+0x3f8>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 800487a:	4b79      	ldr	r3, [pc, #484]	@ (8004a60 <USART_Init+0x5c0>)
 800487c:	4a79      	ldr	r2, [pc, #484]	@ (8004a64 <USART_Init+0x5c4>)
 800487e:	3358      	adds	r3, #88	@ 0x58
 8004880:	32d8      	adds	r2, #216	@ 0xd8
 8004882:	ca07      	ldmia	r2, {r0, r1, r2}
 8004884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004888:	2210      	movs	r2, #16
 800488a:	4b75      	ldr	r3, [pc, #468]	@ (8004a60 <USART_Init+0x5c0>)
 800488c:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 800488e:	4b74      	ldr	r3, [pc, #464]	@ (8004a60 <USART_Init+0x5c0>)
 8004890:	4a76      	ldr	r2, [pc, #472]	@ (8004a6c <USART_Init+0x5cc>)
 8004892:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004896:	e053      	b.n	8004940 <USART_Init+0x4a0>
		}
		else if(config->Port == USART3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6c      	ldr	r2, [pc, #432]	@ (8004a50 <USART_Init+0x5b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10f      	bne.n	80048c2 <USART_Init+0x422>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 80048a2:	4b6f      	ldr	r3, [pc, #444]	@ (8004a60 <USART_Init+0x5c0>)
 80048a4:	4a6f      	ldr	r2, [pc, #444]	@ (8004a64 <USART_Init+0x5c4>)
 80048a6:	33b0      	adds	r3, #176	@ 0xb0
 80048a8:	32f0      	adds	r2, #240	@ 0xf0
 80048aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80048b0:	2210      	movs	r2, #16
 80048b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004a60 <USART_Init+0x5c0>)
 80048b4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 80048b8:	4b69      	ldr	r3, [pc, #420]	@ (8004a60 <USART_Init+0x5c0>)
 80048ba:	4a6d      	ldr	r2, [pc, #436]	@ (8004a70 <USART_Init+0x5d0>)
 80048bc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80048c0:	e03e      	b.n	8004940 <USART_Init+0x4a0>
		}
		else if(config->Port == UART4)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <USART_Init+0x5b4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d111      	bne.n	80048f0 <USART_Init+0x450>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 80048cc:	4b64      	ldr	r3, [pc, #400]	@ (8004a60 <USART_Init+0x5c0>)
 80048ce:	4a65      	ldr	r2, [pc, #404]	@ (8004a64 <USART_Init+0x5c4>)
 80048d0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80048d4:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80048d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80048da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80048de:	2210      	movs	r2, #16
 80048e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a60 <USART_Init+0x5c0>)
 80048e2:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 80048e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a60 <USART_Init+0x5c0>)
 80048e8:	4a62      	ldr	r2, [pc, #392]	@ (8004a74 <USART_Init+0x5d4>)
 80048ea:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80048ee:	e027      	b.n	8004940 <USART_Init+0x4a0>
		}
		else if(config->Port == UART5)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a58      	ldr	r2, [pc, #352]	@ (8004a58 <USART_Init+0x5b8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d111      	bne.n	800491e <USART_Init+0x47e>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80048fa:	4b59      	ldr	r3, [pc, #356]	@ (8004a60 <USART_Init+0x5c0>)
 80048fc:	4a59      	ldr	r2, [pc, #356]	@ (8004a64 <USART_Init+0x5c4>)
 80048fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004902:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8004906:	ca07      	ldmia	r2, {r0, r1, r2}
 8004908:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800490c:	2210      	movs	r2, #16
 800490e:	4b54      	ldr	r3, [pc, #336]	@ (8004a60 <USART_Init+0x5c0>)
 8004910:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 8004914:	4b52      	ldr	r3, [pc, #328]	@ (8004a60 <USART_Init+0x5c0>)
 8004916:	4a58      	ldr	r2, [pc, #352]	@ (8004a78 <USART_Init+0x5d8>)
 8004918:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800491c:	e010      	b.n	8004940 <USART_Init+0x4a0>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 800491e:	4b50      	ldr	r3, [pc, #320]	@ (8004a60 <USART_Init+0x5c0>)
 8004920:	4a50      	ldr	r2, [pc, #320]	@ (8004a64 <USART_Init+0x5c4>)
 8004922:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004926:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 800492a:	ca07      	ldmia	r2, {r0, r1, r2}
 800492c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004930:	2210      	movs	r2, #16
 8004932:	4b4b      	ldr	r3, [pc, #300]	@ (8004a60 <USART_Init+0x5c0>)
 8004934:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 8004938:	4b49      	ldr	r3, [pc, #292]	@ (8004a60 <USART_Init+0x5c0>)
 800493a:	4a50      	ldr	r2, [pc, #320]	@ (8004a7c <USART_Init+0x5dc>)
 800493c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004940:	4b4f      	ldr	r3, [pc, #316]	@ (8004a80 <USART_Init+0x5e0>)
 8004942:	f993 3000 	ldrsb.w	r3, [r3]
 8004946:	4618      	mov	r0, r3
 8004948:	2200      	movs	r2, #0
 800494a:	4945      	ldr	r1, [pc, #276]	@ (8004a60 <USART_Init+0x5c0>)
 800494c:	2358      	movs	r3, #88	@ 0x58
 800494e:	fb00 f303 	mul.w	r3, r0, r3
 8004952:	440b      	add	r3, r1
 8004954:	3318      	adds	r3, #24
 8004956:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004958:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <USART_Init+0x5e0>)
 800495a:	f993 3000 	ldrsb.w	r3, [r3]
 800495e:	4618      	mov	r0, r3
 8004960:	2200      	movs	r2, #0
 8004962:	493f      	ldr	r1, [pc, #252]	@ (8004a60 <USART_Init+0x5c0>)
 8004964:	2358      	movs	r3, #88	@ 0x58
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	440b      	add	r3, r1
 800496c:	330c      	adds	r3, #12
 800496e:	601a      	str	r2, [r3, #0]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004970:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <USART_Init+0x5e0>)
 8004972:	f993 3000 	ldrsb.w	r3, [r3]
 8004976:	4618      	mov	r0, r3
 8004978:	2200      	movs	r2, #0
 800497a:	4939      	ldr	r1, [pc, #228]	@ (8004a60 <USART_Init+0x5c0>)
 800497c:	2358      	movs	r3, #88	@ 0x58
 800497e:	fb00 f303 	mul.w	r3, r0, r3
 8004982:	440b      	add	r3, r1
 8004984:	3328      	adds	r3, #40	@ 0x28
 8004986:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004988:	4b3d      	ldr	r3, [pc, #244]	@ (8004a80 <USART_Init+0x5e0>)
 800498a:	f993 3000 	ldrsb.w	r3, [r3]
 800498e:	4618      	mov	r0, r3
 8004990:	2200      	movs	r2, #0
 8004992:	4933      	ldr	r1, [pc, #204]	@ (8004a60 <USART_Init+0x5c0>)
 8004994:	2358      	movs	r3, #88	@ 0x58
 8004996:	fb00 f303 	mul.w	r3, r0, r3
 800499a:	440b      	add	r3, r1
 800499c:	3324      	adds	r3, #36	@ 0x24
 800499e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80049a0:	2200      	movs	r2, #0
 80049a2:	4b37      	ldr	r3, [pc, #220]	@ (8004a80 <USART_Init+0x5e0>)
 80049a4:	f993 3000 	ldrsb.w	r3, [r3]
 80049a8:	4618      	mov	r0, r3
 80049aa:	b291      	uxth	r1, r2
 80049ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <USART_Init+0x5c0>)
 80049ae:	2358      	movs	r3, #88	@ 0x58
 80049b0:	fb00 f303 	mul.w	r3, r0, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3322      	adds	r3, #34	@ 0x22
 80049b8:	460a      	mov	r2, r1
 80049ba:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80049bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <USART_Init+0x5e0>)
 80049c2:	f993 3000 	ldrsb.w	r3, [r3]
 80049c6:	4618      	mov	r0, r3
 80049c8:	b291      	uxth	r1, r2
 80049ca:	4a25      	ldr	r2, [pc, #148]	@ (8004a60 <USART_Init+0x5c0>)
 80049cc:	2358      	movs	r3, #88	@ 0x58
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3320      	adds	r3, #32
 80049d6:	460a      	mov	r2, r1
 80049d8:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 80049da:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <USART_Init+0x5e0>)
 80049dc:	f993 3000 	ldrsb.w	r3, [r3]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049e6:	491e      	ldr	r1, [pc, #120]	@ (8004a60 <USART_Init+0x5c0>)
 80049e8:	2358      	movs	r3, #88	@ 0x58
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	440b      	add	r3, r1
 80049f0:	3314      	adds	r3, #20
 80049f2:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <USART_Init+0x5e0>)
 80049f6:	f993 3000 	ldrsb.w	r3, [r3]
 80049fa:	4618      	mov	r0, r3
 80049fc:	2200      	movs	r2, #0
 80049fe:	4918      	ldr	r1, [pc, #96]	@ (8004a60 <USART_Init+0x5c0>)
 8004a00:	2358      	movs	r3, #88	@ 0x58
 8004a02:	fb00 f303 	mul.w	r3, r0, r3
 8004a06:	440b      	add	r3, r1
 8004a08:	3310      	adds	r3, #16
 8004a0a:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <USART_Init+0x5e0>)
 8004a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a12:	4618      	mov	r0, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4912      	ldr	r1, [pc, #72]	@ (8004a60 <USART_Init+0x5c0>)
 8004a18:	2258      	movs	r2, #88	@ 0x58
 8004a1a:	fb00 f202 	mul.w	r2, r0, r2
 8004a1e:	440a      	add	r2, r1
 8004a20:	336c      	adds	r3, #108	@ 0x6c
 8004a22:	4611      	mov	r1, r2
 8004a24:	2258      	movs	r2, #88	@ 0x58
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f96c 	bl	8005d04 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8004a2c:	4b14      	ldr	r3, [pc, #80]	@ (8004a80 <USART_Init+0x5e0>)
 8004a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a32:	461a      	mov	r2, r3
 8004a34:	2358      	movs	r3, #88	@ 0x58
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	4a09      	ldr	r2, [pc, #36]	@ (8004a60 <USART_Init+0x5c0>)
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fe4c 	bl	80026dc <DMA_Init>
 8004a44:	e026      	b.n	8004a94 <USART_Init+0x5f4>
 8004a46:	bf00      	nop
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	40004800 	.word	0x40004800
 8004a54:	40004c00 	.word	0x40004c00
 8004a58:	40005000 	.word	0x40005000
 8004a5c:	40011400 	.word	0x40011400
 8004a60:	200004a0 	.word	0x200004a0
 8004a64:	080066c4 	.word	0x080066c4
 8004a68:	080033b9 	.word	0x080033b9
 8004a6c:	080033e9 	.word	0x080033e9
 8004a70:	08003419 	.word	0x08003419
 8004a74:	08003449 	.word	0x08003449
 8004a78:	08003479 	.word	0x08003479
 8004a7c:	080034a9 	.word	0x080034a9
 8004a80:	200008c0 	.word	0x200008c0
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a92:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7c5b      	ldrb	r3, [r3, #17]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	f040 810b 	bne.w	8004cbc <USART_Init+0x81c>
	{



		if(config->Port == USART1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4aa0      	ldr	r2, [pc, #640]	@ (8004d2c <USART_Init+0x88c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10e      	bne.n	8004ace <USART_Init+0x62e>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8004ab0:	4a9f      	ldr	r2, [pc, #636]	@ (8004d30 <USART_Init+0x890>)
 8004ab2:	4ba0      	ldr	r3, [pc, #640]	@ (8004d34 <USART_Init+0x894>)
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	33cc      	adds	r3, #204	@ 0xcc
 8004ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	4b9b      	ldr	r3, [pc, #620]	@ (8004d30 <USART_Init+0x890>)
 8004ac4:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 8004ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8004d30 <USART_Init+0x890>)
 8004ac8:	4a9b      	ldr	r2, [pc, #620]	@ (8004d38 <USART_Init+0x898>)
 8004aca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004acc:	e067      	b.n	8004b9e <USART_Init+0x6fe>
		}
		else if(config->Port == USART2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a9a      	ldr	r2, [pc, #616]	@ (8004d3c <USART_Init+0x89c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10e      	bne.n	8004af6 <USART_Init+0x656>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8004ad8:	4b95      	ldr	r3, [pc, #596]	@ (8004d30 <USART_Init+0x890>)
 8004ada:	4a96      	ldr	r2, [pc, #600]	@ (8004d34 <USART_Init+0x894>)
 8004adc:	3358      	adds	r3, #88	@ 0x58
 8004ade:	32e4      	adds	r2, #228	@ 0xe4
 8004ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	4b91      	ldr	r3, [pc, #580]	@ (8004d30 <USART_Init+0x890>)
 8004aea:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 8004aec:	4b90      	ldr	r3, [pc, #576]	@ (8004d30 <USART_Init+0x890>)
 8004aee:	4a94      	ldr	r2, [pc, #592]	@ (8004d40 <USART_Init+0x8a0>)
 8004af0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004af4:	e053      	b.n	8004b9e <USART_Init+0x6fe>
		}
		else if(config->Port == USART3)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a92      	ldr	r2, [pc, #584]	@ (8004d44 <USART_Init+0x8a4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10f      	bne.n	8004b20 <USART_Init+0x680>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8004b00:	4b8b      	ldr	r3, [pc, #556]	@ (8004d30 <USART_Init+0x890>)
 8004b02:	4a8c      	ldr	r2, [pc, #560]	@ (8004d34 <USART_Init+0x894>)
 8004b04:	33b0      	adds	r3, #176	@ 0xb0
 8004b06:	32fc      	adds	r2, #252	@ 0xfc
 8004b08:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004b0e:	2210      	movs	r2, #16
 8004b10:	4b87      	ldr	r3, [pc, #540]	@ (8004d30 <USART_Init+0x890>)
 8004b12:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 8004b16:	4b86      	ldr	r3, [pc, #536]	@ (8004d30 <USART_Init+0x890>)
 8004b18:	4a8b      	ldr	r2, [pc, #556]	@ (8004d48 <USART_Init+0x8a8>)
 8004b1a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8004b1e:	e03e      	b.n	8004b9e <USART_Init+0x6fe>
		}
		else if(config->Port == UART4)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a89      	ldr	r2, [pc, #548]	@ (8004d4c <USART_Init+0x8ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d111      	bne.n	8004b4e <USART_Init+0x6ae>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8004b2a:	4b81      	ldr	r3, [pc, #516]	@ (8004d30 <USART_Init+0x890>)
 8004b2c:	4a81      	ldr	r2, [pc, #516]	@ (8004d34 <USART_Init+0x894>)
 8004b2e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004b32:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8004b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d30 <USART_Init+0x890>)
 8004b40:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 8004b44:	4b7a      	ldr	r3, [pc, #488]	@ (8004d30 <USART_Init+0x890>)
 8004b46:	4a82      	ldr	r2, [pc, #520]	@ (8004d50 <USART_Init+0x8b0>)
 8004b48:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004b4c:	e027      	b.n	8004b9e <USART_Init+0x6fe>
		}
		else if(config->Port == UART5)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a80      	ldr	r2, [pc, #512]	@ (8004d54 <USART_Init+0x8b4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <USART_Init+0x6dc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8004b58:	4b75      	ldr	r3, [pc, #468]	@ (8004d30 <USART_Init+0x890>)
 8004b5a:	4a76      	ldr	r2, [pc, #472]	@ (8004d34 <USART_Init+0x894>)
 8004b5c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b60:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8004b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	4b70      	ldr	r3, [pc, #448]	@ (8004d30 <USART_Init+0x890>)
 8004b6e:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 8004b72:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <USART_Init+0x890>)
 8004b74:	4a78      	ldr	r2, [pc, #480]	@ (8004d58 <USART_Init+0x8b8>)
 8004b76:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004b7a:	e010      	b.n	8004b9e <USART_Init+0x6fe>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d30 <USART_Init+0x890>)
 8004b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004d34 <USART_Init+0x894>)
 8004b80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004b84:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8004b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004b8e:	2210      	movs	r2, #16
 8004b90:	4b67      	ldr	r3, [pc, #412]	@ (8004d30 <USART_Init+0x890>)
 8004b92:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 8004b96:	4b66      	ldr	r3, [pc, #408]	@ (8004d30 <USART_Init+0x890>)
 8004b98:	4a70      	ldr	r2, [pc, #448]	@ (8004d5c <USART_Init+0x8bc>)
 8004b9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004b9e:	4b70      	ldr	r3, [pc, #448]	@ (8004d60 <USART_Init+0x8c0>)
 8004ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4961      	ldr	r1, [pc, #388]	@ (8004d30 <USART_Init+0x890>)
 8004baa:	2358      	movs	r3, #88	@ 0x58
 8004bac:	fb00 f303 	mul.w	r3, r0, r3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <USART_Init+0x8c0>)
 8004bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	495b      	ldr	r1, [pc, #364]	@ (8004d30 <USART_Init+0x890>)
 8004bc2:	2358      	movs	r3, #88	@ 0x58
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	440b      	add	r3, r1
 8004bca:	330c      	adds	r3, #12
 8004bcc:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004bce:	4b64      	ldr	r3, [pc, #400]	@ (8004d60 <USART_Init+0x8c0>)
 8004bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	4955      	ldr	r1, [pc, #340]	@ (8004d30 <USART_Init+0x890>)
 8004bda:	2358      	movs	r3, #88	@ 0x58
 8004bdc:	fb00 f303 	mul.w	r3, r0, r3
 8004be0:	440b      	add	r3, r1
 8004be2:	331c      	adds	r3, #28
 8004be4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004be6:	4b5e      	ldr	r3, [pc, #376]	@ (8004d60 <USART_Init+0x8c0>)
 8004be8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bec:	4618      	mov	r0, r3
 8004bee:	2200      	movs	r2, #0
 8004bf0:	494f      	ldr	r1, [pc, #316]	@ (8004d30 <USART_Init+0x890>)
 8004bf2:	2358      	movs	r3, #88	@ 0x58
 8004bf4:	fb00 f303 	mul.w	r3, r0, r3
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004bfe:	4b58      	ldr	r3, [pc, #352]	@ (8004d60 <USART_Init+0x8c0>)
 8004c00:	f993 3000 	ldrsb.w	r3, [r3]
 8004c04:	4618      	mov	r0, r3
 8004c06:	2200      	movs	r2, #0
 8004c08:	4949      	ldr	r1, [pc, #292]	@ (8004d30 <USART_Init+0x890>)
 8004c0a:	2358      	movs	r3, #88	@ 0x58
 8004c0c:	fb00 f303 	mul.w	r3, r0, r3
 8004c10:	440b      	add	r3, r1
 8004c12:	3324      	adds	r3, #36	@ 0x24
 8004c14:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8004c16:	2200      	movs	r2, #0
 8004c18:	4b51      	ldr	r3, [pc, #324]	@ (8004d60 <USART_Init+0x8c0>)
 8004c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	b291      	uxth	r1, r2
 8004c22:	4a43      	ldr	r2, [pc, #268]	@ (8004d30 <USART_Init+0x890>)
 8004c24:	2358      	movs	r3, #88	@ 0x58
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3322      	adds	r3, #34	@ 0x22
 8004c2e:	460a      	mov	r2, r1
 8004c30:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c36:	4b4a      	ldr	r3, [pc, #296]	@ (8004d60 <USART_Init+0x8c0>)
 8004c38:	f993 3000 	ldrsb.w	r3, [r3]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	b291      	uxth	r1, r2
 8004c40:	4a3b      	ldr	r2, [pc, #236]	@ (8004d30 <USART_Init+0x890>)
 8004c42:	2358      	movs	r3, #88	@ 0x58
 8004c44:	fb00 f303 	mul.w	r3, r0, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	460a      	mov	r2, r1
 8004c4e:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8004c50:	4b43      	ldr	r3, [pc, #268]	@ (8004d60 <USART_Init+0x8c0>)
 8004c52:	f993 3000 	ldrsb.w	r3, [r3]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c5c:	4934      	ldr	r1, [pc, #208]	@ (8004d30 <USART_Init+0x890>)
 8004c5e:	2358      	movs	r3, #88	@ 0x58
 8004c60:	fb00 f303 	mul.w	r3, r0, r3
 8004c64:	440b      	add	r3, r1
 8004c66:	3314      	adds	r3, #20
 8004c68:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d60 <USART_Init+0x8c0>)
 8004c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004c70:	4618      	mov	r0, r3
 8004c72:	2240      	movs	r2, #64	@ 0x40
 8004c74:	492e      	ldr	r1, [pc, #184]	@ (8004d30 <USART_Init+0x890>)
 8004c76:	2358      	movs	r3, #88	@ 0x58
 8004c78:	fb00 f303 	mul.w	r3, r0, r3
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3310      	adds	r3, #16
 8004c80:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8004c82:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <USART_Init+0x8c0>)
 8004c84:	f993 3000 	ldrsb.w	r3, [r3]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4928      	ldr	r1, [pc, #160]	@ (8004d30 <USART_Init+0x890>)
 8004c8e:	2258      	movs	r2, #88	@ 0x58
 8004c90:	fb00 f202 	mul.w	r2, r0, r2
 8004c94:	440a      	add	r2, r1
 8004c96:	3314      	adds	r3, #20
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2258      	movs	r2, #88	@ 0x58
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f831 	bl	8005d04 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d60 <USART_Init+0x8c0>)
 8004ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2358      	movs	r3, #88	@ 0x58
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <USART_Init+0x890>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fd11 	bl	80026dc <DMA_Init>
 8004cba:	e007      	b.n	8004ccc <USART_Init+0x82c>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cca:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	7a1b      	ldrb	r3, [r3, #8]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d107      	bne.n	8004ce6 <USART_Init+0x846>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0208 	orr.w	r2, r2, #8
 8004ce4:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7a1b      	ldrb	r3, [r3, #8]
 8004cea:	2205      	movs	r2, #5
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d107      	bne.n	8004d00 <USART_Init+0x860>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cfe:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 020c 	orr.w	r2, r2, #12
 8004d0e:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d1e:	60da      	str	r2, [r3, #12]

	return 1;
 8004d20:	2301      	movs	r3, #1
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3738      	adds	r7, #56	@ 0x38
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40011000 	.word	0x40011000
 8004d30:	200006b0 	.word	0x200006b0
 8004d34:	080066c4 	.word	0x080066c4
 8004d38:	080033a1 	.word	0x080033a1
 8004d3c:	40004400 	.word	0x40004400
 8004d40:	080033d1 	.word	0x080033d1
 8004d44:	40004800 	.word	0x40004800
 8004d48:	08003401 	.word	0x08003401
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	08003431 	.word	0x08003431
 8004d54:	40005000 	.word	0x40005000
 8004d58:	08003461 	.word	0x08003461
 8004d5c:	08003491 	.word	0x08003491
 8004d60:	200008c0 	.word	0x200008c0

08004d64 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7fe fd14 	bl	80037a0 <USART_Get_Instance_Number>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004d7e:	701a      	strb	r2, [r3, #0]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	7c5b      	ldrb	r3, [r3, #17]
 8004d84:	2201      	movs	r2, #1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	745a      	strb	r2, [r3, #17]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	7c5b      	ldrb	r3, [r3, #17]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80bb 	beq.w	8004f0e <USART_TX_Buffer+0x1aa>
		config -> Port -> SR &= ~USART_SR_TC;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da6:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8004da8:	4b68      	ldr	r3, [pc, #416]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004daa:	f993 3000 	ldrsb.w	r3, [r3]
 8004dae:	4618      	mov	r0, r3
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	4967      	ldr	r1, [pc, #412]	@ (8004f50 <USART_TX_Buffer+0x1ec>)
 8004db4:	2358      	movs	r3, #88	@ 0x58
 8004db6:	fb00 f303 	mul.w	r3, r0, r3
 8004dba:	440b      	add	r3, r1
 8004dbc:	3330      	adds	r3, #48	@ 0x30
 8004dbe:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1d1a      	adds	r2, r3, #4
 8004dc6:	4b61      	ldr	r3, [pc, #388]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f50 <USART_TX_Buffer+0x1ec>)
 8004dd2:	2358      	movs	r3, #88	@ 0x58
 8004dd4:	fb00 f303 	mul.w	r3, r0, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	332c      	adds	r3, #44	@ 0x2c
 8004ddc:	6019      	str	r1, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004dde:	4b5b      	ldr	r3, [pc, #364]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004de0:	f993 3000 	ldrsb.w	r3, [r3]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4a5a      	ldr	r2, [pc, #360]	@ (8004f50 <USART_TX_Buffer+0x1ec>)
 8004de8:	2358      	movs	r3, #88	@ 0x58
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3334      	adds	r3, #52	@ 0x34
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8004df6:	4b55      	ldr	r3, [pc, #340]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004df8:	f993 3000 	ldrsb.w	r3, [r3]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2358      	movs	r3, #88	@ 0x58
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	4a52      	ldr	r2, [pc, #328]	@ (8004f50 <USART_TX_Buffer+0x1ec>)
 8004e06:	4413      	add	r3, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fe59 	bl	8002ac0 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f4c <USART_TX_Buffer+0x1e8>)
 8004e10:	f993 3000 	ldrsb.w	r3, [r3]
 8004e14:	461a      	mov	r2, r3
 8004e16:	2358      	movs	r3, #88	@ 0x58
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f50 <USART_TX_Buffer+0x1ec>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fead 	bl	8002b80 <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e34:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <USART_TX_Buffer+0x1f0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10c      	bne.n	8004e5a <USART_TX_Buffer+0xf6>
		{
			while(!U1TX_Complete){}
 8004e40:	bf00      	nop
 8004e42:	4b45      	ldr	r3, [pc, #276]	@ (8004f58 <USART_TX_Buffer+0x1f4>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f083 0301 	eor.w	r3, r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f7      	bne.n	8004e42 <USART_TX_Buffer+0xde>
			U1TX_Complete = 0;
 8004e52:	4b41      	ldr	r3, [pc, #260]	@ (8004f58 <USART_TX_Buffer+0x1f4>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e072      	b.n	8004f40 <USART_TX_Buffer+0x1dc>

		}
		else if(config->Port == USART2)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f5c <USART_TX_Buffer+0x1f8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10c      	bne.n	8004e7e <USART_TX_Buffer+0x11a>
		{
			while(!U2TX_Complete){}
 8004e64:	bf00      	nop
 8004e66:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <USART_TX_Buffer+0x1fc>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f083 0301 	eor.w	r3, r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f7      	bne.n	8004e66 <USART_TX_Buffer+0x102>
			U2TX_Complete = 0;
 8004e76:	4b3a      	ldr	r3, [pc, #232]	@ (8004f60 <USART_TX_Buffer+0x1fc>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e060      	b.n	8004f40 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART3)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a38      	ldr	r2, [pc, #224]	@ (8004f64 <USART_TX_Buffer+0x200>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10c      	bne.n	8004ea2 <USART_TX_Buffer+0x13e>
		{
			while(!U3TX_Complete){}
 8004e88:	bf00      	nop
 8004e8a:	4b37      	ldr	r3, [pc, #220]	@ (8004f68 <USART_TX_Buffer+0x204>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f083 0301 	eor.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f7      	bne.n	8004e8a <USART_TX_Buffer+0x126>
			U3TX_Complete = 0;
 8004e9a:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <USART_TX_Buffer+0x204>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e04e      	b.n	8004f40 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART4)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a31      	ldr	r2, [pc, #196]	@ (8004f6c <USART_TX_Buffer+0x208>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10c      	bne.n	8004ec6 <USART_TX_Buffer+0x162>
		{
			while(!U4TX_Complete){}
 8004eac:	bf00      	nop
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <USART_TX_Buffer+0x20c>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f7      	bne.n	8004eae <USART_TX_Buffer+0x14a>
			U4TX_Complete = 0;
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8004f70 <USART_TX_Buffer+0x20c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e03c      	b.n	8004f40 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART5)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2a      	ldr	r2, [pc, #168]	@ (8004f74 <USART_TX_Buffer+0x210>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10c      	bne.n	8004eea <USART_TX_Buffer+0x186>
		{
			while(!U5TX_Complete){}
 8004ed0:	bf00      	nop
 8004ed2:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <USART_TX_Buffer+0x214>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f083 0301 	eor.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f7      	bne.n	8004ed2 <USART_TX_Buffer+0x16e>
			U5TX_Complete = 0;
 8004ee2:	4b25      	ldr	r3, [pc, #148]	@ (8004f78 <USART_TX_Buffer+0x214>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	e02a      	b.n	8004f40 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART6)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a23      	ldr	r2, [pc, #140]	@ (8004f7c <USART_TX_Buffer+0x218>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d125      	bne.n	8004f40 <USART_TX_Buffer+0x1dc>
		{
			while(!U6TX_Complete){}
 8004ef4:	bf00      	nop
 8004ef6:	4b22      	ldr	r3, [pc, #136]	@ (8004f80 <USART_TX_Buffer+0x21c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f7      	bne.n	8004ef6 <USART_TX_Buffer+0x192>
			U6TX_Complete = 0;
 8004f06:	4b1e      	ldr	r3, [pc, #120]	@ (8004f80 <USART_TX_Buffer+0x21c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e018      	b.n	8004f40 <USART_TX_Buffer+0x1dc>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e011      	b.n	8004f38 <USART_TX_Buffer+0x1d4>
		{
			config->Port->DR = tx_buffer[i];
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004f22:	bf00      	nop
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f8      	beq.n	8004f24 <USART_TX_Buffer+0x1c0>
		for(int i = 0; i <= length; i++)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3301      	adds	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	dde9      	ble.n	8004f14 <USART_TX_Buffer+0x1b0>
		}
	}

	return 1;
 8004f40:	2301      	movs	r3, #1

}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200008c0 	.word	0x200008c0
 8004f50:	200006b0 	.word	0x200006b0
 8004f54:	40011000 	.word	0x40011000
 8004f58:	200008da 	.word	0x200008da
 8004f5c:	40004400 	.word	0x40004400
 8004f60:	200008dc 	.word	0x200008dc
 8004f64:	40004800 	.word	0x40004800
 8004f68:	200008de 	.word	0x200008de
 8004f6c:	40004c00 	.word	0x40004c00
 8004f70:	200008e0 	.word	0x200008e0
 8004f74:	40005000 	.word	0x40005000
 8004f78:	200008e2 	.word	0x200008e2
 8004f7c:	40011400 	.word	0x40011400
 8004f80:	200008e4 	.word	0x200008e4

08004f84 <USART_RX_Buffer>:

int8_t USART_RX_Buffer(USART_Config *config, uint8_t *rx_buffer, uint16_t length, bool circular_buffer_enable)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	460b      	mov	r3, r1
 8004f94:	80fb      	strh	r3, [r7, #6]
 8004f96:	4613      	mov	r3, r2
 8004f98:	717b      	strb	r3, [r7, #5]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	7c5b      	ldrb	r3, [r3, #17]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	745a      	strb	r2, [r3, #17]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	7c5b      	ldrb	r3, [r3, #17]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80d0 	beq.w	8005152 <USART_RX_Buffer+0x1ce>
	{
		if(circular_buffer_enable == 1)
 8004fb2:	797b      	ldrb	r3, [r7, #5]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <USART_RX_Buffer+0x4e>
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004fb8:	4b75      	ldr	r3, [pc, #468]	@ (8005190 <USART_RX_Buffer+0x20c>)
 8004fba:	f993 3000 	ldrsb.w	r3, [r3]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4974      	ldr	r1, [pc, #464]	@ (8005194 <USART_RX_Buffer+0x210>)
 8004fc4:	2358      	movs	r3, #88	@ 0x58
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	440b      	add	r3, r1
 8004fcc:	3318      	adds	r3, #24
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e00c      	b.n	8004fec <USART_RX_Buffer+0x68>
		}
		else
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8004fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005190 <USART_RX_Buffer+0x20c>)
 8004fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fde:	496d      	ldr	r1, [pc, #436]	@ (8005194 <USART_RX_Buffer+0x210>)
 8004fe0:	2358      	movs	r3, #88	@ 0x58
 8004fe2:	fb00 f303 	mul.w	r3, r0, r3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3318      	adds	r3, #24
 8004fea:	601a      	str	r2, [r3, #0]
		}

		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
 8004fec:	4b68      	ldr	r3, [pc, #416]	@ (8005190 <USART_RX_Buffer+0x20c>)
 8004fee:	f993 3000 	ldrsb.w	r3, [r3]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	4967      	ldr	r1, [pc, #412]	@ (8005194 <USART_RX_Buffer+0x210>)
 8004ff8:	2358      	movs	r3, #88	@ 0x58
 8004ffa:	fb00 f303 	mul.w	r3, r0, r3
 8004ffe:	440b      	add	r3, r1
 8005000:	3330      	adds	r3, #48	@ 0x30
 8005002:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	4b61      	ldr	r3, [pc, #388]	@ (8005190 <USART_RX_Buffer+0x20c>)
 800500c:	f993 3000 	ldrsb.w	r3, [r3]
 8005010:	4618      	mov	r0, r3
 8005012:	4611      	mov	r1, r2
 8005014:	4a5f      	ldr	r2, [pc, #380]	@ (8005194 <USART_RX_Buffer+0x210>)
 8005016:	2358      	movs	r3, #88	@ 0x58
 8005018:	fb00 f303 	mul.w	r3, r0, r3
 800501c:	4413      	add	r3, r2
 800501e:	332c      	adds	r3, #44	@ 0x2c
 8005020:	6019      	str	r1, [r3, #0]
		xUSART_RX[usart_dma_instance_number].buffer_length = length;
 8005022:	4b5b      	ldr	r3, [pc, #364]	@ (8005190 <USART_RX_Buffer+0x20c>)
 8005024:	f993 3000 	ldrsb.w	r3, [r3]
 8005028:	4619      	mov	r1, r3
 800502a:	4a5a      	ldr	r2, [pc, #360]	@ (8005194 <USART_RX_Buffer+0x210>)
 800502c:	2358      	movs	r3, #88	@ 0x58
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3334      	adds	r3, #52	@ 0x34
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_RX[usart_dma_instance_number]);
 800503a:	4b55      	ldr	r3, [pc, #340]	@ (8005190 <USART_RX_Buffer+0x20c>)
 800503c:	f993 3000 	ldrsb.w	r3, [r3]
 8005040:	461a      	mov	r2, r3
 8005042:	2358      	movs	r3, #88	@ 0x58
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	4a52      	ldr	r2, [pc, #328]	@ (8005194 <USART_RX_Buffer+0x210>)
 800504a:	4413      	add	r3, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd fd37 	bl	8002ac0 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_RX[usart_dma_instance_number]);
 8005052:	4b4f      	ldr	r3, [pc, #316]	@ (8005190 <USART_RX_Buffer+0x20c>)
 8005054:	f993 3000 	ldrsb.w	r3, [r3]
 8005058:	461a      	mov	r2, r3
 800505a:	2358      	movs	r3, #88	@ 0x58
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	4a4c      	ldr	r2, [pc, #304]	@ (8005194 <USART_RX_Buffer+0x210>)
 8005062:	4413      	add	r3, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f7fd fd8b 	bl	8002b80 <DMA_Set_Trigger>
		config -> Port -> CR3 |= USART_CR3_DMAR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005078:	615a      	str	r2, [r3, #20]


		if(config->Port == USART1)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a46      	ldr	r2, [pc, #280]	@ (8005198 <USART_RX_Buffer+0x214>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <USART_RX_Buffer+0x11a>
		{
			while(!U1RX_Complete){}
 8005084:	bf00      	nop
 8005086:	4b45      	ldr	r3, [pc, #276]	@ (800519c <USART_RX_Buffer+0x218>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f083 0301 	eor.w	r3, r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f7      	bne.n	8005086 <USART_RX_Buffer+0x102>
			U1RX_Complete = 0;
 8005096:	4b41      	ldr	r3, [pc, #260]	@ (800519c <USART_RX_Buffer+0x218>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e073      	b.n	8005186 <USART_RX_Buffer+0x202>

		}
		else if(config->Port == USART2)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3f      	ldr	r2, [pc, #252]	@ (80051a0 <USART_RX_Buffer+0x21c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d10c      	bne.n	80050c2 <USART_RX_Buffer+0x13e>
		{
			while(!U2RX_Complete){}
 80050a8:	bf00      	nop
 80050aa:	4b3e      	ldr	r3, [pc, #248]	@ (80051a4 <USART_RX_Buffer+0x220>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f083 0301 	eor.w	r3, r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f7      	bne.n	80050aa <USART_RX_Buffer+0x126>
			U2RX_Complete = 0;
 80050ba:	4b3a      	ldr	r3, [pc, #232]	@ (80051a4 <USART_RX_Buffer+0x220>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e061      	b.n	8005186 <USART_RX_Buffer+0x202>
		}
		else if(config->Port == USART3)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a38      	ldr	r2, [pc, #224]	@ (80051a8 <USART_RX_Buffer+0x224>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10c      	bne.n	80050e6 <USART_RX_Buffer+0x162>
		{
			while(!U3RX_Complete){}
 80050cc:	bf00      	nop
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <USART_RX_Buffer+0x228>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f083 0301 	eor.w	r3, r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f7      	bne.n	80050ce <USART_RX_Buffer+0x14a>
			U3RX_Complete = 0;
 80050de:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <USART_RX_Buffer+0x228>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e04f      	b.n	8005186 <USART_RX_Buffer+0x202>
		}
		else if(config->Port == UART4)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a31      	ldr	r2, [pc, #196]	@ (80051b0 <USART_RX_Buffer+0x22c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10c      	bne.n	800510a <USART_RX_Buffer+0x186>
		{
			while(!U4RX_Complete){}
 80050f0:	bf00      	nop
 80050f2:	4b30      	ldr	r3, [pc, #192]	@ (80051b4 <USART_RX_Buffer+0x230>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f083 0301 	eor.w	r3, r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f7      	bne.n	80050f2 <USART_RX_Buffer+0x16e>
			U4RX_Complete = 0;
 8005102:	4b2c      	ldr	r3, [pc, #176]	@ (80051b4 <USART_RX_Buffer+0x230>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	e03d      	b.n	8005186 <USART_RX_Buffer+0x202>
		}
		else if(config->Port == UART5)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <USART_RX_Buffer+0x234>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <USART_RX_Buffer+0x1aa>
		{
			while(!U5RX_Complete){}
 8005114:	bf00      	nop
 8005116:	4b29      	ldr	r3, [pc, #164]	@ (80051bc <USART_RX_Buffer+0x238>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f7      	bne.n	8005116 <USART_RX_Buffer+0x192>
			U5RX_Complete = 0;
 8005126:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <USART_RX_Buffer+0x238>)
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e02b      	b.n	8005186 <USART_RX_Buffer+0x202>
		}
		else if(config->Port == USART6)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <USART_RX_Buffer+0x23c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d126      	bne.n	8005186 <USART_RX_Buffer+0x202>
		{
			while(!U6RX_Complete){}
 8005138:	bf00      	nop
 800513a:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <USART_RX_Buffer+0x240>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f083 0301 	eor.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f7      	bne.n	800513a <USART_RX_Buffer+0x1b6>
			U6RX_Complete = 0;
 800514a:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <USART_RX_Buffer+0x240>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e019      	b.n	8005186 <USART_RX_Buffer+0x202>
		}

	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e012      	b.n	800517e <USART_RX_Buffer+0x1fa>
		{
			rx_buffer[i] = config->Port->DR ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4413      	add	r3, r2
 8005164:	b2ca      	uxtb	r2, r1
 8005166:	701a      	strb	r2, [r3, #0]
			while(!(config->Port->SR & USART_SR_RXNE));
 8005168:	bf00      	nop
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f8      	beq.n	800516a <USART_RX_Buffer+0x1e6>
		for(int i = 0; i <= length; i++)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	dde8      	ble.n	8005158 <USART_RX_Buffer+0x1d4>
		}
	}

	return 1;
 8005186:	2301      	movs	r3, #1

}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200008c0 	.word	0x200008c0
 8005194:	200004a0 	.word	0x200004a0
 8005198:	40011000 	.word	0x40011000
 800519c:	200008db 	.word	0x200008db
 80051a0:	40004400 	.word	0x40004400
 80051a4:	200008dd 	.word	0x200008dd
 80051a8:	40004800 	.word	0x40004800
 80051ac:	200008df 	.word	0x200008df
 80051b0:	40004c00 	.word	0x40004c00
 80051b4:	200008e1 	.word	0x200008e1
 80051b8:	40005000 	.word	0x40005000
 80051bc:	200008e3 	.word	0x200008e3
 80051c0:	40011400 	.word	0x40011400
 80051c4:	200008e5 	.word	0x200008e5

080051c8 <USART_TX_Single_Byte>:

void USART_TX_Single_Byte(USART_Config *config, uint8_t data)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
	config->Port->DR = data;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	605a      	str	r2, [r3, #4]
	while(!(config->Port->SR & USART_SR_TXE));
 80051dc:	bf00      	nop
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f8      	beq.n	80051de <USART_TX_Single_Byte+0x16>
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <__NVIC_SetPriority>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520c:	2b00      	cmp	r3, #0
 800520e:	db0a      	blt.n	8005226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	490c      	ldr	r1, [pc, #48]	@ (8005248 <__NVIC_SetPriority+0x4c>)
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	0112      	lsls	r2, r2, #4
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	440b      	add	r3, r1
 8005220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005224:	e00a      	b.n	800523c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	4908      	ldr	r1, [pc, #32]	@ (800524c <__NVIC_SetPriority+0x50>)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	3b04      	subs	r3, #4
 8005234:	0112      	lsls	r2, r2, #4
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	440b      	add	r3, r1
 800523a:	761a      	strb	r2, [r3, #24]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000e100 	.word	0xe000e100
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005254:	f3bf 8f4f 	dsb	sy
}
 8005258:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800525a:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <__NVIC_SystemReset+0x24>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005262:	4904      	ldr	r1, [pc, #16]	@ (8005274 <__NVIC_SystemReset+0x24>)
 8005264:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <__NVIC_SystemReset+0x28>)
 8005266:	4313      	orrs	r3, r2
 8005268:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800526a:	f3bf 8f4f 	dsb	sy
}
 800526e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <__NVIC_SystemReset+0x20>
 8005274:	e000ed00 	.word	0xe000ed00
 8005278:	05fa0004 	.word	0x05fa0004

0800527c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800528c:	d301      	bcc.n	8005292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800528e:	2301      	movs	r3, #1
 8005290:	e00f      	b.n	80052b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <SysTick_Config+0x40>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800529a:	210f      	movs	r1, #15
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f7ff ffac 	bl	80051fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <SysTick_Config+0x40>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052aa:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <SysTick_Config+0x40>)
 80052ac:	2207      	movs	r2, #7
 80052ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	e000e010 	.word	0xe000e010

080052c0 <MCU_Clock_Setup>:
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
	SystemInit();
 80052c6:	f000 fbf9 	bl	8005abc <SystemInit>
	uint8_t pll_m = 8;
 80052ca:	2308      	movs	r3, #8
 80052cc:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80052ce:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80052d2:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80052d8:	2307      	movs	r3, #7
 80052da:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 80052dc:	4b3c      	ldr	r3, [pc, #240]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80052de:	2200      	movs	r2, #0
 80052e0:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80052e2:	4b3b      	ldr	r3, [pc, #236]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a3a      	ldr	r2, [pc, #232]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80052ee:	bf00      	nop
 80052f0:	4b37      	ldr	r3, [pc, #220]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f9      	beq.n	80052f0 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80052fc:	4b34      	ldr	r3, [pc, #208]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	4a33      	ldr	r2, [pc, #204]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005306:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8005308:	4b32      	ldr	r3, [pc, #200]	@ (80053d4 <MCU_Clock_Setup+0x114>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a31      	ldr	r2, [pc, #196]	@ (80053d4 <MCU_Clock_Setup+0x114>)
 800530e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005312:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8005314:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <MCU_Clock_Setup+0x118>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2f      	ldr	r2, [pc, #188]	@ (80053d8 <MCU_Clock_Setup+0x118>)
 800531a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800531e:	f043 0305 	orr.w	r3, r3, #5
 8005322:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8005324:	4b2a      	ldr	r3, [pc, #168]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	78ba      	ldrb	r2, [r7, #2]
 800532a:	0611      	lsls	r1, r2, #24
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	0412      	lsls	r2, r2, #16
 8005330:	4311      	orrs	r1, r2
 8005332:	88ba      	ldrh	r2, [r7, #4]
 8005334:	0192      	lsls	r2, r2, #6
 8005336:	4311      	orrs	r1, r2
 8005338:	79fa      	ldrb	r2, [r7, #7]
 800533a:	430a      	orrs	r2, r1
 800533c:	4611      	mov	r1, r2
 800533e:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8005344:	4b22      	ldr	r3, [pc, #136]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800534a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800534e:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8005350:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005352:	4a1f      	ldr	r2, [pc, #124]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800535e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8005362:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a19      	ldr	r2, [pc, #100]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800536a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536e:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8005370:	4b17      	ldr	r3, [pc, #92]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800537a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800537c:	bf00      	nop
 800537e:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f9      	beq.n	800537e <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800538a:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8005396:	bf00      	nop
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d1f9      	bne.n	8005398 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80053a4:	f000 fb9c 	bl	8005ae0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <MCU_Clock_Setup+0x11c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	4a0c      	ldr	r2, [pc, #48]	@ (80053e0 <MCU_Clock_Setup+0x120>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ff60 	bl	800527c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80053bc:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	4a03      	ldr	r2, [pc, #12]	@ (80053d0 <MCU_Clock_Setup+0x110>)
 80053c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053c6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40007000 	.word	0x40007000
 80053d8:	40023c00 	.word	0x40023c00
 80053dc:	20000000 	.word	0x20000000
 80053e0:	18618619 	.word	0x18618619

080053e4 <MCU_Clock_DeInit>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 80053e8:	4b14      	ldr	r3, [pc, #80]	@ (800543c <MCU_Clock_DeInit+0x58>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <MCU_Clock_DeInit+0x58>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)) { }
 80053f4:	bf00      	nop
 80053f6:	4b11      	ldr	r3, [pc, #68]	@ (800543c <MCU_Clock_DeInit+0x58>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f9      	beq.n	80053f6 <MCU_Clock_DeInit+0x12>
    RCC->CFGR = 0x00000000U;
 8005402:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <MCU_Clock_DeInit+0x58>)
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
    RCC->CR &= ~(RCC_CR_PLLON   |   // disable PLL
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <MCU_Clock_DeInit+0x58>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0b      	ldr	r2, [pc, #44]	@ (800543c <MCU_Clock_DeInit+0x58>)
 800540e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8005412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005416:	6013      	str	r3, [r2, #0]
    RCC->PLLCFGR = 0x24003010U;
 8005418:	4b08      	ldr	r3, [pc, #32]	@ (800543c <MCU_Clock_DeInit+0x58>)
 800541a:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <MCU_Clock_DeInit+0x5c>)
 800541c:	605a      	str	r2, [r3, #4]
    RCC->CR &= ~RCC_CR_HSEBYP;
 800541e:	4b07      	ldr	r3, [pc, #28]	@ (800543c <MCU_Clock_DeInit+0x58>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a06      	ldr	r2, [pc, #24]	@ (800543c <MCU_Clock_DeInit+0x58>)
 8005424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005428:	6013      	str	r3, [r2, #0]
    RCC->CIR = 0x00000000U;
 800542a:	4b04      	ldr	r3, [pc, #16]	@ (800543c <MCU_Clock_DeInit+0x58>)
 800542c:	2200      	movs	r2, #0
 800542e:	60da      	str	r2, [r3, #12]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	24003010 	.word	0x24003010

08005444 <Delay_Config>:
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8005448:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <Delay_Config+0x2c>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800544e:	4b08      	ldr	r3, [pc, #32]	@ (8005470 <Delay_Config+0x2c>)
 8005450:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8005454:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <Delay_Config+0x2c>)
 8005458:	2200      	movs	r2, #0
 800545a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <Delay_Config+0x2c>)
 800545e:	2205      	movs	r2, #5
 8005460:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e010 	.word	0xe000e010

08005474 <Systick_DeInit>:
	RCC -> APB1RSTR = 0xFFFFFFFF;
	RCC -> APB2RSTR = 0xFFFFFFFF;
}

__STATIC_INLINE void Systick_DeInit(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
    // 1) Disable SysTick counter and its IRQ
    SysTick->CTRL = 0x00000000U;
 8005478:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <Systick_DeInit+0x2c>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

    // 2) Clear reload value and current value
    SysTick->LOAD = 0x00000000U;
 800547e:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <Systick_DeInit+0x2c>)
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0x00000000U;
 8005484:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <Systick_DeInit+0x2c>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]

    // 3) Clear any SysTick active bit in System
    SCB->SHCSR &= ~SCB_SHCSR_SYSTICKACT_Msk;
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <Systick_DeInit+0x30>)
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	4a05      	ldr	r2, [pc, #20]	@ (80054a4 <Systick_DeInit+0x30>)
 8005490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005494:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000e010 	.word	0xe000e010
 80054a4:	e000ed00 	.word	0xe000ed00

080054a8 <Validate_And_Execute_Command>:
uint16_t len = 0;
uint32_t CRC_Rec1 = 0, CRC_Rec2 = 0;

/* =========================== Packet Validation =========================== */
bool Validate_And_Execute_Command(uint8_t *buf, uint16_t len)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
    if (len < PACKET_LENGTH_MIN || len > PACKET_LENGTH_MAX) return false;
 80054b4:	887b      	ldrh	r3, [r7, #2]
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d903      	bls.n	80054c2 <Validate_And_Execute_Command+0x1a>
 80054ba:	887b      	ldrh	r3, [r7, #2]
 80054bc:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 80054c0:	d901      	bls.n	80054c6 <Validate_And_Execute_Command+0x1e>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e05e      	b.n	8005584 <Validate_And_Execute_Command+0xdc>

    if (buf[0] != HEADER_1 || buf[1] != HEADER_2 ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2baa      	cmp	r3, #170	@ 0xaa
 80054cc:	d112      	bne.n	80054f4 <Validate_And_Execute_Command+0x4c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3301      	adds	r3, #1
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b55      	cmp	r3, #85	@ 0x55
 80054d6:	d10d      	bne.n	80054f4 <Validate_And_Execute_Command+0x4c>
        buf[len-2] != FOOTER_1 || buf[len-1] != FOOTER_2)
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	3b02      	subs	r3, #2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	781b      	ldrb	r3, [r3, #0]
    if (buf[0] != HEADER_1 || buf[1] != HEADER_2 ||
 80054e2:	2bbb      	cmp	r3, #187	@ 0xbb
 80054e4:	d106      	bne.n	80054f4 <Validate_And_Execute_Command+0x4c>
        buf[len-2] != FOOTER_1 || buf[len-1] != FOOTER_2)
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b66      	cmp	r3, #102	@ 0x66
 80054f2:	d001      	beq.n	80054f8 <Validate_And_Execute_Command+0x50>
        return false;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e045      	b.n	8005584 <Validate_And_Execute_Command+0xdc>

    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 80054f8:	887b      	ldrh	r3, [r7, #2]
 80054fa:	3b06      	subs	r3, #6
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	061a      	lsls	r2, r3, #24
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	3b05      	subs	r3, #5
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	440b      	add	r3, r1
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	431a      	orrs	r2, r3
                            ((uint32_t)buf[len-4] << 8)  | ((uint32_t)buf[len-3]);
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	3b04      	subs	r3, #4
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	440b      	add	r3, r1
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 800551e:	4313      	orrs	r3, r2
                            ((uint32_t)buf[len-4] << 8)  | ((uint32_t)buf[len-3]);
 8005520:	887a      	ldrh	r2, [r7, #2]
 8005522:	3a03      	subs	r2, #3
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	440a      	add	r2, r1
 8005528:	7812      	ldrb	r2, [r2, #0]
    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

    uint32_t computed_crc = CRC_Compute_8Bit_Block(&buf[2], len - 8);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	3b08      	subs	r3, #8
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7fb fb95 	bl	8000c68 <CRC_Compute_8Bit_Block>
 800553e:	60f8      	str	r0, [r7, #12]

    if (received_crc != computed_crc) return false;
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <Validate_And_Execute_Command+0xa4>
 8005548:	2300      	movs	r3, #0
 800554a:	e01b      	b.n	8005584 <Validate_And_Execute_Command+0xdc>

    uint8_t opcode = buf[2];
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	789b      	ldrb	r3, [r3, #2]
 8005550:	72fb      	strb	r3, [r7, #11]
    for (int i = 0; i < sizeof(command_table)/sizeof(command_table[0]); i++) {
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e011      	b.n	800557c <Validate_And_Execute_Command+0xd4>
        if (command_table[i].opcode == opcode) {
 8005558:	4a0c      	ldr	r2, [pc, #48]	@ (800558c <Validate_And_Execute_Command+0xe4>)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005560:	7afa      	ldrb	r2, [r7, #11]
 8005562:	429a      	cmp	r2, r3
 8005564:	d107      	bne.n	8005576 <Validate_And_Execute_Command+0xce>
            command_table[i].handler();
 8005566:	4a09      	ldr	r2, [pc, #36]	@ (800558c <Validate_And_Execute_Command+0xe4>)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4798      	blx	r3
            return true;
 8005572:	2301      	movs	r3, #1
 8005574:	e006      	b.n	8005584 <Validate_And_Execute_Command+0xdc>
    for (int i = 0; i < sizeof(command_table)/sizeof(command_table[0]); i++) {
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	3301      	adds	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d9ea      	bls.n	8005558 <Validate_And_Execute_Command+0xb0>
        }
    }

    return false;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08006ac8 	.word	0x08006ac8

08005590 <Bootloader>:
	Req_Request     = 0x01,
	Req_ACK  	= 0x02,
}Request_List;

void Bootloader(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
    Custom_Comm_Init(115200);
 8005596:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800559a:	f7fb fc6d 	bl	8000e78 <Custom_Comm_Init>
    SystemState state = STATE_WAIT_CONNECT;
 800559e:	2300      	movs	r3, #0
 80055a0:	71fb      	strb	r3, [r7, #7]

    while (1) {
        len = Custom_Comm_Receive((uint8_t *)buffer);
 80055a2:	4811      	ldr	r0, [pc, #68]	@ (80055e8 <Bootloader+0x58>)
 80055a4:	f7fb fcba 	bl	8000f1c <Custom_Comm_Receive>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <Bootloader+0x5c>)
 80055ae:	801a      	strh	r2, [r3, #0]

        switch (state) {
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <Bootloader+0x2c>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d00c      	beq.n	80055d4 <Bootloader+0x44>
 80055ba:	e013      	b.n	80055e4 <Bootloader+0x54>
            case STATE_WAIT_CONNECT:
                if (Validate_And_Execute_Command((uint8_t *)buffer, len))
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <Bootloader+0x5c>)
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	4809      	ldr	r0, [pc, #36]	@ (80055e8 <Bootloader+0x58>)
 80055c4:	f7ff ff70 	bl	80054a8 <Validate_And_Execute_Command>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <Bootloader+0x52>
                    state = STATE_CONNECTED;
 80055ce:	2301      	movs	r3, #1
 80055d0:	71fb      	strb	r3, [r7, #7]
                break;
 80055d2:	e006      	b.n	80055e2 <Bootloader+0x52>

            case STATE_CONNECTED:
                Validate_And_Execute_Command((uint8_t *)buffer, len);
 80055d4:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <Bootloader+0x5c>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	4619      	mov	r1, r3
 80055da:	4803      	ldr	r0, [pc, #12]	@ (80055e8 <Bootloader+0x58>)
 80055dc:	f7ff ff64 	bl	80054a8 <Validate_And_Execute_Command>
                break;
 80055e0:	e000      	b.n	80055e4 <Bootloader+0x54>
                break;
 80055e2:	bf00      	nop
        len = Custom_Comm_Receive((uint8_t *)buffer);
 80055e4:	e7dd      	b.n	80055a2 <Bootloader+0x12>
 80055e6:	bf00      	nop
 80055e8:	200008e8 	.word	0x200008e8
 80055ec:	200009f2 	.word	0x200009f2

080055f0 <main>:
    }
}

/* =========================== Application CRC Boot Decision =========================== */
int main(void)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af04      	add	r7, sp, #16
    MCU_Clock_Setup();
 80055f6:	f7ff fe63 	bl	80052c0 <MCU_Clock_Setup>
    Delay_Config();
 80055fa:	f7ff ff23 	bl	8005444 <Delay_Config>
    CRC_Init();
 80055fe:	f7fb fb13 	bl	8000c28 <CRC_Init>

    GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None,
 8005602:	2000      	movs	r0, #0
 8005604:	2402      	movs	r4, #2
                  GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8005606:	2304      	movs	r3, #4
 8005608:	2204      	movs	r2, #4
 800560a:	2100      	movs	r1, #0
    GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None,
 800560c:	9102      	str	r1, [sp, #8]
 800560e:	9201      	str	r2, [sp, #4]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4623      	mov	r3, r4
 8005614:	4602      	mov	r2, r0
 8005616:	2100      	movs	r1, #0
 8005618:	4813      	ldr	r0, [pc, #76]	@ (8005668 <main+0x78>)
 800561a:	f7fd fd7b 	bl	8003114 <GPIO_Pin_Init>

    if ((GPIOC->IDR & GPIO_IDR_ID0) != 0) {
 800561e:	4b12      	ldr	r3, [pc, #72]	@ (8005668 <main+0x78>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <main+0x40>
        Bootloader();
 800562a:	f7ff ffb1 	bl	8005590 <Bootloader>
 800562e:	e019      	b.n	8005664 <main+0x74>
    } else {
        //uint32_t calculated_crc = CRC_Compute_Flash_Data(APP_ADDRESS, APP_SIZE);
//        if (calculated_crc == APP_CRC_VALUE) {
            // Jump to App

    	Console_Init(115200);
 8005630:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8005634:	f7fb fb80 	bl	8000d38 <Console_Init>
    	printConsole("Jumping to App1 \r\n");
 8005638:	480c      	ldr	r0, [pc, #48]	@ (800566c <main+0x7c>)
 800563a:	f7fb fbb3 	bl	8000da4 <printConsole>
//
            MCU_Clock_DeInit();
 800563e:	f7ff fed1 	bl	80053e4 <MCU_Clock_DeInit>
            Systick_DeInit();
 8005642:	f7ff ff17 	bl	8005474 <Systick_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8005646:	b672      	cpsid	i
}
 8005648:	bf00      	nop
            __disable_irq();
            //working code
            __set_MSP(*((__IO uint32_t*) 0x8010000));
 800564a:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <main+0x80>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f383 8808 	msr	MSP, r3
}
 8005656:	bf00      	nop
            void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t *)(0x8010000 + 4));
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <main+0x84>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	607b      	str	r3, [r7, #4]
            app_reset_handler();
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4798      	blx	r3
//        }
    }

    while (1);
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <main+0x74>
 8005668:	40020800 	.word	0x40020800
 800566c:	080066a8 	.word	0x080066a8
 8005670:	08010000 	.word	0x08010000
 8005674:	08010004 	.word	0x08010004

08005678 <Connect_Device_Func>:
}

void Connect_Device_Func(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800567e:	4b29      	ldr	r3, [pc, #164]	@ (8005724 <Connect_Device_Func+0xac>)
 8005680:	22aa      	movs	r2, #170	@ 0xaa
 8005682:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005684:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <Connect_Device_Func+0xac>)
 8005686:	2255      	movs	r2, #85	@ 0x55
 8005688:	705a      	strb	r2, [r3, #1]
	buffer[2] = Connect_Device;
 800568a:	4b26      	ldr	r3, [pc, #152]	@ (8005724 <Connect_Device_Func+0xac>)
 800568c:	22a1      	movs	r2, #161	@ 0xa1
 800568e:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <Connect_Device_Func+0xac>)
 8005692:	2202      	movs	r2, #2
 8005694:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0x01;
 8005696:	4b23      	ldr	r3, [pc, #140]	@ (8005724 <Connect_Device_Func+0xac>)
 8005698:	2201      	movs	r2, #1
 800569a:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0x19;
 800569c:	4b21      	ldr	r3, [pc, #132]	@ (8005724 <Connect_Device_Func+0xac>)
 800569e:	2219      	movs	r2, #25
 80056a0:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x01;
 80056a2:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <Connect_Device_Func+0xac>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x01;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <Connect_Device_Func+0xac>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0x01;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <Connect_Device_Func+0xac>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	721a      	strb	r2, [r3, #8]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80056b4:	2107      	movs	r1, #7
 80056b6:	481c      	ldr	r0, [pc, #112]	@ (8005728 <Connect_Device_Func+0xb0>)
 80056b8:	f7fb fad6 	bl	8000c68 <CRC_Compute_8Bit_Block>
 80056bc:	4603      	mov	r3, r0
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <Connect_Device_Func+0xb4>)
 80056c0:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <Connect_Device_Func+0xb4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	0e1b      	lsrs	r3, r3, #24
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <Connect_Device_Func+0xac>)
 80056cc:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80056ce:	4b17      	ldr	r3, [pc, #92]	@ (800572c <Connect_Device_Func+0xb4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <Connect_Device_Func+0xac>)
 80056d8:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <Connect_Device_Func+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <Connect_Device_Func+0xac>)
 80056e4:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80056e6:	4b11      	ldr	r3, [pc, #68]	@ (800572c <Connect_Device_Func+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <Connect_Device_Func+0xac>)
 80056ee:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 80056f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <Connect_Device_Func+0xac>)
 80056f2:	22bb      	movs	r2, #187	@ 0xbb
 80056f4:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <Connect_Device_Func+0xac>)
 80056f8:	2266      	movs	r2, #102	@ 0x66
 80056fa:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 80056fc:	210e      	movs	r1, #14
 80056fe:	4809      	ldr	r0, [pc, #36]	@ (8005724 <Connect_Device_Func+0xac>)
 8005700:	f7fb fbf0 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	2301      	movs	r3, #1
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	2308      	movs	r3, #8
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <Connect_Device_Func+0xac>)
 8005714:	2200      	movs	r2, #0
 8005716:	2108      	movs	r1, #8
 8005718:	4805      	ldr	r0, [pc, #20]	@ (8005730 <Connect_Device_Func+0xb8>)
 800571a:	f7fd fae5 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>

	//	DMA_Memory_To_Memory_Transfer(buffer1, 8,8, (uint8_t *)buffer, 0, 1, 256);
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	200008e8 	.word	0x200008e8
 8005728:	200008ea 	.word	0x200008ea
 800572c:	200009f4 	.word	0x200009f4
 8005730:	08006af8 	.word	0x08006af8

08005734 <Disconnect_Device_Func>:

void Disconnect_Device_Func(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800573a:	4b22      	ldr	r3, [pc, #136]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 800573c:	22aa      	movs	r2, #170	@ 0xaa
 800573e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005740:	4b20      	ldr	r3, [pc, #128]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005742:	2255      	movs	r2, #85	@ 0x55
 8005744:	705a      	strb	r2, [r3, #1]
	buffer[2] = Disconnect_Device;
 8005746:	4b1f      	ldr	r3, [pc, #124]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005748:	22a2      	movs	r2, #162	@ 0xa2
 800574a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800574c:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 800574e:	2202      	movs	r2, #2
 8005750:	70da      	strb	r2, [r3, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005752:	2107      	movs	r1, #7
 8005754:	481c      	ldr	r0, [pc, #112]	@ (80057c8 <Disconnect_Device_Func+0x94>)
 8005756:	f7fb fa87 	bl	8000c68 <CRC_Compute_8Bit_Block>
 800575a:	4603      	mov	r3, r0
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <Disconnect_Device_Func+0x98>)
 800575e:	6013      	str	r3, [r2, #0]
	buffer[4]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005760:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <Disconnect_Device_Func+0x98>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4b16      	ldr	r3, [pc, #88]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 800576a:	711a      	strb	r2, [r3, #4]
	buffer[5]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800576c:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <Disconnect_Device_Func+0x98>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005776:	715a      	strb	r2, [r3, #5]
	buffer[6]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <Disconnect_Device_Func+0x98>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	b2da      	uxtb	r2, r3
 8005780:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005782:	719a      	strb	r2, [r3, #6]
	buffer[7] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005784:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <Disconnect_Device_Func+0x98>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 800578c:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0xBB;
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005790:	22bb      	movs	r2, #187	@ 0xbb
 8005792:	721a      	strb	r2, [r3, #8]
	buffer[9] = 0x66;
 8005794:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 8005796:	2266      	movs	r2, #102	@ 0x66
 8005798:	725a      	strb	r2, [r3, #9]
	Custom_Comm_Send(buffer, 10);
 800579a:	210a      	movs	r1, #10
 800579c:	4809      	ldr	r0, [pc, #36]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 800579e:	f7fb fba1 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80057a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057a6:	9302      	str	r3, [sp, #8]
 80057a8:	2301      	movs	r3, #1
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	2308      	movs	r3, #8
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <Disconnect_Device_Func+0x90>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	2108      	movs	r1, #8
 80057b6:	4806      	ldr	r0, [pc, #24]	@ (80057d0 <Disconnect_Device_Func+0x9c>)
 80057b8:	f7fd fa96 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>


}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200008e8 	.word	0x200008e8
 80057c8:	200008ea 	.word	0x200008ea
 80057cc:	200009f4 	.word	0x200009f4
 80057d0:	08006af8 	.word	0x08006af8

080057d4 <Write_Firmware_Func>:


void Write_Firmware_Func(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af04      	add	r7, sp, #16
	// Write Flash Memory

	buffer[0] = 0xAA;
 80057da:	4b22      	ldr	r3, [pc, #136]	@ (8005864 <Write_Firmware_Func+0x90>)
 80057dc:	22aa      	movs	r2, #170	@ 0xaa
 80057de:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 80057e0:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <Write_Firmware_Func+0x90>)
 80057e2:	2255      	movs	r2, #85	@ 0x55
 80057e4:	705a      	strb	r2, [r3, #1]
	buffer[2] = Write_Firmware;
 80057e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005864 <Write_Firmware_Func+0x90>)
 80057e8:	22a3      	movs	r2, #163	@ 0xa3
 80057ea:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 80057ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <Write_Firmware_Func+0x90>)
 80057ee:	2202      	movs	r2, #2
 80057f0:	70da      	strb	r2, [r3, #3]

	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80057f2:	2107      	movs	r1, #7
 80057f4:	481c      	ldr	r0, [pc, #112]	@ (8005868 <Write_Firmware_Func+0x94>)
 80057f6:	f7fb fa37 	bl	8000c68 <CRC_Compute_8Bit_Block>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <Write_Firmware_Func+0x98>)
 80057fe:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <Write_Firmware_Func+0x98>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0e1b      	lsrs	r3, r3, #24
 8005806:	b2da      	uxtb	r2, r3
 8005808:	4b16      	ldr	r3, [pc, #88]	@ (8005864 <Write_Firmware_Func+0x90>)
 800580a:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800580c:	4b17      	ldr	r3, [pc, #92]	@ (800586c <Write_Firmware_Func+0x98>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b13      	ldr	r3, [pc, #76]	@ (8005864 <Write_Firmware_Func+0x90>)
 8005816:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005818:	4b14      	ldr	r3, [pc, #80]	@ (800586c <Write_Firmware_Func+0x98>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	b2da      	uxtb	r2, r3
 8005820:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <Write_Firmware_Func+0x90>)
 8005822:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005824:	4b11      	ldr	r3, [pc, #68]	@ (800586c <Write_Firmware_Func+0x98>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <Write_Firmware_Func+0x90>)
 800582c:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <Write_Firmware_Func+0x90>)
 8005830:	22bb      	movs	r2, #187	@ 0xbb
 8005832:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005834:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <Write_Firmware_Func+0x90>)
 8005836:	2266      	movs	r2, #102	@ 0x66
 8005838:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 800583a:	210e      	movs	r1, #14
 800583c:	4809      	ldr	r0, [pc, #36]	@ (8005864 <Write_Firmware_Func+0x90>)
 800583e:	f7fb fb51 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005846:	9302      	str	r3, [sp, #8]
 8005848:	2301      	movs	r3, #1
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	2308      	movs	r3, #8
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <Write_Firmware_Func+0x90>)
 8005852:	2200      	movs	r2, #0
 8005854:	2108      	movs	r1, #8
 8005856:	4806      	ldr	r0, [pc, #24]	@ (8005870 <Write_Firmware_Func+0x9c>)
 8005858:	f7fd fa46 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200008e8 	.word	0x200008e8
 8005868:	200008ea 	.word	0x200008ea
 800586c:	200009f4 	.word	0x200009f4
 8005870:	08006af8 	.word	0x08006af8

08005874 <Read_Firmware_Func>:

void Read_Firmware_Func(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800587a:	4b22      	ldr	r3, [pc, #136]	@ (8005904 <Read_Firmware_Func+0x90>)
 800587c:	22aa      	movs	r2, #170	@ 0xaa
 800587e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005880:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <Read_Firmware_Func+0x90>)
 8005882:	2255      	movs	r2, #85	@ 0x55
 8005884:	705a      	strb	r2, [r3, #1]
	buffer[2] = Read_Firmware;
 8005886:	4b1f      	ldr	r3, [pc, #124]	@ (8005904 <Read_Firmware_Func+0x90>)
 8005888:	22a4      	movs	r2, #164	@ 0xa4
 800588a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800588c:	4b1d      	ldr	r3, [pc, #116]	@ (8005904 <Read_Firmware_Func+0x90>)
 800588e:	2202      	movs	r2, #2
 8005890:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005892:	2107      	movs	r1, #7
 8005894:	481c      	ldr	r0, [pc, #112]	@ (8005908 <Read_Firmware_Func+0x94>)
 8005896:	f7fb f9e7 	bl	8000c68 <CRC_Compute_8Bit_Block>
 800589a:	4603      	mov	r3, r0
 800589c:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <Read_Firmware_Func+0x98>)
 800589e:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80058a0:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <Read_Firmware_Func+0x98>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	4b16      	ldr	r3, [pc, #88]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058aa:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80058ac:	4b17      	ldr	r3, [pc, #92]	@ (800590c <Read_Firmware_Func+0x98>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	4b13      	ldr	r3, [pc, #76]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058b6:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <Read_Firmware_Func+0x98>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058c2:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80058c4:	4b11      	ldr	r3, [pc, #68]	@ (800590c <Read_Firmware_Func+0x98>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058cc:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 80058ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058d0:	22bb      	movs	r2, #187	@ 0xbb
 80058d2:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 80058d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058d6:	2266      	movs	r2, #102	@ 0x66
 80058d8:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 80058da:	210e      	movs	r1, #14
 80058dc:	4809      	ldr	r0, [pc, #36]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058de:	f7fb fb01 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80058e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	2301      	movs	r3, #1
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	2308      	movs	r3, #8
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <Read_Firmware_Func+0x90>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	2108      	movs	r1, #8
 80058f6:	4806      	ldr	r0, [pc, #24]	@ (8005910 <Read_Firmware_Func+0x9c>)
 80058f8:	f7fd f9f6 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200008e8 	.word	0x200008e8
 8005908:	200008ea 	.word	0x200008ea
 800590c:	200009f4 	.word	0x200009f4
 8005910:	08006af8 	.word	0x08006af8

08005914 <Erase_Firmware_Func>:

void Erase_Firmware_Func(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800591a:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 800591c:	22aa      	movs	r2, #170	@ 0xaa
 800591e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005920:	4b20      	ldr	r3, [pc, #128]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005922:	2255      	movs	r2, #85	@ 0x55
 8005924:	705a      	strb	r2, [r3, #1]
	buffer[2] = Erase_Firmware;
 8005926:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005928:	22a5      	movs	r2, #165	@ 0xa5
 800592a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800592c:	4b1d      	ldr	r3, [pc, #116]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 800592e:	2202      	movs	r2, #2
 8005930:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005932:	2107      	movs	r1, #7
 8005934:	481c      	ldr	r0, [pc, #112]	@ (80059a8 <Erase_Firmware_Func+0x94>)
 8005936:	f7fb f997 	bl	8000c68 <CRC_Compute_8Bit_Block>
 800593a:	4603      	mov	r3, r0
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <Erase_Firmware_Func+0x98>)
 800593e:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005940:	4b1a      	ldr	r3, [pc, #104]	@ (80059ac <Erase_Firmware_Func+0x98>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	0e1b      	lsrs	r3, r3, #24
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4b16      	ldr	r3, [pc, #88]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 800594a:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800594c:	4b17      	ldr	r3, [pc, #92]	@ (80059ac <Erase_Firmware_Func+0x98>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	b2da      	uxtb	r2, r3
 8005954:	4b13      	ldr	r3, [pc, #76]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005956:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005958:	4b14      	ldr	r3, [pc, #80]	@ (80059ac <Erase_Firmware_Func+0x98>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005962:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005964:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <Erase_Firmware_Func+0x98>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 800596c:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005970:	22bb      	movs	r2, #187	@ 0xbb
 8005972:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005974:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005976:	2266      	movs	r2, #102	@ 0x66
 8005978:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 800597a:	210e      	movs	r1, #14
 800597c:	4809      	ldr	r0, [pc, #36]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 800597e:	f7fb fab1 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	2301      	movs	r3, #1
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	2308      	movs	r3, #8
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <Erase_Firmware_Func+0x90>)
 8005992:	2200      	movs	r2, #0
 8005994:	2108      	movs	r1, #8
 8005996:	4806      	ldr	r0, [pc, #24]	@ (80059b0 <Erase_Firmware_Func+0x9c>)
 8005998:	f7fd f9a6 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200008e8 	.word	0x200008e8
 80059a8:	200008ea 	.word	0x200008ea
 80059ac:	200009f4 	.word	0x200009f4
 80059b0:	08006af8 	.word	0x08006af8

080059b4 <Reboot_MCU_Func>:

void Reboot_MCU_Func(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af04      	add	r7, sp, #16

	buffer[0] = 0xAA;
 80059ba:	4b21      	ldr	r3, [pc, #132]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059bc:	22aa      	movs	r2, #170	@ 0xaa
 80059be:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 80059c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059c2:	2255      	movs	r2, #85	@ 0x55
 80059c4:	705a      	strb	r2, [r3, #1]
	buffer[2] = Reboot_MCU;
 80059c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059c8:	22a6      	movs	r2, #166	@ 0xa6
 80059ca:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 80059cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059ce:	2202      	movs	r2, #2
 80059d0:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80059d2:	2107      	movs	r1, #7
 80059d4:	481b      	ldr	r0, [pc, #108]	@ (8005a44 <Reboot_MCU_Func+0x90>)
 80059d6:	f7fb f947 	bl	8000c68 <CRC_Compute_8Bit_Block>
 80059da:	4603      	mov	r3, r0
 80059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <Reboot_MCU_Func+0x94>)
 80059de:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <Reboot_MCU_Func+0x94>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b15      	ldr	r3, [pc, #84]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059ea:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80059ec:	4b16      	ldr	r3, [pc, #88]	@ (8005a48 <Reboot_MCU_Func+0x94>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	0c1b      	lsrs	r3, r3, #16
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	4b12      	ldr	r3, [pc, #72]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 80059f6:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80059f8:	4b13      	ldr	r3, [pc, #76]	@ (8005a48 <Reboot_MCU_Func+0x94>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a02:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005a04:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <Reboot_MCU_Func+0x94>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a0c:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a10:	22bb      	movs	r2, #187	@ 0xbb
 8005a12:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a16:	2266      	movs	r2, #102	@ 0x66
 8005a18:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 8005a1a:	210e      	movs	r1, #14
 8005a1c:	4808      	ldr	r0, [pc, #32]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a1e:	f7fb fa61 	bl	8000ee4 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	4b03      	ldr	r3, [pc, #12]	@ (8005a40 <Reboot_MCU_Func+0x8c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	2108      	movs	r1, #8
 8005a36:	4805      	ldr	r0, [pc, #20]	@ (8005a4c <Reboot_MCU_Func+0x98>)
 8005a38:	f7fd f956 	bl	8002ce8 <DMA_Memory_To_Memory_Transfer>

	NVIC_SystemReset();
 8005a3c:	f7ff fc08 	bl	8005250 <__NVIC_SystemReset>
 8005a40:	200008e8 	.word	0x200008e8
 8005a44:	200008ea 	.word	0x200008ea
 8005a48:	200009f4 	.word	0x200009f4
 8005a4c:	08006af8 	.word	0x08006af8

08005a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a58:	4a14      	ldr	r2, [pc, #80]	@ (8005aac <_sbrk+0x5c>)
 8005a5a:	4b15      	ldr	r3, [pc, #84]	@ (8005ab0 <_sbrk+0x60>)
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a64:	4b13      	ldr	r3, [pc, #76]	@ (8005ab4 <_sbrk+0x64>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <_sbrk+0x64>)
 8005a6e:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <_sbrk+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <_sbrk+0x64>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d207      	bcs.n	8005a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a80:	f000 f914 	bl	8005cac <__errno>
 8005a84:	4603      	mov	r3, r0
 8005a86:	220c      	movs	r2, #12
 8005a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	e009      	b.n	8005aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a90:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <_sbrk+0x64>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a96:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <_sbrk+0x64>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4a05      	ldr	r2, [pc, #20]	@ (8005ab4 <_sbrk+0x64>)
 8005aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20020000 	.word	0x20020000
 8005ab0:	00000400 	.word	0x00000400
 8005ab4:	200009f8 	.word	0x200009f8
 8005ab8:	20000b48 	.word	0x20000b48

08005abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <SystemInit+0x20>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <SystemInit+0x20>)
 8005ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000ed00 	.word	0xe000ed00

08005ae0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	2302      	movs	r3, #2
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	2302      	movs	r3, #2
 8005af8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005afa:	4b34      	ldr	r3, [pc, #208]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
 8005b02:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d011      	beq.n	8005b2e <SystemCoreClockUpdate+0x4e>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d844      	bhi.n	8005b9a <SystemCoreClockUpdate+0xba>
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <SystemCoreClockUpdate+0x3e>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d004      	beq.n	8005b26 <SystemCoreClockUpdate+0x46>
 8005b1c:	e03d      	b.n	8005b9a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005b20:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd4 <SystemCoreClockUpdate+0xf4>)
 8005b22:	601a      	str	r2, [r3, #0]
      break;
 8005b24:	e03d      	b.n	8005ba2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005b26:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005b28:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd8 <SystemCoreClockUpdate+0xf8>)
 8005b2a:	601a      	str	r2, [r3, #0]
      break;
 8005b2c:	e039      	b.n	8005ba2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005b2e:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	0d9b      	lsrs	r3, r3, #22
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b3a:	4b24      	ldr	r3, [pc, #144]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b42:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005b4a:	4a23      	ldr	r2, [pc, #140]	@ (8005bd8 <SystemCoreClockUpdate+0xf8>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005b54:	6852      	ldr	r2, [r2, #4]
 8005b56:	0992      	lsrs	r2, r2, #6
 8005b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e00b      	b.n	8005b7c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <SystemCoreClockUpdate+0xf4>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005b6e:	6852      	ldr	r2, [r2, #4]
 8005b70:	0992      	lsrs	r2, r2, #6
 8005b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005b7c:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	3301      	adds	r3, #1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005b96:	6013      	str	r3, [r2, #0]
      break;
 8005b98:	e003      	b.n	8005ba2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <SystemCoreClockUpdate+0xf4>)
 8005b9e:	601a      	str	r2, [r3, #0]
      break;
 8005ba0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <SystemCoreClockUpdate+0xec>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	4a0b      	ldr	r2, [pc, #44]	@ (8005bdc <SystemCoreClockUpdate+0xfc>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005bb2:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	4a04      	ldr	r2, [pc, #16]	@ (8005bd0 <SystemCoreClockUpdate+0xf0>)
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	20000000 	.word	0x20000000
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	007a1200 	.word	0x007a1200
 8005bdc:	08006afc 	.word	0x08006afc

08005be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005be0:	480d      	ldr	r0, [pc, #52]	@ (8005c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005be2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005be4:	f7ff ff6a 	bl	8005abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005be8:	480c      	ldr	r0, [pc, #48]	@ (8005c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8005bea:	490d      	ldr	r1, [pc, #52]	@ (8005c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bec:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <LoopForever+0xe>)
  movs r3, #0
 8005bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bf0:	e002      	b.n	8005bf8 <LoopCopyDataInit>

08005bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bf6:	3304      	adds	r3, #4

08005bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bfc:	d3f9      	bcc.n	8005bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c00:	4c0a      	ldr	r4, [pc, #40]	@ (8005c2c <LoopForever+0x16>)
  movs r3, #0
 8005c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c04:	e001      	b.n	8005c0a <LoopFillZerobss>

08005c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c08:	3204      	adds	r2, #4

08005c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c0c:	d3fb      	bcc.n	8005c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c0e:	f000 f853 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c12:	f7ff fced 	bl	80055f0 <main>

08005c16 <LoopForever>:

LoopForever:
  b LoopForever
 8005c16:	e7fe      	b.n	8005c16 <LoopForever>
  ldr   r0, =_estack
 8005c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c20:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8005c24:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8005c28:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8005c2c:	20000b44 	.word	0x20000b44

08005c30 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c30:	e7fe      	b.n	8005c30 <ADC_IRQHandler>

08005c32 <_vsniprintf_r>:
 8005c32:	b530      	push	{r4, r5, lr}
 8005c34:	4614      	mov	r4, r2
 8005c36:	2c00      	cmp	r4, #0
 8005c38:	b09b      	sub	sp, #108	@ 0x6c
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	da05      	bge.n	8005c4c <_vsniprintf_r+0x1a>
 8005c40:	238b      	movs	r3, #139	@ 0x8b
 8005c42:	6003      	str	r3, [r0, #0]
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	b01b      	add	sp, #108	@ 0x6c
 8005c4a:	bd30      	pop	{r4, r5, pc}
 8005c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c50:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c5a:	bf14      	ite	ne
 8005c5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c60:	4623      	moveq	r3, r4
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c6a:	9100      	str	r1, [sp, #0]
 8005c6c:	9104      	str	r1, [sp, #16]
 8005c6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005c72:	4669      	mov	r1, sp
 8005c74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005c76:	f000 f9a7 	bl	8005fc8 <_svfiprintf_r>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	bfbc      	itt	lt
 8005c7e:	238b      	movlt	r3, #139	@ 0x8b
 8005c80:	602b      	strlt	r3, [r5, #0]
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d0e0      	beq.n	8005c48 <_vsniprintf_r+0x16>
 8005c86:	9b00      	ldr	r3, [sp, #0]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e7dc      	b.n	8005c48 <_vsniprintf_r+0x16>
	...

08005c90 <vsniprintf>:
 8005c90:	b507      	push	{r0, r1, r2, lr}
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	460a      	mov	r2, r1
 8005c98:	4601      	mov	r1, r0
 8005c9a:	4803      	ldr	r0, [pc, #12]	@ (8005ca8 <vsniprintf+0x18>)
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	f7ff ffc8 	bl	8005c32 <_vsniprintf_r>
 8005ca2:	b003      	add	sp, #12
 8005ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ca8:	20000004 	.word	0x20000004

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	@ (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000004 	.word	0x20000004

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	@ (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	@ (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 fce0 	bl	8006690 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	08006b50 	.word	0x08006b50
 8005cf4:	08006b50 	.word	0x08006b50
 8005cf8:	08006b50 	.word	0x08006b50
 8005cfc:	08006b54 	.word	0x08006b54

08005d00 <__retarget_lock_acquire_recursive>:
 8005d00:	4770      	bx	lr

08005d02 <__retarget_lock_release_recursive>:
 8005d02:	4770      	bx	lr

08005d04 <memcpy>:
 8005d04:	440a      	add	r2, r1
 8005d06:	4291      	cmp	r1, r2
 8005d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d0c:	d100      	bne.n	8005d10 <memcpy+0xc>
 8005d0e:	4770      	bx	lr
 8005d10:	b510      	push	{r4, lr}
 8005d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	d1f9      	bne.n	8005d12 <memcpy+0xe>
 8005d1e:	bd10      	pop	{r4, pc}

08005d20 <_free_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d041      	beq.n	8005dac <_free_r+0x8c>
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f0c      	subs	r4, r1, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfb8      	it	lt
 8005d32:	18e4      	addlt	r4, r4, r3
 8005d34:	f000 f8e0 	bl	8005ef8 <__malloc_lock>
 8005d38:	4a1d      	ldr	r2, [pc, #116]	@ (8005db0 <_free_r+0x90>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	b933      	cbnz	r3, 8005d4c <_free_r+0x2c>
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	6014      	str	r4, [r2, #0]
 8005d42:	4628      	mov	r0, r5
 8005d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d48:	f000 b8dc 	b.w	8005f04 <__malloc_unlock>
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d908      	bls.n	8005d62 <_free_r+0x42>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	1821      	adds	r1, r4, r0
 8005d54:	428b      	cmp	r3, r1
 8005d56:	bf01      	itttt	eq
 8005d58:	6819      	ldreq	r1, [r3, #0]
 8005d5a:	685b      	ldreq	r3, [r3, #4]
 8005d5c:	1809      	addeq	r1, r1, r0
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	e7ed      	b.n	8005d3e <_free_r+0x1e>
 8005d62:	461a      	mov	r2, r3
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b10b      	cbz	r3, 8005d6c <_free_r+0x4c>
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d9fa      	bls.n	8005d62 <_free_r+0x42>
 8005d6c:	6811      	ldr	r1, [r2, #0]
 8005d6e:	1850      	adds	r0, r2, r1
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d10b      	bne.n	8005d8c <_free_r+0x6c>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	4401      	add	r1, r0
 8005d78:	1850      	adds	r0, r2, r1
 8005d7a:	4283      	cmp	r3, r0
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	d1e0      	bne.n	8005d42 <_free_r+0x22>
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	6053      	str	r3, [r2, #4]
 8005d86:	4408      	add	r0, r1
 8005d88:	6010      	str	r0, [r2, #0]
 8005d8a:	e7da      	b.n	8005d42 <_free_r+0x22>
 8005d8c:	d902      	bls.n	8005d94 <_free_r+0x74>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	e7d6      	b.n	8005d42 <_free_r+0x22>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf04      	itt	eq
 8005d9c:	6819      	ldreq	r1, [r3, #0]
 8005d9e:	685b      	ldreq	r3, [r3, #4]
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	bf04      	itt	eq
 8005da4:	1809      	addeq	r1, r1, r0
 8005da6:	6021      	streq	r1, [r4, #0]
 8005da8:	6054      	str	r4, [r2, #4]
 8005daa:	e7ca      	b.n	8005d42 <_free_r+0x22>
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20000b40 	.word	0x20000b40

08005db4 <sbrk_aligned>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4e0f      	ldr	r6, [pc, #60]	@ (8005df4 <sbrk_aligned+0x40>)
 8005db8:	460c      	mov	r4, r1
 8005dba:	6831      	ldr	r1, [r6, #0]
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	b911      	cbnz	r1, 8005dc6 <sbrk_aligned+0x12>
 8005dc0:	f000 fba4 	bl	800650c <_sbrk_r>
 8005dc4:	6030      	str	r0, [r6, #0]
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 fb9f 	bl	800650c <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d103      	bne.n	8005dda <sbrk_aligned+0x26>
 8005dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d0f8      	beq.n	8005dd6 <sbrk_aligned+0x22>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 fb90 	bl	800650c <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1f2      	bne.n	8005dd6 <sbrk_aligned+0x22>
 8005df0:	e7ef      	b.n	8005dd2 <sbrk_aligned+0x1e>
 8005df2:	bf00      	nop
 8005df4:	20000b3c 	.word	0x20000b3c

08005df8 <_malloc_r>:
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dfc:	1ccd      	adds	r5, r1, #3
 8005dfe:	f025 0503 	bic.w	r5, r5, #3
 8005e02:	3508      	adds	r5, #8
 8005e04:	2d0c      	cmp	r5, #12
 8005e06:	bf38      	it	cc
 8005e08:	250c      	movcc	r5, #12
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	db01      	blt.n	8005e14 <_malloc_r+0x1c>
 8005e10:	42a9      	cmp	r1, r5
 8005e12:	d904      	bls.n	8005e1e <_malloc_r+0x26>
 8005e14:	230c      	movs	r3, #12
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef4 <_malloc_r+0xfc>
 8005e22:	f000 f869 	bl	8005ef8 <__malloc_lock>
 8005e26:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2a:	461c      	mov	r4, r3
 8005e2c:	bb44      	cbnz	r4, 8005e80 <_malloc_r+0x88>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7ff ffbf 	bl	8005db4 <sbrk_aligned>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	4604      	mov	r4, r0
 8005e3a:	d158      	bne.n	8005eee <_malloc_r+0xf6>
 8005e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e40:	4627      	mov	r7, r4
 8005e42:	2f00      	cmp	r7, #0
 8005e44:	d143      	bne.n	8005ece <_malloc_r+0xd6>
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d04b      	beq.n	8005ee2 <_malloc_r+0xea>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	eb04 0903 	add.w	r9, r4, r3
 8005e54:	f000 fb5a 	bl	800650c <_sbrk_r>
 8005e58:	4581      	cmp	r9, r0
 8005e5a:	d142      	bne.n	8005ee2 <_malloc_r+0xea>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	1a6d      	subs	r5, r5, r1
 8005e60:	4629      	mov	r1, r5
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ffa6 	bl	8005db4 <sbrk_aligned>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d03a      	beq.n	8005ee2 <_malloc_r+0xea>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	442b      	add	r3, r5
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	f8d8 3000 	ldr.w	r3, [r8]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	bb62      	cbnz	r2, 8005ed4 <_malloc_r+0xdc>
 8005e7a:	f8c8 7000 	str.w	r7, [r8]
 8005e7e:	e00f      	b.n	8005ea0 <_malloc_r+0xa8>
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	1b52      	subs	r2, r2, r5
 8005e84:	d420      	bmi.n	8005ec8 <_malloc_r+0xd0>
 8005e86:	2a0b      	cmp	r2, #11
 8005e88:	d917      	bls.n	8005eba <_malloc_r+0xc2>
 8005e8a:	1961      	adds	r1, r4, r5
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	6025      	str	r5, [r4, #0]
 8005e90:	bf18      	it	ne
 8005e92:	6059      	strne	r1, [r3, #4]
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	bf08      	it	eq
 8005e98:	f8c8 1000 	streq.w	r1, [r8]
 8005e9c:	5162      	str	r2, [r4, r5]
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f000 f82f 	bl	8005f04 <__malloc_unlock>
 8005ea6:	f104 000b 	add.w	r0, r4, #11
 8005eaa:	1d23      	adds	r3, r4, #4
 8005eac:	f020 0007 	bic.w	r0, r0, #7
 8005eb0:	1ac2      	subs	r2, r0, r3
 8005eb2:	bf1c      	itt	ne
 8005eb4:	1a1b      	subne	r3, r3, r0
 8005eb6:	50a3      	strne	r3, [r4, r2]
 8005eb8:	e7af      	b.n	8005e1a <_malloc_r+0x22>
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	bf0c      	ite	eq
 8005ec0:	f8c8 2000 	streq.w	r2, [r8]
 8005ec4:	605a      	strne	r2, [r3, #4]
 8005ec6:	e7eb      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ec8:	4623      	mov	r3, r4
 8005eca:	6864      	ldr	r4, [r4, #4]
 8005ecc:	e7ae      	b.n	8005e2c <_malloc_r+0x34>
 8005ece:	463c      	mov	r4, r7
 8005ed0:	687f      	ldr	r7, [r7, #4]
 8005ed2:	e7b6      	b.n	8005e42 <_malloc_r+0x4a>
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d1fb      	bne.n	8005ed4 <_malloc_r+0xdc>
 8005edc:	2300      	movs	r3, #0
 8005ede:	6053      	str	r3, [r2, #4]
 8005ee0:	e7de      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f80c 	bl	8005f04 <__malloc_unlock>
 8005eec:	e794      	b.n	8005e18 <_malloc_r+0x20>
 8005eee:	6005      	str	r5, [r0, #0]
 8005ef0:	e7d6      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ef2:	bf00      	nop
 8005ef4:	20000b40 	.word	0x20000b40

08005ef8 <__malloc_lock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	@ (8005f00 <__malloc_lock+0x8>)
 8005efa:	f7ff bf01 	b.w	8005d00 <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	20000b38 	.word	0x20000b38

08005f04 <__malloc_unlock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	@ (8005f0c <__malloc_unlock+0x8>)
 8005f06:	f7ff befc 	b.w	8005d02 <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	20000b38 	.word	0x20000b38

08005f10 <__ssputs_r>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	688e      	ldr	r6, [r1, #8]
 8005f16:	461f      	mov	r7, r3
 8005f18:	42be      	cmp	r6, r7
 8005f1a:	680b      	ldr	r3, [r1, #0]
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4690      	mov	r8, r2
 8005f22:	d82d      	bhi.n	8005f80 <__ssputs_r+0x70>
 8005f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f2c:	d026      	beq.n	8005f7c <__ssputs_r+0x6c>
 8005f2e:	6965      	ldr	r5, [r4, #20]
 8005f30:	6909      	ldr	r1, [r1, #16]
 8005f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f36:	eba3 0901 	sub.w	r9, r3, r1
 8005f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f3e:	1c7b      	adds	r3, r7, #1
 8005f40:	444b      	add	r3, r9
 8005f42:	106d      	asrs	r5, r5, #1
 8005f44:	429d      	cmp	r5, r3
 8005f46:	bf38      	it	cc
 8005f48:	461d      	movcc	r5, r3
 8005f4a:	0553      	lsls	r3, r2, #21
 8005f4c:	d527      	bpl.n	8005f9e <__ssputs_r+0x8e>
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7ff ff52 	bl	8005df8 <_malloc_r>
 8005f54:	4606      	mov	r6, r0
 8005f56:	b360      	cbz	r0, 8005fb2 <__ssputs_r+0xa2>
 8005f58:	6921      	ldr	r1, [r4, #16]
 8005f5a:	464a      	mov	r2, r9
 8005f5c:	f7ff fed2 	bl	8005d04 <memcpy>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	6126      	str	r6, [r4, #16]
 8005f6e:	6165      	str	r5, [r4, #20]
 8005f70:	444e      	add	r6, r9
 8005f72:	eba5 0509 	sub.w	r5, r5, r9
 8005f76:	6026      	str	r6, [r4, #0]
 8005f78:	60a5      	str	r5, [r4, #8]
 8005f7a:	463e      	mov	r6, r7
 8005f7c:	42be      	cmp	r6, r7
 8005f7e:	d900      	bls.n	8005f82 <__ssputs_r+0x72>
 8005f80:	463e      	mov	r6, r7
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	4632      	mov	r2, r6
 8005f86:	4641      	mov	r1, r8
 8005f88:	f000 faa6 	bl	80064d8 <memmove>
 8005f8c:	68a3      	ldr	r3, [r4, #8]
 8005f8e:	1b9b      	subs	r3, r3, r6
 8005f90:	60a3      	str	r3, [r4, #8]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	4433      	add	r3, r6
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	f000 fac4 	bl	800652c <_realloc_r>
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d1e0      	bne.n	8005f6c <__ssputs_r+0x5c>
 8005faa:	6921      	ldr	r1, [r4, #16]
 8005fac:	4650      	mov	r0, sl
 8005fae:	f7ff feb7 	bl	8005d20 <_free_r>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	f8ca 3000 	str.w	r3, [sl]
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	e7e9      	b.n	8005f9a <__ssputs_r+0x8a>
	...

08005fc8 <_svfiprintf_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	4698      	mov	r8, r3
 8005fce:	898b      	ldrh	r3, [r1, #12]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	b09d      	sub	sp, #116	@ 0x74
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	d510      	bpl.n	8005ffe <_svfiprintf_r+0x36>
 8005fdc:	690b      	ldr	r3, [r1, #16]
 8005fde:	b973      	cbnz	r3, 8005ffe <_svfiprintf_r+0x36>
 8005fe0:	2140      	movs	r1, #64	@ 0x40
 8005fe2:	f7ff ff09 	bl	8005df8 <_malloc_r>
 8005fe6:	6028      	str	r0, [r5, #0]
 8005fe8:	6128      	str	r0, [r5, #16]
 8005fea:	b930      	cbnz	r0, 8005ffa <_svfiprintf_r+0x32>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	b01d      	add	sp, #116	@ 0x74
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	2340      	movs	r3, #64	@ 0x40
 8005ffc:	616b      	str	r3, [r5, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	9309      	str	r3, [sp, #36]	@ 0x24
 8006002:	2320      	movs	r3, #32
 8006004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006008:	f8cd 800c 	str.w	r8, [sp, #12]
 800600c:	2330      	movs	r3, #48	@ 0x30
 800600e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061ac <_svfiprintf_r+0x1e4>
 8006012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006016:	f04f 0901 	mov.w	r9, #1
 800601a:	4623      	mov	r3, r4
 800601c:	469a      	mov	sl, r3
 800601e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006022:	b10a      	cbz	r2, 8006028 <_svfiprintf_r+0x60>
 8006024:	2a25      	cmp	r2, #37	@ 0x25
 8006026:	d1f9      	bne.n	800601c <_svfiprintf_r+0x54>
 8006028:	ebba 0b04 	subs.w	fp, sl, r4
 800602c:	d00b      	beq.n	8006046 <_svfiprintf_r+0x7e>
 800602e:	465b      	mov	r3, fp
 8006030:	4622      	mov	r2, r4
 8006032:	4629      	mov	r1, r5
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff ff6b 	bl	8005f10 <__ssputs_r>
 800603a:	3001      	adds	r0, #1
 800603c:	f000 80a7 	beq.w	800618e <_svfiprintf_r+0x1c6>
 8006040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006042:	445a      	add	r2, fp
 8006044:	9209      	str	r2, [sp, #36]	@ 0x24
 8006046:	f89a 3000 	ldrb.w	r3, [sl]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 809f 	beq.w	800618e <_svfiprintf_r+0x1c6>
 8006050:	2300      	movs	r3, #0
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800605a:	f10a 0a01 	add.w	sl, sl, #1
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006066:	931a      	str	r3, [sp, #104]	@ 0x68
 8006068:	4654      	mov	r4, sl
 800606a:	2205      	movs	r2, #5
 800606c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006070:	484e      	ldr	r0, [pc, #312]	@ (80061ac <_svfiprintf_r+0x1e4>)
 8006072:	f7fa f8b5 	bl	80001e0 <memchr>
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	b9d8      	cbnz	r0, 80060b2 <_svfiprintf_r+0xea>
 800607a:	06d0      	lsls	r0, r2, #27
 800607c:	bf44      	itt	mi
 800607e:	2320      	movmi	r3, #32
 8006080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006084:	0711      	lsls	r1, r2, #28
 8006086:	bf44      	itt	mi
 8006088:	232b      	movmi	r3, #43	@ 0x2b
 800608a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b2a      	cmp	r3, #42	@ 0x2a
 8006094:	d015      	beq.n	80060c2 <_svfiprintf_r+0xfa>
 8006096:	9a07      	ldr	r2, [sp, #28]
 8006098:	4654      	mov	r4, sl
 800609a:	2000      	movs	r0, #0
 800609c:	f04f 0c0a 	mov.w	ip, #10
 80060a0:	4621      	mov	r1, r4
 80060a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a6:	3b30      	subs	r3, #48	@ 0x30
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d94b      	bls.n	8006144 <_svfiprintf_r+0x17c>
 80060ac:	b1b0      	cbz	r0, 80060dc <_svfiprintf_r+0x114>
 80060ae:	9207      	str	r2, [sp, #28]
 80060b0:	e014      	b.n	80060dc <_svfiprintf_r+0x114>
 80060b2:	eba0 0308 	sub.w	r3, r0, r8
 80060b6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	46a2      	mov	sl, r4
 80060c0:	e7d2      	b.n	8006068 <_svfiprintf_r+0xa0>
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	9103      	str	r1, [sp, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbb      	ittet	lt
 80060ce:	425b      	neglt	r3, r3
 80060d0:	f042 0202 	orrlt.w	r2, r2, #2
 80060d4:	9307      	strge	r3, [sp, #28]
 80060d6:	9307      	strlt	r3, [sp, #28]
 80060d8:	bfb8      	it	lt
 80060da:	9204      	strlt	r2, [sp, #16]
 80060dc:	7823      	ldrb	r3, [r4, #0]
 80060de:	2b2e      	cmp	r3, #46	@ 0x2e
 80060e0:	d10a      	bne.n	80060f8 <_svfiprintf_r+0x130>
 80060e2:	7863      	ldrb	r3, [r4, #1]
 80060e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80060e6:	d132      	bne.n	800614e <_svfiprintf_r+0x186>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	9203      	str	r2, [sp, #12]
 80060f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060f4:	3402      	adds	r4, #2
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061bc <_svfiprintf_r+0x1f4>
 80060fc:	7821      	ldrb	r1, [r4, #0]
 80060fe:	2203      	movs	r2, #3
 8006100:	4650      	mov	r0, sl
 8006102:	f7fa f86d 	bl	80001e0 <memchr>
 8006106:	b138      	cbz	r0, 8006118 <_svfiprintf_r+0x150>
 8006108:	9b04      	ldr	r3, [sp, #16]
 800610a:	eba0 000a 	sub.w	r0, r0, sl
 800610e:	2240      	movs	r2, #64	@ 0x40
 8006110:	4082      	lsls	r2, r0
 8006112:	4313      	orrs	r3, r2
 8006114:	3401      	adds	r4, #1
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	4824      	ldr	r0, [pc, #144]	@ (80061b0 <_svfiprintf_r+0x1e8>)
 800611e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006122:	2206      	movs	r2, #6
 8006124:	f7fa f85c 	bl	80001e0 <memchr>
 8006128:	2800      	cmp	r0, #0
 800612a:	d036      	beq.n	800619a <_svfiprintf_r+0x1d2>
 800612c:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <_svfiprintf_r+0x1ec>)
 800612e:	bb1b      	cbnz	r3, 8006178 <_svfiprintf_r+0x1b0>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	3307      	adds	r3, #7
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	3308      	adds	r3, #8
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613e:	4433      	add	r3, r6
 8006140:	9309      	str	r3, [sp, #36]	@ 0x24
 8006142:	e76a      	b.n	800601a <_svfiprintf_r+0x52>
 8006144:	fb0c 3202 	mla	r2, ip, r2, r3
 8006148:	460c      	mov	r4, r1
 800614a:	2001      	movs	r0, #1
 800614c:	e7a8      	b.n	80060a0 <_svfiprintf_r+0xd8>
 800614e:	2300      	movs	r3, #0
 8006150:	3401      	adds	r4, #1
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	4619      	mov	r1, r3
 8006156:	f04f 0c0a 	mov.w	ip, #10
 800615a:	4620      	mov	r0, r4
 800615c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006160:	3a30      	subs	r2, #48	@ 0x30
 8006162:	2a09      	cmp	r2, #9
 8006164:	d903      	bls.n	800616e <_svfiprintf_r+0x1a6>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0c6      	beq.n	80060f8 <_svfiprintf_r+0x130>
 800616a:	9105      	str	r1, [sp, #20]
 800616c:	e7c4      	b.n	80060f8 <_svfiprintf_r+0x130>
 800616e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006172:	4604      	mov	r4, r0
 8006174:	2301      	movs	r3, #1
 8006176:	e7f0      	b.n	800615a <_svfiprintf_r+0x192>
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	462a      	mov	r2, r5
 800617e:	4b0e      	ldr	r3, [pc, #56]	@ (80061b8 <_svfiprintf_r+0x1f0>)
 8006180:	a904      	add	r1, sp, #16
 8006182:	4638      	mov	r0, r7
 8006184:	f3af 8000 	nop.w
 8006188:	1c42      	adds	r2, r0, #1
 800618a:	4606      	mov	r6, r0
 800618c:	d1d6      	bne.n	800613c <_svfiprintf_r+0x174>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	065b      	lsls	r3, r3, #25
 8006192:	f53f af2d 	bmi.w	8005ff0 <_svfiprintf_r+0x28>
 8006196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006198:	e72c      	b.n	8005ff4 <_svfiprintf_r+0x2c>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <_svfiprintf_r+0x1f0>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4638      	mov	r0, r7
 80061a6:	f000 f879 	bl	800629c <_printf_i>
 80061aa:	e7ed      	b.n	8006188 <_svfiprintf_r+0x1c0>
 80061ac:	08006b14 	.word	0x08006b14
 80061b0:	08006b1e 	.word	0x08006b1e
 80061b4:	00000000 	.word	0x00000000
 80061b8:	08005f11 	.word	0x08005f11
 80061bc:	08006b1a 	.word	0x08006b1a

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	3b00      	subs	r3, #0
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf02      	ittt	eq
 8006232:	68e5      	ldreq	r5, [r4, #12]
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	1aed      	subeq	r5, r5, r3
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4641      	mov	r1, r8
 800625c:	4638      	mov	r0, r7
 800625e:	47c8      	blx	r9
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	@ 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4641      	mov	r1, r8
 800628e:	4638      	mov	r0, r7
 8006290:	47c8      	blx	r9
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a4:	2f78      	cmp	r7, #120	@ 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	@ 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d1 	beq.w	8006460 <_printf_i+0x1c4>
 80062be:	2f58      	cmp	r7, #88	@ 0x58
 80062c0:	f000 80b8 	beq.w	8006434 <_printf_i+0x198>
 80062c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	@ (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	08006447 	.word	0x08006447
 800630c:	08006373 	.word	0x08006373
 8006310:	08006401 	.word	0x08006401
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	08006469 	.word	0x08006469
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006373 	.word	0x08006373
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	08006409 	.word	0x08006409
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6032      	str	r2, [r6, #0]
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e09c      	b.n	8006482 <_printf_i+0x1e6>
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	6031      	str	r1, [r6, #0]
 8006350:	0606      	lsls	r6, r0, #24
 8006352:	d501      	bpl.n	8006358 <_printf_i+0xbc>
 8006354:	681d      	ldr	r5, [r3, #0]
 8006356:	e003      	b.n	8006360 <_printf_i+0xc4>
 8006358:	0645      	lsls	r5, r0, #25
 800635a:	d5fb      	bpl.n	8006354 <_printf_i+0xb8>
 800635c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006360:	2d00      	cmp	r5, #0
 8006362:	da03      	bge.n	800636c <_printf_i+0xd0>
 8006364:	232d      	movs	r3, #45	@ 0x2d
 8006366:	426d      	negs	r5, r5
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636c:	4858      	ldr	r0, [pc, #352]	@ (80064d0 <_printf_i+0x234>)
 800636e:	230a      	movs	r3, #10
 8006370:	e011      	b.n	8006396 <_printf_i+0xfa>
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	0608      	lsls	r0, r1, #24
 8006378:	f853 5b04 	ldr.w	r5, [r3], #4
 800637c:	d402      	bmi.n	8006384 <_printf_i+0xe8>
 800637e:	0649      	lsls	r1, r1, #25
 8006380:	bf48      	it	mi
 8006382:	b2ad      	uxthmi	r5, r5
 8006384:	2f6f      	cmp	r7, #111	@ 0x6f
 8006386:	4852      	ldr	r0, [pc, #328]	@ (80064d0 <_printf_i+0x234>)
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	bf14      	ite	ne
 800638c:	230a      	movne	r3, #10
 800638e:	2308      	moveq	r3, #8
 8006390:	2100      	movs	r1, #0
 8006392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006396:	6866      	ldr	r6, [r4, #4]
 8006398:	60a6      	str	r6, [r4, #8]
 800639a:	2e00      	cmp	r6, #0
 800639c:	db05      	blt.n	80063aa <_printf_i+0x10e>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	432e      	orrs	r6, r5
 80063a2:	f021 0104 	bic.w	r1, r1, #4
 80063a6:	6021      	str	r1, [r4, #0]
 80063a8:	d04b      	beq.n	8006442 <_printf_i+0x1a6>
 80063aa:	4616      	mov	r6, r2
 80063ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b0:	fb03 5711 	mls	r7, r3, r1, r5
 80063b4:	5dc7      	ldrb	r7, [r0, r7]
 80063b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ba:	462f      	mov	r7, r5
 80063bc:	42bb      	cmp	r3, r7
 80063be:	460d      	mov	r5, r1
 80063c0:	d9f4      	bls.n	80063ac <_printf_i+0x110>
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d10b      	bne.n	80063de <_printf_i+0x142>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	07df      	lsls	r7, r3, #31
 80063ca:	d508      	bpl.n	80063de <_printf_i+0x142>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	4299      	cmp	r1, r3
 80063d2:	bfde      	ittt	le
 80063d4:	2330      	movle	r3, #48	@ 0x30
 80063d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063de:	1b92      	subs	r2, r2, r6
 80063e0:	6122      	str	r2, [r4, #16]
 80063e2:	f8cd a000 	str.w	sl, [sp]
 80063e6:	464b      	mov	r3, r9
 80063e8:	aa03      	add	r2, sp, #12
 80063ea:	4621      	mov	r1, r4
 80063ec:	4640      	mov	r0, r8
 80063ee:	f7ff fee7 	bl	80061c0 <_printf_common>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d14a      	bne.n	800648c <_printf_i+0x1f0>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	b004      	add	sp, #16
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	f043 0320 	orr.w	r3, r3, #32
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	4832      	ldr	r0, [pc, #200]	@ (80064d4 <_printf_i+0x238>)
 800640a:	2778      	movs	r7, #120	@ 0x78
 800640c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	061f      	lsls	r7, r3, #24
 8006416:	f851 5b04 	ldr.w	r5, [r1], #4
 800641a:	d402      	bmi.n	8006422 <_printf_i+0x186>
 800641c:	065f      	lsls	r7, r3, #25
 800641e:	bf48      	it	mi
 8006420:	b2ad      	uxthmi	r5, r5
 8006422:	6031      	str	r1, [r6, #0]
 8006424:	07d9      	lsls	r1, r3, #31
 8006426:	bf44      	itt	mi
 8006428:	f043 0320 	orrmi.w	r3, r3, #32
 800642c:	6023      	strmi	r3, [r4, #0]
 800642e:	b11d      	cbz	r5, 8006438 <_printf_i+0x19c>
 8006430:	2310      	movs	r3, #16
 8006432:	e7ad      	b.n	8006390 <_printf_i+0xf4>
 8006434:	4826      	ldr	r0, [pc, #152]	@ (80064d0 <_printf_i+0x234>)
 8006436:	e7e9      	b.n	800640c <_printf_i+0x170>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f023 0320 	bic.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	e7f6      	b.n	8006430 <_printf_i+0x194>
 8006442:	4616      	mov	r6, r2
 8006444:	e7bd      	b.n	80063c2 <_printf_i+0x126>
 8006446:	6833      	ldr	r3, [r6, #0]
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	6961      	ldr	r1, [r4, #20]
 800644c:	1d18      	adds	r0, r3, #4
 800644e:	6030      	str	r0, [r6, #0]
 8006450:	062e      	lsls	r6, r5, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	d501      	bpl.n	800645a <_printf_i+0x1be>
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x1c4>
 800645a:	0668      	lsls	r0, r5, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x1ba>
 800645e:	8019      	strh	r1, [r3, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	4616      	mov	r6, r2
 8006466:	e7bc      	b.n	80063e2 <_printf_i+0x146>
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	6032      	str	r2, [r6, #0]
 800646e:	681e      	ldr	r6, [r3, #0]
 8006470:	6862      	ldr	r2, [r4, #4]
 8006472:	2100      	movs	r1, #0
 8006474:	4630      	mov	r0, r6
 8006476:	f7f9 feb3 	bl	80001e0 <memchr>
 800647a:	b108      	cbz	r0, 8006480 <_printf_i+0x1e4>
 800647c:	1b80      	subs	r0, r0, r6
 800647e:	6060      	str	r0, [r4, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648a:	e7aa      	b.n	80063e2 <_printf_i+0x146>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	4632      	mov	r2, r6
 8006490:	4649      	mov	r1, r9
 8006492:	4640      	mov	r0, r8
 8006494:	47d0      	blx	sl
 8006496:	3001      	adds	r0, #1
 8006498:	d0ad      	beq.n	80063f6 <_printf_i+0x15a>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	d413      	bmi.n	80064c8 <_printf_i+0x22c>
 80064a0:	68e0      	ldr	r0, [r4, #12]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	4298      	cmp	r0, r3
 80064a6:	bfb8      	it	lt
 80064a8:	4618      	movlt	r0, r3
 80064aa:	e7a6      	b.n	80063fa <_printf_i+0x15e>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4632      	mov	r2, r6
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	47d0      	blx	sl
 80064b6:	3001      	adds	r0, #1
 80064b8:	d09d      	beq.n	80063f6 <_printf_i+0x15a>
 80064ba:	3501      	adds	r5, #1
 80064bc:	68e3      	ldr	r3, [r4, #12]
 80064be:	9903      	ldr	r1, [sp, #12]
 80064c0:	1a5b      	subs	r3, r3, r1
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dcf2      	bgt.n	80064ac <_printf_i+0x210>
 80064c6:	e7eb      	b.n	80064a0 <_printf_i+0x204>
 80064c8:	2500      	movs	r5, #0
 80064ca:	f104 0619 	add.w	r6, r4, #25
 80064ce:	e7f5      	b.n	80064bc <_printf_i+0x220>
 80064d0:	08006b25 	.word	0x08006b25
 80064d4:	08006b36 	.word	0x08006b36

080064d8 <memmove>:
 80064d8:	4288      	cmp	r0, r1
 80064da:	b510      	push	{r4, lr}
 80064dc:	eb01 0402 	add.w	r4, r1, r2
 80064e0:	d902      	bls.n	80064e8 <memmove+0x10>
 80064e2:	4284      	cmp	r4, r0
 80064e4:	4623      	mov	r3, r4
 80064e6:	d807      	bhi.n	80064f8 <memmove+0x20>
 80064e8:	1e43      	subs	r3, r0, #1
 80064ea:	42a1      	cmp	r1, r4
 80064ec:	d008      	beq.n	8006500 <memmove+0x28>
 80064ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064f6:	e7f8      	b.n	80064ea <memmove+0x12>
 80064f8:	4402      	add	r2, r0
 80064fa:	4601      	mov	r1, r0
 80064fc:	428a      	cmp	r2, r1
 80064fe:	d100      	bne.n	8006502 <memmove+0x2a>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800650a:	e7f7      	b.n	80064fc <memmove+0x24>

0800650c <_sbrk_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d06      	ldr	r5, [pc, #24]	@ (8006528 <_sbrk_r+0x1c>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	f7ff fa9a 	bl	8005a50 <_sbrk>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_sbrk_r+0x1a>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_sbrk_r+0x1a>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	20000b34 	.word	0x20000b34

0800652c <_realloc_r>:
 800652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4607      	mov	r7, r0
 8006532:	4614      	mov	r4, r2
 8006534:	460d      	mov	r5, r1
 8006536:	b921      	cbnz	r1, 8006542 <_realloc_r+0x16>
 8006538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4611      	mov	r1, r2
 800653e:	f7ff bc5b 	b.w	8005df8 <_malloc_r>
 8006542:	b92a      	cbnz	r2, 8006550 <_realloc_r+0x24>
 8006544:	f7ff fbec 	bl	8005d20 <_free_r>
 8006548:	4625      	mov	r5, r4
 800654a:	4628      	mov	r0, r5
 800654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006550:	f000 f81a 	bl	8006588 <_malloc_usable_size_r>
 8006554:	4284      	cmp	r4, r0
 8006556:	4606      	mov	r6, r0
 8006558:	d802      	bhi.n	8006560 <_realloc_r+0x34>
 800655a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800655e:	d8f4      	bhi.n	800654a <_realloc_r+0x1e>
 8006560:	4621      	mov	r1, r4
 8006562:	4638      	mov	r0, r7
 8006564:	f7ff fc48 	bl	8005df8 <_malloc_r>
 8006568:	4680      	mov	r8, r0
 800656a:	b908      	cbnz	r0, 8006570 <_realloc_r+0x44>
 800656c:	4645      	mov	r5, r8
 800656e:	e7ec      	b.n	800654a <_realloc_r+0x1e>
 8006570:	42b4      	cmp	r4, r6
 8006572:	4622      	mov	r2, r4
 8006574:	4629      	mov	r1, r5
 8006576:	bf28      	it	cs
 8006578:	4632      	movcs	r2, r6
 800657a:	f7ff fbc3 	bl	8005d04 <memcpy>
 800657e:	4629      	mov	r1, r5
 8006580:	4638      	mov	r0, r7
 8006582:	f7ff fbcd 	bl	8005d20 <_free_r>
 8006586:	e7f1      	b.n	800656c <_realloc_r+0x40>

08006588 <_malloc_usable_size_r>:
 8006588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658c:	1f18      	subs	r0, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	bfbc      	itt	lt
 8006592:	580b      	ldrlt	r3, [r1, r0]
 8006594:	18c0      	addlt	r0, r0, r3
 8006596:	4770      	bx	lr

08006598 <ceil>:
 8006598:	ec51 0b10 	vmov	r0, r1, d0
 800659c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80065a8:	2e13      	cmp	r6, #19
 80065aa:	460c      	mov	r4, r1
 80065ac:	4605      	mov	r5, r0
 80065ae:	4680      	mov	r8, r0
 80065b0:	dc2e      	bgt.n	8006610 <ceil+0x78>
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	da11      	bge.n	80065da <ceil+0x42>
 80065b6:	a332      	add	r3, pc, #200	@ (adr r3, 8006680 <ceil+0xe8>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7f9 fe66 	bl	800028c <__adddf3>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f7fa faa8 	bl	8000b18 <__aeabi_dcmpgt>
 80065c8:	b120      	cbz	r0, 80065d4 <ceil+0x3c>
 80065ca:	2c00      	cmp	r4, #0
 80065cc:	db4f      	blt.n	800666e <ceil+0xd6>
 80065ce:	4325      	orrs	r5, r4
 80065d0:	d151      	bne.n	8006676 <ceil+0xde>
 80065d2:	462c      	mov	r4, r5
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	e023      	b.n	8006622 <ceil+0x8a>
 80065da:	4f2b      	ldr	r7, [pc, #172]	@ (8006688 <ceil+0xf0>)
 80065dc:	4137      	asrs	r7, r6
 80065de:	ea01 0307 	and.w	r3, r1, r7
 80065e2:	4303      	orrs	r3, r0
 80065e4:	d01d      	beq.n	8006622 <ceil+0x8a>
 80065e6:	a326      	add	r3, pc, #152	@ (adr r3, 8006680 <ceil+0xe8>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fe4e 	bl	800028c <__adddf3>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	f7fa fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0eb      	beq.n	80065d4 <ceil+0x3c>
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	bfc2      	ittt	gt
 8006600:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8006604:	4133      	asrgt	r3, r6
 8006606:	18e4      	addgt	r4, r4, r3
 8006608:	ea24 0407 	bic.w	r4, r4, r7
 800660c:	2500      	movs	r5, #0
 800660e:	e7e1      	b.n	80065d4 <ceil+0x3c>
 8006610:	2e33      	cmp	r6, #51	@ 0x33
 8006612:	dd0a      	ble.n	800662a <ceil+0x92>
 8006614:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006618:	d103      	bne.n	8006622 <ceil+0x8a>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	f7f9 fe35 	bl	800028c <__adddf3>
 8006622:	ec41 0b10 	vmov	d0, r0, r1
 8006626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800662a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800662e:	f04f 37ff 	mov.w	r7, #4294967295
 8006632:	40df      	lsrs	r7, r3
 8006634:	4238      	tst	r0, r7
 8006636:	d0f4      	beq.n	8006622 <ceil+0x8a>
 8006638:	a311      	add	r3, pc, #68	@ (adr r3, 8006680 <ceil+0xe8>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 fe25 	bl	800028c <__adddf3>
 8006642:	2200      	movs	r2, #0
 8006644:	2300      	movs	r3, #0
 8006646:	f7fa fa67 	bl	8000b18 <__aeabi_dcmpgt>
 800664a:	2800      	cmp	r0, #0
 800664c:	d0c2      	beq.n	80065d4 <ceil+0x3c>
 800664e:	2c00      	cmp	r4, #0
 8006650:	dd0a      	ble.n	8006668 <ceil+0xd0>
 8006652:	2e14      	cmp	r6, #20
 8006654:	d101      	bne.n	800665a <ceil+0xc2>
 8006656:	3401      	adds	r4, #1
 8006658:	e006      	b.n	8006668 <ceil+0xd0>
 800665a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800665e:	2301      	movs	r3, #1
 8006660:	40b3      	lsls	r3, r6
 8006662:	441d      	add	r5, r3
 8006664:	45a8      	cmp	r8, r5
 8006666:	d8f6      	bhi.n	8006656 <ceil+0xbe>
 8006668:	ea25 0507 	bic.w	r5, r5, r7
 800666c:	e7b2      	b.n	80065d4 <ceil+0x3c>
 800666e:	2500      	movs	r5, #0
 8006670:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8006674:	e7ae      	b.n	80065d4 <ceil+0x3c>
 8006676:	4c05      	ldr	r4, [pc, #20]	@ (800668c <ceil+0xf4>)
 8006678:	2500      	movs	r5, #0
 800667a:	e7ab      	b.n	80065d4 <ceil+0x3c>
 800667c:	f3af 8000 	nop.w
 8006680:	8800759c 	.word	0x8800759c
 8006684:	7e37e43c 	.word	0x7e37e43c
 8006688:	000fffff 	.word	0x000fffff
 800668c:	3ff00000 	.word	0x3ff00000

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
