
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08009a40  08009a40  0000aa40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a0  0800a2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a8  0800a2a8  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2ac  0800a2ac  0000b2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a2b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          000007f4  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c0  200009c0  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009064  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000114f  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f8  00000000  00000000  000163b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002f2  00000000  00000000  000167a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f46  00000000  00000000  00016a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071da  00000000  00000000  000189e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000918bb  00000000  00000000  0001fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b1475  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023e8  00000000  00000000  000b14b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000b38a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a28 	.word	0x08009a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08009a28 	.word	0x08009a28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <Console_IRQ>:
//        rx_flag = 1; // Set the flag indicating data reception is complete
//    }
//}

void Console_IRQ(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
    if (rx_get_flag == 1) { // Check if reception is active
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <Console_IRQ+0x74>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d12d      	bne.n	8000d5c <Console_IRQ+0x68>
        (void)UART4->SR; // Read the status register to clear flags
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <Console_IRQ+0x78>)
 8000d02:	681b      	ldr	r3, [r3, #0]
        (void)UART4->DR; // Read the data register to clear flags
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <Console_IRQ+0x78>)
 8000d06:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop

        __disable_irq(); // Disable interrupts to safely update DMA configurations

        // Disable DMA stream
        serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

        // Calculate the length of received data
        RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <Console_IRQ+0x80>)
 8000d2a:	601a      	str	r2, [r3, #0]

        // Prevent buffer overflow
        if (RX_Length > RX_Buffer_Length) {
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <Console_IRQ+0x80>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d32:	dd02      	ble.n	8000d3a <Console_IRQ+0x46>
            RX_Length = RX_Buffer_Length;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Console_IRQ+0x80>)
 8000d36:	22c8      	movs	r2, #200	@ 0xc8
 8000d38:	601a      	str	r2, [r3, #0]
        }

        // Reset DMA stream for the next reception
        serial.USART_DMA_Instance_RX.Request.Stream->NDTR = RX_Buffer_Length;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d3e:	22c8      	movs	r2, #200	@ 0xc8
 8000d40:	605a      	str	r2, [r3, #4]
        serial.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <Console_IRQ+0x7c>)
 8000d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d4c:	f042 0201 	orr.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d52:	b662      	cpsie	i
}
 8000d54:	bf00      	nop

        __enable_irq(); // Re-enable interrupts

        rx_flag = 1; // Set the flag indicating data reception is complete
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <Console_IRQ+0x84>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001e8 	.word	0x200001e8
 8000d6c:	40004c00 	.word	0x40004c00
 8000d70:	200002bc 	.word	0x200002bc
 8000d74:	200001f0 	.word	0x200001f0
 8000d78:	200001ec 	.word	0x200001ec

08000d7c <Console_Init>:
 * This function configures UART4 for communication, sets up DMA for
 * data handling, and prepares the GPIO pins for UART communication.
 *
 * @param baudrate Desired baud rate for UART communication.
 */
void Console_Init(int32_t baudrate) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    // Reset USART configuration to default values
    USART_Config_Reset(&serial);
 8000d84:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <Console_Init+0x60>)
 8000d86:	f002 fba1 	bl	80034cc <USART_Config_Reset>

    // Configure USART parameters
    serial.Port = UART4; // Use UART4 for console communication
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <Console_Init+0x60>)
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <Console_Init+0x64>)
 8000d8e:	601a      	str	r2, [r3, #0]
    serial.baudrate = baudrate; // Set the baud rate
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <Console_Init+0x60>)
 8000d94:	6053      	str	r3, [r2, #4]
    serial.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000d96:	2201      	movs	r2, #1
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <Console_Init+0x60>)
 8000d9a:	721a      	strb	r2, [r3, #8]
    serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <Console_Init+0x60>)
 8000da2:	741a      	strb	r2, [r3, #16]
    serial.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000da4:	220a      	movs	r2, #10
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <Console_Init+0x60>)
 8000da8:	725a      	strb	r2, [r3, #9]
    serial.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000daa:	220b      	movs	r2, #11
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <Console_Init+0x60>)
 8000dae:	729a      	strb	r2, [r3, #10]
    serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000db0:	2310      	movs	r3, #16
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <Console_Init+0x60>)
 8000db6:	739a      	strb	r2, [r3, #14]
    serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000db8:	2201      	movs	r2, #1
 8000dba:	2302      	movs	r3, #2
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <Console_Init+0x60>)
 8000dc2:	745a      	strb	r2, [r3, #17]
    serial.ISR_Routines.Idle_Line_ISR = Console_IRQ;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <Console_Init+0x60>)
 8000dc6:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <Console_Init+0x68>)
 8000dc8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    // Initialize USART
    if (USART_Init(&serial) != true) {
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <Console_Init+0x60>)
 8000dce:	f003 f9bb 	bl	8004148 <USART_Init>
        // Handle USART initialization failure (e.g., log error or halt execution)
    }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200002bc 	.word	0x200002bc
 8000de0:	40004c00 	.word	0x40004c00
 8000de4:	08000cf5 	.word	0x08000cf5

08000de8 <printConsole>:
  * using DMA. It supports formatted strings with variable arguments.
  *
  * @param msg Format string for the message to send.
  * @param ... Variable arguments for the format string.
  */
 void printConsole(char *msg, ...) {
 8000de8:	b40f      	push	{r0, r1, r2, r3}
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
     va_list args;
     va_start(args, msg);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	603b      	str	r3, [r7, #0]

     // Format the message and store it in the transmission buffer
//     vsprintf((char *)TRX_Buffer, msg, args);

     vsnprintf((char *)TRX_Buffer, RX_Buffer_Length, msg, args);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	21c8      	movs	r1, #200	@ 0xc8
 8000dfc:	480a      	ldr	r0, [pc, #40]	@ (8000e28 <printConsole+0x40>)
 8000dfe:	f005 f9af 	bl	8006160 <vsniprintf>

     // Get the length of the formatted string
     uint16_t len = strlen((char *)TRX_Buffer);
 8000e02:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <printConsole+0x40>)
 8000e04:	f7ff fa34 	bl	8000270 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	80fb      	strh	r3, [r7, #6]

     // Transmit the buffer using DMA
     USART_TX_Buffer(&serial, (uint8_t *)&TRX_Buffer[0], len);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4905      	ldr	r1, [pc, #20]	@ (8000e28 <printConsole+0x40>)
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <printConsole+0x44>)
 8000e14:	f003 fe0e 	bl	8004a34 <USART_TX_Buffer>

     va_end(args);
 }
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200001f4 	.word	0x200001f4
 8000e2c:	200002bc 	.word	0x200002bc

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000e70:	4b60      	ldr	r3, [pc, #384]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a60      	ldr	r2, [pc, #384]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000e76:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000e78:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d015      	beq.n	8000eb0 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e84:	4b5d      	ldr	r3, [pc, #372]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00e      	beq.n	8000eb0 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e92:	4b5a      	ldr	r3, [pc, #360]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e9c:	4b57      	ldr	r3, [pc, #348]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000ea4:	4b53      	ldr	r3, [pc, #332]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a52      	ldr	r2, [pc, #328]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000eb0:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d015      	beq.n	8000ee8 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00e      	beq.n	8000ee8 <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000eca:	4b4c      	ldr	r3, [pc, #304]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d009      	beq.n	8000ee8 <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ed4:	4b49      	ldr	r3, [pc, #292]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000edc:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4a44      	ldr	r2, [pc, #272]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d015      	beq.n	8000f20 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000ef4:	4b41      	ldr	r3, [pc, #260]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2204      	movs	r2, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00e      	beq.n	8000f20 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000f02:	4b3e      	ldr	r3, [pc, #248]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d009      	beq.n	8000f20 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000f14:	4b37      	ldr	r3, [pc, #220]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a36      	ldr	r2, [pc, #216]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000f20:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02d      	beq.n	8000f88 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000f2c:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	2208      	movs	r2, #8
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d026      	beq.n	8000f88 <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000f3a:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d021      	beq.n	8000f88 <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f44:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a28      	ldr	r2, [pc, #160]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d110      	bne.n	8000f88 <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f7c:	4798      	blx	r3
 8000f7e:	e003      	b.n	8000f88 <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f86:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d02d      	beq.n	8000ff0 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d026      	beq.n	8000ff0 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d021      	beq.n	8000ff0 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <DMA1_Stream0_IRQHandler+0x188>)
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d110      	bne.n	8000ff0 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fe4:	4798      	blx	r3
				}
			}
		}

	}
}
 8000fe6:	e003      	b.n	8000ff0 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <DMA1_Stream0_IRQHandler+0x190>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fee:	4798      	blx	r3
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40026000 	.word	0x40026000
 8000ff8:	200003e0 	.word	0x200003e0
 8000ffc:	200003a0 	.word	0x200003a0

08001000 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001004:	4b60      	ldr	r3, [pc, #384]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a60      	ldr	r2, [pc, #384]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 800100a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 800100c:	4b5f      	ldr	r3, [pc, #380]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d015      	beq.n	8001044 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001018:	4b5d      	ldr	r3, [pc, #372]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2280      	movs	r2, #128	@ 0x80
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00e      	beq.n	8001044 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001026:	4b5a      	ldr	r3, [pc, #360]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001030:	4b57      	ldr	r3, [pc, #348]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001036:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4a52      	ldr	r2, [pc, #328]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001042:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001044:	4b51      	ldr	r3, [pc, #324]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d015      	beq.n	800107c <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001050:	4b4f      	ldr	r3, [pc, #316]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00e      	beq.n	800107c <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800105e:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001068:	4b49      	ldr	r3, [pc, #292]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001070:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a44      	ldr	r2, [pc, #272]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 800107c:	4b43      	ldr	r3, [pc, #268]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001084:	2b00      	cmp	r3, #0
 8001086:	d015      	beq.n	80010b4 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001088:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001096:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a36      	ldr	r2, [pc, #216]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80010b4:	4b35      	ldr	r3, [pc, #212]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d02d      	beq.n	800111c <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	2208      	movs	r2, #8
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d026      	beq.n	800111c <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d021      	beq.n	800111c <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010de:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ea:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d110      	bne.n	800111c <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001110:	4798      	blx	r3
 8001112:	e003      	b.n	800111c <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <DMA1_Stream1_IRQHandler+0x18c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02d      	beq.n	8001184 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2210      	movs	r2, #16
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d026      	beq.n	8001184 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	2b00      	cmp	r3, #0
 800113e:	d021      	beq.n	8001184 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001146:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <DMA1_Stream1_IRQHandler+0x188>)
 800114e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001152:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800115e:	4293      	cmp	r3, r2
 8001160:	d110      	bne.n	8001184 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001178:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800117a:	e003      	b.n	8001184 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <DMA1_Stream1_IRQHandler+0x190>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001182:	4798      	blx	r3
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40026000 	.word	0x40026000
 800118c:	200003e0 	.word	0x200003e0
 8001190:	200003a4 	.word	0x200003a4

08001194 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001198:	4b64      	ldr	r3, [pc, #400]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a64      	ldr	r2, [pc, #400]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 800119e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80011a0:	4b63      	ldr	r3, [pc, #396]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d015      	beq.n	80011d8 <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80011ac:	4b61      	ldr	r3, [pc, #388]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00e      	beq.n	80011d8 <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80011ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80011c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ca:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80011cc:	4b57      	ldr	r3, [pc, #348]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a56      	ldr	r2, [pc, #344]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80011d8:	4b55      	ldr	r3, [pc, #340]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00e      	beq.n	8001210 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80011f2:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d009      	beq.n	8001210 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001204:	4b49      	ldr	r3, [pc, #292]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a48      	ldr	r2, [pc, #288]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 800120a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800120e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001210:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01c      	beq.n	8001256 <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800121c:	4b45      	ldr	r3, [pc, #276]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2204      	movs	r2, #4
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d015      	beq.n	8001256 <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001238:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001248:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4a37      	ldr	r2, [pc, #220]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 8001250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001254:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d02d      	beq.n	80012be <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d026      	beq.n	80012be <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001276:	2b00      	cmp	r3, #0
 8001278:	d021      	beq.n	80012be <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001280:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4a29      	ldr	r2, [pc, #164]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 8001288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800128c:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001294:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001298:	4293      	cmp	r3, r2
 800129a:	d110      	bne.n	80012be <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800129c:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012b2:	4798      	blx	r3
 80012b4:	e003      	b.n	80012be <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012bc:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <DMA1_Stream2_IRQHandler+0x19c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d02d      	beq.n	8001326 <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2208      	movs	r2, #8
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d026      	beq.n	8001326 <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d021      	beq.n	8001326 <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e8:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <DMA1_Stream2_IRQHandler+0x198>)
 80012f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f4:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001300:	4293      	cmp	r3, r2
 8001302:	d110      	bne.n	8001326 <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800131a:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800131c:	e003      	b.n	8001326 <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001324:	4798      	blx	r3
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40026000 	.word	0x40026000
 8001330:	200003e0 	.word	0x200003e0
 8001334:	200003a8 	.word	0x200003a8

08001338 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800133c:	4b60      	ldr	r3, [pc, #384]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a60      	ldr	r2, [pc, #384]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 8001342:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001344:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d015      	beq.n	800137c <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001350:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00e      	beq.n	800137c <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800135e:	4b5a      	ldr	r3, [pc, #360]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001368:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001370:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 8001376:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800137a:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 800137c:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001388:	4b4f      	ldr	r3, [pc, #316]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00e      	beq.n	80013b4 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001396:	4b4c      	ldr	r3, [pc, #304]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80013a0:	4b49      	ldr	r3, [pc, #292]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80013a8:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a44      	ldr	r2, [pc, #272]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 80013ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b2:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80013b4:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d015      	beq.n	80013ec <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80013c0:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00e      	beq.n	80013ec <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013ce:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013d8:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80013e0:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a36      	ldr	r2, [pc, #216]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 80013e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02d      	beq.n	8001454 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80013f8:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2208      	movs	r2, #8
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d026      	beq.n	8001454 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d021      	beq.n	8001454 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001418:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 800141e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001422:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800142e:	4293      	cmp	r3, r2
 8001430:	d110      	bne.n	8001454 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001432:	4b25      	ldr	r3, [pc, #148]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001442:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001448:	4798      	blx	r3
 800144a:	e003      	b.n	8001454 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001452:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <DMA1_Stream3_IRQHandler+0x18c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d02d      	beq.n	80014bc <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2210      	movs	r2, #16
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d026      	beq.n	80014bc <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a0e      	ldr	r2, [pc, #56]	@ (80014c0 <DMA1_Stream3_IRQHandler+0x188>)
 8001486:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800148a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001492:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001496:	4293      	cmp	r3, r2
 8001498:	d110      	bne.n	80014bc <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b0:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80014b2:	e003      	b.n	80014bc <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x190>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	4798      	blx	r3
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40026000 	.word	0x40026000
 80014c4:	200003e0 	.word	0x200003e0
 80014c8:	200003ac 	.word	0x200003ac

080014cc <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80014d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 80014d6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80014d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f4:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80014f6:	4b46      	ldr	r3, [pc, #280]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4a45      	ldr	r2, [pc, #276]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 80014fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001500:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001502:	4b44      	ldr	r3, [pc, #272]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00e      	beq.n	800152c <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800150e:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001520:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a3a      	ldr	r2, [pc, #232]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001538:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a30      	ldr	r2, [pc, #192]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001556:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d026      	beq.n	80015b0 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001562:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	2b00      	cmp	r3, #0
 800156a:	d021      	beq.n	80015b0 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001572:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001586:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800158a:	4293      	cmp	r3, r2
 800158c:	d110      	bne.n	80015b0 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800158e:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a4:	4798      	blx	r3
 80015a6:	e003      	b.n	80015b0 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <DMA1_Stream4_IRQHandler+0x148>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d026      	beq.n	800160a <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015bc:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d021      	beq.n	800160a <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015cc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <DMA1_Stream4_IRQHandler+0x144>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d110      	bne.n	800160a <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015fe:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001600:	e003      	b.n	800160a <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <DMA1_Stream4_IRQHandler+0x14c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	4798      	blx	r3
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40026000 	.word	0x40026000
 8001614:	200003e4 	.word	0x200003e4
 8001618:	200003b0 	.word	0x200003b0

0800161c <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001620:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a4f      	ldr	r2, [pc, #316]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 8001626:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001628:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001634:	4b4c      	ldr	r3, [pc, #304]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800163e:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001644:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001646:	4b46      	ldr	r3, [pc, #280]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	4a45      	ldr	r2, [pc, #276]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 800164c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001650:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001668:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001670:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a3a      	ldr	r2, [pc, #232]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00e      	beq.n	80016a6 <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001688:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001692:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a30      	ldr	r2, [pc, #192]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 80016a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d026      	beq.n	8001700 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80016c4:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a25      	ldr	r2, [pc, #148]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ce:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016da:	4293      	cmp	r3, r2
 80016dc:	d110      	bne.n	8001700 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016f4:	4798      	blx	r3
 80016f6:	e003      	b.n	8001700 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <DMA1_Stream5_IRQHandler+0x148>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001708:	2b00      	cmp	r3, #0
 800170a:	d026      	beq.n	800175a <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d021      	beq.n	800175a <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4a0f      	ldr	r2, [pc, #60]	@ (8001760 <DMA1_Stream5_IRQHandler+0x144>)
 8001724:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001728:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001730:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001734:	4293      	cmp	r3, r2
 8001736:	d110      	bne.n	800175a <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174e:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001750:	e003      	b.n	800175a <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <DMA1_Stream5_IRQHandler+0x14c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	4798      	blx	r3
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40026000 	.word	0x40026000
 8001764:	200003e4 	.word	0x200003e4
 8001768:	200003b4 	.word	0x200003b4

0800176c <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001770:	4b4f      	ldr	r3, [pc, #316]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a4f      	ldr	r2, [pc, #316]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 8001776:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001778:	4b4e      	ldr	r3, [pc, #312]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00e      	beq.n	80017a2 <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001784:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800178e:	4b4a      	ldr	r3, [pc, #296]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80017a2:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00e      	beq.n	80017cc <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017ae:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017b8:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80017c0:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4a3a      	ldr	r2, [pc, #232]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 80017c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ca:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80017d8:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80017e2:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a30      	ldr	r2, [pc, #192]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 80017f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80017f6:	4b2f      	ldr	r3, [pc, #188]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001814:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a25      	ldr	r2, [pc, #148]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 800181a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800181e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001820:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800182a:	4293      	cmp	r3, r2
 800182c:	d110      	bne.n	8001850 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800182e:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001844:	4798      	blx	r3
 8001846:	e003      	b.n	8001850 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <DMA1_Stream6_IRQHandler+0x148>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d026      	beq.n	80018aa <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d021      	beq.n	80018aa <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001866:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <DMA1_Stream6_IRQHandler+0x144>)
 8001874:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001878:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001880:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001884:	4293      	cmp	r3, r2
 8001886:	d110      	bne.n	80018aa <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001898:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189e:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018a0:	e003      	b.n	80018aa <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	4798      	blx	r3
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40026000 	.word	0x40026000
 80018b4:	200003e4 	.word	0x200003e4
 80018b8:	200003b8 	.word	0x200003b8

080018bc <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 80018c6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80018c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80018d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80018e6:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 80018ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00e      	beq.n	800191c <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80018fe:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001908:	4b3f      	ldr	r3, [pc, #252]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001910:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00e      	beq.n	8001946 <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001932:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001944:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001946:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d026      	beq.n	80019a0 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001962:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001964:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 800196a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800196e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001976:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800197a:	4293      	cmp	r3, r2
 800197c:	d110      	bne.n	80019a0 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001994:	4798      	blx	r3
 8001996:	e003      	b.n	80019a0 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <DMA1_Stream7_IRQHandler+0x148>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d021      	beq.n	80019fa <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019bc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <DMA1_Stream7_IRQHandler+0x144>)
 80019c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019c8:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d110      	bne.n	80019fa <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ee:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80019f0:	e003      	b.n	80019fa <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <DMA1_Stream7_IRQHandler+0x14c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	4798      	blx	r3
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40026000 	.word	0x40026000
 8001a04:	200003e4 	.word	0x200003e4
 8001a08:	200003bc 	.word	0x200003bc

08001a0c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001a10:	4b60      	ldr	r3, [pc, #384]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a60      	ldr	r2, [pc, #384]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a16:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001a18:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001a24:	4b5d      	ldr	r3, [pc, #372]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001a32:	4b5a      	ldr	r3, [pc, #360]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a3c:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a42:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001a50:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d015      	beq.n	8001a88 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a74:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001a7c:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a44      	ldr	r2, [pc, #272]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001a88:	4b43      	ldr	r3, [pc, #268]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001a94:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00e      	beq.n	8001ac0 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001aac:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001ab4:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001ac0:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d02d      	beq.n	8001b28 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001acc:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d026      	beq.n	8001b28 <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001ada:	4b30      	ldr	r3, [pc, #192]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aea:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d110      	bne.n	8001b28 <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1c:	4798      	blx	r3
 8001b1e:	e003      	b.n	8001b28 <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02d      	beq.n	8001b90 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d026      	beq.n	8001b90 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x188>)
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b66:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d110      	bne.n	8001b90 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b84:	4798      	blx	r3
				}
			}
		}

	}
}
 8001b86:	e003      	b.n	8001b90 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <DMA2_Stream0_IRQHandler+0x190>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8e:	4798      	blx	r3
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40026400 	.word	0x40026400
 8001b98:	200003e0 	.word	0x200003e0
 8001b9c:	200003c0 	.word	0x200003c0

08001ba0 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001baa:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001bac:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00e      	beq.n	8001bd6 <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4a45      	ldr	r2, [pc, #276]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00e      	beq.n	8001c00 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001be2:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001bec:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfe:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001c00:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c0c:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c16:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001c1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4a30      	ldr	r2, [pc, #192]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001c24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c28:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d026      	beq.n	8001c84 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d021      	beq.n	8001c84 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c46:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001c48:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c52:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d110      	bne.n	8001c84 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c78:	4798      	blx	r3
 8001c7a:	e003      	b.n	8001c84 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c82:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <DMA2_Stream1_IRQHandler+0x148>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d026      	beq.n	8001cde <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d021      	beq.n	8001cde <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <DMA2_Stream1_IRQHandler+0x144>)
 8001ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cac:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d110      	bne.n	8001cde <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ccc:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd2:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001cd4:	e003      	b.n	8001cde <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <DMA2_Stream1_IRQHandler+0x14c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	4798      	blx	r3
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40026400 	.word	0x40026400
 8001ce8:	200003e0 	.word	0x200003e0
 8001cec:	200003c4 	.word	0x200003c4

08001cf0 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001cfa:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d08:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d12:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001d1a:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001d26:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001d44:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a3a      	ldr	r2, [pc, #232]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4e:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001d50:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4a30      	ldr	r2, [pc, #192]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d78:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d026      	beq.n	8001dd4 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001d98:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001da2:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001daa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d110      	bne.n	8001dd4 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc8:	4798      	blx	r3
 8001dca:	e003      	b.n	8001dd4 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <DMA2_Stream2_IRQHandler+0x148>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d021      	beq.n	8001e2e <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x144>)
 8001df8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d110      	bne.n	8001e2e <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e22:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001e24:	e003      	b.n	8001e2e <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	4798      	blx	r3
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40026400 	.word	0x40026400
 8001e38:	200003e0 	.word	0x200003e0
 8001e3c:	200003c8 	.word	0x200003c8

08001e40 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e44:	4b60      	ldr	r3, [pc, #384]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001e4a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001e58:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00e      	beq.n	8001e84 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001e66:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001e70:	4b57      	ldr	r3, [pc, #348]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e76:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001e7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e82:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001e84:	4b51      	ldr	r3, [pc, #324]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d015      	beq.n	8001ebc <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00e      	beq.n	8001ebc <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001ea8:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001eb0:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a44      	ldr	r2, [pc, #272]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001ec8:	4b41      	ldr	r3, [pc, #260]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00e      	beq.n	8001ef4 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a36      	ldr	r2, [pc, #216]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02d      	beq.n	8001f5c <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001f00:	4b33      	ldr	r3, [pc, #204]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2208      	movs	r2, #8
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d026      	beq.n	8001f5c <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f0e:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d021      	beq.n	8001f5c <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001f20:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a28      	ldr	r2, [pc, #160]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001f26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f2a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d110      	bne.n	8001f5c <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f3a:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f50:	4798      	blx	r3
 8001f52:	e003      	b.n	8001f5c <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <DMA2_Stream3_IRQHandler+0x18c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d02d      	beq.n	8001fc4 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d026      	beq.n	8001fc4 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x188>)
 8001f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f92:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d110      	bne.n	8001fc4 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001fba:	e003      	b.n	8001fc4 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x190>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	4798      	blx	r3
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40026400 	.word	0x40026400
 8001fcc:	200003e0 	.word	0x200003e0
 8001fd0:	200003cc 	.word	0x200003cc

08001fd4 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a4f      	ldr	r2, [pc, #316]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 8001fde:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001fec:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a45      	ldr	r2, [pc, #276]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8002004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002008:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800200a:	4b44      	ldr	r3, [pc, #272]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00e      	beq.n	8002034 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002016:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002020:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a3a      	ldr	r2, [pc, #232]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8002034:	4b39      	ldr	r3, [pc, #228]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002052:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a30      	ldr	r2, [pc, #192]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800205e:	4b2f      	ldr	r3, [pc, #188]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d026      	beq.n	80020b8 <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	2b00      	cmp	r3, #0
 8002072:	d021      	beq.n	80020b8 <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800207c:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a25      	ldr	r2, [pc, #148]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002092:	4293      	cmp	r3, r2
 8002094:	d110      	bne.n	80020b8 <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ac:	4798      	blx	r3
 80020ae:	e003      	b.n	80020b8 <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <DMA2_Stream4_IRQHandler+0x148>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d026      	beq.n	8002112 <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d021      	beq.n	8002112 <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a0f      	ldr	r2, [pc, #60]	@ (8002118 <DMA2_Stream4_IRQHandler+0x144>)
 80020dc:	f043 0320 	orr.w	r3, r3, #32
 80020e0:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d110      	bne.n	8002112 <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002106:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002108:	e003      	b.n	8002112 <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <DMA2_Stream4_IRQHandler+0x14c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002110:	4798      	blx	r3
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40026400 	.word	0x40026400
 800211c:	200003e4 	.word	0x200003e4
 8002120:	200003d0 	.word	0x200003d0

08002124 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002128:	4b4f      	ldr	r3, [pc, #316]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a4f      	ldr	r2, [pc, #316]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 800212e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8002130:	4b4e      	ldr	r3, [pc, #312]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00e      	beq.n	800215a <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800213c:	4b4c      	ldr	r3, [pc, #304]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002146:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800214e:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 8002154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002158:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800215a:	4b44      	ldr	r3, [pc, #272]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002166:	4b42      	ldr	r3, [pc, #264]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002178:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a3a      	ldr	r2, [pc, #232]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002190:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800219a:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a30      	ldr	r2, [pc, #192]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 80021a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ac:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80021ae:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d026      	beq.n	8002208 <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80021ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d021      	beq.n	8002208 <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80021c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80021cc:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a25      	ldr	r2, [pc, #148]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d6:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d110      	bne.n	8002208 <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fc:	4798      	blx	r3
 80021fe:	e003      	b.n	8002208 <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <DMA2_Stream5_IRQHandler+0x148>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002210:	2b00      	cmp	r3, #0
 8002212:	d026      	beq.n	8002262 <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002214:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d021      	beq.n	8002262 <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002224:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a0f      	ldr	r2, [pc, #60]	@ (8002268 <DMA2_Stream5_IRQHandler+0x144>)
 800222c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002230:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800223c:	4293      	cmp	r3, r2
 800223e:	d110      	bne.n	8002262 <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002256:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002258:	e003      	b.n	8002262 <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800225a:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <DMA2_Stream5_IRQHandler+0x14c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	4798      	blx	r3
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40026400 	.word	0x40026400
 800226c:	200003e4 	.word	0x200003e4
 8002270:	200003d4 	.word	0x200003d4

08002274 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002278:	4b4f      	ldr	r3, [pc, #316]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a4f      	ldr	r2, [pc, #316]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 800227e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8002280:	4b4e      	ldr	r3, [pc, #312]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00e      	beq.n	80022aa <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800228c:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002296:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800229e:	4b46      	ldr	r3, [pc, #280]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4a45      	ldr	r2, [pc, #276]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022b6:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80022c0:	4b3f      	ldr	r3, [pc, #252]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80022c8:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a3a      	ldr	r2, [pc, #232]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80022d4:	4b39      	ldr	r3, [pc, #228]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80022e0:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80022ea:	4b35      	ldr	r3, [pc, #212]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80022f2:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a30      	ldr	r2, [pc, #192]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 80022f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022fc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80022fe:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d026      	beq.n	8002358 <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800230a:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002310:	2b00      	cmp	r3, #0
 8002312:	d021      	beq.n	8002358 <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002326:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002328:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002332:	4293      	cmp	r3, r2
 8002334:	d110      	bne.n	8002358 <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234c:	4798      	blx	r3
 800234e:	e003      	b.n	8002358 <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002358:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <DMA2_Stream6_IRQHandler+0x148>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d026      	beq.n	80023b2 <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d021      	beq.n	80023b2 <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002374:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <DMA2_Stream6_IRQHandler+0x144>)
 800237c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002380:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800238c:	4293      	cmp	r3, r2
 800238e:	d110      	bne.n	80023b2 <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a6:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80023a8:	e003      	b.n	80023b2 <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <DMA2_Stream6_IRQHandler+0x14c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	4798      	blx	r3
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40026400 	.word	0x40026400
 80023bc:	200003e4 	.word	0x200003e4
 80023c0:	200003d8 	.word	0x200003d8

080023c4 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80023c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 80023ce:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80023d0:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80023dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80023ee:	4b46      	ldr	r3, [pc, #280]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 80023f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80023fa:	4b44      	ldr	r3, [pc, #272]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00e      	beq.n	8002424 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002406:	4b42      	ldr	r3, [pc, #264]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002410:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002418:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a3a      	ldr	r2, [pc, #232]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8002424:	4b39      	ldr	r3, [pc, #228]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002430:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800243a:	4b35      	ldr	r3, [pc, #212]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a30      	ldr	r2, [pc, #192]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800244c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d026      	beq.n	80024a8 <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d021      	beq.n	80024a8 <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002464:	4b2a      	ldr	r3, [pc, #168]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a25      	ldr	r2, [pc, #148]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 8002472:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002476:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002478:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002482:	4293      	cmp	r3, r2
 8002484:	d110      	bne.n	80024a8 <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249c:	4798      	blx	r3
 800249e:	e003      	b.n	80024a8 <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <DMA2_Stream7_IRQHandler+0x148>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d026      	beq.n	8002502 <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d021      	beq.n	8002502 <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <DMA2_Stream7_IRQHandler+0x144>)
 80024cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024d0:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024dc:	4293      	cmp	r3, r2
 80024de:	d110      	bne.n	8002502 <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f6:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80024f8:	e003      	b.n	8002502 <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <DMA2_Stream7_IRQHandler+0x14c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	4798      	blx	r3
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40026400 	.word	0x40026400
 800250c:	200003e4 	.word	0x200003e4
 8002510:	200003dc 	.word	0x200003dc

08002514 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <DMA_Clock_Enable+0x40>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d105      	bne.n	8002532 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <DMA_Clock_Enable+0x44>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <DMA_Clock_Enable+0x44>)
 800252c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <DMA_Clock_Enable+0x48>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d105      	bne.n	8002548 <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <DMA_Clock_Enable+0x44>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <DMA_Clock_Enable+0x44>)
 8002542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002546:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40026000 	.word	0x40026000
 8002558:	40023800 	.word	0x40023800
 800255c:	40026400 	.word	0x40026400

08002560 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ffd3 	bl	8002514 <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00f      	beq.n	800259c <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 800258c:	bf00      	nop
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f8      	bne.n	800258e <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	065a      	lsls	r2, r3, #25
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2200      	movs	r2, #0
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 8110 	beq.w	8002848 <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	430a      	orrs	r2, r1
 8002644:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2210      	movs	r2, #16
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f042 0210 	orr.w	r2, r2, #16
 8002660:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2208      	movs	r2, #8
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f042 0208 	orr.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f042 0204 	orr.w	r2, r2, #4
 8002698:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f042 0202 	orr.w	r2, r2, #2
 80026b4:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a80      	ldr	r2, [pc, #512]	@ (80028bc <DMA_Init+0x35c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d15f      	bne.n	8002780 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a7e      	ldr	r2, [pc, #504]	@ (80028c0 <DMA_Init+0x360>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d106      	bne.n	80026d8 <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 80026ca:	4a7e      	ldr	r2, [pc, #504]	@ (80028c4 <DMA_Init+0x364>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026d0:	200b      	movs	r0, #11
 80026d2:	f7fe fbad 	bl	8000e30 <__NVIC_EnableIRQ>
 80026d6:	e0b7      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a7a      	ldr	r2, [pc, #488]	@ (80028c8 <DMA_Init+0x368>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d106      	bne.n	80026f0 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 80026e2:	4a7a      	ldr	r2, [pc, #488]	@ (80028cc <DMA_Init+0x36c>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026e8:	200c      	movs	r0, #12
 80026ea:	f7fe fba1 	bl	8000e30 <__NVIC_EnableIRQ>
 80026ee:	e0ab      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a76      	ldr	r2, [pc, #472]	@ (80028d0 <DMA_Init+0x370>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d106      	bne.n	8002708 <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 80026fa:	4a76      	ldr	r2, [pc, #472]	@ (80028d4 <DMA_Init+0x374>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002700:	200d      	movs	r0, #13
 8002702:	f7fe fb95 	bl	8000e30 <__NVIC_EnableIRQ>
 8002706:	e09f      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a72      	ldr	r2, [pc, #456]	@ (80028d8 <DMA_Init+0x378>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d106      	bne.n	8002720 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 8002712:	4a72      	ldr	r2, [pc, #456]	@ (80028dc <DMA_Init+0x37c>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002718:	200e      	movs	r0, #14
 800271a:	f7fe fb89 	bl	8000e30 <__NVIC_EnableIRQ>
 800271e:	e093      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a6e      	ldr	r2, [pc, #440]	@ (80028e0 <DMA_Init+0x380>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d106      	bne.n	8002738 <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 800272a:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <DMA_Init+0x384>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002730:	200f      	movs	r0, #15
 8002732:	f7fe fb7d 	bl	8000e30 <__NVIC_EnableIRQ>
 8002736:	e087      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a6a      	ldr	r2, [pc, #424]	@ (80028e8 <DMA_Init+0x388>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d106      	bne.n	8002750 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 8002742:	4a6a      	ldr	r2, [pc, #424]	@ (80028ec <DMA_Init+0x38c>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002748:	2010      	movs	r0, #16
 800274a:	f7fe fb71 	bl	8000e30 <__NVIC_EnableIRQ>
 800274e:	e07b      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a66      	ldr	r2, [pc, #408]	@ (80028f0 <DMA_Init+0x390>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d106      	bne.n	8002768 <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 800275a:	4a66      	ldr	r2, [pc, #408]	@ (80028f4 <DMA_Init+0x394>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002760:	2011      	movs	r0, #17
 8002762:	f7fe fb65 	bl	8000e30 <__NVIC_EnableIRQ>
 8002766:	e06f      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a62      	ldr	r2, [pc, #392]	@ (80028f8 <DMA_Init+0x398>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d16a      	bne.n	8002848 <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 8002772:	4a62      	ldr	r2, [pc, #392]	@ (80028fc <DMA_Init+0x39c>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002778:	202f      	movs	r0, #47	@ 0x2f
 800277a:	f7fe fb59 	bl	8000e30 <__NVIC_EnableIRQ>
 800277e:	e063      	b.n	8002848 <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5e      	ldr	r2, [pc, #376]	@ (8002900 <DMA_Init+0x3a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d15e      	bne.n	8002848 <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <DMA_Init+0x3a4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d106      	bne.n	80027a2 <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 8002794:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <DMA_Init+0x3a8>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800279a:	2038      	movs	r0, #56	@ 0x38
 800279c:	f7fe fb48 	bl	8000e30 <__NVIC_EnableIRQ>
 80027a0:	e052      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a59      	ldr	r2, [pc, #356]	@ (800290c <DMA_Init+0x3ac>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d106      	bne.n	80027ba <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 80027ac:	4a58      	ldr	r2, [pc, #352]	@ (8002910 <DMA_Init+0x3b0>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80027b2:	2039      	movs	r0, #57	@ 0x39
 80027b4:	f7fe fb3c 	bl	8000e30 <__NVIC_EnableIRQ>
 80027b8:	e046      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a55      	ldr	r2, [pc, #340]	@ (8002914 <DMA_Init+0x3b4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d106      	bne.n	80027d2 <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 80027c4:	4a54      	ldr	r2, [pc, #336]	@ (8002918 <DMA_Init+0x3b8>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027ca:	203a      	movs	r0, #58	@ 0x3a
 80027cc:	f7fe fb30 	bl	8000e30 <__NVIC_EnableIRQ>
 80027d0:	e03a      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a51      	ldr	r2, [pc, #324]	@ (800291c <DMA_Init+0x3bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d106      	bne.n	80027ea <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 80027dc:	4a50      	ldr	r2, [pc, #320]	@ (8002920 <DMA_Init+0x3c0>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80027e2:	203b      	movs	r0, #59	@ 0x3b
 80027e4:	f7fe fb24 	bl	8000e30 <__NVIC_EnableIRQ>
 80027e8:	e02e      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002924 <DMA_Init+0x3c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d106      	bne.n	8002802 <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 80027f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002928 <DMA_Init+0x3c8>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80027fa:	203c      	movs	r0, #60	@ 0x3c
 80027fc:	f7fe fb18 	bl	8000e30 <__NVIC_EnableIRQ>
 8002800:	e022      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a49      	ldr	r2, [pc, #292]	@ (800292c <DMA_Init+0x3cc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d106      	bne.n	800281a <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 800280c:	4a48      	ldr	r2, [pc, #288]	@ (8002930 <DMA_Init+0x3d0>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002812:	2044      	movs	r0, #68	@ 0x44
 8002814:	f7fe fb0c 	bl	8000e30 <__NVIC_EnableIRQ>
 8002818:	e016      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a45      	ldr	r2, [pc, #276]	@ (8002934 <DMA_Init+0x3d4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d106      	bne.n	8002832 <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 8002824:	4a44      	ldr	r2, [pc, #272]	@ (8002938 <DMA_Init+0x3d8>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800282a:	2045      	movs	r0, #69	@ 0x45
 800282c:	f7fe fb00 	bl	8000e30 <__NVIC_EnableIRQ>
 8002830:	e00a      	b.n	8002848 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a41      	ldr	r2, [pc, #260]	@ (800293c <DMA_Init+0x3dc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d105      	bne.n	8002848 <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 800283c:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <DMA_Init+0x3e0>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002842:	2046      	movs	r0, #70	@ 0x46
 8002844:	f7fe faf4 	bl	8000e30 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8c1b      	ldrh	r3, [r3, #32]
 8002852:	4619      	mov	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002866:	4619      	mov	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e010      	b.n	80028b0 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2200      	movs	r2, #0
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e002      	b.n	80028b0 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e000      	b.n	80028b2 <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40026000 	.word	0x40026000
 80028c0:	40026010 	.word	0x40026010
 80028c4:	200003a0 	.word	0x200003a0
 80028c8:	40026028 	.word	0x40026028
 80028cc:	200003a4 	.word	0x200003a4
 80028d0:	40026040 	.word	0x40026040
 80028d4:	200003a8 	.word	0x200003a8
 80028d8:	40026058 	.word	0x40026058
 80028dc:	200003ac 	.word	0x200003ac
 80028e0:	40026070 	.word	0x40026070
 80028e4:	200003b0 	.word	0x200003b0
 80028e8:	40026088 	.word	0x40026088
 80028ec:	200003b4 	.word	0x200003b4
 80028f0:	400260a0 	.word	0x400260a0
 80028f4:	200003b8 	.word	0x200003b8
 80028f8:	400260b8 	.word	0x400260b8
 80028fc:	200003bc 	.word	0x200003bc
 8002900:	40026400 	.word	0x40026400
 8002904:	40026410 	.word	0x40026410
 8002908:	200003c0 	.word	0x200003c0
 800290c:	40026428 	.word	0x40026428
 8002910:	200003c4 	.word	0x200003c4
 8002914:	40026440 	.word	0x40026440
 8002918:	200003c8 	.word	0x200003c8
 800291c:	40026458 	.word	0x40026458
 8002920:	200003cc 	.word	0x200003cc
 8002924:	40026470 	.word	0x40026470
 8002928:	200003d0 	.word	0x200003d0
 800292c:	40026488 	.word	0x40026488
 8002930:	200003d4 	.word	0x200003d4
 8002934:	400264a0 	.word	0x400264a0
 8002938:	200003d8 	.word	0x200003d8
 800293c:	400264b8 	.word	0x400264b8
 8002940:	200003dc 	.word	0x200003dc

08002944 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2200      	movs	r2, #0
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00d      	b.n	8002994 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002980:	4293      	cmp	r3, r2
 8002982:	d107      	bne.n	8002994 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002992:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80029a2:	601a      	str	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029e0:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029ea:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4a43      	ldr	r2, [pc, #268]	@ (8002b28 <DMA_Set_Trigger+0x124>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <DMA_Set_Trigger+0x24>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <DMA_Set_Trigger+0x128>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d178      	bne.n	8002b1a <DMA_Set_Trigger+0x116>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4a41      	ldr	r2, [pc, #260]	@ (8002b30 <DMA_Set_Trigger+0x12c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d918      	bls.n	8002a62 <DMA_Set_Trigger+0x5e>
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4a40      	ldr	r2, [pc, #256]	@ (8002b34 <DMA_Set_Trigger+0x130>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d814      	bhi.n	8002a62 <DMA_Set_Trigger+0x5e>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b38 <DMA_Set_Trigger+0x134>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	10db      	asrs	r3, r3, #3
 8002a40:	4a3e      	ldr	r2, [pc, #248]	@ (8002b3c <DMA_Set_Trigger+0x138>)
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <DMA_Set_Trigger+0x13c>)
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	213f      	movs	r1, #63	@ 0x3f
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e055      	b.n	8002b0e <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4a37      	ldr	r2, [pc, #220]	@ (8002b44 <DMA_Set_Trigger+0x140>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d918      	bls.n	8002a9c <DMA_Set_Trigger+0x98>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4a36      	ldr	r2, [pc, #216]	@ (8002b48 <DMA_Set_Trigger+0x144>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d814      	bhi.n	8002a9c <DMA_Set_Trigger+0x98>
		{
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <DMA_Set_Trigger+0x148>)
 8002a76:	4413      	add	r3, r2
 8002a78:	10db      	asrs	r3, r3, #3
 8002a7a:	4a30      	ldr	r2, [pc, #192]	@ (8002b3c <DMA_Set_Trigger+0x138>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <DMA_Set_Trigger+0x14c>)
 8002a84:	5c9b      	ldrb	r3, [r3, r2]
 8002a86:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	213f      	movs	r1, #63	@ 0x3f
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e038      	b.n	8002b0e <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <DMA_Set_Trigger+0x150>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d918      	bls.n	8002ad6 <DMA_Set_Trigger+0xd2>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <DMA_Set_Trigger+0x154>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d814      	bhi.n	8002ad6 <DMA_Set_Trigger+0xd2>
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <DMA_Set_Trigger+0x158>)
 8002ab0:	4413      	add	r3, r2
 8002ab2:	10db      	asrs	r3, r3, #3
 8002ab4:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <DMA_Set_Trigger+0x138>)
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <DMA_Set_Trigger+0x13c>)
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	213f      	movs	r1, #63	@ 0x3f
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e01b      	b.n	8002b0e <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <DMA_Set_Trigger+0x15c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d917      	bls.n	8002b0e <DMA_Set_Trigger+0x10a>
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a20      	ldr	r2, [pc, #128]	@ (8002b64 <DMA_Set_Trigger+0x160>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d813      	bhi.n	8002b0e <DMA_Set_Trigger+0x10a>
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <DMA_Set_Trigger+0x164>)
 8002aea:	4413      	add	r3, r2
 8002aec:	10db      	asrs	r3, r3, #3
 8002aee:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <DMA_Set_Trigger+0x138>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <DMA_Set_Trigger+0x14c>)
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	213f      	movs	r1, #63	@ 0x3f
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	60da      	str	r2, [r3, #12]
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	601a      	str	r2, [r3, #0]
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40026000 	.word	0x40026000
 8002b2c:	40026400 	.word	0x40026400
 8002b30:	4002600f 	.word	0x4002600f
 8002b34:	40026058 	.word	0x40026058
 8002b38:	bffd9ff0 	.word	0xbffd9ff0
 8002b3c:	aaaaaaab 	.word	0xaaaaaaab
 8002b40:	08009a4c 	.word	0x08009a4c
 8002b44:	4002606f 	.word	0x4002606f
 8002b48:	400260b8 	.word	0x400260b8
 8002b4c:	bffd9f90 	.word	0xbffd9f90
 8002b50:	08009a50 	.word	0x08009a50
 8002b54:	4002640f 	.word	0x4002640f
 8002b58:	40026458 	.word	0x40026458
 8002b5c:	bffd9bf0 	.word	0xbffd9bf0
 8002b60:	4002646f 	.word	0x4002646f
 8002b64:	400264b8 	.word	0x400264b8
 8002b68:	bffd9b90 	.word	0xbffd9b90

08002b6c <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002b70:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <EXTI0_IRQHandler+0x24>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <EXTI0_IRQHandler+0x12>
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <EXTI0_IRQHandler+0x24>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <EXTI0_IRQHandler+0x28>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <EXTI0_IRQHandler+0x28>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6153      	str	r3, [r2, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200003e8 	.word	0x200003e8
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <EXTI1_IRQHandler+0x24>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <EXTI1_IRQHandler+0x12>
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <EXTI1_IRQHandler+0x24>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <EXTI1_IRQHandler+0x28>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <EXTI1_IRQHandler+0x28>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6153      	str	r3, [r2, #20]
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200003e8 	.word	0x200003e8
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <EXTI2_IRQHandler+0x24>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <EXTI2_IRQHandler+0x12>
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <EXTI2_IRQHandler+0x24>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <EXTI2_IRQHandler+0x28>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <EXTI2_IRQHandler+0x28>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6153      	str	r3, [r2, #20]
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200003e8 	.word	0x200003e8
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002bf4:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <EXTI3_IRQHandler+0x24>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <EXTI3_IRQHandler+0x12>
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <EXTI3_IRQHandler+0x24>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <EXTI3_IRQHandler+0x28>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <EXTI3_IRQHandler+0x28>)
 8002c08:	f043 0308 	orr.w	r3, r3, #8
 8002c0c:	6153      	str	r3, [r2, #20]
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200003e8 	.word	0x200003e8
 8002c18:	40013c00 	.word	0x40013c00

08002c1c <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002c20:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <EXTI4_IRQHandler+0x24>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <EXTI4_IRQHandler+0x12>
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <EXTI4_IRQHandler+0x24>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <EXTI4_IRQHandler+0x28>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <EXTI4_IRQHandler+0x28>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6153      	str	r3, [r2, #20]
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003e8 	.word	0x200003e8
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002c4e:	2305      	movs	r3, #5
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	e020      	b.n	8002c96 <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <EXTI9_5_IRQHandler+0x60>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <EXTI9_5_IRQHandler+0x48>
 8002c66:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <EXTI9_5_IRQHandler+0x64>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002c72:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <EXTI9_5_IRQHandler+0x64>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <EXTI9_5_IRQHandler+0x60>)
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	2101      	movs	r1, #1
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <EXTI9_5_IRQHandler+0x60>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	dddb      	ble.n	8002c54 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40013c00 	.word	0x40013c00
 8002cac:	200003e8 	.word	0x200003e8

08002cb0 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002cb6:	230a      	movs	r3, #10
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	e020      	b.n	8002cfe <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <EXTI15_10_IRQHandler+0x60>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d014      	beq.n	8002cf8 <EXTI15_10_IRQHandler+0x48>
 8002cce:	4a11      	ldr	r2, [pc, #68]	@ (8002d14 <EXTI15_10_IRQHandler+0x64>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002cda:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <EXTI15_10_IRQHandler+0x64>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <EXTI15_10_IRQHandler+0x60>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <EXTI15_10_IRQHandler+0x60>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	dddb      	ble.n	8002cbc <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40013c00 	.word	0x40013c00
 8002d14:	200003e8 	.word	0x200003e8

08002d18 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a30      	ldr	r2, [pc, #192]	@ (8002de4 <GPIO_Clock_Enable+0xcc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04b      	beq.n	8002dc0 <GPIO_Clock_Enable+0xa8>
 8002d28:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <GPIO_Clock_Enable+0xcc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d84f      	bhi.n	8002dce <GPIO_Clock_Enable+0xb6>
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <GPIO_Clock_Enable+0xd0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03e      	beq.n	8002db2 <GPIO_Clock_Enable+0x9a>
 8002d34:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <GPIO_Clock_Enable+0xd0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d849      	bhi.n	8002dce <GPIO_Clock_Enable+0xb6>
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dec <GPIO_Clock_Enable+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d031      	beq.n	8002da4 <GPIO_Clock_Enable+0x8c>
 8002d40:	4a2a      	ldr	r2, [pc, #168]	@ (8002dec <GPIO_Clock_Enable+0xd4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d843      	bhi.n	8002dce <GPIO_Clock_Enable+0xb6>
 8002d46:	4a2a      	ldr	r2, [pc, #168]	@ (8002df0 <GPIO_Clock_Enable+0xd8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d024      	beq.n	8002d96 <GPIO_Clock_Enable+0x7e>
 8002d4c:	4a28      	ldr	r2, [pc, #160]	@ (8002df0 <GPIO_Clock_Enable+0xd8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d83d      	bhi.n	8002dce <GPIO_Clock_Enable+0xb6>
 8002d52:	4a28      	ldr	r2, [pc, #160]	@ (8002df4 <GPIO_Clock_Enable+0xdc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d017      	beq.n	8002d88 <GPIO_Clock_Enable+0x70>
 8002d58:	4a26      	ldr	r2, [pc, #152]	@ (8002df4 <GPIO_Clock_Enable+0xdc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d837      	bhi.n	8002dce <GPIO_Clock_Enable+0xb6>
 8002d5e:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <GPIO_Clock_Enable+0xe0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <GPIO_Clock_Enable+0x54>
 8002d64:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <GPIO_Clock_Enable+0xe4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <GPIO_Clock_Enable+0x62>
 8002d6a:	e030      	b.n	8002dce <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002d6c:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d78:	e02c      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002d7a:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	4a20      	ldr	r2, [pc, #128]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d86:	e025      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d94:	e01e      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a19      	ldr	r2, [pc, #100]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	e017      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002da4:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002daa:	f043 0310 	orr.w	r3, r3, #16
 8002dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db0:	e010      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbe:	e009      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e00 <GPIO_Clock_Enable+0xe8>)
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dcc:	e002      	b.n	8002dd4 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e000      	b.n	8002dd6 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021c00 	.word	0x40021c00
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40023800 	.word	0x40023800

08002e04 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	70fb      	strb	r3, [r7, #3]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70bb      	strb	r3, [r7, #2]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff7a 	bl	8002d18 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	0052      	lsls	r2, r2, #1
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e32:	43d2      	mvns	r2, r2
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	78b9      	ldrb	r1, [r7, #2]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	0052      	lsls	r2, r2, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	43d2      	mvns	r2, r2
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002e62:	2202      	movs	r2, #2
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d008      	beq.n	8002e7c <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	7879      	ldrb	r1, [r7, #1]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	0052      	lsls	r2, r2, #1
 8002e84:	2103      	movs	r1, #3
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	43d2      	mvns	r2, r2
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002e92:	2204      	movs	r2, #4
 8002e94:	7c3b      	ldrb	r3, [r7, #16]
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	7c39      	ldrb	r1, [r7, #16]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	0052      	lsls	r2, r2, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	0052      	lsls	r2, r2, #1
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	7d3b      	ldrb	r3, [r7, #20]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	7d39      	ldrb	r1, [r7, #20]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	0052      	lsls	r2, r2, #1
 8002ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	78bb      	ldrb	r3, [r7, #2]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d12f      	bne.n	8002f48 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b07      	cmp	r3, #7
 8002eec:	d815      	bhi.n	8002f1a <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	43d2      	mvns	r2, r2
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	7e39      	ldrb	r1, [r7, #24]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	621a      	str	r2, [r3, #32]
 8002f18:	e016      	b.n	8002f48 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	3a08      	subs	r2, #8
 8002f22:	0092      	lsls	r2, r2, #2
 8002f24:	210f      	movs	r1, #15
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	43d2      	mvns	r2, r2
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	7e39      	ldrb	r1, [r7, #24]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	3a08      	subs	r2, #8
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <__NVIC_EnableIRQ>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	@ (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	@ (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <SystemAPB2_Clock_Speed>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
}

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <SystemAPB2_Clock_Speed+0x24>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a07      	ldr	r2, [pc, #28]	@ (800300c <SystemAPB2_Clock_Speed+0x28>)
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0b52      	lsrs	r2, r2, #13
 8002ff2:	f002 0207 	and.w	r2, r2, #7
 8002ff6:	4906      	ldr	r1, [pc, #24]	@ (8003010 <SystemAPB2_Clock_Speed+0x2c>)
 8002ff8:	5c8a      	ldrb	r2, [r1, r2]
 8002ffa:	40d3      	lsrs	r3, r2
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	40023800 	.word	0x40023800
 8003010:	08009e68 	.word	0x08009e68

08003014 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	ed87 0b02 	vstr	d0, [r7, #8]
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8003022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003026:	f7fd fe2f 	bl	8000c88 <__aeabi_d2lz>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fab3 	bl	800059c <__aeabi_l2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800304a:	f7fd f91d 	bl	8000288 <__aeabi_dsub>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <USART1_TX_ISR>:
volatile bool U5RX_Complete = 0;

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {U1TX_Complete = 1;}
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
 8003064:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <USART1_TX_ISR+0x14>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	20000862 	.word	0x20000862

08003078 <USART1_RX_ISR>:
void USART1_RX_ISR() {U1RX_Complete = 1;}
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <USART1_RX_ISR+0x14>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000863 	.word	0x20000863

08003090 <USART2_TX_ISR>:

void USART2_TX_ISR() {U2TX_Complete = 1;}
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <USART2_TX_ISR+0x14>)
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	20000864 	.word	0x20000864

080030a8 <USART2_RX_ISR>:
void USART2_RX_ISR() {U2RX_Complete = 1;}
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <USART2_RX_ISR+0x14>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000865 	.word	0x20000865

080030c0 <USART3_TX_ISR>:

void USART3_TX_ISR() {U3TX_Complete = 1;}
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <USART3_TX_ISR+0x14>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20000866 	.word	0x20000866

080030d8 <USART3_RX_ISR>:
void USART3_RX_ISR() {U3RX_Complete = 1;}
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4b03      	ldr	r3, [pc, #12]	@ (80030ec <USART3_RX_ISR+0x14>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000867 	.word	0x20000867

080030f0 <USART4_TX_ISR>:

void USART4_TX_ISR() {U4TX_Complete = 1;}
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <USART4_TX_ISR+0x14>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20000868 	.word	0x20000868

08003108 <USART4_RX_ISR>:
void USART4_RX_ISR() {U4RX_Complete = 1;}
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <USART4_RX_ISR+0x14>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000869 	.word	0x20000869

08003120 <USART5_TX_ISR>:

void USART5_TX_ISR() {U5TX_Complete = 1;}
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
 8003124:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <USART5_TX_ISR+0x14>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	2000086a 	.word	0x2000086a

08003138 <USART5_RX_ISR>:
void USART5_RX_ISR() {U5RX_Complete = 1;}
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <USART5_RX_ISR+0x14>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	2000086b 	.word	0x2000086b

08003150 <USART6_TX_ISR>:

void USART6_TX_ISR() {U6TX_Complete = 1;}
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <USART6_TX_ISR+0x14>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	2000086c 	.word	0x2000086c

08003168 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 800316c:	4b57      	ldr	r3, [pc, #348]	@ (80032cc <UART4_IRQHandler+0x164>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b57      	ldr	r3, [pc, #348]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003174:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003176:	4b56      	ldr	r3, [pc, #344]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 8003190:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003198:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800319a:	4b4c      	ldr	r3, [pc, #304]	@ (80032cc <UART4_IRQHandler+0x164>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <UART4_IRQHandler+0x164>)
 80031a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031a4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <UART4_IRQHandler+0x168>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80031b4:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80031c0:	4b44      	ldr	r3, [pc, #272]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80031ca:	4b40      	ldr	r3, [pc, #256]	@ (80032cc <UART4_IRQHandler+0x164>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3f      	ldr	r2, [pc, #252]	@ (80032cc <UART4_IRQHandler+0x164>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80031d6:	4b3e      	ldr	r3, [pc, #248]	@ (80032d0 <UART4_IRQHandler+0x168>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80031f0:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80031f8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80031fa:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <UART4_IRQHandler+0x164>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a33      	ldr	r2, [pc, #204]	@ (80032cc <UART4_IRQHandler+0x164>)
 8003200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003204:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8003206:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003214:	4b2f      	ldr	r3, [pc, #188]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003220:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003228:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800322a:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <UART4_IRQHandler+0x164>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <UART4_IRQHandler+0x164>)
 8003230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003234:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8003236:	4b26      	ldr	r3, [pc, #152]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003244:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003258:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800325a:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <UART4_IRQHandler+0x164>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <UART4_IRQHandler+0x164>)
 8003260:	f023 0320 	bic.w	r3, r3, #32
 8003264:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8003274:	4b17      	ldr	r3, [pc, #92]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003288:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <UART4_IRQHandler+0x164>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a0f      	ldr	r2, [pc, #60]	@ (80032cc <UART4_IRQHandler+0x164>)
 8003290:	f023 0310 	bic.w	r3, r3, #16
 8003294:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <UART4_IRQHandler+0x168>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <UART4_IRQHandler+0x16c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80032b8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80032ba:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <UART4_IRQHandler+0x164>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a03      	ldr	r2, [pc, #12]	@ (80032cc <UART4_IRQHandler+0x164>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]
	    }
	}

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	20000860 	.word	0x20000860
 80032d4:	20000858 	.word	0x20000858

080032d8 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 80032dc:	4b57      	ldr	r3, [pc, #348]	@ (800343c <USART1_IRQHandler+0x164>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <USART1_IRQHandler+0x168>)
 80032e4:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80032e6:	4b56      	ldr	r3, [pc, #344]	@ (8003440 <USART1_IRQHandler+0x168>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 80032f4:	4b53      	ldr	r3, [pc, #332]	@ (8003444 <USART1_IRQHandler+0x16c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8003300:	4b50      	ldr	r3, [pc, #320]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003308:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800330a:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <USART1_IRQHandler+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4b      	ldr	r2, [pc, #300]	@ (800343c <USART1_IRQHandler+0x164>)
 8003310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003314:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <USART1_IRQHandler+0x168>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003324:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003330:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800333a:	4b40      	ldr	r3, [pc, #256]	@ (800343c <USART1_IRQHandler+0x164>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <USART1_IRQHandler+0x164>)
 8003340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003344:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8003346:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <USART1_IRQHandler+0x168>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003354:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003360:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003368:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800336a:	4b34      	ldr	r3, [pc, #208]	@ (800343c <USART1_IRQHandler+0x164>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	@ (800343c <USART1_IRQHandler+0x164>)
 8003370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003374:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8003376:	4b32      	ldr	r3, [pc, #200]	@ (8003440 <USART1_IRQHandler+0x168>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003384:	4b2f      	ldr	r3, [pc, #188]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003398:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800339a:	4b28      	ldr	r3, [pc, #160]	@ (800343c <USART1_IRQHandler+0x164>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a27      	ldr	r2, [pc, #156]	@ (800343c <USART1_IRQHandler+0x164>)
 80033a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 80033a6:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <USART1_IRQHandler+0x168>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80033b4:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <USART1_IRQHandler+0x16c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80033c0:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <USART1_IRQHandler+0x16c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033c8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80033ca:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <USART1_IRQHandler+0x164>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <USART1_IRQHandler+0x164>)
 80033d0:	f023 0320 	bic.w	r3, r3, #32
 80033d4:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <USART1_IRQHandler+0x168>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 80033e4:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <USART1_IRQHandler+0x16c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 80033f0:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <USART1_IRQHandler+0x16c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033f8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80033fa:	4b10      	ldr	r3, [pc, #64]	@ (800343c <USART1_IRQHandler+0x164>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0f      	ldr	r2, [pc, #60]	@ (800343c <USART1_IRQHandler+0x164>)
 8003400:	f023 0310 	bic.w	r3, r3, #16
 8003404:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 8003406:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <USART1_IRQHandler+0x168>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <USART1_IRQHandler+0x16c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003428:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800342a:	4b04      	ldr	r3, [pc, #16]	@ (800343c <USART1_IRQHandler+0x164>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a03      	ldr	r2, [pc, #12]	@ (800343c <USART1_IRQHandler+0x164>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]
	    }
	}

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40011000 	.word	0x40011000
 8003440:	20000860 	.word	0x20000860
 8003444:	2000084c 	.word	0x2000084c

08003448 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <USART_Get_Instance_Number+0x6c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <USART_Get_Instance_Number+0x16>
 800345a:	2300      	movs	r3, #0
 800345c:	e024      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <USART_Get_Instance_Number+0x70>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <USART_Get_Instance_Number+0x24>
 8003468:	2301      	movs	r3, #1
 800346a:	e01d      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <USART_Get_Instance_Number+0x74>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <USART_Get_Instance_Number+0x32>
 8003476:	2302      	movs	r3, #2
 8003478:	e016      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <USART_Get_Instance_Number+0x78>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <USART_Get_Instance_Number+0x40>
 8003484:	2303      	movs	r3, #3
 8003486:	e00f      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <USART_Get_Instance_Number+0x7c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <USART_Get_Instance_Number+0x4e>
 8003492:	2304      	movs	r3, #4
 8003494:	e008      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a0b      	ldr	r2, [pc, #44]	@ (80034c8 <USART_Get_Instance_Number+0x80>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <USART_Get_Instance_Number+0x5c>
 80034a0:	2305      	movs	r3, #5
 80034a2:	e001      	b.n	80034a8 <USART_Get_Instance_Number+0x60>
	else {return -1;}
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40011000 	.word	0x40011000
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40004800 	.word	0x40004800
 80034c0:	40004c00 	.word	0x40004c00
 80034c4:	40005000 	.word	0x40005000
 80034c8:	40011400 	.word	0x40011400

080034cc <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 80034d4:	2200      	movs	r2, #0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 80034da:	2200      	movs	r2, #0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80034e6:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 80034e8:	2200      	movs	r2, #0
 80034ea:	2300      	movs	r3, #0
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 80034f4:	2300      	movs	r3, #0
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	739a      	strb	r2, [r3, #14]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a27      	ldr	r2, [pc, #156]	@ (80035b4 <USART_Clock_Enable+0xac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d106      	bne.n	8003528 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 800351a:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	e03e      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a23      	ldr	r2, [pc, #140]	@ (80035bc <USART_Clock_Enable+0xb4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d106      	bne.n	8003540 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8003532:	4b21      	ldr	r3, [pc, #132]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	4a20      	ldr	r2, [pc, #128]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	6413      	str	r3, [r2, #64]	@ 0x40
 800353e:	e032      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <USART_Clock_Enable+0xb8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d106      	bne.n	8003558 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003554:	6413      	str	r3, [r2, #64]	@ 0x40
 8003556:	e026      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <USART_Clock_Enable+0xbc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d106      	bne.n	8003570 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003568:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	e01a      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <USART_Clock_Enable+0xc0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d106      	bne.n	8003588 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800357a:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a0e      	ldr	r2, [pc, #56]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	e00e      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a0f      	ldr	r2, [pc, #60]	@ (80035cc <USART_Clock_Enable+0xc4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d106      	bne.n	80035a0 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <USART_Clock_Enable+0xb0>)
 8003598:	f043 0320 	orr.w	r3, r3, #32
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	e002      	b.n	80035a6 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	e000      	b.n	80035a8 <USART_Clock_Enable+0xa0>
	}
	return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40004400 	.word	0x40004400
 80035c0:	40004800 	.word	0x40004800
 80035c4:	40004c00 	.word	0x40004c00
 80035c8:	40005000 	.word	0x40005000
 80035cc:	40011400 	.word	0x40011400

080035d0 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80035d0:	b5b0      	push	{r4, r5, r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af04      	add	r7, sp, #16
 80035d6:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4aa4      	ldr	r2, [pc, #656]	@ (8003870 <PIN_Setup+0x2a0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f040 8112 	bne.w	8003808 <PIN_Setup+0x238>
	{
		__usart_1_config__ = config;
 80035e4:	4aa3      	ldr	r2, [pc, #652]	@ (8003874 <PIN_Setup+0x2a4>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]

		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7a1b      	ldrb	r3, [r3, #8]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <PIN_Setup+0x44>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7a1b      	ldrb	r3, [r3, #8]
 80035f8:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00a      	beq.n	8003614 <PIN_Setup+0x44>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7a1b      	ldrb	r3, [r3, #8]
 8003602:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003604:	4293      	cmp	r3, r2
 8003606:	d005      	beq.n	8003614 <PIN_Setup+0x44>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7a1b      	ldrb	r3, [r3, #8]
 800360c:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800360e:	4293      	cmp	r3, r2
 8003610:	f040 80bf 	bne.w	8003792 <PIN_Setup+0x1c2>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7a5b      	ldrb	r3, [r3, #9]
 8003618:	2209      	movs	r2, #9
 800361a:	4293      	cmp	r3, r2
 800361c:	d10f      	bne.n	800363e <PIN_Setup+0x6e>
 800361e:	2009      	movs	r0, #9
 8003620:	2402      	movs	r4, #2
 8003622:	2500      	movs	r5, #0
 8003624:	2302      	movs	r3, #2
 8003626:	2200      	movs	r2, #0
 8003628:	2107      	movs	r1, #7
 800362a:	9102      	str	r1, [sp, #8]
 800362c:	9201      	str	r2, [sp, #4]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	462b      	mov	r3, r5
 8003632:	4622      	mov	r2, r4
 8003634:	4601      	mov	r1, r0
 8003636:	4890      	ldr	r0, [pc, #576]	@ (8003878 <PIN_Setup+0x2a8>)
 8003638:	f7ff fbe4 	bl	8002e04 <GPIO_Pin_Init>
 800363c:	e013      	b.n	8003666 <PIN_Setup+0x96>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7a5b      	ldrb	r3, [r3, #9]
 8003642:	2206      	movs	r2, #6
 8003644:	4293      	cmp	r3, r2
 8003646:	d10e      	bne.n	8003666 <PIN_Setup+0x96>
 8003648:	2006      	movs	r0, #6
 800364a:	2402      	movs	r4, #2
 800364c:	2500      	movs	r5, #0
 800364e:	2302      	movs	r3, #2
 8003650:	2200      	movs	r2, #0
 8003652:	2107      	movs	r1, #7
 8003654:	9102      	str	r1, [sp, #8]
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462b      	mov	r3, r5
 800365c:	4622      	mov	r2, r4
 800365e:	4601      	mov	r1, r0
 8003660:	4886      	ldr	r0, [pc, #536]	@ (800387c <PIN_Setup+0x2ac>)
 8003662:	f7ff fbcf 	bl	8002e04 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7a9b      	ldrb	r3, [r3, #10]
 800366a:	220a      	movs	r2, #10
 800366c:	4293      	cmp	r3, r2
 800366e:	d10f      	bne.n	8003690 <PIN_Setup+0xc0>
 8003670:	200a      	movs	r0, #10
 8003672:	2402      	movs	r4, #2
 8003674:	2500      	movs	r5, #0
 8003676:	2302      	movs	r3, #2
 8003678:	2200      	movs	r2, #0
 800367a:	2107      	movs	r1, #7
 800367c:	9102      	str	r1, [sp, #8]
 800367e:	9201      	str	r2, [sp, #4]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	462b      	mov	r3, r5
 8003684:	4622      	mov	r2, r4
 8003686:	4601      	mov	r1, r0
 8003688:	487b      	ldr	r0, [pc, #492]	@ (8003878 <PIN_Setup+0x2a8>)
 800368a:	f7ff fbbb 	bl	8002e04 <GPIO_Pin_Init>
 800368e:	e013      	b.n	80036b8 <PIN_Setup+0xe8>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7a9b      	ldrb	r3, [r3, #10]
 8003694:	2207      	movs	r2, #7
 8003696:	4293      	cmp	r3, r2
 8003698:	d10e      	bne.n	80036b8 <PIN_Setup+0xe8>
 800369a:	2007      	movs	r0, #7
 800369c:	2402      	movs	r4, #2
 800369e:	2500      	movs	r5, #0
 80036a0:	2302      	movs	r3, #2
 80036a2:	2200      	movs	r2, #0
 80036a4:	2107      	movs	r1, #7
 80036a6:	9102      	str	r1, [sp, #8]
 80036a8:	9201      	str	r2, [sp, #4]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462b      	mov	r3, r5
 80036ae:	4622      	mov	r2, r4
 80036b0:	4601      	mov	r1, r0
 80036b2:	4872      	ldr	r0, [pc, #456]	@ (800387c <PIN_Setup+0x2ac>)
 80036b4:	f7ff fba6 	bl	8002e04 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	2202      	movs	r2, #2
 80036be:	4293      	cmp	r3, r2
 80036c0:	d113      	bne.n	80036ea <PIN_Setup+0x11a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7adb      	ldrb	r3, [r3, #11]
 80036c6:	2208      	movs	r2, #8
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10e      	bne.n	80036ea <PIN_Setup+0x11a>
 80036cc:	2008      	movs	r0, #8
 80036ce:	2402      	movs	r4, #2
 80036d0:	2500      	movs	r5, #0
 80036d2:	2302      	movs	r3, #2
 80036d4:	2200      	movs	r2, #0
 80036d6:	2107      	movs	r1, #7
 80036d8:	9102      	str	r1, [sp, #8]
 80036da:	9201      	str	r2, [sp, #4]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	462b      	mov	r3, r5
 80036e0:	4622      	mov	r2, r4
 80036e2:	4601      	mov	r1, r0
 80036e4:	4864      	ldr	r0, [pc, #400]	@ (8003878 <PIN_Setup+0x2a8>)
 80036e6:	f7ff fb8d 	bl	8002e04 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7bdb      	ldrb	r3, [r3, #15]
 80036ee:	2200      	movs	r2, #0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	f000 851a 	beq.w	800412a <PIN_Setup+0xb5a>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7bdb      	ldrb	r3, [r3, #15]
 80036fa:	2201      	movs	r2, #1
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10e      	bne.n	800371e <PIN_Setup+0x14e>
 8003700:	200b      	movs	r0, #11
 8003702:	2402      	movs	r4, #2
 8003704:	2500      	movs	r5, #0
 8003706:	2302      	movs	r3, #2
 8003708:	2200      	movs	r2, #0
 800370a:	2107      	movs	r1, #7
 800370c:	9102      	str	r1, [sp, #8]
 800370e:	9201      	str	r2, [sp, #4]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	462b      	mov	r3, r5
 8003714:	4622      	mov	r2, r4
 8003716:	4601      	mov	r1, r0
 8003718:	4857      	ldr	r0, [pc, #348]	@ (8003878 <PIN_Setup+0x2a8>)
 800371a:	f7ff fb73 	bl	8002e04 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7bdb      	ldrb	r3, [r3, #15]
 8003722:	2202      	movs	r2, #2
 8003724:	4293      	cmp	r3, r2
 8003726:	d10e      	bne.n	8003746 <PIN_Setup+0x176>
 8003728:	200c      	movs	r0, #12
 800372a:	2402      	movs	r4, #2
 800372c:	2500      	movs	r5, #0
 800372e:	2302      	movs	r3, #2
 8003730:	2200      	movs	r2, #0
 8003732:	2107      	movs	r1, #7
 8003734:	9102      	str	r1, [sp, #8]
 8003736:	9201      	str	r2, [sp, #4]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	462b      	mov	r3, r5
 800373c:	4622      	mov	r2, r4
 800373e:	4601      	mov	r1, r0
 8003740:	484d      	ldr	r0, [pc, #308]	@ (8003878 <PIN_Setup+0x2a8>)
 8003742:	f7ff fb5f 	bl	8002e04 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7bdb      	ldrb	r3, [r3, #15]
 800374a:	2203      	movs	r2, #3
 800374c:	4293      	cmp	r3, r2
 800374e:	f040 84ec 	bne.w	800412a <PIN_Setup+0xb5a>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003752:	200b      	movs	r0, #11
 8003754:	2402      	movs	r4, #2
 8003756:	2500      	movs	r5, #0
 8003758:	2302      	movs	r3, #2
 800375a:	2200      	movs	r2, #0
 800375c:	2107      	movs	r1, #7
 800375e:	9102      	str	r1, [sp, #8]
 8003760:	9201      	str	r2, [sp, #4]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	462b      	mov	r3, r5
 8003766:	4622      	mov	r2, r4
 8003768:	4601      	mov	r1, r0
 800376a:	4843      	ldr	r0, [pc, #268]	@ (8003878 <PIN_Setup+0x2a8>)
 800376c:	f7ff fb4a 	bl	8002e04 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003770:	200c      	movs	r0, #12
 8003772:	2402      	movs	r4, #2
 8003774:	2500      	movs	r5, #0
 8003776:	2302      	movs	r3, #2
 8003778:	2200      	movs	r2, #0
 800377a:	2107      	movs	r1, #7
 800377c:	9102      	str	r1, [sp, #8]
 800377e:	9201      	str	r2, [sp, #4]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	462b      	mov	r3, r5
 8003784:	4622      	mov	r2, r4
 8003786:	4601      	mov	r1, r0
 8003788:	483b      	ldr	r0, [pc, #236]	@ (8003878 <PIN_Setup+0x2a8>)
 800378a:	f7ff fb3b 	bl	8002e04 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800378e:	f000 bccc 	b.w	800412a <PIN_Setup+0xb5a>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7a1b      	ldrb	r3, [r3, #8]
 8003796:	2206      	movs	r2, #6
 8003798:	4293      	cmp	r3, r2
 800379a:	d00a      	beq.n	80037b2 <PIN_Setup+0x1e2>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7a1b      	ldrb	r3, [r3, #8]
 80037a0:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d005      	beq.n	80037b2 <PIN_Setup+0x1e2>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7a1b      	ldrb	r3, [r3, #8]
 80037aa:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f040 84c1 	bne.w	8004134 <PIN_Setup+0xb64>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7a5b      	ldrb	r3, [r3, #9]
 80037b6:	2209      	movs	r2, #9
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10e      	bne.n	80037da <PIN_Setup+0x20a>
 80037bc:	2009      	movs	r0, #9
 80037be:	2402      	movs	r4, #2
 80037c0:	2500      	movs	r5, #0
 80037c2:	2302      	movs	r3, #2
 80037c4:	2200      	movs	r2, #0
 80037c6:	2107      	movs	r1, #7
 80037c8:	9102      	str	r1, [sp, #8]
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	462b      	mov	r3, r5
 80037d0:	4622      	mov	r2, r4
 80037d2:	4601      	mov	r1, r0
 80037d4:	4828      	ldr	r0, [pc, #160]	@ (8003878 <PIN_Setup+0x2a8>)
 80037d6:	f7ff fb15 	bl	8002e04 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7a1b      	ldrb	r3, [r3, #8]
 80037de:	2207      	movs	r2, #7
 80037e0:	4293      	cmp	r3, r2
 80037e2:	f040 84a7 	bne.w	8004134 <PIN_Setup+0xb64>
 80037e6:	2008      	movs	r0, #8
 80037e8:	2402      	movs	r4, #2
 80037ea:	2500      	movs	r5, #0
 80037ec:	2302      	movs	r3, #2
 80037ee:	2200      	movs	r2, #0
 80037f0:	2107      	movs	r1, #7
 80037f2:	9102      	str	r1, [sp, #8]
 80037f4:	9201      	str	r2, [sp, #4]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	462b      	mov	r3, r5
 80037fa:	4622      	mov	r2, r4
 80037fc:	4601      	mov	r1, r0
 80037fe:	481e      	ldr	r0, [pc, #120]	@ (8003878 <PIN_Setup+0x2a8>)
 8003800:	f7ff fb00 	bl	8002e04 <GPIO_Pin_Init>

		}
	}


}
 8003804:	f000 bc96 	b.w	8004134 <PIN_Setup+0xb64>
	else if(config->Port == USART2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <PIN_Setup+0x2b0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f040 8182 	bne.w	8003b18 <PIN_Setup+0x548>
		__usart_2_config__ = config;
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <PIN_Setup+0x2b4>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7a1b      	ldrb	r3, [r3, #8]
 800381e:	2201      	movs	r2, #1
 8003820:	4293      	cmp	r3, r2
 8003822:	d00f      	beq.n	8003844 <PIN_Setup+0x274>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7a1b      	ldrb	r3, [r3, #8]
 8003828:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800382a:	4293      	cmp	r3, r2
 800382c:	d00a      	beq.n	8003844 <PIN_Setup+0x274>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7a1b      	ldrb	r3, [r3, #8]
 8003832:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003834:	4293      	cmp	r3, r2
 8003836:	d005      	beq.n	8003844 <PIN_Setup+0x274>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7a1b      	ldrb	r3, [r3, #8]
 800383c:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800383e:	4293      	cmp	r3, r2
 8003840:	f040 80fc 	bne.w	8003a3c <PIN_Setup+0x46c>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7a5b      	ldrb	r3, [r3, #9]
 8003848:	2202      	movs	r2, #2
 800384a:	4293      	cmp	r3, r2
 800384c:	d11c      	bne.n	8003888 <PIN_Setup+0x2b8>
 800384e:	2002      	movs	r0, #2
 8003850:	2402      	movs	r4, #2
 8003852:	2500      	movs	r5, #0
 8003854:	2302      	movs	r3, #2
 8003856:	2200      	movs	r2, #0
 8003858:	2107      	movs	r1, #7
 800385a:	9102      	str	r1, [sp, #8]
 800385c:	9201      	str	r2, [sp, #4]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	462b      	mov	r3, r5
 8003862:	4622      	mov	r2, r4
 8003864:	4601      	mov	r1, r0
 8003866:	4804      	ldr	r0, [pc, #16]	@ (8003878 <PIN_Setup+0x2a8>)
 8003868:	f7ff facc 	bl	8002e04 <GPIO_Pin_Init>
 800386c:	e020      	b.n	80038b0 <PIN_Setup+0x2e0>
 800386e:	bf00      	nop
 8003870:	40011000 	.word	0x40011000
 8003874:	2000084c 	.word	0x2000084c
 8003878:	40020000 	.word	0x40020000
 800387c:	40020400 	.word	0x40020400
 8003880:	40004400 	.word	0x40004400
 8003884:	20000850 	.word	0x20000850
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a5b      	ldrb	r3, [r3, #9]
 800388c:	2205      	movs	r2, #5
 800388e:	4293      	cmp	r3, r2
 8003890:	d10e      	bne.n	80038b0 <PIN_Setup+0x2e0>
 8003892:	2005      	movs	r0, #5
 8003894:	2402      	movs	r4, #2
 8003896:	2500      	movs	r5, #0
 8003898:	2302      	movs	r3, #2
 800389a:	2200      	movs	r2, #0
 800389c:	2107      	movs	r1, #7
 800389e:	9102      	str	r1, [sp, #8]
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462b      	mov	r3, r5
 80038a6:	4622      	mov	r2, r4
 80038a8:	4601      	mov	r1, r0
 80038aa:	4899      	ldr	r0, [pc, #612]	@ (8003b10 <PIN_Setup+0x540>)
 80038ac:	f7ff faaa 	bl	8002e04 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7a9b      	ldrb	r3, [r3, #10]
 80038b4:	2203      	movs	r2, #3
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10f      	bne.n	80038da <PIN_Setup+0x30a>
 80038ba:	2003      	movs	r0, #3
 80038bc:	2402      	movs	r4, #2
 80038be:	2500      	movs	r5, #0
 80038c0:	2302      	movs	r3, #2
 80038c2:	2200      	movs	r2, #0
 80038c4:	2107      	movs	r1, #7
 80038c6:	9102      	str	r1, [sp, #8]
 80038c8:	9201      	str	r2, [sp, #4]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	462b      	mov	r3, r5
 80038ce:	4622      	mov	r2, r4
 80038d0:	4601      	mov	r1, r0
 80038d2:	4890      	ldr	r0, [pc, #576]	@ (8003b14 <PIN_Setup+0x544>)
 80038d4:	f7ff fa96 	bl	8002e04 <GPIO_Pin_Init>
 80038d8:	e013      	b.n	8003902 <PIN_Setup+0x332>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7a9b      	ldrb	r3, [r3, #10]
 80038de:	2206      	movs	r2, #6
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10e      	bne.n	8003902 <PIN_Setup+0x332>
 80038e4:	2006      	movs	r0, #6
 80038e6:	2402      	movs	r4, #2
 80038e8:	2500      	movs	r5, #0
 80038ea:	2302      	movs	r3, #2
 80038ec:	2200      	movs	r2, #0
 80038ee:	2107      	movs	r1, #7
 80038f0:	9102      	str	r1, [sp, #8]
 80038f2:	9201      	str	r2, [sp, #4]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	462b      	mov	r3, r5
 80038f8:	4622      	mov	r2, r4
 80038fa:	4601      	mov	r1, r0
 80038fc:	4884      	ldr	r0, [pc, #528]	@ (8003b10 <PIN_Setup+0x540>)
 80038fe:	f7ff fa81 	bl	8002e04 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7a1b      	ldrb	r3, [r3, #8]
 8003906:	2202      	movs	r2, #2
 8003908:	4293      	cmp	r3, r2
 800390a:	d128      	bne.n	800395e <PIN_Setup+0x38e>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7adb      	ldrb	r3, [r3, #11]
 8003910:	2204      	movs	r2, #4
 8003912:	4293      	cmp	r3, r2
 8003914:	d10f      	bne.n	8003936 <PIN_Setup+0x366>
 8003916:	2004      	movs	r0, #4
 8003918:	2402      	movs	r4, #2
 800391a:	2500      	movs	r5, #0
 800391c:	2302      	movs	r3, #2
 800391e:	2200      	movs	r2, #0
 8003920:	2107      	movs	r1, #7
 8003922:	9102      	str	r1, [sp, #8]
 8003924:	9201      	str	r2, [sp, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	462b      	mov	r3, r5
 800392a:	4622      	mov	r2, r4
 800392c:	4601      	mov	r1, r0
 800392e:	4879      	ldr	r0, [pc, #484]	@ (8003b14 <PIN_Setup+0x544>)
 8003930:	f7ff fa68 	bl	8002e04 <GPIO_Pin_Init>
 8003934:	e013      	b.n	800395e <PIN_Setup+0x38e>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7adb      	ldrb	r3, [r3, #11]
 800393a:	2207      	movs	r2, #7
 800393c:	4293      	cmp	r3, r2
 800393e:	d10e      	bne.n	800395e <PIN_Setup+0x38e>
 8003940:	2007      	movs	r0, #7
 8003942:	2402      	movs	r4, #2
 8003944:	2500      	movs	r5, #0
 8003946:	2302      	movs	r3, #2
 8003948:	2200      	movs	r2, #0
 800394a:	2107      	movs	r1, #7
 800394c:	9102      	str	r1, [sp, #8]
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	462b      	mov	r3, r5
 8003954:	4622      	mov	r2, r4
 8003956:	4601      	mov	r1, r0
 8003958:	486e      	ldr	r0, [pc, #440]	@ (8003b14 <PIN_Setup+0x544>)
 800395a:	f7ff fa53 	bl	8002e04 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	7bdb      	ldrb	r3, [r3, #15]
 8003962:	2200      	movs	r2, #0
 8003964:	4293      	cmp	r3, r2
 8003966:	d105      	bne.n	8003974 <PIN_Setup+0x3a4>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7bdb      	ldrb	r3, [r3, #15]
 800396c:	2203      	movs	r2, #3
 800396e:	4293      	cmp	r3, r2
 8003970:	f040 83dd 	bne.w	800412e <PIN_Setup+0xb5e>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7bdb      	ldrb	r3, [r3, #15]
 8003978:	2201      	movs	r2, #1
 800397a:	4293      	cmp	r3, r2
 800397c:	d128      	bne.n	80039d0 <PIN_Setup+0x400>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7adb      	ldrb	r3, [r3, #11]
 8003982:	2200      	movs	r2, #0
 8003984:	4293      	cmp	r3, r2
 8003986:	d10f      	bne.n	80039a8 <PIN_Setup+0x3d8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003988:	2000      	movs	r0, #0
 800398a:	2402      	movs	r4, #2
 800398c:	2500      	movs	r5, #0
 800398e:	2302      	movs	r3, #2
 8003990:	2200      	movs	r2, #0
 8003992:	2107      	movs	r1, #7
 8003994:	9102      	str	r1, [sp, #8]
 8003996:	9201      	str	r2, [sp, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	462b      	mov	r3, r5
 800399c:	4622      	mov	r2, r4
 800399e:	4601      	mov	r1, r0
 80039a0:	485c      	ldr	r0, [pc, #368]	@ (8003b14 <PIN_Setup+0x544>)
 80039a2:	f7ff fa2f 	bl	8002e04 <GPIO_Pin_Init>
 80039a6:	e013      	b.n	80039d0 <PIN_Setup+0x400>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7adb      	ldrb	r3, [r3, #11]
 80039ac:	2203      	movs	r2, #3
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10e      	bne.n	80039d0 <PIN_Setup+0x400>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80039b2:	2003      	movs	r0, #3
 80039b4:	2402      	movs	r4, #2
 80039b6:	2500      	movs	r5, #0
 80039b8:	2302      	movs	r3, #2
 80039ba:	2200      	movs	r2, #0
 80039bc:	2107      	movs	r1, #7
 80039be:	9102      	str	r1, [sp, #8]
 80039c0:	9201      	str	r2, [sp, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	462b      	mov	r3, r5
 80039c6:	4622      	mov	r2, r4
 80039c8:	4601      	mov	r1, r0
 80039ca:	4851      	ldr	r0, [pc, #324]	@ (8003b10 <PIN_Setup+0x540>)
 80039cc:	f7ff fa1a 	bl	8002e04 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7bdb      	ldrb	r3, [r3, #15]
 80039d4:	2202      	movs	r2, #2
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d005      	beq.n	80039e6 <PIN_Setup+0x416>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7bdb      	ldrb	r3, [r3, #15]
 80039de:	2203      	movs	r2, #3
 80039e0:	4293      	cmp	r3, r2
 80039e2:	f040 83a4 	bne.w	800412e <PIN_Setup+0xb5e>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7adb      	ldrb	r3, [r3, #11]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10f      	bne.n	8003a10 <PIN_Setup+0x440>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80039f0:	2001      	movs	r0, #1
 80039f2:	2402      	movs	r4, #2
 80039f4:	2500      	movs	r5, #0
 80039f6:	2302      	movs	r3, #2
 80039f8:	2200      	movs	r2, #0
 80039fa:	2107      	movs	r1, #7
 80039fc:	9102      	str	r1, [sp, #8]
 80039fe:	9201      	str	r2, [sp, #4]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	462b      	mov	r3, r5
 8003a04:	4622      	mov	r2, r4
 8003a06:	4601      	mov	r1, r0
 8003a08:	4842      	ldr	r0, [pc, #264]	@ (8003b14 <PIN_Setup+0x544>)
 8003a0a:	f7ff f9fb 	bl	8002e04 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003a0e:	e38e      	b.n	800412e <PIN_Setup+0xb5e>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7adb      	ldrb	r3, [r3, #11]
 8003a14:	2204      	movs	r2, #4
 8003a16:	4293      	cmp	r3, r2
 8003a18:	f040 8389 	bne.w	800412e <PIN_Setup+0xb5e>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a1c:	2004      	movs	r0, #4
 8003a1e:	2402      	movs	r4, #2
 8003a20:	2500      	movs	r5, #0
 8003a22:	2302      	movs	r3, #2
 8003a24:	2200      	movs	r2, #0
 8003a26:	2107      	movs	r1, #7
 8003a28:	9102      	str	r1, [sp, #8]
 8003a2a:	9201      	str	r2, [sp, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	462b      	mov	r3, r5
 8003a30:	4622      	mov	r2, r4
 8003a32:	4601      	mov	r1, r0
 8003a34:	4836      	ldr	r0, [pc, #216]	@ (8003b10 <PIN_Setup+0x540>)
 8003a36:	f7ff f9e5 	bl	8002e04 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003a3a:	e378      	b.n	800412e <PIN_Setup+0xb5e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7a1b      	ldrb	r3, [r3, #8]
 8003a40:	2206      	movs	r2, #6
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00a      	beq.n	8003a5c <PIN_Setup+0x48c>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7a1b      	ldrb	r3, [r3, #8]
 8003a4a:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d005      	beq.n	8003a5c <PIN_Setup+0x48c>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7a1b      	ldrb	r3, [r3, #8]
 8003a54:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f040 836c 	bne.w	8004134 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7a5b      	ldrb	r3, [r3, #9]
 8003a60:	2202      	movs	r2, #2
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10f      	bne.n	8003a86 <PIN_Setup+0x4b6>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a66:	2002      	movs	r0, #2
 8003a68:	2402      	movs	r4, #2
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2107      	movs	r1, #7
 8003a72:	9102      	str	r1, [sp, #8]
 8003a74:	9201      	str	r2, [sp, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	462b      	mov	r3, r5
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4825      	ldr	r0, [pc, #148]	@ (8003b14 <PIN_Setup+0x544>)
 8003a80:	f7ff f9c0 	bl	8002e04 <GPIO_Pin_Init>
 8003a84:	e013      	b.n	8003aae <PIN_Setup+0x4de>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7a5b      	ldrb	r3, [r3, #9]
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10e      	bne.n	8003aae <PIN_Setup+0x4de>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a90:	2005      	movs	r0, #5
 8003a92:	2402      	movs	r4, #2
 8003a94:	2500      	movs	r5, #0
 8003a96:	2302      	movs	r3, #2
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2107      	movs	r1, #7
 8003a9c:	9102      	str	r1, [sp, #8]
 8003a9e:	9201      	str	r2, [sp, #4]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	4819      	ldr	r0, [pc, #100]	@ (8003b10 <PIN_Setup+0x540>)
 8003aaa:	f7ff f9ab 	bl	8002e04 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7a1b      	ldrb	r3, [r3, #8]
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f040 833d 	bne.w	8004134 <PIN_Setup+0xb64>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7adb      	ldrb	r3, [r3, #11]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10f      	bne.n	8003ae4 <PIN_Setup+0x514>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ac4:	2004      	movs	r0, #4
 8003ac6:	2402      	movs	r4, #2
 8003ac8:	2500      	movs	r5, #0
 8003aca:	2302      	movs	r3, #2
 8003acc:	2200      	movs	r2, #0
 8003ace:	2107      	movs	r1, #7
 8003ad0:	9102      	str	r1, [sp, #8]
 8003ad2:	9201      	str	r2, [sp, #4]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4601      	mov	r1, r0
 8003adc:	480d      	ldr	r0, [pc, #52]	@ (8003b14 <PIN_Setup+0x544>)
 8003ade:	f7ff f991 	bl	8002e04 <GPIO_Pin_Init>
}
 8003ae2:	e327      	b.n	8004134 <PIN_Setup+0xb64>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7adb      	ldrb	r3, [r3, #11]
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f040 8322 	bne.w	8004134 <PIN_Setup+0xb64>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003af0:	2007      	movs	r0, #7
 8003af2:	2402      	movs	r4, #2
 8003af4:	2500      	movs	r5, #0
 8003af6:	2302      	movs	r3, #2
 8003af8:	2200      	movs	r2, #0
 8003afa:	2107      	movs	r1, #7
 8003afc:	9102      	str	r1, [sp, #8]
 8003afe:	9201      	str	r2, [sp, #4]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	462b      	mov	r3, r5
 8003b04:	4622      	mov	r2, r4
 8003b06:	4601      	mov	r1, r0
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <PIN_Setup+0x544>)
 8003b0a:	f7ff f97b 	bl	8002e04 <GPIO_Pin_Init>
}
 8003b0e:	e311      	b.n	8004134 <PIN_Setup+0xb64>
 8003b10:	40020c00 	.word	0x40020c00
 8003b14:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a9a      	ldr	r2, [pc, #616]	@ (8003d88 <PIN_Setup+0x7b8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	f040 81b5 	bne.w	8003e8e <PIN_Setup+0x8be>
		__usart_3_config__ = config;
 8003b24:	4a99      	ldr	r2, [pc, #612]	@ (8003d8c <PIN_Setup+0x7bc>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7a1b      	ldrb	r3, [r3, #8]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00f      	beq.n	8003b54 <PIN_Setup+0x584>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7a1b      	ldrb	r3, [r3, #8]
 8003b38:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00a      	beq.n	8003b54 <PIN_Setup+0x584>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7a1b      	ldrb	r3, [r3, #8]
 8003b42:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d005      	beq.n	8003b54 <PIN_Setup+0x584>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7a1b      	ldrb	r3, [r3, #8]
 8003b4c:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f040 8124 	bne.w	8003d9c <PIN_Setup+0x7cc>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7a5b      	ldrb	r3, [r3, #9]
 8003b58:	220b      	movs	r2, #11
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10f      	bne.n	8003b7e <PIN_Setup+0x5ae>
 8003b5e:	200b      	movs	r0, #11
 8003b60:	2402      	movs	r4, #2
 8003b62:	2500      	movs	r5, #0
 8003b64:	2302      	movs	r3, #2
 8003b66:	2200      	movs	r2, #0
 8003b68:	2107      	movs	r1, #7
 8003b6a:	9102      	str	r1, [sp, #8]
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	462b      	mov	r3, r5
 8003b72:	4622      	mov	r2, r4
 8003b74:	4601      	mov	r1, r0
 8003b76:	4886      	ldr	r0, [pc, #536]	@ (8003d90 <PIN_Setup+0x7c0>)
 8003b78:	f7ff f944 	bl	8002e04 <GPIO_Pin_Init>
 8003b7c:	e028      	b.n	8003bd0 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7a5b      	ldrb	r3, [r3, #9]
 8003b82:	220a      	movs	r2, #10
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10f      	bne.n	8003ba8 <PIN_Setup+0x5d8>
 8003b88:	200a      	movs	r0, #10
 8003b8a:	2402      	movs	r4, #2
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	2302      	movs	r3, #2
 8003b90:	2200      	movs	r2, #0
 8003b92:	2107      	movs	r1, #7
 8003b94:	9102      	str	r1, [sp, #8]
 8003b96:	9201      	str	r2, [sp, #4]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	487c      	ldr	r0, [pc, #496]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003ba2:	f7ff f92f 	bl	8002e04 <GPIO_Pin_Init>
 8003ba6:	e013      	b.n	8003bd0 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7a5b      	ldrb	r3, [r3, #9]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10e      	bne.n	8003bd0 <PIN_Setup+0x600>
 8003bb2:	2008      	movs	r0, #8
 8003bb4:	2402      	movs	r4, #2
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	2302      	movs	r3, #2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2107      	movs	r1, #7
 8003bbe:	9102      	str	r1, [sp, #8]
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	4601      	mov	r1, r0
 8003bca:	4872      	ldr	r0, [pc, #456]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003bcc:	f7ff f91a 	bl	8002e04 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7a9b      	ldrb	r3, [r3, #10]
 8003bd4:	220a      	movs	r2, #10
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10f      	bne.n	8003bfa <PIN_Setup+0x62a>
 8003bda:	200a      	movs	r0, #10
 8003bdc:	2402      	movs	r4, #2
 8003bde:	2500      	movs	r5, #0
 8003be0:	2302      	movs	r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	2107      	movs	r1, #7
 8003be6:	9102      	str	r1, [sp, #8]
 8003be8:	9201      	str	r2, [sp, #4]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	462b      	mov	r3, r5
 8003bee:	4622      	mov	r2, r4
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4867      	ldr	r0, [pc, #412]	@ (8003d90 <PIN_Setup+0x7c0>)
 8003bf4:	f7ff f906 	bl	8002e04 <GPIO_Pin_Init>
 8003bf8:	e028      	b.n	8003c4c <PIN_Setup+0x67c>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7a9b      	ldrb	r3, [r3, #10]
 8003bfe:	220b      	movs	r2, #11
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10f      	bne.n	8003c24 <PIN_Setup+0x654>
 8003c04:	200b      	movs	r0, #11
 8003c06:	2402      	movs	r4, #2
 8003c08:	2500      	movs	r5, #0
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2107      	movs	r1, #7
 8003c10:	9102      	str	r1, [sp, #8]
 8003c12:	9201      	str	r2, [sp, #4]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	462b      	mov	r3, r5
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	485d      	ldr	r0, [pc, #372]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003c1e:	f7ff f8f1 	bl	8002e04 <GPIO_Pin_Init>
 8003c22:	e013      	b.n	8003c4c <PIN_Setup+0x67c>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7a5b      	ldrb	r3, [r3, #9]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10e      	bne.n	8003c4c <PIN_Setup+0x67c>
 8003c2e:	2008      	movs	r0, #8
 8003c30:	2402      	movs	r4, #2
 8003c32:	2500      	movs	r5, #0
 8003c34:	2302      	movs	r3, #2
 8003c36:	2200      	movs	r2, #0
 8003c38:	2107      	movs	r1, #7
 8003c3a:	9102      	str	r1, [sp, #8]
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462b      	mov	r3, r5
 8003c42:	4622      	mov	r2, r4
 8003c44:	4601      	mov	r1, r0
 8003c46:	4853      	ldr	r0, [pc, #332]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003c48:	f7ff f8dc 	bl	8002e04 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7a1b      	ldrb	r3, [r3, #8]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d128      	bne.n	8003ca8 <PIN_Setup+0x6d8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7adb      	ldrb	r3, [r3, #11]
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10f      	bne.n	8003c80 <PIN_Setup+0x6b0>
 8003c60:	200c      	movs	r0, #12
 8003c62:	2402      	movs	r4, #2
 8003c64:	2500      	movs	r5, #0
 8003c66:	2302      	movs	r3, #2
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2107      	movs	r1, #7
 8003c6c:	9102      	str	r1, [sp, #8]
 8003c6e:	9201      	str	r2, [sp, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	462b      	mov	r3, r5
 8003c74:	4622      	mov	r2, r4
 8003c76:	4601      	mov	r1, r0
 8003c78:	4846      	ldr	r0, [pc, #280]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003c7a:	f7ff f8c3 	bl	8002e04 <GPIO_Pin_Init>
 8003c7e:	e013      	b.n	8003ca8 <PIN_Setup+0x6d8>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7adb      	ldrb	r3, [r3, #11]
 8003c84:	220a      	movs	r2, #10
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10e      	bne.n	8003ca8 <PIN_Setup+0x6d8>
 8003c8a:	200a      	movs	r0, #10
 8003c8c:	2402      	movs	r4, #2
 8003c8e:	2500      	movs	r5, #0
 8003c90:	2302      	movs	r3, #2
 8003c92:	2200      	movs	r2, #0
 8003c94:	2107      	movs	r1, #7
 8003c96:	9102      	str	r1, [sp, #8]
 8003c98:	9201      	str	r2, [sp, #4]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	483d      	ldr	r0, [pc, #244]	@ (8003d98 <PIN_Setup+0x7c8>)
 8003ca4:	f7ff f8ae 	bl	8002e04 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	7bdb      	ldrb	r3, [r3, #15]
 8003cac:	2200      	movs	r2, #0
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f000 823f 	beq.w	8004132 <PIN_Setup+0xb62>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7bdb      	ldrb	r3, [r3, #15]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <PIN_Setup+0x6f8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7bdb      	ldrb	r3, [r3, #15]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d128      	bne.n	8003d1a <PIN_Setup+0x74a>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7adb      	ldrb	r3, [r3, #11]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10f      	bne.n	8003cf2 <PIN_Setup+0x722>
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	2402      	movs	r4, #2
 8003cd6:	2500      	movs	r5, #0
 8003cd8:	2302      	movs	r3, #2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2107      	movs	r1, #7
 8003cde:	9102      	str	r1, [sp, #8]
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4601      	mov	r1, r0
 8003cea:	482a      	ldr	r0, [pc, #168]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003cec:	f7ff f88a 	bl	8002e04 <GPIO_Pin_Init>
 8003cf0:	e013      	b.n	8003d1a <PIN_Setup+0x74a>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7adb      	ldrb	r3, [r3, #11]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10e      	bne.n	8003d1a <PIN_Setup+0x74a>
 8003cfc:	2003      	movs	r0, #3
 8003cfe:	2402      	movs	r4, #2
 8003d00:	2500      	movs	r5, #0
 8003d02:	2302      	movs	r3, #2
 8003d04:	2200      	movs	r2, #0
 8003d06:	2107      	movs	r1, #7
 8003d08:	9102      	str	r1, [sp, #8]
 8003d0a:	9201      	str	r2, [sp, #4]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462b      	mov	r3, r5
 8003d10:	4622      	mov	r2, r4
 8003d12:	4601      	mov	r1, r0
 8003d14:	4820      	ldr	r0, [pc, #128]	@ (8003d98 <PIN_Setup+0x7c8>)
 8003d16:	f7ff f875 	bl	8002e04 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7bdb      	ldrb	r3, [r3, #15]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d005      	beq.n	8003d30 <PIN_Setup+0x760>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7bdb      	ldrb	r3, [r3, #15]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f040 8201 	bne.w	8004132 <PIN_Setup+0xb62>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7adb      	ldrb	r3, [r3, #11]
 8003d34:	2201      	movs	r2, #1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10f      	bne.n	8003d5a <PIN_Setup+0x78a>
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	2402      	movs	r4, #2
 8003d3e:	2500      	movs	r5, #0
 8003d40:	2302      	movs	r3, #2
 8003d42:	2200      	movs	r2, #0
 8003d44:	2107      	movs	r1, #7
 8003d46:	9102      	str	r1, [sp, #8]
 8003d48:	9201      	str	r2, [sp, #4]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4601      	mov	r1, r0
 8003d52:	4810      	ldr	r0, [pc, #64]	@ (8003d94 <PIN_Setup+0x7c4>)
 8003d54:	f7ff f856 	bl	8002e04 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003d58:	e1eb      	b.n	8004132 <PIN_Setup+0xb62>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7adb      	ldrb	r3, [r3, #11]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	4293      	cmp	r3, r2
 8003d62:	f040 81e6 	bne.w	8004132 <PIN_Setup+0xb62>
 8003d66:	2004      	movs	r0, #4
 8003d68:	2402      	movs	r4, #2
 8003d6a:	2500      	movs	r5, #0
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2107      	movs	r1, #7
 8003d72:	9102      	str	r1, [sp, #8]
 8003d74:	9201      	str	r2, [sp, #4]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	462b      	mov	r3, r5
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	4806      	ldr	r0, [pc, #24]	@ (8003d98 <PIN_Setup+0x7c8>)
 8003d80:	f7ff f840 	bl	8002e04 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003d84:	e1d5      	b.n	8004132 <PIN_Setup+0xb62>
 8003d86:	bf00      	nop
 8003d88:	40004800 	.word	0x40004800
 8003d8c:	20000854 	.word	0x20000854
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020c00 	.word	0x40020c00
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7a1b      	ldrb	r3, [r3, #8]
 8003da0:	2206      	movs	r2, #6
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00a      	beq.n	8003dbc <PIN_Setup+0x7ec>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7a1b      	ldrb	r3, [r3, #8]
 8003daa:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d005      	beq.n	8003dbc <PIN_Setup+0x7ec>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	7a1b      	ldrb	r3, [r3, #8]
 8003db4:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003db6:	4293      	cmp	r3, r2
 8003db8:	f040 81bc 	bne.w	8004134 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7a5b      	ldrb	r3, [r3, #9]
 8003dc0:	220b      	movs	r2, #11
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10f      	bne.n	8003de6 <PIN_Setup+0x816>
 8003dc6:	200b      	movs	r0, #11
 8003dc8:	2402      	movs	r4, #2
 8003dca:	2500      	movs	r5, #0
 8003dcc:	2302      	movs	r3, #2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2107      	movs	r1, #7
 8003dd2:	9102      	str	r1, [sp, #8]
 8003dd4:	9201      	str	r2, [sp, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	462b      	mov	r3, r5
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4883      	ldr	r0, [pc, #524]	@ (8003fec <PIN_Setup+0xa1c>)
 8003de0:	f7ff f810 	bl	8002e04 <GPIO_Pin_Init>
 8003de4:	e028      	b.n	8003e38 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a5b      	ldrb	r3, [r3, #9]
 8003dea:	220a      	movs	r2, #10
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10f      	bne.n	8003e10 <PIN_Setup+0x840>
 8003df0:	200a      	movs	r0, #10
 8003df2:	2402      	movs	r4, #2
 8003df4:	2500      	movs	r5, #0
 8003df6:	2302      	movs	r3, #2
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2107      	movs	r1, #7
 8003dfc:	9102      	str	r1, [sp, #8]
 8003dfe:	9201      	str	r2, [sp, #4]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	462b      	mov	r3, r5
 8003e04:	4622      	mov	r2, r4
 8003e06:	4601      	mov	r1, r0
 8003e08:	4879      	ldr	r0, [pc, #484]	@ (8003ff0 <PIN_Setup+0xa20>)
 8003e0a:	f7fe fffb 	bl	8002e04 <GPIO_Pin_Init>
 8003e0e:	e013      	b.n	8003e38 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a5b      	ldrb	r3, [r3, #9]
 8003e14:	2208      	movs	r2, #8
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10e      	bne.n	8003e38 <PIN_Setup+0x868>
 8003e1a:	2008      	movs	r0, #8
 8003e1c:	2402      	movs	r4, #2
 8003e1e:	2500      	movs	r5, #0
 8003e20:	2302      	movs	r3, #2
 8003e22:	2200      	movs	r2, #0
 8003e24:	2107      	movs	r1, #7
 8003e26:	9102      	str	r1, [sp, #8]
 8003e28:	9201      	str	r2, [sp, #4]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	4622      	mov	r2, r4
 8003e30:	4601      	mov	r1, r0
 8003e32:	486f      	ldr	r0, [pc, #444]	@ (8003ff0 <PIN_Setup+0xa20>)
 8003e34:	f7fe ffe6 	bl	8002e04 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7adb      	ldrb	r3, [r3, #11]
 8003e3c:	220c      	movs	r2, #12
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10f      	bne.n	8003e62 <PIN_Setup+0x892>
 8003e42:	200c      	movs	r0, #12
 8003e44:	2402      	movs	r4, #2
 8003e46:	2500      	movs	r5, #0
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2107      	movs	r1, #7
 8003e4e:	9102      	str	r1, [sp, #8]
 8003e50:	9201      	str	r2, [sp, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	462b      	mov	r3, r5
 8003e56:	4622      	mov	r2, r4
 8003e58:	4601      	mov	r1, r0
 8003e5a:	4865      	ldr	r0, [pc, #404]	@ (8003ff0 <PIN_Setup+0xa20>)
 8003e5c:	f7fe ffd2 	bl	8002e04 <GPIO_Pin_Init>
}
 8003e60:	e168      	b.n	8004134 <PIN_Setup+0xb64>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7adb      	ldrb	r3, [r3, #11]
 8003e66:	220a      	movs	r2, #10
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	f040 8163 	bne.w	8004134 <PIN_Setup+0xb64>
 8003e6e:	200a      	movs	r0, #10
 8003e70:	2402      	movs	r4, #2
 8003e72:	2500      	movs	r5, #0
 8003e74:	2302      	movs	r3, #2
 8003e76:	2200      	movs	r2, #0
 8003e78:	2107      	movs	r1, #7
 8003e7a:	9102      	str	r1, [sp, #8]
 8003e7c:	9201      	str	r2, [sp, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462b      	mov	r3, r5
 8003e82:	4622      	mov	r2, r4
 8003e84:	4601      	mov	r1, r0
 8003e86:	485b      	ldr	r0, [pc, #364]	@ (8003ff4 <PIN_Setup+0xa24>)
 8003e88:	f7fe ffbc 	bl	8002e04 <GPIO_Pin_Init>
}
 8003e8c:	e152      	b.n	8004134 <PIN_Setup+0xb64>
	else if(config -> Port == UART4)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a59      	ldr	r2, [pc, #356]	@ (8003ff8 <PIN_Setup+0xa28>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d166      	bne.n	8003f66 <PIN_Setup+0x996>
		__usart_4_config__ = config;
 8003e98:	4a58      	ldr	r2, [pc, #352]	@ (8003ffc <PIN_Setup+0xa2c>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7a1b      	ldrb	r3, [r3, #8]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00a      	beq.n	8003ebe <PIN_Setup+0x8ee>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7a1b      	ldrb	r3, [r3, #8]
 8003eac:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d005      	beq.n	8003ebe <PIN_Setup+0x8ee>
		   (config->mode == USART_Configuration.Mode.LIN))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7a1b      	ldrb	r3, [r3, #8]
 8003eb6:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	f040 813b 	bne.w	8004134 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7a5b      	ldrb	r3, [r3, #9]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d10f      	bne.n	8003ee8 <PIN_Setup+0x918>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	2402      	movs	r4, #2
 8003ecc:	2500      	movs	r5, #0
 8003ece:	2302      	movs	r3, #2
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	9102      	str	r1, [sp, #8]
 8003ed6:	9201      	str	r2, [sp, #4]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	462b      	mov	r3, r5
 8003edc:	4622      	mov	r2, r4
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4842      	ldr	r0, [pc, #264]	@ (8003fec <PIN_Setup+0xa1c>)
 8003ee2:	f7fe ff8f 	bl	8002e04 <GPIO_Pin_Init>
 8003ee6:	e013      	b.n	8003f10 <PIN_Setup+0x940>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7a5b      	ldrb	r3, [r3, #9]
 8003eec:	220a      	movs	r2, #10
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10e      	bne.n	8003f10 <PIN_Setup+0x940>
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	2402      	movs	r4, #2
 8003ef6:	2500      	movs	r5, #0
 8003ef8:	2302      	movs	r3, #2
 8003efa:	2200      	movs	r2, #0
 8003efc:	2108      	movs	r1, #8
 8003efe:	9102      	str	r1, [sp, #8]
 8003f00:	9201      	str	r2, [sp, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	462b      	mov	r3, r5
 8003f06:	4622      	mov	r2, r4
 8003f08:	4601      	mov	r1, r0
 8003f0a:	483d      	ldr	r0, [pc, #244]	@ (8004000 <PIN_Setup+0xa30>)
 8003f0c:	f7fe ff7a 	bl	8002e04 <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7a9b      	ldrb	r3, [r3, #10]
 8003f14:	2201      	movs	r2, #1
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10f      	bne.n	8003f3a <PIN_Setup+0x96a>
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	2402      	movs	r4, #2
 8003f1e:	2500      	movs	r5, #0
 8003f20:	2302      	movs	r3, #2
 8003f22:	2200      	movs	r2, #0
 8003f24:	2108      	movs	r1, #8
 8003f26:	9102      	str	r1, [sp, #8]
 8003f28:	9201      	str	r2, [sp, #4]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	4622      	mov	r2, r4
 8003f30:	4601      	mov	r1, r0
 8003f32:	482e      	ldr	r0, [pc, #184]	@ (8003fec <PIN_Setup+0xa1c>)
 8003f34:	f7fe ff66 	bl	8002e04 <GPIO_Pin_Init>
}
 8003f38:	e0fc      	b.n	8004134 <PIN_Setup+0xb64>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7a9b      	ldrb	r3, [r3, #10]
 8003f3e:	220b      	movs	r2, #11
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 80f7 	bne.w	8004134 <PIN_Setup+0xb64>
 8003f46:	200b      	movs	r0, #11
 8003f48:	2402      	movs	r4, #2
 8003f4a:	2500      	movs	r5, #0
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2108      	movs	r1, #8
 8003f52:	9102      	str	r1, [sp, #8]
 8003f54:	9201      	str	r2, [sp, #4]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	462b      	mov	r3, r5
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	4828      	ldr	r0, [pc, #160]	@ (8004000 <PIN_Setup+0xa30>)
 8003f60:	f7fe ff50 	bl	8002e04 <GPIO_Pin_Init>
}
 8003f64:	e0e6      	b.n	8004134 <PIN_Setup+0xb64>
	else if(config -> Port == UART5)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <PIN_Setup+0xa34>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d14d      	bne.n	800400c <PIN_Setup+0xa3c>
		__usart_5_config__ = config;
 8003f70:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <PIN_Setup+0xa38>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7a1b      	ldrb	r3, [r3, #8]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00a      	beq.n	8003f96 <PIN_Setup+0x9c6>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7a1b      	ldrb	r3, [r3, #8]
 8003f84:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d005      	beq.n	8003f96 <PIN_Setup+0x9c6>
		   (config->mode == USART_Configuration.Mode.LIN))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7a1b      	ldrb	r3, [r3, #8]
 8003f8e:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f040 80cf 	bne.w	8004134 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7a5b      	ldrb	r3, [r3, #9]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10e      	bne.n	8003fbe <PIN_Setup+0x9ee>
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	2402      	movs	r4, #2
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2108      	movs	r1, #8
 8003fac:	9102      	str	r1, [sp, #8]
 8003fae:	9201      	str	r2, [sp, #4]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	480c      	ldr	r0, [pc, #48]	@ (8003fec <PIN_Setup+0xa1c>)
 8003fba:	f7fe ff23 	bl	8002e04 <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7a9b      	ldrb	r3, [r3, #10]
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 80b5 	bne.w	8004134 <PIN_Setup+0xb64>
 8003fca:	200c      	movs	r0, #12
 8003fcc:	2402      	movs	r4, #2
 8003fce:	2500      	movs	r5, #0
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2108      	movs	r1, #8
 8003fd6:	9102      	str	r1, [sp, #8]
 8003fd8:	9201      	str	r2, [sp, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	462b      	mov	r3, r5
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4601      	mov	r1, r0
 8003fe2:	4802      	ldr	r0, [pc, #8]	@ (8003fec <PIN_Setup+0xa1c>)
 8003fe4:	f7fe ff0e 	bl	8002e04 <GPIO_Pin_Init>
}
 8003fe8:	e0a4      	b.n	8004134 <PIN_Setup+0xb64>
 8003fea:	bf00      	nop
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020c00 	.word	0x40020c00
 8003ff8:	40004c00 	.word	0x40004c00
 8003ffc:	20000858 	.word	0x20000858
 8004000:	40020800 	.word	0x40020800
 8004004:	40005000 	.word	0x40005000
 8004008:	2000085c 	.word	0x2000085c
	else if(config->Port == USART6)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a4a      	ldr	r2, [pc, #296]	@ (800413c <PIN_Setup+0xb6c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	f040 808e 	bne.w	8004134 <PIN_Setup+0xb64>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7a1b      	ldrb	r3, [r3, #8]
 800401c:	2201      	movs	r2, #1
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <PIN_Setup+0xa70>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7a1b      	ldrb	r3, [r3, #8]
 8004026:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <PIN_Setup+0xa70>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7a1b      	ldrb	r3, [r3, #8]
 8004030:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <PIN_Setup+0xa70>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7a1b      	ldrb	r3, [r3, #8]
 800403a:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800403c:	4293      	cmp	r3, r2
 800403e:	d13c      	bne.n	80040ba <PIN_Setup+0xaea>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7a5b      	ldrb	r3, [r3, #9]
 8004044:	2206      	movs	r2, #6
 8004046:	4293      	cmp	r3, r2
 8004048:	d10e      	bne.n	8004068 <PIN_Setup+0xa98>
 800404a:	2006      	movs	r0, #6
 800404c:	2402      	movs	r4, #2
 800404e:	2500      	movs	r5, #0
 8004050:	2302      	movs	r3, #2
 8004052:	2200      	movs	r2, #0
 8004054:	2108      	movs	r1, #8
 8004056:	9102      	str	r1, [sp, #8]
 8004058:	9201      	str	r2, [sp, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	462b      	mov	r3, r5
 800405e:	4622      	mov	r2, r4
 8004060:	4601      	mov	r1, r0
 8004062:	4837      	ldr	r0, [pc, #220]	@ (8004140 <PIN_Setup+0xb70>)
 8004064:	f7fe fece 	bl	8002e04 <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7a9b      	ldrb	r3, [r3, #10]
 800406c:	2207      	movs	r2, #7
 800406e:	4293      	cmp	r3, r2
 8004070:	d10e      	bne.n	8004090 <PIN_Setup+0xac0>
 8004072:	2007      	movs	r0, #7
 8004074:	2402      	movs	r4, #2
 8004076:	2500      	movs	r5, #0
 8004078:	2302      	movs	r3, #2
 800407a:	2200      	movs	r2, #0
 800407c:	2108      	movs	r1, #8
 800407e:	9102      	str	r1, [sp, #8]
 8004080:	9201      	str	r2, [sp, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	462b      	mov	r3, r5
 8004086:	4622      	mov	r2, r4
 8004088:	4601      	mov	r1, r0
 800408a:	482d      	ldr	r0, [pc, #180]	@ (8004140 <PIN_Setup+0xb70>)
 800408c:	f7fe feba 	bl	8002e04 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7adb      	ldrb	r3, [r3, #11]
 8004094:	2208      	movs	r2, #8
 8004096:	4293      	cmp	r3, r2
 8004098:	d14c      	bne.n	8004134 <PIN_Setup+0xb64>
 800409a:	2008      	movs	r0, #8
 800409c:	2402      	movs	r4, #2
 800409e:	2500      	movs	r5, #0
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	2108      	movs	r1, #8
 80040a6:	9102      	str	r1, [sp, #8]
 80040a8:	9201      	str	r2, [sp, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	462b      	mov	r3, r5
 80040ae:	4622      	mov	r2, r4
 80040b0:	4601      	mov	r1, r0
 80040b2:	4823      	ldr	r0, [pc, #140]	@ (8004140 <PIN_Setup+0xb70>)
 80040b4:	f7fe fea6 	bl	8002e04 <GPIO_Pin_Init>
 80040b8:	e03c      	b.n	8004134 <PIN_Setup+0xb64>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7a1b      	ldrb	r3, [r3, #8]
 80040be:	2206      	movs	r2, #6
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <PIN_Setup+0xb08>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7a1b      	ldrb	r3, [r3, #8]
 80040c8:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <PIN_Setup+0xb08>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7a1b      	ldrb	r3, [r3, #8]
 80040d2:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d12d      	bne.n	8004134 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7a5b      	ldrb	r3, [r3, #9]
 80040dc:	2206      	movs	r2, #6
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10e      	bne.n	8004100 <PIN_Setup+0xb30>
 80040e2:	2006      	movs	r0, #6
 80040e4:	2402      	movs	r4, #2
 80040e6:	2500      	movs	r5, #0
 80040e8:	2302      	movs	r3, #2
 80040ea:	2200      	movs	r2, #0
 80040ec:	2108      	movs	r1, #8
 80040ee:	9102      	str	r1, [sp, #8]
 80040f0:	9201      	str	r2, [sp, #4]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	462b      	mov	r3, r5
 80040f6:	4622      	mov	r2, r4
 80040f8:	4601      	mov	r1, r0
 80040fa:	4812      	ldr	r0, [pc, #72]	@ (8004144 <PIN_Setup+0xb74>)
 80040fc:	f7fe fe82 	bl	8002e04 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7a1b      	ldrb	r3, [r3, #8]
 8004104:	2207      	movs	r2, #7
 8004106:	4293      	cmp	r3, r2
 8004108:	d114      	bne.n	8004134 <PIN_Setup+0xb64>
 800410a:	2008      	movs	r0, #8
 800410c:	2402      	movs	r4, #2
 800410e:	2500      	movs	r5, #0
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	2108      	movs	r1, #8
 8004116:	9102      	str	r1, [sp, #8]
 8004118:	9201      	str	r2, [sp, #4]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	462b      	mov	r3, r5
 800411e:	4622      	mov	r2, r4
 8004120:	4601      	mov	r1, r0
 8004122:	4808      	ldr	r0, [pc, #32]	@ (8004144 <PIN_Setup+0xb74>)
 8004124:	f7fe fe6e 	bl	8002e04 <GPIO_Pin_Init>
}
 8004128:	e004      	b.n	8004134 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <PIN_Setup+0xb64>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004132:	bf00      	nop
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}
 800413c:	40011400 	.word	0x40011400
 8004140:	40020800 	.word	0x40020800
 8004144:	40020000 	.word	0x40020000

08004148 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 8004148:	b5b0      	push	{r4, r5, r7, lr}
 800414a:	b08e      	sub	sp, #56	@ 0x38
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff f9d9 	bl	8003508 <USART_Clock_Enable>
	PIN_Setup(config);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fa3a 	bl	80035d0 <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff f973 	bl	8003448 <USART_Get_Instance_Number>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	4b71      	ldr	r3, [pc, #452]	@ (800432c <USART_Init+0x1e4>)
 8004168:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 800416a:	4b70      	ldr	r3, [pc, #448]	@ (800432c <USART_Init+0x1e4>)
 800416c:	f993 3000 	ldrsb.w	r3, [r3]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d103      	bne.n	800417e <USART_Init+0x36>
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	f000 bc3a 	b.w	80049f2 <USART_Init+0x8aa>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if(config -> Port == USART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6b      	ldr	r2, [pc, #428]	@ (8004330 <USART_Init+0x1e8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d14f      	bne.n	8004228 <USART_Init+0xe0>
	{
		int32_t freq = SystemAPB2_Clock_Speed();
 8004188:	f7fe ff2c 	bl	8002fe4 <SystemAPB2_Clock_Speed>
 800418c:	61f8      	str	r0, [r7, #28]
		 brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 800418e:	69f8      	ldr	r0, [r7, #28]
 8004190:	f7fc f9c8 	bl	8000524 <__aeabi_i2d>
 8004194:	4604      	mov	r4, r0
 8004196:	460d      	mov	r5, r1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc f9b1 	bl	8000504 <__aeabi_ui2d>
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <USART_Init+0x1ec>)
 80041a8:	f7fc fa26 	bl	80005f8 <__aeabi_dmul>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4620      	mov	r0, r4
 80041b2:	4629      	mov	r1, r5
 80041b4:	f7fc fb4a 	bl	800084c <__aeabi_ddiv>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

		 separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80041c0:	f107 0208 	add.w	r2, r7, #8
 80041c4:	f107 0310 	add.w	r3, r7, #16
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	ed97 0b08 	vldr	d0, [r7, #32]
 80041d0:	f7fe ff20 	bl	8003014 <separateFractionAndIntegral>
		 div_frac_1 = (int)(ceil(div_frac*16.0));
 80041d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <USART_Init+0x1f0>)
 80041de:	f7fc fa0b 	bl	80005f8 <__aeabi_dmul>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	ec43 2b17 	vmov	d7, r2, r3
 80041ea:	eeb0 0a47 	vmov.f32	s0, s14
 80041ee:	eef0 0a67 	vmov.f32	s1, s15
 80041f2:	f005 fb9d 	bl	8009930 <ceil>
 80041f6:	ec53 2b10 	vmov	r2, r3, d0
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f7fc fcab 	bl	8000b58 <__aeabi_d2iz>
 8004202:	4603      	mov	r3, r0
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
		 mantissa_1 = (int)(ceil(mantissa));
 8004206:	ed97 7b02 	vldr	d7, [r7, #8]
 800420a:	eeb0 0a47 	vmov.f32	s0, s14
 800420e:	eef0 0a67 	vmov.f32	s1, s15
 8004212:	f005 fb8d 	bl	8009930 <ceil>
 8004216:	ec53 2b10 	vmov	r2, r3, d0
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fc9b 	bl	8000b58 <__aeabi_d2iz>
 8004222:	4603      	mov	r3, r0
 8004224:	633b      	str	r3, [r7, #48]	@ 0x30
 8004226:	e04e      	b.n	80042c6 <USART_Init+0x17e>
	}
	else
	{
		int32_t freq = SystemAPB2_Clock_Speed();
 8004228:	f7fe fedc 	bl	8002fe4 <SystemAPB2_Clock_Speed>
 800422c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		 brr = (freq/ (2 * 16.0 * 2.0 * (double)(config->baudrate)));
 800422e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004230:	f7fc f978 	bl	8000524 <__aeabi_i2d>
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f961 	bl	8000504 <__aeabi_ui2d>
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <USART_Init+0x1f4>)
 8004248:	f7fc f9d6 	bl	80005f8 <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fc fafa 	bl	800084c <__aeabi_ddiv>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9c7 2308 	strd	r2, r3, [r7, #32]

		 separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8004260:	f107 0208 	add.w	r2, r7, #8
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	ed97 0b08 	vldr	d0, [r7, #32]
 8004270:	f7fe fed0 	bl	8003014 <separateFractionAndIntegral>
		 div_frac_1 = (int)(ceil(div_frac*16.0));
 8004274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	4b2e      	ldr	r3, [pc, #184]	@ (8004338 <USART_Init+0x1f0>)
 800427e:	f7fc f9bb 	bl	80005f8 <__aeabi_dmul>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	ec43 2b17 	vmov	d7, r2, r3
 800428a:	eeb0 0a47 	vmov.f32	s0, s14
 800428e:	eef0 0a67 	vmov.f32	s1, s15
 8004292:	f005 fb4d 	bl	8009930 <ceil>
 8004296:	ec53 2b10 	vmov	r2, r3, d0
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	f7fc fc5b 	bl	8000b58 <__aeabi_d2iz>
 80042a2:	4603      	mov	r3, r0
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
		 mantissa_1 = (int)(ceil(mantissa));
 80042a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80042aa:	eeb0 0a47 	vmov.f32	s0, s14
 80042ae:	eef0 0a67 	vmov.f32	s1, s15
 80042b2:	f005 fb3d 	bl	8009930 <ceil>
 80042b6:	ec53 2b10 	vmov	r2, r3, d0
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f7fc fc4b 	bl	8000b58 <__aeabi_d2iz>
 80042c2:	4603      	mov	r3, r0
 80042c4:	633b      	str	r3, [r7, #48]	@ 0x30
	}




	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7c9b      	ldrb	r3, [r3, #18]
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7b9b      	ldrb	r3, [r3, #14]
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d125      	bne.n	8004340 <USART_Init+0x1f8>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004302:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004312:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6153      	str	r3, [r2, #20]
 8004328:	e0c9      	b.n	80044be <USART_Init+0x376>
 800432a:	bf00      	nop
 800432c:	20000848 	.word	0x20000848
 8004330:	40011000 	.word	0x40011000
 8004334:	40400000 	.word	0x40400000
 8004338:	40300000 	.word	0x40300000
 800433c:	40500000 	.word	0x40500000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7b9b      	ldrb	r3, [r3, #14]
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800434a:	4013      	ands	r3, r2
 800434c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004350:	4293      	cmp	r3, r2
 8004352:	d107      	bne.n	8004364 <USART_Init+0x21c>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004362:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7b9b      	ldrb	r3, [r3, #14]
 8004368:	461a      	mov	r2, r3
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	4013      	ands	r3, r2
 800436e:	2280      	movs	r2, #128	@ 0x80
 8004370:	4293      	cmp	r3, r2
 8004372:	d107      	bne.n	8004384 <USART_Init+0x23c>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004382:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7b9b      	ldrb	r3, [r3, #14]
 8004388:	461a      	mov	r2, r3
 800438a:	2340      	movs	r3, #64	@ 0x40
 800438c:	4013      	ands	r3, r2
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	4293      	cmp	r3, r2
 8004392:	d107      	bne.n	80043a4 <USART_Init+0x25c>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043a2:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7b9b      	ldrb	r3, [r3, #14]
 80043a8:	461a      	mov	r2, r3
 80043aa:	2320      	movs	r3, #32
 80043ac:	4013      	ands	r3, r2
 80043ae:	2220      	movs	r2, #32
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d107      	bne.n	80043c4 <USART_Init+0x27c>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7b9b      	ldrb	r3, [r3, #14]
 80043c8:	461a      	mov	r2, r3
 80043ca:	2310      	movs	r3, #16
 80043cc:	4013      	ands	r3, r2
 80043ce:	2210      	movs	r2, #16
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d107      	bne.n	80043e4 <USART_Init+0x29c>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0210 	orr.w	r2, r2, #16
 80043e2:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	7b9b      	ldrb	r3, [r3, #14]
 80043e8:	461a      	mov	r2, r3
 80043ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043ee:	4013      	ands	r3, r2
 80043f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d107      	bne.n	8004408 <USART_Init+0x2c0>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004406:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7b9b      	ldrb	r3, [r3, #14]
 800440c:	461a      	mov	r2, r3
 800440e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004412:	4013      	ands	r3, r2
 8004414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004418:	4293      	cmp	r3, r2
 800441a:	d107      	bne.n	800442c <USART_Init+0x2e4>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800442a:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7b9b      	ldrb	r3, [r3, #14]
 8004430:	461a      	mov	r2, r3
 8004432:	2301      	movs	r3, #1
 8004434:	4013      	ands	r3, r2
 8004436:	2201      	movs	r2, #1
 8004438:	4293      	cmp	r3, r2
 800443a:	d107      	bne.n	800444c <USART_Init+0x304>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4aa8      	ldr	r2, [pc, #672]	@ (80046f4 <USART_Init+0x5ac>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d107      	bne.n	8004466 <USART_Init+0x31e>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 8004456:	2100      	movs	r1, #0
 8004458:	2025      	movs	r0, #37	@ 0x25
 800445a:	f7fe fd99 	bl	8002f90 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 800445e:	2025      	movs	r0, #37	@ 0x25
 8004460:	f7fe fd78 	bl	8002f54 <__NVIC_EnableIRQ>
 8004464:	e02b      	b.n	80044be <USART_Init+0x376>
		}
		else if(config -> Port == USART2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4aa3      	ldr	r2, [pc, #652]	@ (80046f8 <USART_Init+0x5b0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <USART_Init+0x330>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004470:	2026      	movs	r0, #38	@ 0x26
 8004472:	f7fe fd6f 	bl	8002f54 <__NVIC_EnableIRQ>
 8004476:	e022      	b.n	80044be <USART_Init+0x376>
		}
		else if(config -> Port == USART3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a9f      	ldr	r2, [pc, #636]	@ (80046fc <USART_Init+0x5b4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d103      	bne.n	800448a <USART_Init+0x342>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 8004482:	2027      	movs	r0, #39	@ 0x27
 8004484:	f7fe fd66 	bl	8002f54 <__NVIC_EnableIRQ>
 8004488:	e019      	b.n	80044be <USART_Init+0x376>
		}
		else if(config -> Port == UART4)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a9c      	ldr	r2, [pc, #624]	@ (8004700 <USART_Init+0x5b8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <USART_Init+0x354>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 8004494:	2034      	movs	r0, #52	@ 0x34
 8004496:	f7fe fd5d 	bl	8002f54 <__NVIC_EnableIRQ>
 800449a:	e010      	b.n	80044be <USART_Init+0x376>
		}
		else if(config -> Port == UART5)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a98      	ldr	r2, [pc, #608]	@ (8004704 <USART_Init+0x5bc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d103      	bne.n	80044ae <USART_Init+0x366>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 80044a6:	2035      	movs	r0, #53	@ 0x35
 80044a8:	f7fe fd54 	bl	8002f54 <__NVIC_EnableIRQ>
 80044ac:	e007      	b.n	80044be <USART_Init+0x376>
		}
		else if(config -> Port == USART6)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a95      	ldr	r2, [pc, #596]	@ (8004708 <USART_Init+0x5c0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d102      	bne.n	80044be <USART_Init+0x376>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80044b8:	2047      	movs	r0, #71	@ 0x47
 80044ba:	f7fe fd4b 	bl	8002f54 <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7c1b      	ldrb	r3, [r3, #16]
 80044c8:	4619      	mov	r1, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7c5b      	ldrb	r3, [r3, #17]
 80044d6:	2202      	movs	r2, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2202      	movs	r2, #2
 80044de:	4293      	cmp	r3, r2
 80044e0:	f040 8124 	bne.w	800472c <USART_Init+0x5e4>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f2:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7e      	ldr	r2, [pc, #504]	@ (80046f4 <USART_Init+0x5ac>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d10e      	bne.n	800451c <USART_Init+0x3d4>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 80044fe:	4a83      	ldr	r2, [pc, #524]	@ (800470c <USART_Init+0x5c4>)
 8004500:	4b83      	ldr	r3, [pc, #524]	@ (8004710 <USART_Init+0x5c8>)
 8004502:	4614      	mov	r4, r2
 8004504:	33c0      	adds	r3, #192	@ 0xc0
 8004506:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800450a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800450e:	2210      	movs	r2, #16
 8004510:	4b7e      	ldr	r3, [pc, #504]	@ (800470c <USART_Init+0x5c4>)
 8004512:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 8004514:	4b7d      	ldr	r3, [pc, #500]	@ (800470c <USART_Init+0x5c4>)
 8004516:	4a7f      	ldr	r2, [pc, #508]	@ (8004714 <USART_Init+0x5cc>)
 8004518:	64da      	str	r2, [r3, #76]	@ 0x4c
 800451a:	e067      	b.n	80045ec <USART_Init+0x4a4>
		}
		else if(config->Port == USART2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a75      	ldr	r2, [pc, #468]	@ (80046f8 <USART_Init+0x5b0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10e      	bne.n	8004544 <USART_Init+0x3fc>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8004526:	4b79      	ldr	r3, [pc, #484]	@ (800470c <USART_Init+0x5c4>)
 8004528:	4a79      	ldr	r2, [pc, #484]	@ (8004710 <USART_Init+0x5c8>)
 800452a:	3358      	adds	r3, #88	@ 0x58
 800452c:	32d8      	adds	r2, #216	@ 0xd8
 800452e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004530:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004534:	2210      	movs	r2, #16
 8004536:	4b75      	ldr	r3, [pc, #468]	@ (800470c <USART_Init+0x5c4>)
 8004538:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 800453a:	4b74      	ldr	r3, [pc, #464]	@ (800470c <USART_Init+0x5c4>)
 800453c:	4a76      	ldr	r2, [pc, #472]	@ (8004718 <USART_Init+0x5d0>)
 800453e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004542:	e053      	b.n	80045ec <USART_Init+0x4a4>
		}
		else if(config->Port == USART3)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6c      	ldr	r2, [pc, #432]	@ (80046fc <USART_Init+0x5b4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10f      	bne.n	800456e <USART_Init+0x426>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 800454e:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <USART_Init+0x5c4>)
 8004550:	4a6f      	ldr	r2, [pc, #444]	@ (8004710 <USART_Init+0x5c8>)
 8004552:	33b0      	adds	r3, #176	@ 0xb0
 8004554:	32f0      	adds	r2, #240	@ 0xf0
 8004556:	ca07      	ldmia	r2, {r0, r1, r2}
 8004558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800455c:	2210      	movs	r2, #16
 800455e:	4b6b      	ldr	r3, [pc, #428]	@ (800470c <USART_Init+0x5c4>)
 8004560:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 8004564:	4b69      	ldr	r3, [pc, #420]	@ (800470c <USART_Init+0x5c4>)
 8004566:	4a6d      	ldr	r2, [pc, #436]	@ (800471c <USART_Init+0x5d4>)
 8004568:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800456c:	e03e      	b.n	80045ec <USART_Init+0x4a4>
		}
		else if(config->Port == UART4)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a63      	ldr	r2, [pc, #396]	@ (8004700 <USART_Init+0x5b8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d111      	bne.n	800459c <USART_Init+0x454>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8004578:	4b64      	ldr	r3, [pc, #400]	@ (800470c <USART_Init+0x5c4>)
 800457a:	4a65      	ldr	r2, [pc, #404]	@ (8004710 <USART_Init+0x5c8>)
 800457c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004580:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8004584:	ca07      	ldmia	r2, {r0, r1, r2}
 8004586:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800458a:	2210      	movs	r2, #16
 800458c:	4b5f      	ldr	r3, [pc, #380]	@ (800470c <USART_Init+0x5c4>)
 800458e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 8004592:	4b5e      	ldr	r3, [pc, #376]	@ (800470c <USART_Init+0x5c4>)
 8004594:	4a62      	ldr	r2, [pc, #392]	@ (8004720 <USART_Init+0x5d8>)
 8004596:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800459a:	e027      	b.n	80045ec <USART_Init+0x4a4>
		}
		else if(config->Port == UART5)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a58      	ldr	r2, [pc, #352]	@ (8004704 <USART_Init+0x5bc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d111      	bne.n	80045ca <USART_Init+0x482>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80045a6:	4b59      	ldr	r3, [pc, #356]	@ (800470c <USART_Init+0x5c4>)
 80045a8:	4a59      	ldr	r2, [pc, #356]	@ (8004710 <USART_Init+0x5c8>)
 80045aa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80045ae:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80045b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80045b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80045b8:	2210      	movs	r2, #16
 80045ba:	4b54      	ldr	r3, [pc, #336]	@ (800470c <USART_Init+0x5c4>)
 80045bc:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 80045c0:	4b52      	ldr	r3, [pc, #328]	@ (800470c <USART_Init+0x5c4>)
 80045c2:	4a58      	ldr	r2, [pc, #352]	@ (8004724 <USART_Init+0x5dc>)
 80045c4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80045c8:	e010      	b.n	80045ec <USART_Init+0x4a4>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 80045ca:	4b50      	ldr	r3, [pc, #320]	@ (800470c <USART_Init+0x5c4>)
 80045cc:	4a50      	ldr	r2, [pc, #320]	@ (8004710 <USART_Init+0x5c8>)
 80045ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80045d2:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 80045d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80045d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80045dc:	2210      	movs	r2, #16
 80045de:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <USART_Init+0x5c4>)
 80045e0:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 80045e4:	4b49      	ldr	r3, [pc, #292]	@ (800470c <USART_Init+0x5c4>)
 80045e6:	4a4f      	ldr	r2, [pc, #316]	@ (8004724 <USART_Init+0x5dc>)
 80045e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80045ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004728 <USART_Init+0x5e0>)
 80045ee:	f993 3000 	ldrsb.w	r3, [r3]
 80045f2:	4618      	mov	r0, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	4945      	ldr	r1, [pc, #276]	@ (800470c <USART_Init+0x5c4>)
 80045f8:	2358      	movs	r3, #88	@ 0x58
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	440b      	add	r3, r1
 8004600:	3318      	adds	r3, #24
 8004602:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004604:	4b48      	ldr	r3, [pc, #288]	@ (8004728 <USART_Init+0x5e0>)
 8004606:	f993 3000 	ldrsb.w	r3, [r3]
 800460a:	4618      	mov	r0, r3
 800460c:	2200      	movs	r2, #0
 800460e:	493f      	ldr	r1, [pc, #252]	@ (800470c <USART_Init+0x5c4>)
 8004610:	2358      	movs	r3, #88	@ 0x58
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	440b      	add	r3, r1
 8004618:	330c      	adds	r3, #12
 800461a:	601a      	str	r2, [r3, #0]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800461c:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <USART_Init+0x5e0>)
 800461e:	f993 3000 	ldrsb.w	r3, [r3]
 8004622:	4618      	mov	r0, r3
 8004624:	2200      	movs	r2, #0
 8004626:	4939      	ldr	r1, [pc, #228]	@ (800470c <USART_Init+0x5c4>)
 8004628:	2358      	movs	r3, #88	@ 0x58
 800462a:	fb00 f303 	mul.w	r3, r0, r3
 800462e:	440b      	add	r3, r1
 8004630:	3328      	adds	r3, #40	@ 0x28
 8004632:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004634:	4b3c      	ldr	r3, [pc, #240]	@ (8004728 <USART_Init+0x5e0>)
 8004636:	f993 3000 	ldrsb.w	r3, [r3]
 800463a:	4618      	mov	r0, r3
 800463c:	2200      	movs	r2, #0
 800463e:	4933      	ldr	r1, [pc, #204]	@ (800470c <USART_Init+0x5c4>)
 8004640:	2358      	movs	r3, #88	@ 0x58
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	440b      	add	r3, r1
 8004648:	3324      	adds	r3, #36	@ 0x24
 800464a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800464c:	2200      	movs	r2, #0
 800464e:	4b36      	ldr	r3, [pc, #216]	@ (8004728 <USART_Init+0x5e0>)
 8004650:	f993 3000 	ldrsb.w	r3, [r3]
 8004654:	4618      	mov	r0, r3
 8004656:	b291      	uxth	r1, r2
 8004658:	4a2c      	ldr	r2, [pc, #176]	@ (800470c <USART_Init+0x5c4>)
 800465a:	2358      	movs	r3, #88	@ 0x58
 800465c:	fb00 f303 	mul.w	r3, r0, r3
 8004660:	4413      	add	r3, r2
 8004662:	3322      	adds	r3, #34	@ 0x22
 8004664:	460a      	mov	r2, r1
 8004666:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800466c:	4b2e      	ldr	r3, [pc, #184]	@ (8004728 <USART_Init+0x5e0>)
 800466e:	f993 3000 	ldrsb.w	r3, [r3]
 8004672:	4618      	mov	r0, r3
 8004674:	b291      	uxth	r1, r2
 8004676:	4a25      	ldr	r2, [pc, #148]	@ (800470c <USART_Init+0x5c4>)
 8004678:	2358      	movs	r3, #88	@ 0x58
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	4413      	add	r3, r2
 8004680:	3320      	adds	r3, #32
 8004682:	460a      	mov	r2, r1
 8004684:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 8004686:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <USART_Init+0x5e0>)
 8004688:	f993 3000 	ldrsb.w	r3, [r3]
 800468c:	4618      	mov	r0, r3
 800468e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004692:	491e      	ldr	r1, [pc, #120]	@ (800470c <USART_Init+0x5c4>)
 8004694:	2358      	movs	r3, #88	@ 0x58
 8004696:	fb00 f303 	mul.w	r3, r0, r3
 800469a:	440b      	add	r3, r1
 800469c:	3314      	adds	r3, #20
 800469e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80046a0:	4b21      	ldr	r3, [pc, #132]	@ (8004728 <USART_Init+0x5e0>)
 80046a2:	f993 3000 	ldrsb.w	r3, [r3]
 80046a6:	4618      	mov	r0, r3
 80046a8:	2200      	movs	r2, #0
 80046aa:	4918      	ldr	r1, [pc, #96]	@ (800470c <USART_Init+0x5c4>)
 80046ac:	2358      	movs	r3, #88	@ 0x58
 80046ae:	fb00 f303 	mul.w	r3, r0, r3
 80046b2:	440b      	add	r3, r1
 80046b4:	3310      	adds	r3, #16
 80046b6:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 80046b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <USART_Init+0x5e0>)
 80046ba:	f993 3000 	ldrsb.w	r3, [r3]
 80046be:	4618      	mov	r0, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4912      	ldr	r1, [pc, #72]	@ (800470c <USART_Init+0x5c4>)
 80046c4:	2258      	movs	r2, #88	@ 0x58
 80046c6:	fb00 f202 	mul.w	r2, r0, r2
 80046ca:	440a      	add	r2, r1
 80046cc:	336c      	adds	r3, #108	@ 0x6c
 80046ce:	4611      	mov	r1, r2
 80046d0:	2258      	movs	r2, #88	@ 0x58
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fdd1 	bl	800627a <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <USART_Init+0x5e0>)
 80046da:	f993 3000 	ldrsb.w	r3, [r3]
 80046de:	461a      	mov	r2, r3
 80046e0:	2358      	movs	r3, #88	@ 0x58
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <USART_Init+0x5c4>)
 80046e8:	4413      	add	r3, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd ff38 	bl	8002560 <DMA_Init>
 80046f0:	e024      	b.n	800473c <USART_Init+0x5f4>
 80046f2:	bf00      	nop
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	40004800 	.word	0x40004800
 8004700:	40004c00 	.word	0x40004c00
 8004704:	40005000 	.word	0x40005000
 8004708:	40011400 	.word	0x40011400
 800470c:	20000428 	.word	0x20000428
 8004710:	08009a54 	.word	0x08009a54
 8004714:	08003079 	.word	0x08003079
 8004718:	080030a9 	.word	0x080030a9
 800471c:	080030d9 	.word	0x080030d9
 8004720:	08003109 	.word	0x08003109
 8004724:	08003139 	.word	0x08003139
 8004728:	20000848 	.word	0x20000848
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473a:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7c5b      	ldrb	r3, [r3, #17]
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2201      	movs	r2, #1
 8004748:	4293      	cmp	r3, r2
 800474a:	f040 811f 	bne.w	800498c <USART_Init+0x844>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800475c:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4aa6      	ldr	r2, [pc, #664]	@ (80049fc <USART_Init+0x8b4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10e      	bne.n	8004786 <USART_Init+0x63e>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8004768:	4aa5      	ldr	r2, [pc, #660]	@ (8004a00 <USART_Init+0x8b8>)
 800476a:	4ba6      	ldr	r3, [pc, #664]	@ (8004a04 <USART_Init+0x8bc>)
 800476c:	4614      	mov	r4, r2
 800476e:	33cc      	adds	r3, #204	@ 0xcc
 8004770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004778:	2210      	movs	r2, #16
 800477a:	4ba1      	ldr	r3, [pc, #644]	@ (8004a00 <USART_Init+0x8b8>)
 800477c:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 800477e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a00 <USART_Init+0x8b8>)
 8004780:	4aa1      	ldr	r2, [pc, #644]	@ (8004a08 <USART_Init+0x8c0>)
 8004782:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004784:	e067      	b.n	8004856 <USART_Init+0x70e>
		}
		else if(config->Port == USART2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4aa0      	ldr	r2, [pc, #640]	@ (8004a0c <USART_Init+0x8c4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10e      	bne.n	80047ae <USART_Init+0x666>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8004790:	4b9b      	ldr	r3, [pc, #620]	@ (8004a00 <USART_Init+0x8b8>)
 8004792:	4a9c      	ldr	r2, [pc, #624]	@ (8004a04 <USART_Init+0x8bc>)
 8004794:	3358      	adds	r3, #88	@ 0x58
 8004796:	32e4      	adds	r2, #228	@ 0xe4
 8004798:	ca07      	ldmia	r2, {r0, r1, r2}
 800479a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800479e:	2210      	movs	r2, #16
 80047a0:	4b97      	ldr	r3, [pc, #604]	@ (8004a00 <USART_Init+0x8b8>)
 80047a2:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 80047a4:	4b96      	ldr	r3, [pc, #600]	@ (8004a00 <USART_Init+0x8b8>)
 80047a6:	4a9a      	ldr	r2, [pc, #616]	@ (8004a10 <USART_Init+0x8c8>)
 80047a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80047ac:	e053      	b.n	8004856 <USART_Init+0x70e>
		}
		else if(config->Port == USART3)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a98      	ldr	r2, [pc, #608]	@ (8004a14 <USART_Init+0x8cc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10f      	bne.n	80047d8 <USART_Init+0x690>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 80047b8:	4b91      	ldr	r3, [pc, #580]	@ (8004a00 <USART_Init+0x8b8>)
 80047ba:	4a92      	ldr	r2, [pc, #584]	@ (8004a04 <USART_Init+0x8bc>)
 80047bc:	33b0      	adds	r3, #176	@ 0xb0
 80047be:	32fc      	adds	r2, #252	@ 0xfc
 80047c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80047c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80047c6:	2210      	movs	r2, #16
 80047c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004a00 <USART_Init+0x8b8>)
 80047ca:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 80047ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004a00 <USART_Init+0x8b8>)
 80047d0:	4a91      	ldr	r2, [pc, #580]	@ (8004a18 <USART_Init+0x8d0>)
 80047d2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80047d6:	e03e      	b.n	8004856 <USART_Init+0x70e>
		}
		else if(config->Port == UART4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a8f      	ldr	r2, [pc, #572]	@ (8004a1c <USART_Init+0x8d4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d111      	bne.n	8004806 <USART_Init+0x6be>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 80047e2:	4b87      	ldr	r3, [pc, #540]	@ (8004a00 <USART_Init+0x8b8>)
 80047e4:	4a87      	ldr	r2, [pc, #540]	@ (8004a04 <USART_Init+0x8bc>)
 80047e6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80047ea:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 80047ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80047f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80047f4:	2210      	movs	r2, #16
 80047f6:	4b82      	ldr	r3, [pc, #520]	@ (8004a00 <USART_Init+0x8b8>)
 80047f8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 80047fc:	4b80      	ldr	r3, [pc, #512]	@ (8004a00 <USART_Init+0x8b8>)
 80047fe:	4a88      	ldr	r2, [pc, #544]	@ (8004a20 <USART_Init+0x8d8>)
 8004800:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004804:	e027      	b.n	8004856 <USART_Init+0x70e>
		}
		else if(config->Port == UART5)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a86      	ldr	r2, [pc, #536]	@ (8004a24 <USART_Init+0x8dc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <USART_Init+0x6ec>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8004810:	4b7b      	ldr	r3, [pc, #492]	@ (8004a00 <USART_Init+0x8b8>)
 8004812:	4a7c      	ldr	r2, [pc, #496]	@ (8004a04 <USART_Init+0x8bc>)
 8004814:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004818:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 800481c:	ca07      	ldmia	r2, {r0, r1, r2}
 800481e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004822:	2210      	movs	r2, #16
 8004824:	4b76      	ldr	r3, [pc, #472]	@ (8004a00 <USART_Init+0x8b8>)
 8004826:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 800482a:	4b75      	ldr	r3, [pc, #468]	@ (8004a00 <USART_Init+0x8b8>)
 800482c:	4a7e      	ldr	r2, [pc, #504]	@ (8004a28 <USART_Init+0x8e0>)
 800482e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004832:	e010      	b.n	8004856 <USART_Init+0x70e>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8004834:	4b72      	ldr	r3, [pc, #456]	@ (8004a00 <USART_Init+0x8b8>)
 8004836:	4a73      	ldr	r2, [pc, #460]	@ (8004a04 <USART_Init+0x8bc>)
 8004838:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800483c:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8004840:	ca07      	ldmia	r2, {r0, r1, r2}
 8004842:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004846:	2210      	movs	r2, #16
 8004848:	4b6d      	ldr	r3, [pc, #436]	@ (8004a00 <USART_Init+0x8b8>)
 800484a:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 800484e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a00 <USART_Init+0x8b8>)
 8004850:	4a76      	ldr	r2, [pc, #472]	@ (8004a2c <USART_Init+0x8e4>)
 8004852:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004856:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <USART_Init+0x8e8>)
 8004858:	f993 3000 	ldrsb.w	r3, [r3]
 800485c:	4618      	mov	r0, r3
 800485e:	2200      	movs	r2, #0
 8004860:	4967      	ldr	r1, [pc, #412]	@ (8004a00 <USART_Init+0x8b8>)
 8004862:	2358      	movs	r3, #88	@ 0x58
 8004864:	fb00 f303 	mul.w	r3, r0, r3
 8004868:	440b      	add	r3, r1
 800486a:	3318      	adds	r3, #24
 800486c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800486e:	4b70      	ldr	r3, [pc, #448]	@ (8004a30 <USART_Init+0x8e8>)
 8004870:	f993 3000 	ldrsb.w	r3, [r3]
 8004874:	4618      	mov	r0, r3
 8004876:	2200      	movs	r2, #0
 8004878:	4961      	ldr	r1, [pc, #388]	@ (8004a00 <USART_Init+0x8b8>)
 800487a:	2358      	movs	r3, #88	@ 0x58
 800487c:	fb00 f303 	mul.w	r3, r0, r3
 8004880:	440b      	add	r3, r1
 8004882:	330c      	adds	r3, #12
 8004884:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <USART_Init+0x8e8>)
 8004888:	f993 3000 	ldrsb.w	r3, [r3]
 800488c:	4618      	mov	r0, r3
 800488e:	2210      	movs	r2, #16
 8004890:	495b      	ldr	r1, [pc, #364]	@ (8004a00 <USART_Init+0x8b8>)
 8004892:	2358      	movs	r3, #88	@ 0x58
 8004894:	fb00 f303 	mul.w	r3, r0, r3
 8004898:	440b      	add	r3, r1
 800489a:	331c      	adds	r3, #28
 800489c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 800489e:	4b64      	ldr	r3, [pc, #400]	@ (8004a30 <USART_Init+0x8e8>)
 80048a0:	f993 3000 	ldrsb.w	r3, [r3]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4a56      	ldr	r2, [pc, #344]	@ (8004a00 <USART_Init+0x8b8>)
 80048a8:	2358      	movs	r3, #88	@ 0x58
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	334c      	adds	r3, #76	@ 0x4c
 80048b2:	4a55      	ldr	r2, [pc, #340]	@ (8004a08 <USART_Init+0x8c0>)
 80048b4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80048b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a30 <USART_Init+0x8e8>)
 80048b8:	f993 3000 	ldrsb.w	r3, [r3]
 80048bc:	4618      	mov	r0, r3
 80048be:	2200      	movs	r2, #0
 80048c0:	494f      	ldr	r1, [pc, #316]	@ (8004a00 <USART_Init+0x8b8>)
 80048c2:	2358      	movs	r3, #88	@ 0x58
 80048c4:	fb00 f303 	mul.w	r3, r0, r3
 80048c8:	440b      	add	r3, r1
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80048ce:	4b58      	ldr	r3, [pc, #352]	@ (8004a30 <USART_Init+0x8e8>)
 80048d0:	f993 3000 	ldrsb.w	r3, [r3]
 80048d4:	4618      	mov	r0, r3
 80048d6:	2200      	movs	r2, #0
 80048d8:	4949      	ldr	r1, [pc, #292]	@ (8004a00 <USART_Init+0x8b8>)
 80048da:	2358      	movs	r3, #88	@ 0x58
 80048dc:	fb00 f303 	mul.w	r3, r0, r3
 80048e0:	440b      	add	r3, r1
 80048e2:	3324      	adds	r3, #36	@ 0x24
 80048e4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80048e6:	2200      	movs	r2, #0
 80048e8:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <USART_Init+0x8e8>)
 80048ea:	f993 3000 	ldrsb.w	r3, [r3]
 80048ee:	4618      	mov	r0, r3
 80048f0:	b291      	uxth	r1, r2
 80048f2:	4a43      	ldr	r2, [pc, #268]	@ (8004a00 <USART_Init+0x8b8>)
 80048f4:	2358      	movs	r3, #88	@ 0x58
 80048f6:	fb00 f303 	mul.w	r3, r0, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3322      	adds	r3, #34	@ 0x22
 80048fe:	460a      	mov	r2, r1
 8004900:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004906:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <USART_Init+0x8e8>)
 8004908:	f993 3000 	ldrsb.w	r3, [r3]
 800490c:	4618      	mov	r0, r3
 800490e:	b291      	uxth	r1, r2
 8004910:	4a3b      	ldr	r2, [pc, #236]	@ (8004a00 <USART_Init+0x8b8>)
 8004912:	2358      	movs	r3, #88	@ 0x58
 8004914:	fb00 f303 	mul.w	r3, r0, r3
 8004918:	4413      	add	r3, r2
 800491a:	3320      	adds	r3, #32
 800491c:	460a      	mov	r2, r1
 800491e:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8004920:	4b43      	ldr	r3, [pc, #268]	@ (8004a30 <USART_Init+0x8e8>)
 8004922:	f993 3000 	ldrsb.w	r3, [r3]
 8004926:	4618      	mov	r0, r3
 8004928:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800492c:	4934      	ldr	r1, [pc, #208]	@ (8004a00 <USART_Init+0x8b8>)
 800492e:	2358      	movs	r3, #88	@ 0x58
 8004930:	fb00 f303 	mul.w	r3, r0, r3
 8004934:	440b      	add	r3, r1
 8004936:	3314      	adds	r3, #20
 8004938:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 800493a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a30 <USART_Init+0x8e8>)
 800493c:	f993 3000 	ldrsb.w	r3, [r3]
 8004940:	4618      	mov	r0, r3
 8004942:	2240      	movs	r2, #64	@ 0x40
 8004944:	492e      	ldr	r1, [pc, #184]	@ (8004a00 <USART_Init+0x8b8>)
 8004946:	2358      	movs	r3, #88	@ 0x58
 8004948:	fb00 f303 	mul.w	r3, r0, r3
 800494c:	440b      	add	r3, r1
 800494e:	3310      	adds	r3, #16
 8004950:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <USART_Init+0x8e8>)
 8004954:	f993 3000 	ldrsb.w	r3, [r3]
 8004958:	4618      	mov	r0, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4928      	ldr	r1, [pc, #160]	@ (8004a00 <USART_Init+0x8b8>)
 800495e:	2258      	movs	r2, #88	@ 0x58
 8004960:	fb00 f202 	mul.w	r2, r0, r2
 8004964:	440a      	add	r2, r1
 8004966:	3314      	adds	r3, #20
 8004968:	4611      	mov	r1, r2
 800496a:	2258      	movs	r2, #88	@ 0x58
 800496c:	4618      	mov	r0, r3
 800496e:	f001 fc84 	bl	800627a <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8004972:	4b2f      	ldr	r3, [pc, #188]	@ (8004a30 <USART_Init+0x8e8>)
 8004974:	f993 3000 	ldrsb.w	r3, [r3]
 8004978:	461a      	mov	r2, r3
 800497a:	2358      	movs	r3, #88	@ 0x58
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	4a1f      	ldr	r2, [pc, #124]	@ (8004a00 <USART_Init+0x8b8>)
 8004982:	4413      	add	r3, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f7fd fdeb 	bl	8002560 <DMA_Init>
 800498a:	e007      	b.n	800499c <USART_Init+0x854>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499a:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7a1b      	ldrb	r3, [r3, #8]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d107      	bne.n	80049b6 <USART_Init+0x86e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0208 	orr.w	r2, r2, #8
 80049b4:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7a1b      	ldrb	r3, [r3, #8]
 80049ba:	2205      	movs	r2, #5
 80049bc:	4293      	cmp	r3, r2
 80049be:	d107      	bne.n	80049d0 <USART_Init+0x888>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ce:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 020c 	orr.w	r2, r2, #12
 80049de:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049ee:	60da      	str	r2, [r3, #12]

	return 1;
 80049f0:	2301      	movs	r3, #1
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3738      	adds	r7, #56	@ 0x38
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bdb0      	pop	{r4, r5, r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40011000 	.word	0x40011000
 8004a00:	20000638 	.word	0x20000638
 8004a04:	08009a54 	.word	0x08009a54
 8004a08:	08003061 	.word	0x08003061
 8004a0c:	40004400 	.word	0x40004400
 8004a10:	08003091 	.word	0x08003091
 8004a14:	40004800 	.word	0x40004800
 8004a18:	080030c1 	.word	0x080030c1
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	080030f1 	.word	0x080030f1
 8004a24:	40005000 	.word	0x40005000
 8004a28:	08003121 	.word	0x08003121
 8004a2c:	08003151 	.word	0x08003151
 8004a30:	20000848 	.word	0x20000848

08004a34 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7fe fd00 	bl	8003448 <USART_Get_Instance_Number>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004a4e:	701a      	strb	r2, [r3, #0]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	7c5b      	ldrb	r3, [r3, #17]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	745a      	strb	r2, [r3, #17]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	7c5b      	ldrb	r3, [r3, #17]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80b3 	beq.w	8004bce <USART_TX_Buffer+0x19a>
		config -> Port -> SR &= ~USART_SR_TC;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a76:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8004a78:	4b64      	ldr	r3, [pc, #400]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	4963      	ldr	r1, [pc, #396]	@ (8004c10 <USART_TX_Buffer+0x1dc>)
 8004a84:	2358      	movs	r3, #88	@ 0x58
 8004a86:	fb00 f303 	mul.w	r3, r0, r3
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3330      	adds	r3, #48	@ 0x30
 8004a8e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	4b5d      	ldr	r3, [pc, #372]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004a98:	f993 3000 	ldrsb.w	r3, [r3]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c10 <USART_TX_Buffer+0x1dc>)
 8004aa2:	2358      	movs	r3, #88	@ 0x58
 8004aa4:	fb00 f303 	mul.w	r3, r0, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	332c      	adds	r3, #44	@ 0x2c
 8004aac:	6019      	str	r1, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004aae:	4b57      	ldr	r3, [pc, #348]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4a56      	ldr	r2, [pc, #344]	@ (8004c10 <USART_TX_Buffer+0x1dc>)
 8004ab8:	2358      	movs	r3, #88	@ 0x58
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	3334      	adds	r3, #52	@ 0x34
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8004ac6:	4b51      	ldr	r3, [pc, #324]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8004acc:	461a      	mov	r2, r3
 8004ace:	2358      	movs	r3, #88	@ 0x58
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c10 <USART_TX_Buffer+0x1dc>)
 8004ad6:	4413      	add	r3, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd ff33 	bl	8002944 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004ade:	4b4b      	ldr	r3, [pc, #300]	@ (8004c0c <USART_TX_Buffer+0x1d8>)
 8004ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2358      	movs	r3, #88	@ 0x58
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	4a48      	ldr	r2, [pc, #288]	@ (8004c10 <USART_TX_Buffer+0x1dc>)
 8004aee:	4413      	add	r3, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd ff87 	bl	8002a04 <DMA_Set_Trigger>


		if(config->Port == USART1)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a46      	ldr	r2, [pc, #280]	@ (8004c14 <USART_TX_Buffer+0x1e0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <USART_TX_Buffer+0xe6>
		{
			while(!U1TX_Complete){}
 8004b00:	bf00      	nop
 8004b02:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <USART_TX_Buffer+0x1e4>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f083 0301 	eor.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f7      	bne.n	8004b02 <USART_TX_Buffer+0xce>
			U1TX_Complete = 0;
 8004b12:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <USART_TX_Buffer+0x1e4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e072      	b.n	8004c00 <USART_TX_Buffer+0x1cc>

		}
		else if(config->Port == USART2)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c1c <USART_TX_Buffer+0x1e8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10c      	bne.n	8004b3e <USART_TX_Buffer+0x10a>
		{
			while(!U2TX_Complete){}
 8004b24:	bf00      	nop
 8004b26:	4b3e      	ldr	r3, [pc, #248]	@ (8004c20 <USART_TX_Buffer+0x1ec>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f083 0301 	eor.w	r3, r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f7      	bne.n	8004b26 <USART_TX_Buffer+0xf2>
			U2TX_Complete = 0;
 8004b36:	4b3a      	ldr	r3, [pc, #232]	@ (8004c20 <USART_TX_Buffer+0x1ec>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e060      	b.n	8004c00 <USART_TX_Buffer+0x1cc>
		}
		else if(config->Port == USART3)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a38      	ldr	r2, [pc, #224]	@ (8004c24 <USART_TX_Buffer+0x1f0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <USART_TX_Buffer+0x12e>
		{
			while(!U3TX_Complete){}
 8004b48:	bf00      	nop
 8004b4a:	4b37      	ldr	r3, [pc, #220]	@ (8004c28 <USART_TX_Buffer+0x1f4>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f083 0301 	eor.w	r3, r3, #1
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f7      	bne.n	8004b4a <USART_TX_Buffer+0x116>
			U3TX_Complete = 0;
 8004b5a:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <USART_TX_Buffer+0x1f4>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e04e      	b.n	8004c00 <USART_TX_Buffer+0x1cc>
		}
		else if(config->Port == UART4)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a31      	ldr	r2, [pc, #196]	@ (8004c2c <USART_TX_Buffer+0x1f8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10c      	bne.n	8004b86 <USART_TX_Buffer+0x152>
		{
			while(!U4TX_Complete){}
 8004b6c:	bf00      	nop
 8004b6e:	4b30      	ldr	r3, [pc, #192]	@ (8004c30 <USART_TX_Buffer+0x1fc>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f083 0301 	eor.w	r3, r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f7      	bne.n	8004b6e <USART_TX_Buffer+0x13a>
			U4TX_Complete = 0;
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c30 <USART_TX_Buffer+0x1fc>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e03c      	b.n	8004c00 <USART_TX_Buffer+0x1cc>
		}
		else if(config->Port == UART5)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <USART_TX_Buffer+0x200>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <USART_TX_Buffer+0x176>
		{
			while(!U5TX_Complete){}
 8004b90:	bf00      	nop
 8004b92:	4b29      	ldr	r3, [pc, #164]	@ (8004c38 <USART_TX_Buffer+0x204>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f7      	bne.n	8004b92 <USART_TX_Buffer+0x15e>
			U5TX_Complete = 0;
 8004ba2:	4b25      	ldr	r3, [pc, #148]	@ (8004c38 <USART_TX_Buffer+0x204>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	e02a      	b.n	8004c00 <USART_TX_Buffer+0x1cc>
		}
		else if(config->Port == USART6)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <USART_TX_Buffer+0x208>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d125      	bne.n	8004c00 <USART_TX_Buffer+0x1cc>
		{
			while(!U6TX_Complete){}
 8004bb4:	bf00      	nop
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <USART_TX_Buffer+0x20c>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f083 0301 	eor.w	r3, r3, #1
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <USART_TX_Buffer+0x182>
			U6TX_Complete = 0;
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <USART_TX_Buffer+0x20c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e018      	b.n	8004c00 <USART_TX_Buffer+0x1cc>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e011      	b.n	8004bf8 <USART_TX_Buffer+0x1c4>
		{
			config->Port->DR = tx_buffer[i];
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004be2:	bf00      	nop
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f8      	beq.n	8004be4 <USART_TX_Buffer+0x1b0>
		for(int i = 0; i <= length; i++)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	dde9      	ble.n	8004bd4 <USART_TX_Buffer+0x1a0>
		}
	}

	return 1;
 8004c00:	2301      	movs	r3, #1

}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000848 	.word	0x20000848
 8004c10:	20000638 	.word	0x20000638
 8004c14:	40011000 	.word	0x40011000
 8004c18:	20000862 	.word	0x20000862
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	20000864 	.word	0x20000864
 8004c24:	40004800 	.word	0x40004800
 8004c28:	20000866 	.word	0x20000866
 8004c2c:	40004c00 	.word	0x40004c00
 8004c30:	20000868 	.word	0x20000868
 8004c34:	40005000 	.word	0x40005000
 8004c38:	2000086a 	.word	0x2000086a
 8004c3c:	40011400 	.word	0x40011400
 8004c40:	2000086c 	.word	0x2000086c

08004c44 <__NVIC_SetPriority>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	@ (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	@ (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca8:	d301      	bcc.n	8004cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cae:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cb6:	210f      	movs	r1, #15
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	f7ff ffc2 	bl	8004c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc6:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cc8:	2207      	movs	r2, #7
 8004cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	e000e010 	.word	0xe000e010

08004cdc <MCU_Clock_Setup>:
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
	SystemInit();
 8004ce2:	f000 f9c7 	bl	8005074 <SystemInit>
	uint8_t pll_m = 8;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004cea:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004cee:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004cf4:	2307      	movs	r3, #7
 8004cf6:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004d0a:	bf00      	nop
 8004d0c:	4b37      	ldr	r3, [pc, #220]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f9      	beq.n	8004d0c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004d18:	4b34      	ldr	r3, [pc, #208]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	4a33      	ldr	r2, [pc, #204]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004d24:	4b32      	ldr	r3, [pc, #200]	@ (8004df0 <MCU_Clock_Setup+0x114>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a31      	ldr	r2, [pc, #196]	@ (8004df0 <MCU_Clock_Setup+0x114>)
 8004d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d2e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004d30:	4b30      	ldr	r3, [pc, #192]	@ (8004df4 <MCU_Clock_Setup+0x118>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2f      	ldr	r2, [pc, #188]	@ (8004df4 <MCU_Clock_Setup+0x118>)
 8004d36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d3a:	f043 0305 	orr.w	r3, r3, #5
 8004d3e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	78ba      	ldrb	r2, [r7, #2]
 8004d46:	0611      	lsls	r1, r2, #24
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	0412      	lsls	r2, r2, #16
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	88ba      	ldrh	r2, [r7, #4]
 8004d50:	0192      	lsls	r2, r2, #6
 8004d52:	4311      	orrs	r1, r2
 8004d54:	79fa      	ldrb	r2, [r7, #7]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004d60:	4b22      	ldr	r3, [pc, #136]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d6a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004d74:	4b1d      	ldr	r3, [pc, #116]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d7a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004d7e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004d80:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a19      	ldr	r2, [pc, #100]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8a:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d96:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004d98:	bf00      	nop
 8004d9a:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f9      	beq.n	8004d9a <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	4a10      	ldr	r2, [pc, #64]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004db2:	bf00      	nop
 8004db4:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d1f9      	bne.n	8004db4 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004dc0:	f000 f96a 	bl	8005098 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <MCU_Clock_Setup+0x11c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	4a0c      	ldr	r2, [pc, #48]	@ (8004dfc <MCU_Clock_Setup+0x120>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff60 	bl	8004c98 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ddc:	4a03      	ldr	r2, [pc, #12]	@ (8004dec <MCU_Clock_Setup+0x110>)
 8004dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004de2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40007000 	.word	0x40007000
 8004df4:	40023c00 	.word	0x40023c00
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	18618619 	.word	0x18618619

08004e00 <Delay_Config>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004e04:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <Delay_Config+0x2c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <Delay_Config+0x2c>)
 8004e0c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004e10:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004e12:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <Delay_Config+0x2c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004e18:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <Delay_Config+0x2c>)
 8004e1a:	2205      	movs	r2, #5
 8004e1c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	e000e010 	.word	0xe000e010

08004e30 <Delay_ms>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8004e3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e3e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004e84 <Delay_ms+0x54>
 8004e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4a:	ee17 3a90 	vmov	r3, s15
 8004e4e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004e50:	4a0d      	ldr	r2, [pc, #52]	@ (8004e88 <Delay_ms+0x58>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004e56:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <Delay_ms+0x58>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <Delay_ms+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <Delay_ms+0x58>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004e68:	bf00      	nop
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <Delay_ms+0x58>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f9      	beq.n	8004e6a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	48241000 	.word	0x48241000
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <Delay_s>:
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8004ea0:	e006      	b.n	8004eb0 <Delay_s+0x24>
		Delay_ms(1);
 8004ea2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ea6:	f7ff ffc3 	bl	8004e30 <Delay_ms>
	for (; s>0; s--)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f5      	bne.n	8004ea2 <Delay_s+0x16>
	return (0UL);
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <main>:
#include "Console/Console.h"



int main(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004ec4:	f7ff ff0a 	bl	8004cdc <MCU_Clock_Setup>
	Delay_Config();
 8004ec8:	f7ff ff9a 	bl	8004e00 <Delay_Config>
	Console_Init(9600);
 8004ecc:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8004ed0:	f7fb ff54 	bl	8000d7c <Console_Init>


    /* Loop forever */
	for(;;)
	{
		printConsole("Hello \r\n");
 8004ed4:	4803      	ldr	r0, [pc, #12]	@ (8004ee4 <main+0x24>)
 8004ed6:	f7fb ff87 	bl	8000de8 <printConsole>
		Delay_s(1);
 8004eda:	2001      	movs	r0, #1
 8004edc:	f7ff ffd6 	bl	8004e8c <Delay_s>
		printConsole("Hello \r\n");
 8004ee0:	bf00      	nop
 8004ee2:	e7f7      	b.n	8004ed4 <main+0x14>
 8004ee4:	08009a40 	.word	0x08009a40

08004ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return 1;
 8004eec:	2301      	movs	r3, #1
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <_kill>:

int _kill(int pid, int sig)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f02:	f001 f98d 	bl	8006220 <__errno>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2216      	movs	r2, #22
 8004f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_exit>:

void _exit (int status)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f20:	f04f 31ff 	mov.w	r1, #4294967295
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ffe7 	bl	8004ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <_exit+0x12>

08004f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e00a      	b.n	8004f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f40:	f3af 8000 	nop.w
 8004f44:	4601      	mov	r1, r0
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	60ba      	str	r2, [r7, #8]
 8004f4c:	b2ca      	uxtb	r2, r1
 8004f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	dbf0      	blt.n	8004f40 <_read+0x12>
  }

  return len;
 8004f5e:	687b      	ldr	r3, [r7, #4]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e009      	b.n	8004f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	60ba      	str	r2, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	dbf1      	blt.n	8004f7a <_write+0x12>
  }
  return len;
 8004f96:	687b      	ldr	r3, [r7, #4]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_close>:

int _close(int file)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_isatty>:

int _isatty(int file)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fe0:	2301      	movs	r3, #1
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005010:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <_sbrk+0x5c>)
 8005012:	4b15      	ldr	r3, [pc, #84]	@ (8005068 <_sbrk+0x60>)
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800501c:	4b13      	ldr	r3, [pc, #76]	@ (800506c <_sbrk+0x64>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <_sbrk+0x64>)
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <_sbrk+0x68>)
 8005028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502a:	4b10      	ldr	r3, [pc, #64]	@ (800506c <_sbrk+0x64>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	429a      	cmp	r2, r3
 8005036:	d207      	bcs.n	8005048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005038:	f001 f8f2 	bl	8006220 <__errno>
 800503c:	4603      	mov	r3, r0
 800503e:	220c      	movs	r2, #12
 8005040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	e009      	b.n	800505c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <_sbrk+0x64>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <_sbrk+0x64>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	4a05      	ldr	r2, [pc, #20]	@ (800506c <_sbrk+0x64>)
 8005058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20020000 	.word	0x20020000
 8005068:	00000400 	.word	0x00000400
 800506c:	20000870 	.word	0x20000870
 8005070:	200009c0 	.word	0x200009c0

08005074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <SystemInit+0x20>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	4a05      	ldr	r2, [pc, #20]	@ (8005094 <SystemInit+0x20>)
 8005080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	2302      	movs	r3, #2
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	2302      	movs	r3, #2
 80050b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80050b2:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d011      	beq.n	80050e6 <SystemCoreClockUpdate+0x4e>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d844      	bhi.n	8005152 <SystemCoreClockUpdate+0xba>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <SystemCoreClockUpdate+0x3e>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d004      	beq.n	80050de <SystemCoreClockUpdate+0x46>
 80050d4:	e03d      	b.n	8005152 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 80050d8:	4a2c      	ldr	r2, [pc, #176]	@ (800518c <SystemCoreClockUpdate+0xf4>)
 80050da:	601a      	str	r2, [r3, #0]
      break;
 80050dc:	e03d      	b.n	800515a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80050de:	4b2a      	ldr	r3, [pc, #168]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 80050e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005190 <SystemCoreClockUpdate+0xf8>)
 80050e2:	601a      	str	r2, [r3, #0]
      break;
 80050e4:	e039      	b.n	800515a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80050e6:	4b27      	ldr	r3, [pc, #156]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	0d9b      	lsrs	r3, r3, #22
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050f2:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005102:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <SystemCoreClockUpdate+0xf8>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 800510c:	6852      	ldr	r2, [r2, #4]
 800510e:	0992      	lsrs	r2, r2, #6
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e00b      	b.n	8005134 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800511c:	4a1b      	ldr	r2, [pc, #108]	@ (800518c <SystemCoreClockUpdate+0xf4>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 8005126:	6852      	ldr	r2, [r2, #4]
 8005128:	0992      	lsrs	r2, r2, #6
 800512a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	4a0e      	ldr	r2, [pc, #56]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 800514e:	6013      	str	r3, [r2, #0]
      break;
 8005150:	e003      	b.n	800515a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005152:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 8005154:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <SystemCoreClockUpdate+0xf4>)
 8005156:	601a      	str	r2, [r3, #0]
      break;
 8005158:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800515a:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <SystemCoreClockUpdate+0xec>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	4a0b      	ldr	r2, [pc, #44]	@ (8005194 <SystemCoreClockUpdate+0xfc>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800516a:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	4a04      	ldr	r2, [pc, #16]	@ (8005188 <SystemCoreClockUpdate+0xf0>)
 8005176:	6013      	str	r3, [r2, #0]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40023800 	.word	0x40023800
 8005188:	20000000 	.word	0x20000000
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200
 8005194:	08009e58 	.word	0x08009e58

08005198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005198:	480d      	ldr	r0, [pc, #52]	@ (80051d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800519a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800519c:	f7ff ff6a 	bl	8005074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051a0:	480c      	ldr	r0, [pc, #48]	@ (80051d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80051a2:	490d      	ldr	r1, [pc, #52]	@ (80051d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051a4:	4a0d      	ldr	r2, [pc, #52]	@ (80051dc <LoopForever+0xe>)
  movs r3, #0
 80051a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051a8:	e002      	b.n	80051b0 <LoopCopyDataInit>

080051aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ae:	3304      	adds	r3, #4

080051b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b4:	d3f9      	bcc.n	80051aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051b6:	4a0a      	ldr	r2, [pc, #40]	@ (80051e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051b8:	4c0a      	ldr	r4, [pc, #40]	@ (80051e4 <LoopForever+0x16>)
  movs r3, #0
 80051ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051bc:	e001      	b.n	80051c2 <LoopFillZerobss>

080051be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051c0:	3204      	adds	r2, #4

080051c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c4:	d3fb      	bcc.n	80051be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051c6:	f001 f831 	bl	800622c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051ca:	f7ff fe79 	bl	8004ec0 <main>

080051ce <LoopForever>:

LoopForever:
  b LoopForever
 80051ce:	e7fe      	b.n	80051ce <LoopForever>
  ldr   r0, =_estack
 80051d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051d8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80051dc:	0800a2b0 	.word	0x0800a2b0
  ldr r2, =_sbss
 80051e0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80051e4:	200009c0 	.word	0x200009c0

080051e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051e8:	e7fe      	b.n	80051e8 <ADC_IRQHandler>

080051ea <__cvt>:
 80051ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ee:	ec57 6b10 	vmov	r6, r7, d0
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	460c      	mov	r4, r1
 80051f6:	4619      	mov	r1, r3
 80051f8:	463b      	mov	r3, r7
 80051fa:	bfbb      	ittet	lt
 80051fc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005200:	461f      	movlt	r7, r3
 8005202:	2300      	movge	r3, #0
 8005204:	232d      	movlt	r3, #45	@ 0x2d
 8005206:	700b      	strb	r3, [r1, #0]
 8005208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800520a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800520e:	4691      	mov	r9, r2
 8005210:	f023 0820 	bic.w	r8, r3, #32
 8005214:	bfbc      	itt	lt
 8005216:	4632      	movlt	r2, r6
 8005218:	4616      	movlt	r6, r2
 800521a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800521e:	d005      	beq.n	800522c <__cvt+0x42>
 8005220:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005224:	d100      	bne.n	8005228 <__cvt+0x3e>
 8005226:	3401      	adds	r4, #1
 8005228:	2102      	movs	r1, #2
 800522a:	e000      	b.n	800522e <__cvt+0x44>
 800522c:	2103      	movs	r1, #3
 800522e:	ab03      	add	r3, sp, #12
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	ab02      	add	r3, sp, #8
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	ec47 6b10 	vmov	d0, r6, r7
 800523a:	4653      	mov	r3, sl
 800523c:	4622      	mov	r2, r4
 800523e:	f001 f8bb 	bl	80063b8 <_dtoa_r>
 8005242:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005246:	4605      	mov	r5, r0
 8005248:	d119      	bne.n	800527e <__cvt+0x94>
 800524a:	f019 0f01 	tst.w	r9, #1
 800524e:	d00e      	beq.n	800526e <__cvt+0x84>
 8005250:	eb00 0904 	add.w	r9, r0, r4
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8005260:	b108      	cbz	r0, 8005266 <__cvt+0x7c>
 8005262:	f8cd 900c 	str.w	r9, [sp, #12]
 8005266:	2230      	movs	r2, #48	@ 0x30
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	454b      	cmp	r3, r9
 800526c:	d31e      	bcc.n	80052ac <__cvt+0xc2>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005272:	1b5b      	subs	r3, r3, r5
 8005274:	4628      	mov	r0, r5
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	b004      	add	sp, #16
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005282:	eb00 0904 	add.w	r9, r0, r4
 8005286:	d1e5      	bne.n	8005254 <__cvt+0x6a>
 8005288:	7803      	ldrb	r3, [r0, #0]
 800528a:	2b30      	cmp	r3, #48	@ 0x30
 800528c:	d10a      	bne.n	80052a4 <__cvt+0xba>
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fb fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800529a:	b918      	cbnz	r0, 80052a4 <__cvt+0xba>
 800529c:	f1c4 0401 	rsb	r4, r4, #1
 80052a0:	f8ca 4000 	str.w	r4, [sl]
 80052a4:	f8da 3000 	ldr.w	r3, [sl]
 80052a8:	4499      	add	r9, r3
 80052aa:	e7d3      	b.n	8005254 <__cvt+0x6a>
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	9103      	str	r1, [sp, #12]
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e7d9      	b.n	8005268 <__cvt+0x7e>

080052b4 <__exponent>:
 80052b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	bfba      	itte	lt
 80052ba:	4249      	neglt	r1, r1
 80052bc:	232d      	movlt	r3, #45	@ 0x2d
 80052be:	232b      	movge	r3, #43	@ 0x2b
 80052c0:	2909      	cmp	r1, #9
 80052c2:	7002      	strb	r2, [r0, #0]
 80052c4:	7043      	strb	r3, [r0, #1]
 80052c6:	dd29      	ble.n	800531c <__exponent+0x68>
 80052c8:	f10d 0307 	add.w	r3, sp, #7
 80052cc:	461d      	mov	r5, r3
 80052ce:	270a      	movs	r7, #10
 80052d0:	461a      	mov	r2, r3
 80052d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80052d6:	fb07 1416 	mls	r4, r7, r6, r1
 80052da:	3430      	adds	r4, #48	@ 0x30
 80052dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052e0:	460c      	mov	r4, r1
 80052e2:	2c63      	cmp	r4, #99	@ 0x63
 80052e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80052e8:	4631      	mov	r1, r6
 80052ea:	dcf1      	bgt.n	80052d0 <__exponent+0x1c>
 80052ec:	3130      	adds	r1, #48	@ 0x30
 80052ee:	1e94      	subs	r4, r2, #2
 80052f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052f4:	1c41      	adds	r1, r0, #1
 80052f6:	4623      	mov	r3, r4
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	d30a      	bcc.n	8005312 <__exponent+0x5e>
 80052fc:	f10d 0309 	add.w	r3, sp, #9
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	42ac      	cmp	r4, r5
 8005304:	bf88      	it	hi
 8005306:	2300      	movhi	r3, #0
 8005308:	3302      	adds	r3, #2
 800530a:	4403      	add	r3, r0
 800530c:	1a18      	subs	r0, r3, r0
 800530e:	b003      	add	sp, #12
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005312:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005316:	f801 6f01 	strb.w	r6, [r1, #1]!
 800531a:	e7ed      	b.n	80052f8 <__exponent+0x44>
 800531c:	2330      	movs	r3, #48	@ 0x30
 800531e:	3130      	adds	r1, #48	@ 0x30
 8005320:	7083      	strb	r3, [r0, #2]
 8005322:	70c1      	strb	r1, [r0, #3]
 8005324:	1d03      	adds	r3, r0, #4
 8005326:	e7f1      	b.n	800530c <__exponent+0x58>

08005328 <_printf_float>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	b08d      	sub	sp, #52	@ 0x34
 800532e:	460c      	mov	r4, r1
 8005330:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005334:	4616      	mov	r6, r2
 8005336:	461f      	mov	r7, r3
 8005338:	4605      	mov	r5, r0
 800533a:	f000 ff27 	bl	800618c <_localeconv_r>
 800533e:	6803      	ldr	r3, [r0, #0]
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fa ff94 	bl	8000270 <strlen>
 8005348:	2300      	movs	r3, #0
 800534a:	930a      	str	r3, [sp, #40]	@ 0x28
 800534c:	f8d8 3000 	ldr.w	r3, [r8]
 8005350:	9005      	str	r0, [sp, #20]
 8005352:	3307      	adds	r3, #7
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	f103 0208 	add.w	r2, r3, #8
 800535c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005360:	f8d4 b000 	ldr.w	fp, [r4]
 8005364:	f8c8 2000 	str.w	r2, [r8]
 8005368:	e9d3 8900 	ldrd	r8, r9, [r3]
 800536c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	f8cd 8018 	str.w	r8, [sp, #24]
 8005376:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800537a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800537e:	4b9c      	ldr	r3, [pc, #624]	@ (80055f0 <_printf_float+0x2c8>)
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	f7fb fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8005388:	bb70      	cbnz	r0, 80053e8 <_printf_float+0xc0>
 800538a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800538e:	4b98      	ldr	r3, [pc, #608]	@ (80055f0 <_printf_float+0x2c8>)
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	f7fb fbac 	bl	8000af0 <__aeabi_dcmple>
 8005398:	bb30      	cbnz	r0, 80053e8 <_printf_float+0xc0>
 800539a:	2200      	movs	r2, #0
 800539c:	2300      	movs	r3, #0
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb fb9b 	bl	8000adc <__aeabi_dcmplt>
 80053a6:	b110      	cbz	r0, 80053ae <_printf_float+0x86>
 80053a8:	232d      	movs	r3, #45	@ 0x2d
 80053aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ae:	4a91      	ldr	r2, [pc, #580]	@ (80055f4 <_printf_float+0x2cc>)
 80053b0:	4b91      	ldr	r3, [pc, #580]	@ (80055f8 <_printf_float+0x2d0>)
 80053b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053b6:	bf94      	ite	ls
 80053b8:	4690      	movls	r8, r2
 80053ba:	4698      	movhi	r8, r3
 80053bc:	2303      	movs	r3, #3
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	f02b 0304 	bic.w	r3, fp, #4
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	f04f 0900 	mov.w	r9, #0
 80053ca:	9700      	str	r7, [sp, #0]
 80053cc:	4633      	mov	r3, r6
 80053ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053d0:	4621      	mov	r1, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 f9d2 	bl	800577c <_printf_common>
 80053d8:	3001      	adds	r0, #1
 80053da:	f040 808d 	bne.w	80054f8 <_printf_float+0x1d0>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b00d      	add	sp, #52	@ 0x34
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fb fb9c 	bl	8000b2c <__aeabi_dcmpun>
 80053f4:	b140      	cbz	r0, 8005408 <_printf_float+0xe0>
 80053f6:	464b      	mov	r3, r9
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfbc      	itt	lt
 80053fc:	232d      	movlt	r3, #45	@ 0x2d
 80053fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005402:	4a7e      	ldr	r2, [pc, #504]	@ (80055fc <_printf_float+0x2d4>)
 8005404:	4b7e      	ldr	r3, [pc, #504]	@ (8005600 <_printf_float+0x2d8>)
 8005406:	e7d4      	b.n	80053b2 <_printf_float+0x8a>
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800540e:	9206      	str	r2, [sp, #24]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	d13b      	bne.n	800548c <_printf_float+0x164>
 8005414:	2306      	movs	r3, #6
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800541c:	2300      	movs	r3, #0
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	9303      	str	r3, [sp, #12]
 8005422:	ab0a      	add	r3, sp, #40	@ 0x28
 8005424:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005428:	ab09      	add	r3, sp, #36	@ 0x24
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	6861      	ldr	r1, [r4, #4]
 800542e:	ec49 8b10 	vmov	d0, r8, r9
 8005432:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fed7 	bl	80051ea <__cvt>
 800543c:	9b06      	ldr	r3, [sp, #24]
 800543e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005440:	2b47      	cmp	r3, #71	@ 0x47
 8005442:	4680      	mov	r8, r0
 8005444:	d129      	bne.n	800549a <_printf_float+0x172>
 8005446:	1cc8      	adds	r0, r1, #3
 8005448:	db02      	blt.n	8005450 <_printf_float+0x128>
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	4299      	cmp	r1, r3
 800544e:	dd41      	ble.n	80054d4 <_printf_float+0x1ac>
 8005450:	f1aa 0a02 	sub.w	sl, sl, #2
 8005454:	fa5f fa8a 	uxtb.w	sl, sl
 8005458:	3901      	subs	r1, #1
 800545a:	4652      	mov	r2, sl
 800545c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005460:	9109      	str	r1, [sp, #36]	@ 0x24
 8005462:	f7ff ff27 	bl	80052b4 <__exponent>
 8005466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005468:	1813      	adds	r3, r2, r0
 800546a:	2a01      	cmp	r2, #1
 800546c:	4681      	mov	r9, r0
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	dc02      	bgt.n	8005478 <_printf_float+0x150>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d2      	lsls	r2, r2, #31
 8005476:	d501      	bpl.n	800547c <_printf_float+0x154>
 8005478:	3301      	adds	r3, #1
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0a2      	beq.n	80053ca <_printf_float+0xa2>
 8005484:	232d      	movs	r3, #45	@ 0x2d
 8005486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800548a:	e79e      	b.n	80053ca <_printf_float+0xa2>
 800548c:	9a06      	ldr	r2, [sp, #24]
 800548e:	2a47      	cmp	r2, #71	@ 0x47
 8005490:	d1c2      	bne.n	8005418 <_printf_float+0xf0>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1c0      	bne.n	8005418 <_printf_float+0xf0>
 8005496:	2301      	movs	r3, #1
 8005498:	e7bd      	b.n	8005416 <_printf_float+0xee>
 800549a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800549e:	d9db      	bls.n	8005458 <_printf_float+0x130>
 80054a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054a4:	d118      	bne.n	80054d8 <_printf_float+0x1b0>
 80054a6:	2900      	cmp	r1, #0
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	dd0b      	ble.n	80054c4 <_printf_float+0x19c>
 80054ac:	6121      	str	r1, [r4, #16]
 80054ae:	b913      	cbnz	r3, 80054b6 <_printf_float+0x18e>
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	07d0      	lsls	r0, r2, #31
 80054b4:	d502      	bpl.n	80054bc <_printf_float+0x194>
 80054b6:	3301      	adds	r3, #1
 80054b8:	440b      	add	r3, r1
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054be:	f04f 0900 	mov.w	r9, #0
 80054c2:	e7db      	b.n	800547c <_printf_float+0x154>
 80054c4:	b913      	cbnz	r3, 80054cc <_printf_float+0x1a4>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	07d2      	lsls	r2, r2, #31
 80054ca:	d501      	bpl.n	80054d0 <_printf_float+0x1a8>
 80054cc:	3302      	adds	r3, #2
 80054ce:	e7f4      	b.n	80054ba <_printf_float+0x192>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e7f2      	b.n	80054ba <_printf_float+0x192>
 80054d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054da:	4299      	cmp	r1, r3
 80054dc:	db05      	blt.n	80054ea <_printf_float+0x1c2>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6121      	str	r1, [r4, #16]
 80054e2:	07d8      	lsls	r0, r3, #31
 80054e4:	d5ea      	bpl.n	80054bc <_printf_float+0x194>
 80054e6:	1c4b      	adds	r3, r1, #1
 80054e8:	e7e7      	b.n	80054ba <_printf_float+0x192>
 80054ea:	2900      	cmp	r1, #0
 80054ec:	bfd4      	ite	le
 80054ee:	f1c1 0202 	rsble	r2, r1, #2
 80054f2:	2201      	movgt	r2, #1
 80054f4:	4413      	add	r3, r2
 80054f6:	e7e0      	b.n	80054ba <_printf_float+0x192>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	055a      	lsls	r2, r3, #21
 80054fc:	d407      	bmi.n	800550e <_printf_float+0x1e6>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	4642      	mov	r2, r8
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d12b      	bne.n	8005564 <_printf_float+0x23c>
 800550c:	e767      	b.n	80053de <_printf_float+0xb6>
 800550e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005512:	f240 80dd 	bls.w	80056d0 <_printf_float+0x3a8>
 8005516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800551a:	2200      	movs	r2, #0
 800551c:	2300      	movs	r3, #0
 800551e:	f7fb fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005522:	2800      	cmp	r0, #0
 8005524:	d033      	beq.n	800558e <_printf_float+0x266>
 8005526:	4a37      	ldr	r2, [pc, #220]	@ (8005604 <_printf_float+0x2dc>)
 8005528:	2301      	movs	r3, #1
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	f43f af54 	beq.w	80053de <_printf_float+0xb6>
 8005536:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800553a:	4543      	cmp	r3, r8
 800553c:	db02      	blt.n	8005544 <_printf_float+0x21c>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	07d8      	lsls	r0, r3, #31
 8005542:	d50f      	bpl.n	8005564 <_printf_float+0x23c>
 8005544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f af45 	beq.w	80053de <_printf_float+0xb6>
 8005554:	f04f 0900 	mov.w	r9, #0
 8005558:	f108 38ff 	add.w	r8, r8, #4294967295
 800555c:	f104 0a1a 	add.w	sl, r4, #26
 8005560:	45c8      	cmp	r8, r9
 8005562:	dc09      	bgt.n	8005578 <_printf_float+0x250>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	079b      	lsls	r3, r3, #30
 8005568:	f100 8103 	bmi.w	8005772 <_printf_float+0x44a>
 800556c:	68e0      	ldr	r0, [r4, #12]
 800556e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005570:	4298      	cmp	r0, r3
 8005572:	bfb8      	it	lt
 8005574:	4618      	movlt	r0, r3
 8005576:	e734      	b.n	80053e2 <_printf_float+0xba>
 8005578:	2301      	movs	r3, #1
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af2b 	beq.w	80053de <_printf_float+0xb6>
 8005588:	f109 0901 	add.w	r9, r9, #1
 800558c:	e7e8      	b.n	8005560 <_printf_float+0x238>
 800558e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	dc39      	bgt.n	8005608 <_printf_float+0x2e0>
 8005594:	4a1b      	ldr	r2, [pc, #108]	@ (8005604 <_printf_float+0x2dc>)
 8005596:	2301      	movs	r3, #1
 8005598:	4631      	mov	r1, r6
 800559a:	4628      	mov	r0, r5
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	f43f af1d 	beq.w	80053de <_printf_float+0xb6>
 80055a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055a8:	ea59 0303 	orrs.w	r3, r9, r3
 80055ac:	d102      	bne.n	80055b4 <_printf_float+0x28c>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	07d9      	lsls	r1, r3, #31
 80055b2:	d5d7      	bpl.n	8005564 <_printf_float+0x23c>
 80055b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f af0d 	beq.w	80053de <_printf_float+0xb6>
 80055c4:	f04f 0a00 	mov.w	sl, #0
 80055c8:	f104 0b1a 	add.w	fp, r4, #26
 80055cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ce:	425b      	negs	r3, r3
 80055d0:	4553      	cmp	r3, sl
 80055d2:	dc01      	bgt.n	80055d8 <_printf_float+0x2b0>
 80055d4:	464b      	mov	r3, r9
 80055d6:	e793      	b.n	8005500 <_printf_float+0x1d8>
 80055d8:	2301      	movs	r3, #1
 80055da:	465a      	mov	r2, fp
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f aefb 	beq.w	80053de <_printf_float+0xb6>
 80055e8:	f10a 0a01 	add.w	sl, sl, #1
 80055ec:	e7ee      	b.n	80055cc <_printf_float+0x2a4>
 80055ee:	bf00      	nop
 80055f0:	7fefffff 	.word	0x7fefffff
 80055f4:	08009e70 	.word	0x08009e70
 80055f8:	08009e74 	.word	0x08009e74
 80055fc:	08009e78 	.word	0x08009e78
 8005600:	08009e7c 	.word	0x08009e7c
 8005604:	08009e80 	.word	0x08009e80
 8005608:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800560a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800560e:	4553      	cmp	r3, sl
 8005610:	bfa8      	it	ge
 8005612:	4653      	movge	r3, sl
 8005614:	2b00      	cmp	r3, #0
 8005616:	4699      	mov	r9, r3
 8005618:	dc36      	bgt.n	8005688 <_printf_float+0x360>
 800561a:	f04f 0b00 	mov.w	fp, #0
 800561e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005622:	f104 021a 	add.w	r2, r4, #26
 8005626:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	eba3 0309 	sub.w	r3, r3, r9
 800562e:	455b      	cmp	r3, fp
 8005630:	dc31      	bgt.n	8005696 <_printf_float+0x36e>
 8005632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005634:	459a      	cmp	sl, r3
 8005636:	dc3a      	bgt.n	80056ae <_printf_float+0x386>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	07da      	lsls	r2, r3, #31
 800563c:	d437      	bmi.n	80056ae <_printf_float+0x386>
 800563e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005640:	ebaa 0903 	sub.w	r9, sl, r3
 8005644:	9b06      	ldr	r3, [sp, #24]
 8005646:	ebaa 0303 	sub.w	r3, sl, r3
 800564a:	4599      	cmp	r9, r3
 800564c:	bfa8      	it	ge
 800564e:	4699      	movge	r9, r3
 8005650:	f1b9 0f00 	cmp.w	r9, #0
 8005654:	dc33      	bgt.n	80056be <_printf_float+0x396>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800565e:	f104 0b1a 	add.w	fp, r4, #26
 8005662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005664:	ebaa 0303 	sub.w	r3, sl, r3
 8005668:	eba3 0309 	sub.w	r3, r3, r9
 800566c:	4543      	cmp	r3, r8
 800566e:	f77f af79 	ble.w	8005564 <_printf_float+0x23c>
 8005672:	2301      	movs	r3, #1
 8005674:	465a      	mov	r2, fp
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	f43f aeae 	beq.w	80053de <_printf_float+0xb6>
 8005682:	f108 0801 	add.w	r8, r8, #1
 8005686:	e7ec      	b.n	8005662 <_printf_float+0x33a>
 8005688:	4642      	mov	r2, r8
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	d1c2      	bne.n	800561a <_printf_float+0x2f2>
 8005694:	e6a3      	b.n	80053de <_printf_float+0xb6>
 8005696:	2301      	movs	r3, #1
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	9206      	str	r2, [sp, #24]
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae9c 	beq.w	80053de <_printf_float+0xb6>
 80056a6:	9a06      	ldr	r2, [sp, #24]
 80056a8:	f10b 0b01 	add.w	fp, fp, #1
 80056ac:	e7bb      	b.n	8005626 <_printf_float+0x2fe>
 80056ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	d1c0      	bne.n	800563e <_printf_float+0x316>
 80056bc:	e68f      	b.n	80053de <_printf_float+0xb6>
 80056be:	9a06      	ldr	r2, [sp, #24]
 80056c0:	464b      	mov	r3, r9
 80056c2:	4442      	add	r2, r8
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	d1c3      	bne.n	8005656 <_printf_float+0x32e>
 80056ce:	e686      	b.n	80053de <_printf_float+0xb6>
 80056d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d4:	f1ba 0f01 	cmp.w	sl, #1
 80056d8:	dc01      	bgt.n	80056de <_printf_float+0x3b6>
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d536      	bpl.n	800574c <_printf_float+0x424>
 80056de:	2301      	movs	r3, #1
 80056e0:	4642      	mov	r2, r8
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f ae78 	beq.w	80053de <_printf_float+0xb6>
 80056ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae70 	beq.w	80053de <_printf_float+0xb6>
 80056fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570a:	f7fb f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800570e:	b9c0      	cbnz	r0, 8005742 <_printf_float+0x41a>
 8005710:	4653      	mov	r3, sl
 8005712:	f108 0201 	add.w	r2, r8, #1
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	d10c      	bne.n	800573a <_printf_float+0x412>
 8005720:	e65d      	b.n	80053de <_printf_float+0xb6>
 8005722:	2301      	movs	r3, #1
 8005724:	465a      	mov	r2, fp
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae56 	beq.w	80053de <_printf_float+0xb6>
 8005732:	f108 0801 	add.w	r8, r8, #1
 8005736:	45d0      	cmp	r8, sl
 8005738:	dbf3      	blt.n	8005722 <_printf_float+0x3fa>
 800573a:	464b      	mov	r3, r9
 800573c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005740:	e6df      	b.n	8005502 <_printf_float+0x1da>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	f104 0b1a 	add.w	fp, r4, #26
 800574a:	e7f4      	b.n	8005736 <_printf_float+0x40e>
 800574c:	2301      	movs	r3, #1
 800574e:	4642      	mov	r2, r8
 8005750:	e7e1      	b.n	8005716 <_printf_float+0x3ee>
 8005752:	2301      	movs	r3, #1
 8005754:	464a      	mov	r2, r9
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f ae3e 	beq.w	80053de <_printf_float+0xb6>
 8005762:	f108 0801 	add.w	r8, r8, #1
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800576a:	1a5b      	subs	r3, r3, r1
 800576c:	4543      	cmp	r3, r8
 800576e:	dcf0      	bgt.n	8005752 <_printf_float+0x42a>
 8005770:	e6fc      	b.n	800556c <_printf_float+0x244>
 8005772:	f04f 0800 	mov.w	r8, #0
 8005776:	f104 0919 	add.w	r9, r4, #25
 800577a:	e7f4      	b.n	8005766 <_printf_float+0x43e>

0800577c <_printf_common>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	4616      	mov	r6, r2
 8005782:	4698      	mov	r8, r3
 8005784:	688a      	ldr	r2, [r1, #8]
 8005786:	690b      	ldr	r3, [r1, #16]
 8005788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800578c:	4293      	cmp	r3, r2
 800578e:	bfb8      	it	lt
 8005790:	4613      	movlt	r3, r2
 8005792:	6033      	str	r3, [r6, #0]
 8005794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005798:	4607      	mov	r7, r0
 800579a:	460c      	mov	r4, r1
 800579c:	b10a      	cbz	r2, 80057a2 <_printf_common+0x26>
 800579e:	3301      	adds	r3, #1
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	0699      	lsls	r1, r3, #26
 80057a6:	bf42      	ittt	mi
 80057a8:	6833      	ldrmi	r3, [r6, #0]
 80057aa:	3302      	addmi	r3, #2
 80057ac:	6033      	strmi	r3, [r6, #0]
 80057ae:	6825      	ldr	r5, [r4, #0]
 80057b0:	f015 0506 	ands.w	r5, r5, #6
 80057b4:	d106      	bne.n	80057c4 <_printf_common+0x48>
 80057b6:	f104 0a19 	add.w	sl, r4, #25
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	6832      	ldr	r2, [r6, #0]
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	dc26      	bgt.n	8005812 <_printf_common+0x96>
 80057c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	3b00      	subs	r3, #0
 80057cc:	bf18      	it	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	0692      	lsls	r2, r2, #26
 80057d2:	d42b      	bmi.n	800582c <_printf_common+0xb0>
 80057d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057d8:	4641      	mov	r1, r8
 80057da:	4638      	mov	r0, r7
 80057dc:	47c8      	blx	r9
 80057de:	3001      	adds	r0, #1
 80057e0:	d01e      	beq.n	8005820 <_printf_common+0xa4>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6922      	ldr	r2, [r4, #16]
 80057e6:	f003 0306 	and.w	r3, r3, #6
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	bf02      	ittt	eq
 80057ee:	68e5      	ldreq	r5, [r4, #12]
 80057f0:	6833      	ldreq	r3, [r6, #0]
 80057f2:	1aed      	subeq	r5, r5, r3
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	bf0c      	ite	eq
 80057f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057fc:	2500      	movne	r5, #0
 80057fe:	4293      	cmp	r3, r2
 8005800:	bfc4      	itt	gt
 8005802:	1a9b      	subgt	r3, r3, r2
 8005804:	18ed      	addgt	r5, r5, r3
 8005806:	2600      	movs	r6, #0
 8005808:	341a      	adds	r4, #26
 800580a:	42b5      	cmp	r5, r6
 800580c:	d11a      	bne.n	8005844 <_printf_common+0xc8>
 800580e:	2000      	movs	r0, #0
 8005810:	e008      	b.n	8005824 <_printf_common+0xa8>
 8005812:	2301      	movs	r3, #1
 8005814:	4652      	mov	r2, sl
 8005816:	4641      	mov	r1, r8
 8005818:	4638      	mov	r0, r7
 800581a:	47c8      	blx	r9
 800581c:	3001      	adds	r0, #1
 800581e:	d103      	bne.n	8005828 <_printf_common+0xac>
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005828:	3501      	adds	r5, #1
 800582a:	e7c6      	b.n	80057ba <_printf_common+0x3e>
 800582c:	18e1      	adds	r1, r4, r3
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	2030      	movs	r0, #48	@ 0x30
 8005832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005836:	4422      	add	r2, r4
 8005838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800583c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005840:	3302      	adds	r3, #2
 8005842:	e7c7      	b.n	80057d4 <_printf_common+0x58>
 8005844:	2301      	movs	r3, #1
 8005846:	4622      	mov	r2, r4
 8005848:	4641      	mov	r1, r8
 800584a:	4638      	mov	r0, r7
 800584c:	47c8      	blx	r9
 800584e:	3001      	adds	r0, #1
 8005850:	d0e6      	beq.n	8005820 <_printf_common+0xa4>
 8005852:	3601      	adds	r6, #1
 8005854:	e7d9      	b.n	800580a <_printf_common+0x8e>
	...

08005858 <_printf_i>:
 8005858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	7e0f      	ldrb	r7, [r1, #24]
 800585e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005860:	2f78      	cmp	r7, #120	@ 0x78
 8005862:	4691      	mov	r9, r2
 8005864:	4680      	mov	r8, r0
 8005866:	460c      	mov	r4, r1
 8005868:	469a      	mov	sl, r3
 800586a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800586e:	d807      	bhi.n	8005880 <_printf_i+0x28>
 8005870:	2f62      	cmp	r7, #98	@ 0x62
 8005872:	d80a      	bhi.n	800588a <_printf_i+0x32>
 8005874:	2f00      	cmp	r7, #0
 8005876:	f000 80d2 	beq.w	8005a1e <_printf_i+0x1c6>
 800587a:	2f58      	cmp	r7, #88	@ 0x58
 800587c:	f000 80b9 	beq.w	80059f2 <_printf_i+0x19a>
 8005880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005888:	e03a      	b.n	8005900 <_printf_i+0xa8>
 800588a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800588e:	2b15      	cmp	r3, #21
 8005890:	d8f6      	bhi.n	8005880 <_printf_i+0x28>
 8005892:	a101      	add	r1, pc, #4	@ (adr r1, 8005898 <_printf_i+0x40>)
 8005894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005898:	080058f1 	.word	0x080058f1
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005881 	.word	0x08005881
 80058a4:	08005881 	.word	0x08005881
 80058a8:	08005881 	.word	0x08005881
 80058ac:	08005881 	.word	0x08005881
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005881 	.word	0x08005881
 80058b8:	08005881 	.word	0x08005881
 80058bc:	08005881 	.word	0x08005881
 80058c0:	08005881 	.word	0x08005881
 80058c4:	08005a05 	.word	0x08005a05
 80058c8:	0800592f 	.word	0x0800592f
 80058cc:	080059bf 	.word	0x080059bf
 80058d0:	08005881 	.word	0x08005881
 80058d4:	08005881 	.word	0x08005881
 80058d8:	08005a27 	.word	0x08005a27
 80058dc:	08005881 	.word	0x08005881
 80058e0:	0800592f 	.word	0x0800592f
 80058e4:	08005881 	.word	0x08005881
 80058e8:	08005881 	.word	0x08005881
 80058ec:	080059c7 	.word	0x080059c7
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6032      	str	r2, [r6, #0]
 80058f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005900:	2301      	movs	r3, #1
 8005902:	e09d      	b.n	8005a40 <_printf_i+0x1e8>
 8005904:	6833      	ldr	r3, [r6, #0]
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1d19      	adds	r1, r3, #4
 800590a:	6031      	str	r1, [r6, #0]
 800590c:	0606      	lsls	r6, r0, #24
 800590e:	d501      	bpl.n	8005914 <_printf_i+0xbc>
 8005910:	681d      	ldr	r5, [r3, #0]
 8005912:	e003      	b.n	800591c <_printf_i+0xc4>
 8005914:	0645      	lsls	r5, r0, #25
 8005916:	d5fb      	bpl.n	8005910 <_printf_i+0xb8>
 8005918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800591c:	2d00      	cmp	r5, #0
 800591e:	da03      	bge.n	8005928 <_printf_i+0xd0>
 8005920:	232d      	movs	r3, #45	@ 0x2d
 8005922:	426d      	negs	r5, r5
 8005924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005928:	4859      	ldr	r0, [pc, #356]	@ (8005a90 <_printf_i+0x238>)
 800592a:	230a      	movs	r3, #10
 800592c:	e011      	b.n	8005952 <_printf_i+0xfa>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	6833      	ldr	r3, [r6, #0]
 8005932:	0608      	lsls	r0, r1, #24
 8005934:	f853 5b04 	ldr.w	r5, [r3], #4
 8005938:	d402      	bmi.n	8005940 <_printf_i+0xe8>
 800593a:	0649      	lsls	r1, r1, #25
 800593c:	bf48      	it	mi
 800593e:	b2ad      	uxthmi	r5, r5
 8005940:	2f6f      	cmp	r7, #111	@ 0x6f
 8005942:	4853      	ldr	r0, [pc, #332]	@ (8005a90 <_printf_i+0x238>)
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	bf14      	ite	ne
 8005948:	230a      	movne	r3, #10
 800594a:	2308      	moveq	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005952:	6866      	ldr	r6, [r4, #4]
 8005954:	60a6      	str	r6, [r4, #8]
 8005956:	2e00      	cmp	r6, #0
 8005958:	bfa2      	ittt	ge
 800595a:	6821      	ldrge	r1, [r4, #0]
 800595c:	f021 0104 	bicge.w	r1, r1, #4
 8005960:	6021      	strge	r1, [r4, #0]
 8005962:	b90d      	cbnz	r5, 8005968 <_printf_i+0x110>
 8005964:	2e00      	cmp	r6, #0
 8005966:	d04b      	beq.n	8005a00 <_printf_i+0x1a8>
 8005968:	4616      	mov	r6, r2
 800596a:	fbb5 f1f3 	udiv	r1, r5, r3
 800596e:	fb03 5711 	mls	r7, r3, r1, r5
 8005972:	5dc7      	ldrb	r7, [r0, r7]
 8005974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005978:	462f      	mov	r7, r5
 800597a:	42bb      	cmp	r3, r7
 800597c:	460d      	mov	r5, r1
 800597e:	d9f4      	bls.n	800596a <_printf_i+0x112>
 8005980:	2b08      	cmp	r3, #8
 8005982:	d10b      	bne.n	800599c <_printf_i+0x144>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	07df      	lsls	r7, r3, #31
 8005988:	d508      	bpl.n	800599c <_printf_i+0x144>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6861      	ldr	r1, [r4, #4]
 800598e:	4299      	cmp	r1, r3
 8005990:	bfde      	ittt	le
 8005992:	2330      	movle	r3, #48	@ 0x30
 8005994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800599c:	1b92      	subs	r2, r2, r6
 800599e:	6122      	str	r2, [r4, #16]
 80059a0:	f8cd a000 	str.w	sl, [sp]
 80059a4:	464b      	mov	r3, r9
 80059a6:	aa03      	add	r2, sp, #12
 80059a8:	4621      	mov	r1, r4
 80059aa:	4640      	mov	r0, r8
 80059ac:	f7ff fee6 	bl	800577c <_printf_common>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d14a      	bne.n	8005a4a <_printf_i+0x1f2>
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	b004      	add	sp, #16
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f043 0320 	orr.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	4833      	ldr	r0, [pc, #204]	@ (8005a94 <_printf_i+0x23c>)
 80059c8:	2778      	movs	r7, #120	@ 0x78
 80059ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6831      	ldr	r1, [r6, #0]
 80059d2:	061f      	lsls	r7, r3, #24
 80059d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059d8:	d402      	bmi.n	80059e0 <_printf_i+0x188>
 80059da:	065f      	lsls	r7, r3, #25
 80059dc:	bf48      	it	mi
 80059de:	b2ad      	uxthmi	r5, r5
 80059e0:	6031      	str	r1, [r6, #0]
 80059e2:	07d9      	lsls	r1, r3, #31
 80059e4:	bf44      	itt	mi
 80059e6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ea:	6023      	strmi	r3, [r4, #0]
 80059ec:	b11d      	cbz	r5, 80059f6 <_printf_i+0x19e>
 80059ee:	2310      	movs	r3, #16
 80059f0:	e7ac      	b.n	800594c <_printf_i+0xf4>
 80059f2:	4827      	ldr	r0, [pc, #156]	@ (8005a90 <_printf_i+0x238>)
 80059f4:	e7e9      	b.n	80059ca <_printf_i+0x172>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f023 0320 	bic.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	e7f6      	b.n	80059ee <_printf_i+0x196>
 8005a00:	4616      	mov	r6, r2
 8005a02:	e7bd      	b.n	8005980 <_printf_i+0x128>
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	6961      	ldr	r1, [r4, #20]
 8005a0a:	1d18      	adds	r0, r3, #4
 8005a0c:	6030      	str	r0, [r6, #0]
 8005a0e:	062e      	lsls	r6, r5, #24
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	d501      	bpl.n	8005a18 <_printf_i+0x1c0>
 8005a14:	6019      	str	r1, [r3, #0]
 8005a16:	e002      	b.n	8005a1e <_printf_i+0x1c6>
 8005a18:	0668      	lsls	r0, r5, #25
 8005a1a:	d5fb      	bpl.n	8005a14 <_printf_i+0x1bc>
 8005a1c:	8019      	strh	r1, [r3, #0]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	4616      	mov	r6, r2
 8005a24:	e7bc      	b.n	80059a0 <_printf_i+0x148>
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	1d1a      	adds	r2, r3, #4
 8005a2a:	6032      	str	r2, [r6, #0]
 8005a2c:	681e      	ldr	r6, [r3, #0]
 8005a2e:	6862      	ldr	r2, [r4, #4]
 8005a30:	2100      	movs	r1, #0
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7fa fbcc 	bl	80001d0 <memchr>
 8005a38:	b108      	cbz	r0, 8005a3e <_printf_i+0x1e6>
 8005a3a:	1b80      	subs	r0, r0, r6
 8005a3c:	6060      	str	r0, [r4, #4]
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	2300      	movs	r3, #0
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a48:	e7aa      	b.n	80059a0 <_printf_i+0x148>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4640      	mov	r0, r8
 8005a52:	47d0      	blx	sl
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0ad      	beq.n	80059b4 <_printf_i+0x15c>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	079b      	lsls	r3, r3, #30
 8005a5c:	d413      	bmi.n	8005a86 <_printf_i+0x22e>
 8005a5e:	68e0      	ldr	r0, [r4, #12]
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	4298      	cmp	r0, r3
 8005a64:	bfb8      	it	lt
 8005a66:	4618      	movlt	r0, r3
 8005a68:	e7a6      	b.n	80059b8 <_printf_i+0x160>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4640      	mov	r0, r8
 8005a72:	47d0      	blx	sl
 8005a74:	3001      	adds	r0, #1
 8005a76:	d09d      	beq.n	80059b4 <_printf_i+0x15c>
 8005a78:	3501      	adds	r5, #1
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	9903      	ldr	r1, [sp, #12]
 8005a7e:	1a5b      	subs	r3, r3, r1
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dcf2      	bgt.n	8005a6a <_printf_i+0x212>
 8005a84:	e7eb      	b.n	8005a5e <_printf_i+0x206>
 8005a86:	2500      	movs	r5, #0
 8005a88:	f104 0619 	add.w	r6, r4, #25
 8005a8c:	e7f5      	b.n	8005a7a <_printf_i+0x222>
 8005a8e:	bf00      	nop
 8005a90:	08009e82 	.word	0x08009e82
 8005a94:	08009e93 	.word	0x08009e93

08005a98 <_scanf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	4617      	mov	r7, r2
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	688b      	ldr	r3, [r1, #8]
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005aaa:	bf81      	itttt	hi
 8005aac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ab0:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ab4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ab8:	608b      	strhi	r3, [r1, #8]
 8005aba:	680b      	ldr	r3, [r1, #0]
 8005abc:	460a      	mov	r2, r1
 8005abe:	f04f 0500 	mov.w	r5, #0
 8005ac2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005ac6:	f842 3b1c 	str.w	r3, [r2], #28
 8005aca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ace:	4680      	mov	r8, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	bf98      	it	ls
 8005ad4:	f04f 0b00 	movls.w	fp, #0
 8005ad8:	9201      	str	r2, [sp, #4]
 8005ada:	4616      	mov	r6, r2
 8005adc:	46aa      	mov	sl, r5
 8005ade:	46a9      	mov	r9, r5
 8005ae0:	9502      	str	r5, [sp, #8]
 8005ae2:	68a2      	ldr	r2, [r4, #8]
 8005ae4:	b152      	cbz	r2, 8005afc <_scanf_float+0x64>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b4e      	cmp	r3, #78	@ 0x4e
 8005aec:	d864      	bhi.n	8005bb8 <_scanf_float+0x120>
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	d83c      	bhi.n	8005b6c <_scanf_float+0xd4>
 8005af2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005af6:	b2c8      	uxtb	r0, r1
 8005af8:	280e      	cmp	r0, #14
 8005afa:	d93a      	bls.n	8005b72 <_scanf_float+0xda>
 8005afc:	f1b9 0f00 	cmp.w	r9, #0
 8005b00:	d003      	beq.n	8005b0a <_scanf_float+0x72>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b0e:	f1ba 0f01 	cmp.w	sl, #1
 8005b12:	f200 8117 	bhi.w	8005d44 <_scanf_float+0x2ac>
 8005b16:	9b01      	ldr	r3, [sp, #4]
 8005b18:	429e      	cmp	r6, r3
 8005b1a:	f200 8108 	bhi.w	8005d2e <_scanf_float+0x296>
 8005b1e:	2001      	movs	r0, #1
 8005b20:	b007      	add	sp, #28
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005b2a:	2a0d      	cmp	r2, #13
 8005b2c:	d8e6      	bhi.n	8005afc <_scanf_float+0x64>
 8005b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b34 <_scanf_float+0x9c>)
 8005b30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b34:	08005c7b 	.word	0x08005c7b
 8005b38:	08005afd 	.word	0x08005afd
 8005b3c:	08005afd 	.word	0x08005afd
 8005b40:	08005afd 	.word	0x08005afd
 8005b44:	08005cdb 	.word	0x08005cdb
 8005b48:	08005cb3 	.word	0x08005cb3
 8005b4c:	08005afd 	.word	0x08005afd
 8005b50:	08005afd 	.word	0x08005afd
 8005b54:	08005c89 	.word	0x08005c89
 8005b58:	08005afd 	.word	0x08005afd
 8005b5c:	08005afd 	.word	0x08005afd
 8005b60:	08005afd 	.word	0x08005afd
 8005b64:	08005afd 	.word	0x08005afd
 8005b68:	08005c41 	.word	0x08005c41
 8005b6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005b70:	e7db      	b.n	8005b2a <_scanf_float+0x92>
 8005b72:	290e      	cmp	r1, #14
 8005b74:	d8c2      	bhi.n	8005afc <_scanf_float+0x64>
 8005b76:	a001      	add	r0, pc, #4	@ (adr r0, 8005b7c <_scanf_float+0xe4>)
 8005b78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b7c:	08005c31 	.word	0x08005c31
 8005b80:	08005afd 	.word	0x08005afd
 8005b84:	08005c31 	.word	0x08005c31
 8005b88:	08005cc7 	.word	0x08005cc7
 8005b8c:	08005afd 	.word	0x08005afd
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005c17 	.word	0x08005c17
 8005b98:	08005c17 	.word	0x08005c17
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c17 	.word	0x08005c17
 8005ba4:	08005c17 	.word	0x08005c17
 8005ba8:	08005c17 	.word	0x08005c17
 8005bac:	08005c17 	.word	0x08005c17
 8005bb0:	08005c17 	.word	0x08005c17
 8005bb4:	08005c17 	.word	0x08005c17
 8005bb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8005bba:	d809      	bhi.n	8005bd0 <_scanf_float+0x138>
 8005bbc:	2b60      	cmp	r3, #96	@ 0x60
 8005bbe:	d8b2      	bhi.n	8005b26 <_scanf_float+0x8e>
 8005bc0:	2b54      	cmp	r3, #84	@ 0x54
 8005bc2:	d07b      	beq.n	8005cbc <_scanf_float+0x224>
 8005bc4:	2b59      	cmp	r3, #89	@ 0x59
 8005bc6:	d199      	bne.n	8005afc <_scanf_float+0x64>
 8005bc8:	2d07      	cmp	r5, #7
 8005bca:	d197      	bne.n	8005afc <_scanf_float+0x64>
 8005bcc:	2508      	movs	r5, #8
 8005bce:	e02c      	b.n	8005c2a <_scanf_float+0x192>
 8005bd0:	2b74      	cmp	r3, #116	@ 0x74
 8005bd2:	d073      	beq.n	8005cbc <_scanf_float+0x224>
 8005bd4:	2b79      	cmp	r3, #121	@ 0x79
 8005bd6:	e7f6      	b.n	8005bc6 <_scanf_float+0x12e>
 8005bd8:	6821      	ldr	r1, [r4, #0]
 8005bda:	05c8      	lsls	r0, r1, #23
 8005bdc:	d51b      	bpl.n	8005c16 <_scanf_float+0x17e>
 8005bde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005be2:	6021      	str	r1, [r4, #0]
 8005be4:	f109 0901 	add.w	r9, r9, #1
 8005be8:	f1bb 0f00 	cmp.w	fp, #0
 8005bec:	d003      	beq.n	8005bf6 <_scanf_float+0x15e>
 8005bee:	3201      	adds	r2, #1
 8005bf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf4:	60a2      	str	r2, [r4, #8]
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	60a3      	str	r3, [r4, #8]
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	f340 8087 	ble.w	8005d1c <_scanf_float+0x284>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	e765      	b.n	8005ae2 <_scanf_float+0x4a>
 8005c16:	eb1a 0105 	adds.w	r1, sl, r5
 8005c1a:	f47f af6f 	bne.w	8005afc <_scanf_float+0x64>
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	460d      	mov	r5, r1
 8005c28:	468a      	mov	sl, r1
 8005c2a:	f806 3b01 	strb.w	r3, [r6], #1
 8005c2e:	e7e2      	b.n	8005bf6 <_scanf_float+0x15e>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	0610      	lsls	r0, r2, #24
 8005c34:	f57f af62 	bpl.w	8005afc <_scanf_float+0x64>
 8005c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c3c:	6022      	str	r2, [r4, #0]
 8005c3e:	e7f4      	b.n	8005c2a <_scanf_float+0x192>
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	d10e      	bne.n	8005c64 <_scanf_float+0x1cc>
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	d10e      	bne.n	8005c6a <_scanf_float+0x1d2>
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c56:	d108      	bne.n	8005c6a <_scanf_float+0x1d2>
 8005c58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	f04f 0a01 	mov.w	sl, #1
 8005c62:	e7e2      	b.n	8005c2a <_scanf_float+0x192>
 8005c64:	f1ba 0f02 	cmp.w	sl, #2
 8005c68:	d055      	beq.n	8005d16 <_scanf_float+0x27e>
 8005c6a:	2d01      	cmp	r5, #1
 8005c6c:	d002      	beq.n	8005c74 <_scanf_float+0x1dc>
 8005c6e:	2d04      	cmp	r5, #4
 8005c70:	f47f af44 	bne.w	8005afc <_scanf_float+0x64>
 8005c74:	3501      	adds	r5, #1
 8005c76:	b2ed      	uxtb	r5, r5
 8005c78:	e7d7      	b.n	8005c2a <_scanf_float+0x192>
 8005c7a:	f1ba 0f01 	cmp.w	sl, #1
 8005c7e:	f47f af3d 	bne.w	8005afc <_scanf_float+0x64>
 8005c82:	f04f 0a02 	mov.w	sl, #2
 8005c86:	e7d0      	b.n	8005c2a <_scanf_float+0x192>
 8005c88:	b97d      	cbnz	r5, 8005caa <_scanf_float+0x212>
 8005c8a:	f1b9 0f00 	cmp.w	r9, #0
 8005c8e:	f47f af38 	bne.w	8005b02 <_scanf_float+0x6a>
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c9c:	f040 8108 	bne.w	8005eb0 <_scanf_float+0x418>
 8005ca0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	2501      	movs	r5, #1
 8005ca8:	e7bf      	b.n	8005c2a <_scanf_float+0x192>
 8005caa:	2d03      	cmp	r5, #3
 8005cac:	d0e2      	beq.n	8005c74 <_scanf_float+0x1dc>
 8005cae:	2d05      	cmp	r5, #5
 8005cb0:	e7de      	b.n	8005c70 <_scanf_float+0x1d8>
 8005cb2:	2d02      	cmp	r5, #2
 8005cb4:	f47f af22 	bne.w	8005afc <_scanf_float+0x64>
 8005cb8:	2503      	movs	r5, #3
 8005cba:	e7b6      	b.n	8005c2a <_scanf_float+0x192>
 8005cbc:	2d06      	cmp	r5, #6
 8005cbe:	f47f af1d 	bne.w	8005afc <_scanf_float+0x64>
 8005cc2:	2507      	movs	r5, #7
 8005cc4:	e7b1      	b.n	8005c2a <_scanf_float+0x192>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	0591      	lsls	r1, r2, #22
 8005cca:	f57f af17 	bpl.w	8005afc <_scanf_float+0x64>
 8005cce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005cd2:	6022      	str	r2, [r4, #0]
 8005cd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cd8:	e7a7      	b.n	8005c2a <_scanf_float+0x192>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ce0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ce4:	d006      	beq.n	8005cf4 <_scanf_float+0x25c>
 8005ce6:	0550      	lsls	r0, r2, #21
 8005ce8:	f57f af08 	bpl.w	8005afc <_scanf_float+0x64>
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	f000 80de 	beq.w	8005eb0 <_scanf_float+0x418>
 8005cf4:	0591      	lsls	r1, r2, #22
 8005cf6:	bf58      	it	pl
 8005cf8:	9902      	ldrpl	r1, [sp, #8]
 8005cfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005cfe:	bf58      	it	pl
 8005d00:	eba9 0101 	subpl.w	r1, r9, r1
 8005d04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005d08:	bf58      	it	pl
 8005d0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	f04f 0900 	mov.w	r9, #0
 8005d14:	e789      	b.n	8005c2a <_scanf_float+0x192>
 8005d16:	f04f 0a03 	mov.w	sl, #3
 8005d1a:	e786      	b.n	8005c2a <_scanf_float+0x192>
 8005d1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d20:	4639      	mov	r1, r7
 8005d22:	4640      	mov	r0, r8
 8005d24:	4798      	blx	r3
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f aedb 	beq.w	8005ae2 <_scanf_float+0x4a>
 8005d2c:	e6e6      	b.n	8005afc <_scanf_float+0x64>
 8005d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d36:	463a      	mov	r2, r7
 8005d38:	4640      	mov	r0, r8
 8005d3a:	4798      	blx	r3
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	e6e8      	b.n	8005b16 <_scanf_float+0x7e>
 8005d44:	1e6b      	subs	r3, r5, #1
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d824      	bhi.n	8005d94 <_scanf_float+0x2fc>
 8005d4a:	2d02      	cmp	r5, #2
 8005d4c:	d836      	bhi.n	8005dbc <_scanf_float+0x324>
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	429e      	cmp	r6, r3
 8005d52:	f67f aee4 	bls.w	8005b1e <_scanf_float+0x86>
 8005d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4640      	mov	r0, r8
 8005d62:	4798      	blx	r3
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	e7f0      	b.n	8005d4e <_scanf_float+0x2b6>
 8005d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005d74:	463a      	mov	r2, r7
 8005d76:	4640      	mov	r0, r8
 8005d78:	4798      	blx	r3
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d84:	fa5f fa8a 	uxtb.w	sl, sl
 8005d88:	f1ba 0f02 	cmp.w	sl, #2
 8005d8c:	d1ee      	bne.n	8005d6c <_scanf_float+0x2d4>
 8005d8e:	3d03      	subs	r5, #3
 8005d90:	b2ed      	uxtb	r5, r5
 8005d92:	1b76      	subs	r6, r6, r5
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	05da      	lsls	r2, r3, #23
 8005d98:	d530      	bpl.n	8005dfc <_scanf_float+0x364>
 8005d9a:	055b      	lsls	r3, r3, #21
 8005d9c:	d511      	bpl.n	8005dc2 <_scanf_float+0x32a>
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	429e      	cmp	r6, r3
 8005da2:	f67f aebc 	bls.w	8005b1e <_scanf_float+0x86>
 8005da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dae:	463a      	mov	r2, r7
 8005db0:	4640      	mov	r0, r8
 8005db2:	4798      	blx	r3
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	e7f0      	b.n	8005d9e <_scanf_float+0x306>
 8005dbc:	46aa      	mov	sl, r5
 8005dbe:	46b3      	mov	fp, r6
 8005dc0:	e7de      	b.n	8005d80 <_scanf_float+0x2e8>
 8005dc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	2965      	cmp	r1, #101	@ 0x65
 8005dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dce:	f106 35ff 	add.w	r5, r6, #4294967295
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	d00c      	beq.n	8005df0 <_scanf_float+0x358>
 8005dd6:	2945      	cmp	r1, #69	@ 0x45
 8005dd8:	d00a      	beq.n	8005df0 <_scanf_float+0x358>
 8005dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dde:	463a      	mov	r2, r7
 8005de0:	4640      	mov	r0, r8
 8005de2:	4798      	blx	r3
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	1eb5      	subs	r5, r6, #2
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005df4:	463a      	mov	r2, r7
 8005df6:	4640      	mov	r0, r8
 8005df8:	4798      	blx	r3
 8005dfa:	462e      	mov	r6, r5
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	f012 0210 	ands.w	r2, r2, #16
 8005e02:	d001      	beq.n	8005e08 <_scanf_float+0x370>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e68b      	b.n	8005b20 <_scanf_float+0x88>
 8005e08:	7032      	strb	r2, [r6, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e14:	d11c      	bne.n	8005e50 <_scanf_float+0x3b8>
 8005e16:	9b02      	ldr	r3, [sp, #8]
 8005e18:	454b      	cmp	r3, r9
 8005e1a:	eba3 0209 	sub.w	r2, r3, r9
 8005e1e:	d123      	bne.n	8005e68 <_scanf_float+0x3d0>
 8005e20:	9901      	ldr	r1, [sp, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	4640      	mov	r0, r8
 8005e26:	f002 fc3f 	bl	80086a8 <_strtod_r>
 8005e2a:	9b03      	ldr	r3, [sp, #12]
 8005e2c:	6821      	ldr	r1, [r4, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f011 0f02 	tst.w	r1, #2
 8005e34:	ec57 6b10 	vmov	r6, r7, d0
 8005e38:	f103 0204 	add.w	r2, r3, #4
 8005e3c:	d01f      	beq.n	8005e7e <_scanf_float+0x3e6>
 8005e3e:	9903      	ldr	r1, [sp, #12]
 8005e40:	600a      	str	r2, [r1, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	e9c3 6700 	strd	r6, r7, [r3]
 8005e48:	68e3      	ldr	r3, [r4, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60e3      	str	r3, [r4, #12]
 8005e4e:	e7d9      	b.n	8005e04 <_scanf_float+0x36c>
 8005e50:	9b04      	ldr	r3, [sp, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0e4      	beq.n	8005e20 <_scanf_float+0x388>
 8005e56:	9905      	ldr	r1, [sp, #20]
 8005e58:	230a      	movs	r3, #10
 8005e5a:	3101      	adds	r1, #1
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	f002 fca3 	bl	80087a8 <_strtol_r>
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	9e05      	ldr	r6, [sp, #20]
 8005e66:	1ac2      	subs	r2, r0, r3
 8005e68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005e6c:	429e      	cmp	r6, r3
 8005e6e:	bf28      	it	cs
 8005e70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005e74:	4910      	ldr	r1, [pc, #64]	@ (8005eb8 <_scanf_float+0x420>)
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 f8e4 	bl	8006044 <siprintf>
 8005e7c:	e7d0      	b.n	8005e20 <_scanf_float+0x388>
 8005e7e:	f011 0f04 	tst.w	r1, #4
 8005e82:	9903      	ldr	r1, [sp, #12]
 8005e84:	600a      	str	r2, [r1, #0]
 8005e86:	d1dc      	bne.n	8005e42 <_scanf_float+0x3aa>
 8005e88:	681d      	ldr	r5, [r3, #0]
 8005e8a:	4632      	mov	r2, r6
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fe4b 	bl	8000b2c <__aeabi_dcmpun>
 8005e96:	b128      	cbz	r0, 8005ea4 <_scanf_float+0x40c>
 8005e98:	4808      	ldr	r0, [pc, #32]	@ (8005ebc <_scanf_float+0x424>)
 8005e9a:	f000 f9fd 	bl	8006298 <nanf>
 8005e9e:	ed85 0a00 	vstr	s0, [r5]
 8005ea2:	e7d1      	b.n	8005e48 <_scanf_float+0x3b0>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	f7fa fe9e 	bl	8000be8 <__aeabi_d2f>
 8005eac:	6028      	str	r0, [r5, #0]
 8005eae:	e7cb      	b.n	8005e48 <_scanf_float+0x3b0>
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	e629      	b.n	8005b0a <_scanf_float+0x72>
 8005eb6:	bf00      	nop
 8005eb8:	08009ea4 	.word	0x08009ea4
 8005ebc:	0800a23d 	.word	0x0800a23d

08005ec0 <std>:
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ece:	6083      	str	r3, [r0, #8]
 8005ed0:	8181      	strh	r1, [r0, #12]
 8005ed2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ed4:	81c2      	strh	r2, [r0, #14]
 8005ed6:	6183      	str	r3, [r0, #24]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	2208      	movs	r2, #8
 8005edc:	305c      	adds	r0, #92	@ 0x5c
 8005ede:	f000 f94d 	bl	800617c <memset>
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <std+0x58>)
 8005ee4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <std+0x5c>)
 8005ee8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <std+0x60>)
 8005eec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <std+0x64>)
 8005ef0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <std+0x68>)
 8005ef4:	6224      	str	r4, [r4, #32]
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d006      	beq.n	8005f08 <std+0x48>
 8005efa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005efe:	4294      	cmp	r4, r2
 8005f00:	d002      	beq.n	8005f08 <std+0x48>
 8005f02:	33d0      	adds	r3, #208	@ 0xd0
 8005f04:	429c      	cmp	r4, r3
 8005f06:	d105      	bne.n	8005f14 <std+0x54>
 8005f08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f10:	f000 b9b0 	b.w	8006274 <__retarget_lock_init_recursive>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	bf00      	nop
 8005f18:	08006085 	.word	0x08006085
 8005f1c:	080060a7 	.word	0x080060a7
 8005f20:	080060df 	.word	0x080060df
 8005f24:	08006103 	.word	0x08006103
 8005f28:	20000874 	.word	0x20000874

08005f2c <stdio_exit_handler>:
 8005f2c:	4a02      	ldr	r2, [pc, #8]	@ (8005f38 <stdio_exit_handler+0xc>)
 8005f2e:	4903      	ldr	r1, [pc, #12]	@ (8005f3c <stdio_exit_handler+0x10>)
 8005f30:	4803      	ldr	r0, [pc, #12]	@ (8005f40 <stdio_exit_handler+0x14>)
 8005f32:	f000 b869 	b.w	8006008 <_fwalk_sglue>
 8005f36:	bf00      	nop
 8005f38:	20000004 	.word	0x20000004
 8005f3c:	08008b65 	.word	0x08008b65
 8005f40:	20000014 	.word	0x20000014

08005f44 <cleanup_stdio>:
 8005f44:	6841      	ldr	r1, [r0, #4]
 8005f46:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <cleanup_stdio+0x34>)
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	d001      	beq.n	8005f54 <cleanup_stdio+0x10>
 8005f50:	f002 fe08 	bl	8008b64 <_fflush_r>
 8005f54:	68a1      	ldr	r1, [r4, #8]
 8005f56:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <cleanup_stdio+0x38>)
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d002      	beq.n	8005f62 <cleanup_stdio+0x1e>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f002 fe01 	bl	8008b64 <_fflush_r>
 8005f62:	68e1      	ldr	r1, [r4, #12]
 8005f64:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <cleanup_stdio+0x3c>)
 8005f66:	4299      	cmp	r1, r3
 8005f68:	d004      	beq.n	8005f74 <cleanup_stdio+0x30>
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f70:	f002 bdf8 	b.w	8008b64 <_fflush_r>
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	bf00      	nop
 8005f78:	20000874 	.word	0x20000874
 8005f7c:	200008dc 	.word	0x200008dc
 8005f80:	20000944 	.word	0x20000944

08005f84 <global_stdio_init.part.0>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <global_stdio_init.part.0+0x30>)
 8005f88:	4c0b      	ldr	r4, [pc, #44]	@ (8005fb8 <global_stdio_init.part.0+0x34>)
 8005f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fbc <global_stdio_init.part.0+0x38>)
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	2200      	movs	r2, #0
 8005f92:	2104      	movs	r1, #4
 8005f94:	f7ff ff94 	bl	8005ec0 <std>
 8005f98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	2109      	movs	r1, #9
 8005fa0:	f7ff ff8e 	bl	8005ec0 <std>
 8005fa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fa8:	2202      	movs	r2, #2
 8005faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fae:	2112      	movs	r1, #18
 8005fb0:	f7ff bf86 	b.w	8005ec0 <std>
 8005fb4:	200009ac 	.word	0x200009ac
 8005fb8:	20000874 	.word	0x20000874
 8005fbc:	08005f2d 	.word	0x08005f2d

08005fc0 <__sfp_lock_acquire>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__sfp_lock_acquire+0x8>)
 8005fc2:	f000 b958 	b.w	8006276 <__retarget_lock_acquire_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	200009b5 	.word	0x200009b5

08005fcc <__sfp_lock_release>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__sfp_lock_release+0x8>)
 8005fce:	f000 b953 	b.w	8006278 <__retarget_lock_release_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	200009b5 	.word	0x200009b5

08005fd8 <__sinit>:
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f7ff fff0 	bl	8005fc0 <__sfp_lock_acquire>
 8005fe0:	6a23      	ldr	r3, [r4, #32]
 8005fe2:	b11b      	cbz	r3, 8005fec <__sinit+0x14>
 8005fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe8:	f7ff bff0 	b.w	8005fcc <__sfp_lock_release>
 8005fec:	4b04      	ldr	r3, [pc, #16]	@ (8006000 <__sinit+0x28>)
 8005fee:	6223      	str	r3, [r4, #32]
 8005ff0:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <__sinit+0x2c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f5      	bne.n	8005fe4 <__sinit+0xc>
 8005ff8:	f7ff ffc4 	bl	8005f84 <global_stdio_init.part.0>
 8005ffc:	e7f2      	b.n	8005fe4 <__sinit+0xc>
 8005ffe:	bf00      	nop
 8006000:	08005f45 	.word	0x08005f45
 8006004:	200009ac 	.word	0x200009ac

08006008 <_fwalk_sglue>:
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4607      	mov	r7, r0
 800600e:	4688      	mov	r8, r1
 8006010:	4614      	mov	r4, r2
 8006012:	2600      	movs	r6, #0
 8006014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006018:	f1b9 0901 	subs.w	r9, r9, #1
 800601c:	d505      	bpl.n	800602a <_fwalk_sglue+0x22>
 800601e:	6824      	ldr	r4, [r4, #0]
 8006020:	2c00      	cmp	r4, #0
 8006022:	d1f7      	bne.n	8006014 <_fwalk_sglue+0xc>
 8006024:	4630      	mov	r0, r6
 8006026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602a:	89ab      	ldrh	r3, [r5, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d907      	bls.n	8006040 <_fwalk_sglue+0x38>
 8006030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006034:	3301      	adds	r3, #1
 8006036:	d003      	beq.n	8006040 <_fwalk_sglue+0x38>
 8006038:	4629      	mov	r1, r5
 800603a:	4638      	mov	r0, r7
 800603c:	47c0      	blx	r8
 800603e:	4306      	orrs	r6, r0
 8006040:	3568      	adds	r5, #104	@ 0x68
 8006042:	e7e9      	b.n	8006018 <_fwalk_sglue+0x10>

08006044 <siprintf>:
 8006044:	b40e      	push	{r1, r2, r3}
 8006046:	b500      	push	{lr}
 8006048:	b09c      	sub	sp, #112	@ 0x70
 800604a:	ab1d      	add	r3, sp, #116	@ 0x74
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	9006      	str	r0, [sp, #24]
 8006050:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006054:	4809      	ldr	r0, [pc, #36]	@ (800607c <siprintf+0x38>)
 8006056:	9107      	str	r1, [sp, #28]
 8006058:	9104      	str	r1, [sp, #16]
 800605a:	4909      	ldr	r1, [pc, #36]	@ (8006080 <siprintf+0x3c>)
 800605c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006060:	9105      	str	r1, [sp, #20]
 8006062:	6800      	ldr	r0, [r0, #0]
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	a902      	add	r1, sp, #8
 8006068:	f002 fbfc 	bl	8008864 <_svfiprintf_r>
 800606c:	9b02      	ldr	r3, [sp, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	b01c      	add	sp, #112	@ 0x70
 8006074:	f85d eb04 	ldr.w	lr, [sp], #4
 8006078:	b003      	add	sp, #12
 800607a:	4770      	bx	lr
 800607c:	20000010 	.word	0x20000010
 8006080:	ffff0208 	.word	0xffff0208

08006084 <__sread>:
 8006084:	b510      	push	{r4, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608c:	f000 f8a4 	bl	80061d8 <_read_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	bfab      	itete	ge
 8006094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006096:	89a3      	ldrhlt	r3, [r4, #12]
 8006098:	181b      	addge	r3, r3, r0
 800609a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800609e:	bfac      	ite	ge
 80060a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060a2:	81a3      	strhlt	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__swrite>:
 80060a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	461f      	mov	r7, r3
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	05db      	lsls	r3, r3, #23
 80060b0:	4605      	mov	r5, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4616      	mov	r6, r2
 80060b6:	d505      	bpl.n	80060c4 <__swrite+0x1e>
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	2302      	movs	r3, #2
 80060be:	2200      	movs	r2, #0
 80060c0:	f000 f878 	bl	80061b4 <_lseek_r>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	4632      	mov	r2, r6
 80060d2:	463b      	mov	r3, r7
 80060d4:	4628      	mov	r0, r5
 80060d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	f000 b88f 	b.w	80061fc <_write_r>

080060de <__sseek>:
 80060de:	b510      	push	{r4, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e6:	f000 f865 	bl	80061b4 <_lseek_r>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	bf15      	itete	ne
 80060f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060fa:	81a3      	strheq	r3, [r4, #12]
 80060fc:	bf18      	it	ne
 80060fe:	81a3      	strhne	r3, [r4, #12]
 8006100:	bd10      	pop	{r4, pc}

08006102 <__sclose>:
 8006102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006106:	f000 b845 	b.w	8006194 <_close_r>

0800610a <_vsniprintf_r>:
 800610a:	b530      	push	{r4, r5, lr}
 800610c:	4614      	mov	r4, r2
 800610e:	2c00      	cmp	r4, #0
 8006110:	b09b      	sub	sp, #108	@ 0x6c
 8006112:	4605      	mov	r5, r0
 8006114:	461a      	mov	r2, r3
 8006116:	da05      	bge.n	8006124 <_vsniprintf_r+0x1a>
 8006118:	238b      	movs	r3, #139	@ 0x8b
 800611a:	6003      	str	r3, [r0, #0]
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	b01b      	add	sp, #108	@ 0x6c
 8006122:	bd30      	pop	{r4, r5, pc}
 8006124:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006128:	f8ad 300c 	strh.w	r3, [sp, #12]
 800612c:	bf14      	ite	ne
 800612e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006132:	4623      	moveq	r3, r4
 8006134:	9302      	str	r3, [sp, #8]
 8006136:	9305      	str	r3, [sp, #20]
 8006138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800613c:	9100      	str	r1, [sp, #0]
 800613e:	9104      	str	r1, [sp, #16]
 8006140:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006144:	4669      	mov	r1, sp
 8006146:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006148:	f002 fb8c 	bl	8008864 <_svfiprintf_r>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	bfbc      	itt	lt
 8006150:	238b      	movlt	r3, #139	@ 0x8b
 8006152:	602b      	strlt	r3, [r5, #0]
 8006154:	2c00      	cmp	r4, #0
 8006156:	d0e3      	beq.n	8006120 <_vsniprintf_r+0x16>
 8006158:	9b00      	ldr	r3, [sp, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e7df      	b.n	8006120 <_vsniprintf_r+0x16>

08006160 <vsniprintf>:
 8006160:	b507      	push	{r0, r1, r2, lr}
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	460a      	mov	r2, r1
 8006168:	4601      	mov	r1, r0
 800616a:	4803      	ldr	r0, [pc, #12]	@ (8006178 <vsniprintf+0x18>)
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f7ff ffcc 	bl	800610a <_vsniprintf_r>
 8006172:	b003      	add	sp, #12
 8006174:	f85d fb04 	ldr.w	pc, [sp], #4
 8006178:	20000010 	.word	0x20000010

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <_localeconv_r>:
 800618c:	4800      	ldr	r0, [pc, #0]	@ (8006190 <_localeconv_r+0x4>)
 800618e:	4770      	bx	lr
 8006190:	20000150 	.word	0x20000150

08006194 <_close_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d06      	ldr	r5, [pc, #24]	@ (80061b0 <_close_r+0x1c>)
 8006198:	2300      	movs	r3, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	f7fe fefe 	bl	8004fa0 <_close>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_close_r+0x1a>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_close_r+0x1a>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	200009b0 	.word	0x200009b0

080061b4 <_lseek_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	@ (80061d4 <_lseek_r+0x20>)
 80061b8:	4604      	mov	r4, r0
 80061ba:	4608      	mov	r0, r1
 80061bc:	4611      	mov	r1, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fe ff13 	bl	8004fee <_lseek>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_lseek_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_lseek_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	200009b0 	.word	0x200009b0

080061d8 <_read_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	@ (80061f8 <_read_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fe fea1 	bl	8004f2e <_read>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_read_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_read_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	200009b0 	.word	0x200009b0

080061fc <_write_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	@ (800621c <_write_r+0x20>)
 8006200:	4604      	mov	r4, r0
 8006202:	4608      	mov	r0, r1
 8006204:	4611      	mov	r1, r2
 8006206:	2200      	movs	r2, #0
 8006208:	602a      	str	r2, [r5, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	f7fe feac 	bl	8004f68 <_write>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_write_r+0x1e>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_write_r+0x1e>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	200009b0 	.word	0x200009b0

08006220 <__errno>:
 8006220:	4b01      	ldr	r3, [pc, #4]	@ (8006228 <__errno+0x8>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000010 	.word	0x20000010

0800622c <__libc_init_array>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4d0d      	ldr	r5, [pc, #52]	@ (8006264 <__libc_init_array+0x38>)
 8006230:	4c0d      	ldr	r4, [pc, #52]	@ (8006268 <__libc_init_array+0x3c>)
 8006232:	1b64      	subs	r4, r4, r5
 8006234:	10a4      	asrs	r4, r4, #2
 8006236:	2600      	movs	r6, #0
 8006238:	42a6      	cmp	r6, r4
 800623a:	d109      	bne.n	8006250 <__libc_init_array+0x24>
 800623c:	4d0b      	ldr	r5, [pc, #44]	@ (800626c <__libc_init_array+0x40>)
 800623e:	4c0c      	ldr	r4, [pc, #48]	@ (8006270 <__libc_init_array+0x44>)
 8006240:	f003 fbf2 	bl	8009a28 <_init>
 8006244:	1b64      	subs	r4, r4, r5
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	2600      	movs	r6, #0
 800624a:	42a6      	cmp	r6, r4
 800624c:	d105      	bne.n	800625a <__libc_init_array+0x2e>
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	f855 3b04 	ldr.w	r3, [r5], #4
 8006254:	4798      	blx	r3
 8006256:	3601      	adds	r6, #1
 8006258:	e7ee      	b.n	8006238 <__libc_init_array+0xc>
 800625a:	f855 3b04 	ldr.w	r3, [r5], #4
 800625e:	4798      	blx	r3
 8006260:	3601      	adds	r6, #1
 8006262:	e7f2      	b.n	800624a <__libc_init_array+0x1e>
 8006264:	0800a2a8 	.word	0x0800a2a8
 8006268:	0800a2a8 	.word	0x0800a2a8
 800626c:	0800a2a8 	.word	0x0800a2a8
 8006270:	0800a2ac 	.word	0x0800a2ac

08006274 <__retarget_lock_init_recursive>:
 8006274:	4770      	bx	lr

08006276 <__retarget_lock_acquire_recursive>:
 8006276:	4770      	bx	lr

08006278 <__retarget_lock_release_recursive>:
 8006278:	4770      	bx	lr

0800627a <memcpy>:
 800627a:	440a      	add	r2, r1
 800627c:	4291      	cmp	r1, r2
 800627e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006282:	d100      	bne.n	8006286 <memcpy+0xc>
 8006284:	4770      	bx	lr
 8006286:	b510      	push	{r4, lr}
 8006288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006290:	4291      	cmp	r1, r2
 8006292:	d1f9      	bne.n	8006288 <memcpy+0xe>
 8006294:	bd10      	pop	{r4, pc}
	...

08006298 <nanf>:
 8006298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80062a0 <nanf+0x8>
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	7fc00000 	.word	0x7fc00000

080062a4 <quorem>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	6903      	ldr	r3, [r0, #16]
 80062aa:	690c      	ldr	r4, [r1, #16]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	4607      	mov	r7, r0
 80062b0:	db7e      	blt.n	80063b0 <quorem+0x10c>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	f101 0814 	add.w	r8, r1, #20
 80062b8:	00a3      	lsls	r3, r4, #2
 80062ba:	f100 0514 	add.w	r5, r0, #20
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ce:	3301      	adds	r3, #1
 80062d0:	429a      	cmp	r2, r3
 80062d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80062da:	d32e      	bcc.n	800633a <quorem+0x96>
 80062dc:	f04f 0a00 	mov.w	sl, #0
 80062e0:	46c4      	mov	ip, r8
 80062e2:	46ae      	mov	lr, r5
 80062e4:	46d3      	mov	fp, sl
 80062e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062ea:	b298      	uxth	r0, r3
 80062ec:	fb06 a000 	mla	r0, r6, r0, sl
 80062f0:	0c02      	lsrs	r2, r0, #16
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	fb06 2303 	mla	r3, r6, r3, r2
 80062f8:	f8de 2000 	ldr.w	r2, [lr]
 80062fc:	b280      	uxth	r0, r0
 80062fe:	b292      	uxth	r2, r2
 8006300:	1a12      	subs	r2, r2, r0
 8006302:	445a      	add	r2, fp
 8006304:	f8de 0000 	ldr.w	r0, [lr]
 8006308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800630c:	b29b      	uxth	r3, r3
 800630e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006312:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006316:	b292      	uxth	r2, r2
 8006318:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800631c:	45e1      	cmp	r9, ip
 800631e:	f84e 2b04 	str.w	r2, [lr], #4
 8006322:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006326:	d2de      	bcs.n	80062e6 <quorem+0x42>
 8006328:	9b00      	ldr	r3, [sp, #0]
 800632a:	58eb      	ldr	r3, [r5, r3]
 800632c:	b92b      	cbnz	r3, 800633a <quorem+0x96>
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	3b04      	subs	r3, #4
 8006332:	429d      	cmp	r5, r3
 8006334:	461a      	mov	r2, r3
 8006336:	d32f      	bcc.n	8006398 <quorem+0xf4>
 8006338:	613c      	str	r4, [r7, #16]
 800633a:	4638      	mov	r0, r7
 800633c:	f001 f9c4 	bl	80076c8 <__mcmp>
 8006340:	2800      	cmp	r0, #0
 8006342:	db25      	blt.n	8006390 <quorem+0xec>
 8006344:	4629      	mov	r1, r5
 8006346:	2000      	movs	r0, #0
 8006348:	f858 2b04 	ldr.w	r2, [r8], #4
 800634c:	f8d1 c000 	ldr.w	ip, [r1]
 8006350:	fa1f fe82 	uxth.w	lr, r2
 8006354:	fa1f f38c 	uxth.w	r3, ip
 8006358:	eba3 030e 	sub.w	r3, r3, lr
 800635c:	4403      	add	r3, r0
 800635e:	0c12      	lsrs	r2, r2, #16
 8006360:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006364:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006368:	b29b      	uxth	r3, r3
 800636a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800636e:	45c1      	cmp	r9, r8
 8006370:	f841 3b04 	str.w	r3, [r1], #4
 8006374:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006378:	d2e6      	bcs.n	8006348 <quorem+0xa4>
 800637a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800637e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006382:	b922      	cbnz	r2, 800638e <quorem+0xea>
 8006384:	3b04      	subs	r3, #4
 8006386:	429d      	cmp	r5, r3
 8006388:	461a      	mov	r2, r3
 800638a:	d30b      	bcc.n	80063a4 <quorem+0x100>
 800638c:	613c      	str	r4, [r7, #16]
 800638e:	3601      	adds	r6, #1
 8006390:	4630      	mov	r0, r6
 8006392:	b003      	add	sp, #12
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	3b04      	subs	r3, #4
 800639c:	2a00      	cmp	r2, #0
 800639e:	d1cb      	bne.n	8006338 <quorem+0x94>
 80063a0:	3c01      	subs	r4, #1
 80063a2:	e7c6      	b.n	8006332 <quorem+0x8e>
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	3b04      	subs	r3, #4
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d1ef      	bne.n	800638c <quorem+0xe8>
 80063ac:	3c01      	subs	r4, #1
 80063ae:	e7ea      	b.n	8006386 <quorem+0xe2>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e7ee      	b.n	8006392 <quorem+0xee>
 80063b4:	0000      	movs	r0, r0
	...

080063b8 <_dtoa_r>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	69c7      	ldr	r7, [r0, #28]
 80063be:	b099      	sub	sp, #100	@ 0x64
 80063c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063c4:	ec55 4b10 	vmov	r4, r5, d0
 80063c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80063ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80063cc:	4683      	mov	fp, r0
 80063ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80063d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063d2:	b97f      	cbnz	r7, 80063f4 <_dtoa_r+0x3c>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f000 fdfd 	bl	8006fd4 <malloc>
 80063da:	4602      	mov	r2, r0
 80063dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80063e0:	b920      	cbnz	r0, 80063ec <_dtoa_r+0x34>
 80063e2:	4ba7      	ldr	r3, [pc, #668]	@ (8006680 <_dtoa_r+0x2c8>)
 80063e4:	21ef      	movs	r1, #239	@ 0xef
 80063e6:	48a7      	ldr	r0, [pc, #668]	@ (8006684 <_dtoa_r+0x2cc>)
 80063e8:	f002 fc2a 	bl	8008c40 <__assert_func>
 80063ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063f0:	6007      	str	r7, [r0, #0]
 80063f2:	60c7      	str	r7, [r0, #12]
 80063f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	b159      	cbz	r1, 8006414 <_dtoa_r+0x5c>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	604a      	str	r2, [r1, #4]
 8006400:	2301      	movs	r3, #1
 8006402:	4093      	lsls	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
 8006406:	4658      	mov	r0, fp
 8006408:	f000 feda 	bl	80071c0 <_Bfree>
 800640c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	1e2b      	subs	r3, r5, #0
 8006416:	bfb9      	ittee	lt
 8006418:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800641c:	9303      	strlt	r3, [sp, #12]
 800641e:	2300      	movge	r3, #0
 8006420:	6033      	strge	r3, [r6, #0]
 8006422:	9f03      	ldr	r7, [sp, #12]
 8006424:	4b98      	ldr	r3, [pc, #608]	@ (8006688 <_dtoa_r+0x2d0>)
 8006426:	bfbc      	itt	lt
 8006428:	2201      	movlt	r2, #1
 800642a:	6032      	strlt	r2, [r6, #0]
 800642c:	43bb      	bics	r3, r7
 800642e:	d112      	bne.n	8006456 <_dtoa_r+0x9e>
 8006430:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006432:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800643c:	4323      	orrs	r3, r4
 800643e:	f000 854d 	beq.w	8006edc <_dtoa_r+0xb24>
 8006442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006444:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800669c <_dtoa_r+0x2e4>
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 854f 	beq.w	8006eec <_dtoa_r+0xb34>
 800644e:	f10a 0303 	add.w	r3, sl, #3
 8006452:	f000 bd49 	b.w	8006ee8 <_dtoa_r+0xb30>
 8006456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	ec51 0b17 	vmov	r0, r1, d7
 8006460:	2300      	movs	r3, #0
 8006462:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006466:	f7fa fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800646a:	4680      	mov	r8, r0
 800646c:	b158      	cbz	r0, 8006486 <_dtoa_r+0xce>
 800646e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006470:	2301      	movs	r3, #1
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006476:	b113      	cbz	r3, 800647e <_dtoa_r+0xc6>
 8006478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800647a:	4b84      	ldr	r3, [pc, #528]	@ (800668c <_dtoa_r+0x2d4>)
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80066a0 <_dtoa_r+0x2e8>
 8006482:	f000 bd33 	b.w	8006eec <_dtoa_r+0xb34>
 8006486:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800648a:	aa16      	add	r2, sp, #88	@ 0x58
 800648c:	a917      	add	r1, sp, #92	@ 0x5c
 800648e:	4658      	mov	r0, fp
 8006490:	f001 fa3a 	bl	8007908 <__d2b>
 8006494:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006498:	4681      	mov	r9, r0
 800649a:	2e00      	cmp	r6, #0
 800649c:	d077      	beq.n	800658e <_dtoa_r+0x1d6>
 800649e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80064a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064b8:	4619      	mov	r1, r3
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b74      	ldr	r3, [pc, #464]	@ (8006690 <_dtoa_r+0x2d8>)
 80064be:	f7f9 fee3 	bl	8000288 <__aeabi_dsub>
 80064c2:	a369      	add	r3, pc, #420	@ (adr r3, 8006668 <_dtoa_r+0x2b0>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f896 	bl	80005f8 <__aeabi_dmul>
 80064cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006670 <_dtoa_r+0x2b8>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7f9 fedb 	bl	800028c <__adddf3>
 80064d6:	4604      	mov	r4, r0
 80064d8:	4630      	mov	r0, r6
 80064da:	460d      	mov	r5, r1
 80064dc:	f7fa f822 	bl	8000524 <__aeabi_i2d>
 80064e0:	a365      	add	r3, pc, #404	@ (adr r3, 8006678 <_dtoa_r+0x2c0>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f7fa f887 	bl	80005f8 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
 80064fa:	f7fa fb2d 	bl	8000b58 <__aeabi_d2iz>
 80064fe:	2200      	movs	r2, #0
 8006500:	4607      	mov	r7, r0
 8006502:	2300      	movs	r3, #0
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa fae8 	bl	8000adc <__aeabi_dcmplt>
 800650c:	b140      	cbz	r0, 8006520 <_dtoa_r+0x168>
 800650e:	4638      	mov	r0, r7
 8006510:	f7fa f808 	bl	8000524 <__aeabi_i2d>
 8006514:	4622      	mov	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	f7fa fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800651c:	b900      	cbnz	r0, 8006520 <_dtoa_r+0x168>
 800651e:	3f01      	subs	r7, #1
 8006520:	2f16      	cmp	r7, #22
 8006522:	d851      	bhi.n	80065c8 <_dtoa_r+0x210>
 8006524:	4b5b      	ldr	r3, [pc, #364]	@ (8006694 <_dtoa_r+0x2dc>)
 8006526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006532:	f7fa fad3 	bl	8000adc <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	d048      	beq.n	80065cc <_dtoa_r+0x214>
 800653a:	3f01      	subs	r7, #1
 800653c:	2300      	movs	r3, #0
 800653e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006542:	1b9b      	subs	r3, r3, r6
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	bf44      	itt	mi
 8006548:	f1c3 0801 	rsbmi	r8, r3, #1
 800654c:	2300      	movmi	r3, #0
 800654e:	9208      	str	r2, [sp, #32]
 8006550:	bf54      	ite	pl
 8006552:	f04f 0800 	movpl.w	r8, #0
 8006556:	9308      	strmi	r3, [sp, #32]
 8006558:	2f00      	cmp	r7, #0
 800655a:	db39      	blt.n	80065d0 <_dtoa_r+0x218>
 800655c:	9b08      	ldr	r3, [sp, #32]
 800655e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006560:	443b      	add	r3, r7
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	2300      	movs	r3, #0
 8006566:	930a      	str	r3, [sp, #40]	@ 0x28
 8006568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656a:	2b09      	cmp	r3, #9
 800656c:	d864      	bhi.n	8006638 <_dtoa_r+0x280>
 800656e:	2b05      	cmp	r3, #5
 8006570:	bfc4      	itt	gt
 8006572:	3b04      	subgt	r3, #4
 8006574:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006578:	f1a3 0302 	sub.w	r3, r3, #2
 800657c:	bfcc      	ite	gt
 800657e:	2400      	movgt	r4, #0
 8006580:	2401      	movle	r4, #1
 8006582:	2b03      	cmp	r3, #3
 8006584:	d863      	bhi.n	800664e <_dtoa_r+0x296>
 8006586:	e8df f003 	tbb	[pc, r3]
 800658a:	372a      	.short	0x372a
 800658c:	5535      	.short	0x5535
 800658e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006592:	441e      	add	r6, r3
 8006594:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006598:	2b20      	cmp	r3, #32
 800659a:	bfc1      	itttt	gt
 800659c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065a0:	409f      	lslgt	r7, r3
 80065a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065aa:	bfd6      	itet	le
 80065ac:	f1c3 0320 	rsble	r3, r3, #32
 80065b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80065b4:	fa04 f003 	lslle.w	r0, r4, r3
 80065b8:	f7f9 ffa4 	bl	8000504 <__aeabi_ui2d>
 80065bc:	2201      	movs	r2, #1
 80065be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065c2:	3e01      	subs	r6, #1
 80065c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80065c6:	e777      	b.n	80064b8 <_dtoa_r+0x100>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7b8      	b.n	800653e <_dtoa_r+0x186>
 80065cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80065ce:	e7b7      	b.n	8006540 <_dtoa_r+0x188>
 80065d0:	427b      	negs	r3, r7
 80065d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d4:	2300      	movs	r3, #0
 80065d6:	eba8 0807 	sub.w	r8, r8, r7
 80065da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065dc:	e7c4      	b.n	8006568 <_dtoa_r+0x1b0>
 80065de:	2300      	movs	r3, #0
 80065e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc35      	bgt.n	8006654 <_dtoa_r+0x29c>
 80065e8:	2301      	movs	r3, #1
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	461a      	mov	r2, r3
 80065f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f2:	e00b      	b.n	800660c <_dtoa_r+0x254>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f3      	b.n	80065e0 <_dtoa_r+0x228>
 80065f8:	2300      	movs	r3, #0
 80065fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	9307      	str	r3, [sp, #28]
 8006608:	bfb8      	it	lt
 800660a:	2301      	movlt	r3, #1
 800660c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006610:	2100      	movs	r1, #0
 8006612:	2204      	movs	r2, #4
 8006614:	f102 0514 	add.w	r5, r2, #20
 8006618:	429d      	cmp	r5, r3
 800661a:	d91f      	bls.n	800665c <_dtoa_r+0x2a4>
 800661c:	6041      	str	r1, [r0, #4]
 800661e:	4658      	mov	r0, fp
 8006620:	f000 fd8e 	bl	8007140 <_Balloc>
 8006624:	4682      	mov	sl, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d13c      	bne.n	80066a4 <_dtoa_r+0x2ec>
 800662a:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <_dtoa_r+0x2e0>)
 800662c:	4602      	mov	r2, r0
 800662e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006632:	e6d8      	b.n	80063e6 <_dtoa_r+0x2e>
 8006634:	2301      	movs	r3, #1
 8006636:	e7e0      	b.n	80065fa <_dtoa_r+0x242>
 8006638:	2401      	movs	r4, #1
 800663a:	2300      	movs	r3, #0
 800663c:	9309      	str	r3, [sp, #36]	@ 0x24
 800663e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	2200      	movs	r2, #0
 800664a:	2312      	movs	r3, #18
 800664c:	e7d0      	b.n	80065f0 <_dtoa_r+0x238>
 800664e:	2301      	movs	r3, #1
 8006650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006652:	e7f5      	b.n	8006640 <_dtoa_r+0x288>
 8006654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	e7d7      	b.n	800660c <_dtoa_r+0x254>
 800665c:	3101      	adds	r1, #1
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	e7d8      	b.n	8006614 <_dtoa_r+0x25c>
 8006662:	bf00      	nop
 8006664:	f3af 8000 	nop.w
 8006668:	636f4361 	.word	0x636f4361
 800666c:	3fd287a7 	.word	0x3fd287a7
 8006670:	8b60c8b3 	.word	0x8b60c8b3
 8006674:	3fc68a28 	.word	0x3fc68a28
 8006678:	509f79fb 	.word	0x509f79fb
 800667c:	3fd34413 	.word	0x3fd34413
 8006680:	08009eb6 	.word	0x08009eb6
 8006684:	08009ecd 	.word	0x08009ecd
 8006688:	7ff00000 	.word	0x7ff00000
 800668c:	08009e81 	.word	0x08009e81
 8006690:	3ff80000 	.word	0x3ff80000
 8006694:	08009fc8 	.word	0x08009fc8
 8006698:	08009f25 	.word	0x08009f25
 800669c:	08009eb2 	.word	0x08009eb2
 80066a0:	08009e80 	.word	0x08009e80
 80066a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	2b0e      	cmp	r3, #14
 80066ae:	f200 80a4 	bhi.w	80067fa <_dtoa_r+0x442>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	f000 80a1 	beq.w	80067fa <_dtoa_r+0x442>
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	dd33      	ble.n	8006724 <_dtoa_r+0x36c>
 80066bc:	4bad      	ldr	r3, [pc, #692]	@ (8006974 <_dtoa_r+0x5bc>)
 80066be:	f007 020f 	and.w	r2, r7, #15
 80066c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c6:	ed93 7b00 	vldr	d7, [r3]
 80066ca:	05f8      	lsls	r0, r7, #23
 80066cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066d4:	d516      	bpl.n	8006704 <_dtoa_r+0x34c>
 80066d6:	4ba8      	ldr	r3, [pc, #672]	@ (8006978 <_dtoa_r+0x5c0>)
 80066d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066e0:	f7fa f8b4 	bl	800084c <__aeabi_ddiv>
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	f004 040f 	and.w	r4, r4, #15
 80066ec:	2603      	movs	r6, #3
 80066ee:	4da2      	ldr	r5, [pc, #648]	@ (8006978 <_dtoa_r+0x5c0>)
 80066f0:	b954      	cbnz	r4, 8006708 <_dtoa_r+0x350>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fa:	f7fa f8a7 	bl	800084c <__aeabi_ddiv>
 80066fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006702:	e028      	b.n	8006756 <_dtoa_r+0x39e>
 8006704:	2602      	movs	r6, #2
 8006706:	e7f2      	b.n	80066ee <_dtoa_r+0x336>
 8006708:	07e1      	lsls	r1, r4, #31
 800670a:	d508      	bpl.n	800671e <_dtoa_r+0x366>
 800670c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006710:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800671c:	3601      	adds	r6, #1
 800671e:	1064      	asrs	r4, r4, #1
 8006720:	3508      	adds	r5, #8
 8006722:	e7e5      	b.n	80066f0 <_dtoa_r+0x338>
 8006724:	f000 80d2 	beq.w	80068cc <_dtoa_r+0x514>
 8006728:	427c      	negs	r4, r7
 800672a:	4b92      	ldr	r3, [pc, #584]	@ (8006974 <_dtoa_r+0x5bc>)
 800672c:	4d92      	ldr	r5, [pc, #584]	@ (8006978 <_dtoa_r+0x5c0>)
 800672e:	f004 020f 	and.w	r2, r4, #15
 8006732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800673e:	f7f9 ff5b 	bl	80005f8 <__aeabi_dmul>
 8006742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006746:	1124      	asrs	r4, r4, #4
 8006748:	2300      	movs	r3, #0
 800674a:	2602      	movs	r6, #2
 800674c:	2c00      	cmp	r4, #0
 800674e:	f040 80b2 	bne.w	80068b6 <_dtoa_r+0x4fe>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1d3      	bne.n	80066fe <_dtoa_r+0x346>
 8006756:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006758:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80b7 	beq.w	80068d0 <_dtoa_r+0x518>
 8006762:	4b86      	ldr	r3, [pc, #536]	@ (800697c <_dtoa_r+0x5c4>)
 8006764:	2200      	movs	r2, #0
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7fa f9b7 	bl	8000adc <__aeabi_dcmplt>
 800676e:	2800      	cmp	r0, #0
 8006770:	f000 80ae 	beq.w	80068d0 <_dtoa_r+0x518>
 8006774:	9b07      	ldr	r3, [sp, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80aa 	beq.w	80068d0 <_dtoa_r+0x518>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	dd37      	ble.n	80067f2 <_dtoa_r+0x43a>
 8006782:	1e7b      	subs	r3, r7, #1
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	4620      	mov	r0, r4
 8006788:	4b7d      	ldr	r3, [pc, #500]	@ (8006980 <_dtoa_r+0x5c8>)
 800678a:	2200      	movs	r2, #0
 800678c:	4629      	mov	r1, r5
 800678e:	f7f9 ff33 	bl	80005f8 <__aeabi_dmul>
 8006792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006796:	9c00      	ldr	r4, [sp, #0]
 8006798:	3601      	adds	r6, #1
 800679a:	4630      	mov	r0, r6
 800679c:	f7f9 fec2 	bl	8000524 <__aeabi_i2d>
 80067a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	4b76      	ldr	r3, [pc, #472]	@ (8006984 <_dtoa_r+0x5cc>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	f7f9 fd6e 	bl	800028c <__adddf3>
 80067b0:	4605      	mov	r5, r0
 80067b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	f040 808d 	bne.w	80068d6 <_dtoa_r+0x51e>
 80067bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c0:	4b71      	ldr	r3, [pc, #452]	@ (8006988 <_dtoa_r+0x5d0>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	f7f9 fd60 	bl	8000288 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4633      	mov	r3, r6
 80067d4:	f7fa f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f040 828b 	bne.w	8006cf4 <_dtoa_r+0x93c>
 80067de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e2:	462a      	mov	r2, r5
 80067e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067e8:	f7fa f978 	bl	8000adc <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 8128 	bne.w	8006a42 <_dtoa_r+0x68a>
 80067f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f2c0 815a 	blt.w	8006ab6 <_dtoa_r+0x6fe>
 8006802:	2f0e      	cmp	r7, #14
 8006804:	f300 8157 	bgt.w	8006ab6 <_dtoa_r+0x6fe>
 8006808:	4b5a      	ldr	r3, [pc, #360]	@ (8006974 <_dtoa_r+0x5bc>)
 800680a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800680e:	ed93 7b00 	vldr	d7, [r3]
 8006812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	ed8d 7b00 	vstr	d7, [sp]
 800681a:	da03      	bge.n	8006824 <_dtoa_r+0x46c>
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f340 8101 	ble.w	8006a26 <_dtoa_r+0x66e>
 8006824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006828:	4656      	mov	r6, sl
 800682a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7fa f80b 	bl	800084c <__aeabi_ddiv>
 8006836:	f7fa f98f 	bl	8000b58 <__aeabi_d2iz>
 800683a:	4680      	mov	r8, r0
 800683c:	f7f9 fe72 	bl	8000524 <__aeabi_i2d>
 8006840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006844:	f7f9 fed8 	bl	80005f8 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006854:	f7f9 fd18 	bl	8000288 <__aeabi_dsub>
 8006858:	f806 4b01 	strb.w	r4, [r6], #1
 800685c:	9d07      	ldr	r5, [sp, #28]
 800685e:	eba6 040a 	sub.w	r4, r6, sl
 8006862:	42a5      	cmp	r5, r4
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	f040 8117 	bne.w	8006a9a <_dtoa_r+0x6e2>
 800686c:	f7f9 fd0e 	bl	800028c <__adddf3>
 8006870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	f7fa f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 80f9 	bne.w	8006a74 <_dtoa_r+0x6bc>
 8006882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800688e:	b118      	cbz	r0, 8006898 <_dtoa_r+0x4e0>
 8006890:	f018 0f01 	tst.w	r8, #1
 8006894:	f040 80ee 	bne.w	8006a74 <_dtoa_r+0x6bc>
 8006898:	4649      	mov	r1, r9
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fc90 	bl	80071c0 <_Bfree>
 80068a0:	2300      	movs	r3, #0
 80068a2:	7033      	strb	r3, [r6, #0]
 80068a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068a6:	3701      	adds	r7, #1
 80068a8:	601f      	str	r7, [r3, #0]
 80068aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 831d 	beq.w	8006eec <_dtoa_r+0xb34>
 80068b2:	601e      	str	r6, [r3, #0]
 80068b4:	e31a      	b.n	8006eec <_dtoa_r+0xb34>
 80068b6:	07e2      	lsls	r2, r4, #31
 80068b8:	d505      	bpl.n	80068c6 <_dtoa_r+0x50e>
 80068ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068be:	f7f9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80068c2:	3601      	adds	r6, #1
 80068c4:	2301      	movs	r3, #1
 80068c6:	1064      	asrs	r4, r4, #1
 80068c8:	3508      	adds	r5, #8
 80068ca:	e73f      	b.n	800674c <_dtoa_r+0x394>
 80068cc:	2602      	movs	r6, #2
 80068ce:	e742      	b.n	8006756 <_dtoa_r+0x39e>
 80068d0:	9c07      	ldr	r4, [sp, #28]
 80068d2:	9704      	str	r7, [sp, #16]
 80068d4:	e761      	b.n	800679a <_dtoa_r+0x3e2>
 80068d6:	4b27      	ldr	r3, [pc, #156]	@ (8006974 <_dtoa_r+0x5bc>)
 80068d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068e2:	4454      	add	r4, sl
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d053      	beq.n	8006990 <_dtoa_r+0x5d8>
 80068e8:	4928      	ldr	r1, [pc, #160]	@ (800698c <_dtoa_r+0x5d4>)
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7f9 ffae 	bl	800084c <__aeabi_ddiv>
 80068f0:	4633      	mov	r3, r6
 80068f2:	462a      	mov	r2, r5
 80068f4:	f7f9 fcc8 	bl	8000288 <__aeabi_dsub>
 80068f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068fc:	4656      	mov	r6, sl
 80068fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006902:	f7fa f929 	bl	8000b58 <__aeabi_d2iz>
 8006906:	4605      	mov	r5, r0
 8006908:	f7f9 fe0c 	bl	8000524 <__aeabi_i2d>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006914:	f7f9 fcb8 	bl	8000288 <__aeabi_dsub>
 8006918:	3530      	adds	r5, #48	@ 0x30
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006922:	f806 5b01 	strb.w	r5, [r6], #1
 8006926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800692a:	f7fa f8d7 	bl	8000adc <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	d171      	bne.n	8006a16 <_dtoa_r+0x65e>
 8006932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006936:	4911      	ldr	r1, [pc, #68]	@ (800697c <_dtoa_r+0x5c4>)
 8006938:	2000      	movs	r0, #0
 800693a:	f7f9 fca5 	bl	8000288 <__aeabi_dsub>
 800693e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006942:	f7fa f8cb 	bl	8000adc <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 8095 	bne.w	8006a76 <_dtoa_r+0x6be>
 800694c:	42a6      	cmp	r6, r4
 800694e:	f43f af50 	beq.w	80067f2 <_dtoa_r+0x43a>
 8006952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006956:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <_dtoa_r+0x5c8>)
 8006958:	2200      	movs	r2, #0
 800695a:	f7f9 fe4d 	bl	80005f8 <__aeabi_dmul>
 800695e:	4b08      	ldr	r3, [pc, #32]	@ (8006980 <_dtoa_r+0x5c8>)
 8006960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006964:	2200      	movs	r2, #0
 8006966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800696a:	f7f9 fe45 	bl	80005f8 <__aeabi_dmul>
 800696e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006972:	e7c4      	b.n	80068fe <_dtoa_r+0x546>
 8006974:	08009fc8 	.word	0x08009fc8
 8006978:	08009fa0 	.word	0x08009fa0
 800697c:	3ff00000 	.word	0x3ff00000
 8006980:	40240000 	.word	0x40240000
 8006984:	401c0000 	.word	0x401c0000
 8006988:	40140000 	.word	0x40140000
 800698c:	3fe00000 	.word	0x3fe00000
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800699c:	9415      	str	r4, [sp, #84]	@ 0x54
 800699e:	4656      	mov	r6, sl
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	f7fa f8d8 	bl	8000b58 <__aeabi_d2iz>
 80069a8:	4605      	mov	r5, r0
 80069aa:	f7f9 fdbb 	bl	8000524 <__aeabi_i2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b6:	f7f9 fc67 	bl	8000288 <__aeabi_dsub>
 80069ba:	3530      	adds	r5, #48	@ 0x30
 80069bc:	f806 5b01 	strb.w	r5, [r6], #1
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	d124      	bne.n	8006a1a <_dtoa_r+0x662>
 80069d0:	4bac      	ldr	r3, [pc, #688]	@ (8006c84 <_dtoa_r+0x8cc>)
 80069d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069d6:	f7f9 fc59 	bl	800028c <__adddf3>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e2:	f7fa f899 	bl	8000b18 <__aeabi_dcmpgt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d145      	bne.n	8006a76 <_dtoa_r+0x6be>
 80069ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069ee:	49a5      	ldr	r1, [pc, #660]	@ (8006c84 <_dtoa_r+0x8cc>)
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7f9 fc49 	bl	8000288 <__aeabi_dsub>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069fe:	f7fa f86d 	bl	8000adc <__aeabi_dcmplt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f43f aef5 	beq.w	80067f2 <_dtoa_r+0x43a>
 8006a08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a0a:	1e73      	subs	r3, r6, #1
 8006a0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a12:	2b30      	cmp	r3, #48	@ 0x30
 8006a14:	d0f8      	beq.n	8006a08 <_dtoa_r+0x650>
 8006a16:	9f04      	ldr	r7, [sp, #16]
 8006a18:	e73e      	b.n	8006898 <_dtoa_r+0x4e0>
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c88 <_dtoa_r+0x8d0>)
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a24:	e7bc      	b.n	80069a0 <_dtoa_r+0x5e8>
 8006a26:	d10c      	bne.n	8006a42 <_dtoa_r+0x68a>
 8006a28:	4b98      	ldr	r3, [pc, #608]	@ (8006c8c <_dtoa_r+0x8d4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a30:	f7f9 fde2 	bl	80005f8 <__aeabi_dmul>
 8006a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a38:	f7fa f864 	bl	8000b04 <__aeabi_dcmpge>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f000 8157 	beq.w	8006cf0 <_dtoa_r+0x938>
 8006a42:	2400      	movs	r4, #0
 8006a44:	4625      	mov	r5, r4
 8006a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	4656      	mov	r6, sl
 8006a4e:	2700      	movs	r7, #0
 8006a50:	4621      	mov	r1, r4
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fbb4 	bl	80071c0 <_Bfree>
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	d0dc      	beq.n	8006a16 <_dtoa_r+0x65e>
 8006a5c:	b12f      	cbz	r7, 8006a6a <_dtoa_r+0x6b2>
 8006a5e:	42af      	cmp	r7, r5
 8006a60:	d003      	beq.n	8006a6a <_dtoa_r+0x6b2>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4658      	mov	r0, fp
 8006a66:	f000 fbab 	bl	80071c0 <_Bfree>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	f000 fba7 	bl	80071c0 <_Bfree>
 8006a72:	e7d0      	b.n	8006a16 <_dtoa_r+0x65e>
 8006a74:	9704      	str	r7, [sp, #16]
 8006a76:	4633      	mov	r3, r6
 8006a78:	461e      	mov	r6, r3
 8006a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7e:	2a39      	cmp	r2, #57	@ 0x39
 8006a80:	d107      	bne.n	8006a92 <_dtoa_r+0x6da>
 8006a82:	459a      	cmp	sl, r3
 8006a84:	d1f8      	bne.n	8006a78 <_dtoa_r+0x6c0>
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	3201      	adds	r2, #1
 8006a8a:	9204      	str	r2, [sp, #16]
 8006a8c:	2230      	movs	r2, #48	@ 0x30
 8006a8e:	f88a 2000 	strb.w	r2, [sl]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	3201      	adds	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e7bd      	b.n	8006a16 <_dtoa_r+0x65e>
 8006a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c88 <_dtoa_r+0x8d0>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	f7fa f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f43f aebb 	beq.w	800682a <_dtoa_r+0x472>
 8006ab4:	e6f0      	b.n	8006898 <_dtoa_r+0x4e0>
 8006ab6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	f000 80db 	beq.w	8006c74 <_dtoa_r+0x8bc>
 8006abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac0:	2a01      	cmp	r2, #1
 8006ac2:	f300 80bf 	bgt.w	8006c44 <_dtoa_r+0x88c>
 8006ac6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	f000 80b7 	beq.w	8006c3c <_dtoa_r+0x884>
 8006ace:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ad2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ad4:	4646      	mov	r6, r8
 8006ad6:	9a08      	ldr	r2, [sp, #32]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	441a      	add	r2, r3
 8006adc:	4658      	mov	r0, fp
 8006ade:	4498      	add	r8, r3
 8006ae0:	9208      	str	r2, [sp, #32]
 8006ae2:	f000 fc6b 	bl	80073bc <__i2b>
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	b15e      	cbz	r6, 8006b02 <_dtoa_r+0x74a>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dd08      	ble.n	8006b02 <_dtoa_r+0x74a>
 8006af0:	42b3      	cmp	r3, r6
 8006af2:	9a08      	ldr	r2, [sp, #32]
 8006af4:	bfa8      	it	ge
 8006af6:	4633      	movge	r3, r6
 8006af8:	eba8 0803 	sub.w	r8, r8, r3
 8006afc:	1af6      	subs	r6, r6, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	9308      	str	r3, [sp, #32]
 8006b02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b04:	b1f3      	cbz	r3, 8006b44 <_dtoa_r+0x78c>
 8006b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80b7 	beq.w	8006c7c <_dtoa_r+0x8c4>
 8006b0e:	b18c      	cbz	r4, 8006b34 <_dtoa_r+0x77c>
 8006b10:	4629      	mov	r1, r5
 8006b12:	4622      	mov	r2, r4
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fd11 	bl	800753c <__pow5mult>
 8006b1a:	464a      	mov	r2, r9
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4658      	mov	r0, fp
 8006b22:	f000 fc61 	bl	80073e8 <__multiply>
 8006b26:	4649      	mov	r1, r9
 8006b28:	9004      	str	r0, [sp, #16]
 8006b2a:	4658      	mov	r0, fp
 8006b2c:	f000 fb48 	bl	80071c0 <_Bfree>
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	4699      	mov	r9, r3
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	1b1a      	subs	r2, r3, r4
 8006b38:	d004      	beq.n	8006b44 <_dtoa_r+0x78c>
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fcfd 	bl	800753c <__pow5mult>
 8006b42:	4681      	mov	r9, r0
 8006b44:	2101      	movs	r1, #1
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fc38 	bl	80073bc <__i2b>
 8006b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4e:	4604      	mov	r4, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 81cf 	beq.w	8006ef4 <_dtoa_r+0xb3c>
 8006b56:	461a      	mov	r2, r3
 8006b58:	4601      	mov	r1, r0
 8006b5a:	4658      	mov	r0, fp
 8006b5c:	f000 fcee 	bl	800753c <__pow5mult>
 8006b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	4604      	mov	r4, r0
 8006b66:	f300 8095 	bgt.w	8006c94 <_dtoa_r+0x8dc>
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8087 	bne.w	8006c80 <_dtoa_r+0x8c8>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 8089 	bne.w	8006c90 <_dtoa_r+0x8d8>
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b84:	0d1b      	lsrs	r3, r3, #20
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	b12b      	cbz	r3, 8006b96 <_dtoa_r+0x7de>
 8006b8a:	9b08      	ldr	r3, [sp, #32]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	9308      	str	r3, [sp, #32]
 8006b90:	f108 0801 	add.w	r8, r8, #1
 8006b94:	2301      	movs	r3, #1
 8006b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 81b0 	beq.w	8006f00 <_dtoa_r+0xb48>
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ba6:	6918      	ldr	r0, [r3, #16]
 8006ba8:	f000 fbbc 	bl	8007324 <__hi0bits>
 8006bac:	f1c0 0020 	rsb	r0, r0, #32
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	4418      	add	r0, r3
 8006bb4:	f010 001f 	ands.w	r0, r0, #31
 8006bb8:	d077      	beq.n	8006caa <_dtoa_r+0x8f2>
 8006bba:	f1c0 0320 	rsb	r3, r0, #32
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	dd6b      	ble.n	8006c9a <_dtoa_r+0x8e2>
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	f1c0 001c 	rsb	r0, r0, #28
 8006bc8:	4403      	add	r3, r0
 8006bca:	4480      	add	r8, r0
 8006bcc:	4406      	add	r6, r0
 8006bce:	9308      	str	r3, [sp, #32]
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	dd05      	ble.n	8006be2 <_dtoa_r+0x82a>
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4642      	mov	r2, r8
 8006bda:	4658      	mov	r0, fp
 8006bdc:	f000 fd08 	bl	80075f0 <__lshift>
 8006be0:	4681      	mov	r9, r0
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd05      	ble.n	8006bf4 <_dtoa_r+0x83c>
 8006be8:	4621      	mov	r1, r4
 8006bea:	461a      	mov	r2, r3
 8006bec:	4658      	mov	r0, fp
 8006bee:	f000 fcff 	bl	80075f0 <__lshift>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d059      	beq.n	8006cae <_dtoa_r+0x8f6>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4648      	mov	r0, r9
 8006bfe:	f000 fd63 	bl	80076c8 <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	da53      	bge.n	8006cae <_dtoa_r+0x8f6>
 8006c06:	1e7b      	subs	r3, r7, #1
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	220a      	movs	r2, #10
 8006c10:	4658      	mov	r0, fp
 8006c12:	f000 faf7 	bl	8007204 <__multadd>
 8006c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c18:	4681      	mov	r9, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 8172 	beq.w	8006f04 <_dtoa_r+0xb4c>
 8006c20:	2300      	movs	r3, #0
 8006c22:	4629      	mov	r1, r5
 8006c24:	220a      	movs	r2, #10
 8006c26:	4658      	mov	r0, fp
 8006c28:	f000 faec 	bl	8007204 <__multadd>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	4605      	mov	r5, r0
 8006c32:	dc67      	bgt.n	8006d04 <_dtoa_r+0x94c>
 8006c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dc41      	bgt.n	8006cbe <_dtoa_r+0x906>
 8006c3a:	e063      	b.n	8006d04 <_dtoa_r+0x94c>
 8006c3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c42:	e746      	b.n	8006ad2 <_dtoa_r+0x71a>
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	1e5c      	subs	r4, r3, #1
 8006c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	bfbf      	itttt	lt
 8006c4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c54:	1ae3      	sublt	r3, r4, r3
 8006c56:	bfb4      	ite	lt
 8006c58:	18d2      	addlt	r2, r2, r3
 8006c5a:	1b1c      	subge	r4, r3, r4
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	bfbc      	itt	lt
 8006c60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c62:	2400      	movlt	r4, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb5      	itete	lt
 8006c68:	eba8 0603 	sublt.w	r6, r8, r3
 8006c6c:	9b07      	ldrge	r3, [sp, #28]
 8006c6e:	2300      	movlt	r3, #0
 8006c70:	4646      	movge	r6, r8
 8006c72:	e730      	b.n	8006ad6 <_dtoa_r+0x71e>
 8006c74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c78:	4646      	mov	r6, r8
 8006c7a:	e735      	b.n	8006ae8 <_dtoa_r+0x730>
 8006c7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c7e:	e75c      	b.n	8006b3a <_dtoa_r+0x782>
 8006c80:	2300      	movs	r3, #0
 8006c82:	e788      	b.n	8006b96 <_dtoa_r+0x7de>
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	40140000 	.word	0x40140000
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	e780      	b.n	8006b96 <_dtoa_r+0x7de>
 8006c94:	2300      	movs	r3, #0
 8006c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c98:	e782      	b.n	8006ba0 <_dtoa_r+0x7e8>
 8006c9a:	d099      	beq.n	8006bd0 <_dtoa_r+0x818>
 8006c9c:	9a08      	ldr	r2, [sp, #32]
 8006c9e:	331c      	adds	r3, #28
 8006ca0:	441a      	add	r2, r3
 8006ca2:	4498      	add	r8, r3
 8006ca4:	441e      	add	r6, r3
 8006ca6:	9208      	str	r2, [sp, #32]
 8006ca8:	e792      	b.n	8006bd0 <_dtoa_r+0x818>
 8006caa:	4603      	mov	r3, r0
 8006cac:	e7f6      	b.n	8006c9c <_dtoa_r+0x8e4>
 8006cae:	9b07      	ldr	r3, [sp, #28]
 8006cb0:	9704      	str	r7, [sp, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dc20      	bgt.n	8006cf8 <_dtoa_r+0x940>
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	dd1e      	ble.n	8006cfc <_dtoa_r+0x944>
 8006cbe:	9b00      	ldr	r3, [sp, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f47f aec0 	bne.w	8006a46 <_dtoa_r+0x68e>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	2205      	movs	r2, #5
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f000 fa9a 	bl	8007204 <__multadd>
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f000 fcf7 	bl	80076c8 <__mcmp>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f77f aeb3 	ble.w	8006a46 <_dtoa_r+0x68e>
 8006ce0:	4656      	mov	r6, sl
 8006ce2:	2331      	movs	r3, #49	@ 0x31
 8006ce4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	e6ae      	b.n	8006a4e <_dtoa_r+0x696>
 8006cf0:	9c07      	ldr	r4, [sp, #28]
 8006cf2:	9704      	str	r7, [sp, #16]
 8006cf4:	4625      	mov	r5, r4
 8006cf6:	e7f3      	b.n	8006ce0 <_dtoa_r+0x928>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8104 	beq.w	8006f0c <_dtoa_r+0xb54>
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	dd05      	ble.n	8006d14 <_dtoa_r+0x95c>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f000 fc6f 	bl	80075f0 <__lshift>
 8006d12:	4605      	mov	r5, r0
 8006d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d05a      	beq.n	8006dd0 <_dtoa_r+0xa18>
 8006d1a:	6869      	ldr	r1, [r5, #4]
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fa0f 	bl	8007140 <_Balloc>
 8006d22:	4606      	mov	r6, r0
 8006d24:	b928      	cbnz	r0, 8006d32 <_dtoa_r+0x97a>
 8006d26:	4b84      	ldr	r3, [pc, #528]	@ (8006f38 <_dtoa_r+0xb80>)
 8006d28:	4602      	mov	r2, r0
 8006d2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d2e:	f7ff bb5a 	b.w	80063e6 <_dtoa_r+0x2e>
 8006d32:	692a      	ldr	r2, [r5, #16]
 8006d34:	3202      	adds	r2, #2
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	f105 010c 	add.w	r1, r5, #12
 8006d3c:	300c      	adds	r0, #12
 8006d3e:	f7ff fa9c 	bl	800627a <memcpy>
 8006d42:	2201      	movs	r2, #1
 8006d44:	4631      	mov	r1, r6
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 fc52 	bl	80075f0 <__lshift>
 8006d4c:	f10a 0301 	add.w	r3, sl, #1
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	9b00      	ldr	r3, [sp, #0]
 8006d54:	4453      	add	r3, sl
 8006d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	462f      	mov	r7, r5
 8006d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d62:	4605      	mov	r5, r0
 8006d64:	9b07      	ldr	r3, [sp, #28]
 8006d66:	4621      	mov	r1, r4
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	4648      	mov	r0, r9
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	f7ff fa99 	bl	80062a4 <quorem>
 8006d72:	4639      	mov	r1, r7
 8006d74:	9002      	str	r0, [sp, #8]
 8006d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	f000 fca4 	bl	80076c8 <__mcmp>
 8006d80:	462a      	mov	r2, r5
 8006d82:	9008      	str	r0, [sp, #32]
 8006d84:	4621      	mov	r1, r4
 8006d86:	4658      	mov	r0, fp
 8006d88:	f000 fcba 	bl	8007700 <__mdiff>
 8006d8c:	68c2      	ldr	r2, [r0, #12]
 8006d8e:	4606      	mov	r6, r0
 8006d90:	bb02      	cbnz	r2, 8006dd4 <_dtoa_r+0xa1c>
 8006d92:	4601      	mov	r1, r0
 8006d94:	4648      	mov	r0, r9
 8006d96:	f000 fc97 	bl	80076c8 <__mcmp>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4658      	mov	r0, fp
 8006da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006da2:	f000 fa0d 	bl	80071c0 <_Bfree>
 8006da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006daa:	9e07      	ldr	r6, [sp, #28]
 8006dac:	ea43 0102 	orr.w	r1, r3, r2
 8006db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db2:	4319      	orrs	r1, r3
 8006db4:	d110      	bne.n	8006dd8 <_dtoa_r+0xa20>
 8006db6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dba:	d029      	beq.n	8006e10 <_dtoa_r+0xa58>
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dd02      	ble.n	8006dc8 <_dtoa_r+0xa10>
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006dc8:	9b00      	ldr	r3, [sp, #0]
 8006dca:	f883 8000 	strb.w	r8, [r3]
 8006dce:	e63f      	b.n	8006a50 <_dtoa_r+0x698>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e7bb      	b.n	8006d4c <_dtoa_r+0x994>
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	e7e1      	b.n	8006d9c <_dtoa_r+0x9e4>
 8006dd8:	9b08      	ldr	r3, [sp, #32]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db04      	blt.n	8006de8 <_dtoa_r+0xa30>
 8006dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006de0:	430b      	orrs	r3, r1
 8006de2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006de4:	430b      	orrs	r3, r1
 8006de6:	d120      	bne.n	8006e2a <_dtoa_r+0xa72>
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	dded      	ble.n	8006dc8 <_dtoa_r+0xa10>
 8006dec:	4649      	mov	r1, r9
 8006dee:	2201      	movs	r2, #1
 8006df0:	4658      	mov	r0, fp
 8006df2:	f000 fbfd 	bl	80075f0 <__lshift>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4681      	mov	r9, r0
 8006dfa:	f000 fc65 	bl	80076c8 <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	dc03      	bgt.n	8006e0a <_dtoa_r+0xa52>
 8006e02:	d1e1      	bne.n	8006dc8 <_dtoa_r+0xa10>
 8006e04:	f018 0f01 	tst.w	r8, #1
 8006e08:	d0de      	beq.n	8006dc8 <_dtoa_r+0xa10>
 8006e0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e0e:	d1d8      	bne.n	8006dc2 <_dtoa_r+0xa0a>
 8006e10:	9a00      	ldr	r2, [sp, #0]
 8006e12:	2339      	movs	r3, #57	@ 0x39
 8006e14:	7013      	strb	r3, [r2, #0]
 8006e16:	4633      	mov	r3, r6
 8006e18:	461e      	mov	r6, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e20:	2a39      	cmp	r2, #57	@ 0x39
 8006e22:	d052      	beq.n	8006eca <_dtoa_r+0xb12>
 8006e24:	3201      	adds	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e612      	b.n	8006a50 <_dtoa_r+0x698>
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	dd07      	ble.n	8006e3e <_dtoa_r+0xa86>
 8006e2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e32:	d0ed      	beq.n	8006e10 <_dtoa_r+0xa58>
 8006e34:	9a00      	ldr	r2, [sp, #0]
 8006e36:	f108 0301 	add.w	r3, r8, #1
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	e608      	b.n	8006a50 <_dtoa_r+0x698>
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	9a07      	ldr	r2, [sp, #28]
 8006e42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d028      	beq.n	8006e9e <_dtoa_r+0xae6>
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	2300      	movs	r3, #0
 8006e50:	220a      	movs	r2, #10
 8006e52:	4658      	mov	r0, fp
 8006e54:	f000 f9d6 	bl	8007204 <__multadd>
 8006e58:	42af      	cmp	r7, r5
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 020a 	mov.w	r2, #10
 8006e64:	4639      	mov	r1, r7
 8006e66:	4658      	mov	r0, fp
 8006e68:	d107      	bne.n	8006e7a <_dtoa_r+0xac2>
 8006e6a:	f000 f9cb 	bl	8007204 <__multadd>
 8006e6e:	4607      	mov	r7, r0
 8006e70:	4605      	mov	r5, r0
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	e774      	b.n	8006d64 <_dtoa_r+0x9ac>
 8006e7a:	f000 f9c3 	bl	8007204 <__multadd>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4607      	mov	r7, r0
 8006e82:	2300      	movs	r3, #0
 8006e84:	220a      	movs	r2, #10
 8006e86:	4658      	mov	r0, fp
 8006e88:	f000 f9bc 	bl	8007204 <__multadd>
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	e7f0      	b.n	8006e72 <_dtoa_r+0xaba>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfcc      	ite	gt
 8006e96:	461e      	movgt	r6, r3
 8006e98:	2601      	movle	r6, #1
 8006e9a:	4456      	add	r6, sl
 8006e9c:	2700      	movs	r7, #0
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fba4 	bl	80075f0 <__lshift>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4681      	mov	r9, r0
 8006eac:	f000 fc0c 	bl	80076c8 <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dcb0      	bgt.n	8006e16 <_dtoa_r+0xa5e>
 8006eb4:	d102      	bne.n	8006ebc <_dtoa_r+0xb04>
 8006eb6:	f018 0f01 	tst.w	r8, #1
 8006eba:	d1ac      	bne.n	8006e16 <_dtoa_r+0xa5e>
 8006ebc:	4633      	mov	r3, r6
 8006ebe:	461e      	mov	r6, r3
 8006ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec4:	2a30      	cmp	r2, #48	@ 0x30
 8006ec6:	d0fa      	beq.n	8006ebe <_dtoa_r+0xb06>
 8006ec8:	e5c2      	b.n	8006a50 <_dtoa_r+0x698>
 8006eca:	459a      	cmp	sl, r3
 8006ecc:	d1a4      	bne.n	8006e18 <_dtoa_r+0xa60>
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	2331      	movs	r3, #49	@ 0x31
 8006ed6:	f88a 3000 	strb.w	r3, [sl]
 8006eda:	e5b9      	b.n	8006a50 <_dtoa_r+0x698>
 8006edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ede:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f3c <_dtoa_r+0xb84>
 8006ee2:	b11b      	cbz	r3, 8006eec <_dtoa_r+0xb34>
 8006ee4:	f10a 0308 	add.w	r3, sl, #8
 8006ee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	4650      	mov	r0, sl
 8006eee:	b019      	add	sp, #100	@ 0x64
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f77f ae37 	ble.w	8006b6a <_dtoa_r+0x7b2>
 8006efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f00:	2001      	movs	r0, #1
 8006f02:	e655      	b.n	8006bb0 <_dtoa_r+0x7f8>
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f77f aed6 	ble.w	8006cb8 <_dtoa_r+0x900>
 8006f0c:	4656      	mov	r6, sl
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4648      	mov	r0, r9
 8006f12:	f7ff f9c7 	bl	80062a4 <quorem>
 8006f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f1a:	f806 8b01 	strb.w	r8, [r6], #1
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	eba6 020a 	sub.w	r2, r6, sl
 8006f24:	4293      	cmp	r3, r2
 8006f26:	ddb3      	ble.n	8006e90 <_dtoa_r+0xad8>
 8006f28:	4649      	mov	r1, r9
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	220a      	movs	r2, #10
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f000 f968 	bl	8007204 <__multadd>
 8006f34:	4681      	mov	r9, r0
 8006f36:	e7ea      	b.n	8006f0e <_dtoa_r+0xb56>
 8006f38:	08009f25 	.word	0x08009f25
 8006f3c:	08009ea9 	.word	0x08009ea9

08006f40 <_free_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4605      	mov	r5, r0
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d041      	beq.n	8006fcc <_free_r+0x8c>
 8006f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4c:	1f0c      	subs	r4, r1, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bfb8      	it	lt
 8006f52:	18e4      	addlt	r4, r4, r3
 8006f54:	f000 f8e8 	bl	8007128 <__malloc_lock>
 8006f58:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <_free_r+0x90>)
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	b933      	cbnz	r3, 8006f6c <_free_r+0x2c>
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	6014      	str	r4, [r2, #0]
 8006f62:	4628      	mov	r0, r5
 8006f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f68:	f000 b8e4 	b.w	8007134 <__malloc_unlock>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d908      	bls.n	8006f82 <_free_r+0x42>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	1821      	adds	r1, r4, r0
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf01      	itttt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	e7ed      	b.n	8006f5e <_free_r+0x1e>
 8006f82:	461a      	mov	r2, r3
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b10b      	cbz	r3, 8006f8c <_free_r+0x4c>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d9fa      	bls.n	8006f82 <_free_r+0x42>
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	1850      	adds	r0, r2, r1
 8006f90:	42a0      	cmp	r0, r4
 8006f92:	d10b      	bne.n	8006fac <_free_r+0x6c>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	4401      	add	r1, r0
 8006f98:	1850      	adds	r0, r2, r1
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	d1e0      	bne.n	8006f62 <_free_r+0x22>
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6053      	str	r3, [r2, #4]
 8006fa6:	4408      	add	r0, r1
 8006fa8:	6010      	str	r0, [r2, #0]
 8006faa:	e7da      	b.n	8006f62 <_free_r+0x22>
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x74>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	e7d6      	b.n	8006f62 <_free_r+0x22>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	1821      	adds	r1, r4, r0
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf04      	itt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	bf04      	itt	eq
 8006fc4:	1809      	addeq	r1, r1, r0
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7ca      	b.n	8006f62 <_free_r+0x22>
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	200009bc 	.word	0x200009bc

08006fd4 <malloc>:
 8006fd4:	4b02      	ldr	r3, [pc, #8]	@ (8006fe0 <malloc+0xc>)
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 b825 	b.w	8007028 <_malloc_r>
 8006fde:	bf00      	nop
 8006fe0:	20000010 	.word	0x20000010

08006fe4 <sbrk_aligned>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8007024 <sbrk_aligned+0x40>)
 8006fe8:	460c      	mov	r4, r1
 8006fea:	6831      	ldr	r1, [r6, #0]
 8006fec:	4605      	mov	r5, r0
 8006fee:	b911      	cbnz	r1, 8006ff6 <sbrk_aligned+0x12>
 8006ff0:	f001 fe0c 	bl	8008c0c <_sbrk_r>
 8006ff4:	6030      	str	r0, [r6, #0]
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f001 fe07 	bl	8008c0c <_sbrk_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d103      	bne.n	800700a <sbrk_aligned+0x26>
 8007002:	f04f 34ff 	mov.w	r4, #4294967295
 8007006:	4620      	mov	r0, r4
 8007008:	bd70      	pop	{r4, r5, r6, pc}
 800700a:	1cc4      	adds	r4, r0, #3
 800700c:	f024 0403 	bic.w	r4, r4, #3
 8007010:	42a0      	cmp	r0, r4
 8007012:	d0f8      	beq.n	8007006 <sbrk_aligned+0x22>
 8007014:	1a21      	subs	r1, r4, r0
 8007016:	4628      	mov	r0, r5
 8007018:	f001 fdf8 	bl	8008c0c <_sbrk_r>
 800701c:	3001      	adds	r0, #1
 800701e:	d1f2      	bne.n	8007006 <sbrk_aligned+0x22>
 8007020:	e7ef      	b.n	8007002 <sbrk_aligned+0x1e>
 8007022:	bf00      	nop
 8007024:	200009b8 	.word	0x200009b8

08007028 <_malloc_r>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	1ccd      	adds	r5, r1, #3
 800702e:	f025 0503 	bic.w	r5, r5, #3
 8007032:	3508      	adds	r5, #8
 8007034:	2d0c      	cmp	r5, #12
 8007036:	bf38      	it	cc
 8007038:	250c      	movcc	r5, #12
 800703a:	2d00      	cmp	r5, #0
 800703c:	4606      	mov	r6, r0
 800703e:	db01      	blt.n	8007044 <_malloc_r+0x1c>
 8007040:	42a9      	cmp	r1, r5
 8007042:	d904      	bls.n	800704e <_malloc_r+0x26>
 8007044:	230c      	movs	r3, #12
 8007046:	6033      	str	r3, [r6, #0]
 8007048:	2000      	movs	r0, #0
 800704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007124 <_malloc_r+0xfc>
 8007052:	f000 f869 	bl	8007128 <__malloc_lock>
 8007056:	f8d8 3000 	ldr.w	r3, [r8]
 800705a:	461c      	mov	r4, r3
 800705c:	bb44      	cbnz	r4, 80070b0 <_malloc_r+0x88>
 800705e:	4629      	mov	r1, r5
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff ffbf 	bl	8006fe4 <sbrk_aligned>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	4604      	mov	r4, r0
 800706a:	d158      	bne.n	800711e <_malloc_r+0xf6>
 800706c:	f8d8 4000 	ldr.w	r4, [r8]
 8007070:	4627      	mov	r7, r4
 8007072:	2f00      	cmp	r7, #0
 8007074:	d143      	bne.n	80070fe <_malloc_r+0xd6>
 8007076:	2c00      	cmp	r4, #0
 8007078:	d04b      	beq.n	8007112 <_malloc_r+0xea>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	4639      	mov	r1, r7
 800707e:	4630      	mov	r0, r6
 8007080:	eb04 0903 	add.w	r9, r4, r3
 8007084:	f001 fdc2 	bl	8008c0c <_sbrk_r>
 8007088:	4581      	cmp	r9, r0
 800708a:	d142      	bne.n	8007112 <_malloc_r+0xea>
 800708c:	6821      	ldr	r1, [r4, #0]
 800708e:	1a6d      	subs	r5, r5, r1
 8007090:	4629      	mov	r1, r5
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff ffa6 	bl	8006fe4 <sbrk_aligned>
 8007098:	3001      	adds	r0, #1
 800709a:	d03a      	beq.n	8007112 <_malloc_r+0xea>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	442b      	add	r3, r5
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	f8d8 3000 	ldr.w	r3, [r8]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	bb62      	cbnz	r2, 8007104 <_malloc_r+0xdc>
 80070aa:	f8c8 7000 	str.w	r7, [r8]
 80070ae:	e00f      	b.n	80070d0 <_malloc_r+0xa8>
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	1b52      	subs	r2, r2, r5
 80070b4:	d420      	bmi.n	80070f8 <_malloc_r+0xd0>
 80070b6:	2a0b      	cmp	r2, #11
 80070b8:	d917      	bls.n	80070ea <_malloc_r+0xc2>
 80070ba:	1961      	adds	r1, r4, r5
 80070bc:	42a3      	cmp	r3, r4
 80070be:	6025      	str	r5, [r4, #0]
 80070c0:	bf18      	it	ne
 80070c2:	6059      	strne	r1, [r3, #4]
 80070c4:	6863      	ldr	r3, [r4, #4]
 80070c6:	bf08      	it	eq
 80070c8:	f8c8 1000 	streq.w	r1, [r8]
 80070cc:	5162      	str	r2, [r4, r5]
 80070ce:	604b      	str	r3, [r1, #4]
 80070d0:	4630      	mov	r0, r6
 80070d2:	f000 f82f 	bl	8007134 <__malloc_unlock>
 80070d6:	f104 000b 	add.w	r0, r4, #11
 80070da:	1d23      	adds	r3, r4, #4
 80070dc:	f020 0007 	bic.w	r0, r0, #7
 80070e0:	1ac2      	subs	r2, r0, r3
 80070e2:	bf1c      	itt	ne
 80070e4:	1a1b      	subne	r3, r3, r0
 80070e6:	50a3      	strne	r3, [r4, r2]
 80070e8:	e7af      	b.n	800704a <_malloc_r+0x22>
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	bf0c      	ite	eq
 80070f0:	f8c8 2000 	streq.w	r2, [r8]
 80070f4:	605a      	strne	r2, [r3, #4]
 80070f6:	e7eb      	b.n	80070d0 <_malloc_r+0xa8>
 80070f8:	4623      	mov	r3, r4
 80070fa:	6864      	ldr	r4, [r4, #4]
 80070fc:	e7ae      	b.n	800705c <_malloc_r+0x34>
 80070fe:	463c      	mov	r4, r7
 8007100:	687f      	ldr	r7, [r7, #4]
 8007102:	e7b6      	b.n	8007072 <_malloc_r+0x4a>
 8007104:	461a      	mov	r2, r3
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	42a3      	cmp	r3, r4
 800710a:	d1fb      	bne.n	8007104 <_malloc_r+0xdc>
 800710c:	2300      	movs	r3, #0
 800710e:	6053      	str	r3, [r2, #4]
 8007110:	e7de      	b.n	80070d0 <_malloc_r+0xa8>
 8007112:	230c      	movs	r3, #12
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	4630      	mov	r0, r6
 8007118:	f000 f80c 	bl	8007134 <__malloc_unlock>
 800711c:	e794      	b.n	8007048 <_malloc_r+0x20>
 800711e:	6005      	str	r5, [r0, #0]
 8007120:	e7d6      	b.n	80070d0 <_malloc_r+0xa8>
 8007122:	bf00      	nop
 8007124:	200009bc 	.word	0x200009bc

08007128 <__malloc_lock>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__malloc_lock+0x8>)
 800712a:	f7ff b8a4 	b.w	8006276 <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	200009b4 	.word	0x200009b4

08007134 <__malloc_unlock>:
 8007134:	4801      	ldr	r0, [pc, #4]	@ (800713c <__malloc_unlock+0x8>)
 8007136:	f7ff b89f 	b.w	8006278 <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	200009b4 	.word	0x200009b4

08007140 <_Balloc>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	69c6      	ldr	r6, [r0, #28]
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	b976      	cbnz	r6, 8007168 <_Balloc+0x28>
 800714a:	2010      	movs	r0, #16
 800714c:	f7ff ff42 	bl	8006fd4 <malloc>
 8007150:	4602      	mov	r2, r0
 8007152:	61e0      	str	r0, [r4, #28]
 8007154:	b920      	cbnz	r0, 8007160 <_Balloc+0x20>
 8007156:	4b18      	ldr	r3, [pc, #96]	@ (80071b8 <_Balloc+0x78>)
 8007158:	4818      	ldr	r0, [pc, #96]	@ (80071bc <_Balloc+0x7c>)
 800715a:	216b      	movs	r1, #107	@ 0x6b
 800715c:	f001 fd70 	bl	8008c40 <__assert_func>
 8007160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007164:	6006      	str	r6, [r0, #0]
 8007166:	60c6      	str	r6, [r0, #12]
 8007168:	69e6      	ldr	r6, [r4, #28]
 800716a:	68f3      	ldr	r3, [r6, #12]
 800716c:	b183      	cbz	r3, 8007190 <_Balloc+0x50>
 800716e:	69e3      	ldr	r3, [r4, #28]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007176:	b9b8      	cbnz	r0, 80071a8 <_Balloc+0x68>
 8007178:	2101      	movs	r1, #1
 800717a:	fa01 f605 	lsl.w	r6, r1, r5
 800717e:	1d72      	adds	r2, r6, #5
 8007180:	0092      	lsls	r2, r2, #2
 8007182:	4620      	mov	r0, r4
 8007184:	f001 fd7a 	bl	8008c7c <_calloc_r>
 8007188:	b160      	cbz	r0, 80071a4 <_Balloc+0x64>
 800718a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800718e:	e00e      	b.n	80071ae <_Balloc+0x6e>
 8007190:	2221      	movs	r2, #33	@ 0x21
 8007192:	2104      	movs	r1, #4
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fd71 	bl	8008c7c <_calloc_r>
 800719a:	69e3      	ldr	r3, [r4, #28]
 800719c:	60f0      	str	r0, [r6, #12]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e4      	bne.n	800716e <_Balloc+0x2e>
 80071a4:	2000      	movs	r0, #0
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	6802      	ldr	r2, [r0, #0]
 80071aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ae:	2300      	movs	r3, #0
 80071b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071b4:	e7f7      	b.n	80071a6 <_Balloc+0x66>
 80071b6:	bf00      	nop
 80071b8:	08009eb6 	.word	0x08009eb6
 80071bc:	08009f36 	.word	0x08009f36

080071c0 <_Bfree>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	69c6      	ldr	r6, [r0, #28]
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	b976      	cbnz	r6, 80071e8 <_Bfree+0x28>
 80071ca:	2010      	movs	r0, #16
 80071cc:	f7ff ff02 	bl	8006fd4 <malloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	61e8      	str	r0, [r5, #28]
 80071d4:	b920      	cbnz	r0, 80071e0 <_Bfree+0x20>
 80071d6:	4b09      	ldr	r3, [pc, #36]	@ (80071fc <_Bfree+0x3c>)
 80071d8:	4809      	ldr	r0, [pc, #36]	@ (8007200 <_Bfree+0x40>)
 80071da:	218f      	movs	r1, #143	@ 0x8f
 80071dc:	f001 fd30 	bl	8008c40 <__assert_func>
 80071e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e4:	6006      	str	r6, [r0, #0]
 80071e6:	60c6      	str	r6, [r0, #12]
 80071e8:	b13c      	cbz	r4, 80071fa <_Bfree+0x3a>
 80071ea:	69eb      	ldr	r3, [r5, #28]
 80071ec:	6862      	ldr	r2, [r4, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071f4:	6021      	str	r1, [r4, #0]
 80071f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	08009eb6 	.word	0x08009eb6
 8007200:	08009f36 	.word	0x08009f36

08007204 <__multadd>:
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	690d      	ldr	r5, [r1, #16]
 800720a:	4607      	mov	r7, r0
 800720c:	460c      	mov	r4, r1
 800720e:	461e      	mov	r6, r3
 8007210:	f101 0c14 	add.w	ip, r1, #20
 8007214:	2000      	movs	r0, #0
 8007216:	f8dc 3000 	ldr.w	r3, [ip]
 800721a:	b299      	uxth	r1, r3
 800721c:	fb02 6101 	mla	r1, r2, r1, r6
 8007220:	0c1e      	lsrs	r6, r3, #16
 8007222:	0c0b      	lsrs	r3, r1, #16
 8007224:	fb02 3306 	mla	r3, r2, r6, r3
 8007228:	b289      	uxth	r1, r1
 800722a:	3001      	adds	r0, #1
 800722c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007230:	4285      	cmp	r5, r0
 8007232:	f84c 1b04 	str.w	r1, [ip], #4
 8007236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800723a:	dcec      	bgt.n	8007216 <__multadd+0x12>
 800723c:	b30e      	cbz	r6, 8007282 <__multadd+0x7e>
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc19      	bgt.n	8007278 <__multadd+0x74>
 8007244:	6861      	ldr	r1, [r4, #4]
 8007246:	4638      	mov	r0, r7
 8007248:	3101      	adds	r1, #1
 800724a:	f7ff ff79 	bl	8007140 <_Balloc>
 800724e:	4680      	mov	r8, r0
 8007250:	b928      	cbnz	r0, 800725e <__multadd+0x5a>
 8007252:	4602      	mov	r2, r0
 8007254:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <__multadd+0x84>)
 8007256:	480d      	ldr	r0, [pc, #52]	@ (800728c <__multadd+0x88>)
 8007258:	21ba      	movs	r1, #186	@ 0xba
 800725a:	f001 fcf1 	bl	8008c40 <__assert_func>
 800725e:	6922      	ldr	r2, [r4, #16]
 8007260:	3202      	adds	r2, #2
 8007262:	f104 010c 	add.w	r1, r4, #12
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	300c      	adds	r0, #12
 800726a:	f7ff f806 	bl	800627a <memcpy>
 800726e:	4621      	mov	r1, r4
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff ffa5 	bl	80071c0 <_Bfree>
 8007276:	4644      	mov	r4, r8
 8007278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800727c:	3501      	adds	r5, #1
 800727e:	615e      	str	r6, [r3, #20]
 8007280:	6125      	str	r5, [r4, #16]
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	08009f25 	.word	0x08009f25
 800728c:	08009f36 	.word	0x08009f36

08007290 <__s2b>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	4615      	mov	r5, r2
 8007298:	461f      	mov	r7, r3
 800729a:	2209      	movs	r2, #9
 800729c:	3308      	adds	r3, #8
 800729e:	4606      	mov	r6, r0
 80072a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a4:	2100      	movs	r1, #0
 80072a6:	2201      	movs	r2, #1
 80072a8:	429a      	cmp	r2, r3
 80072aa:	db09      	blt.n	80072c0 <__s2b+0x30>
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff ff47 	bl	8007140 <_Balloc>
 80072b2:	b940      	cbnz	r0, 80072c6 <__s2b+0x36>
 80072b4:	4602      	mov	r2, r0
 80072b6:	4b19      	ldr	r3, [pc, #100]	@ (800731c <__s2b+0x8c>)
 80072b8:	4819      	ldr	r0, [pc, #100]	@ (8007320 <__s2b+0x90>)
 80072ba:	21d3      	movs	r1, #211	@ 0xd3
 80072bc:	f001 fcc0 	bl	8008c40 <__assert_func>
 80072c0:	0052      	lsls	r2, r2, #1
 80072c2:	3101      	adds	r1, #1
 80072c4:	e7f0      	b.n	80072a8 <__s2b+0x18>
 80072c6:	9b08      	ldr	r3, [sp, #32]
 80072c8:	6143      	str	r3, [r0, #20]
 80072ca:	2d09      	cmp	r5, #9
 80072cc:	f04f 0301 	mov.w	r3, #1
 80072d0:	6103      	str	r3, [r0, #16]
 80072d2:	dd16      	ble.n	8007302 <__s2b+0x72>
 80072d4:	f104 0909 	add.w	r9, r4, #9
 80072d8:	46c8      	mov	r8, r9
 80072da:	442c      	add	r4, r5
 80072dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072e0:	4601      	mov	r1, r0
 80072e2:	3b30      	subs	r3, #48	@ 0x30
 80072e4:	220a      	movs	r2, #10
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7ff ff8c 	bl	8007204 <__multadd>
 80072ec:	45a0      	cmp	r8, r4
 80072ee:	d1f5      	bne.n	80072dc <__s2b+0x4c>
 80072f0:	f1a5 0408 	sub.w	r4, r5, #8
 80072f4:	444c      	add	r4, r9
 80072f6:	1b2d      	subs	r5, r5, r4
 80072f8:	1963      	adds	r3, r4, r5
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	db04      	blt.n	8007308 <__s2b+0x78>
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007302:	340a      	adds	r4, #10
 8007304:	2509      	movs	r5, #9
 8007306:	e7f6      	b.n	80072f6 <__s2b+0x66>
 8007308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800730c:	4601      	mov	r1, r0
 800730e:	3b30      	subs	r3, #48	@ 0x30
 8007310:	220a      	movs	r2, #10
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ff76 	bl	8007204 <__multadd>
 8007318:	e7ee      	b.n	80072f8 <__s2b+0x68>
 800731a:	bf00      	nop
 800731c:	08009f25 	.word	0x08009f25
 8007320:	08009f36 	.word	0x08009f36

08007324 <__hi0bits>:
 8007324:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007328:	4603      	mov	r3, r0
 800732a:	bf36      	itet	cc
 800732c:	0403      	lslcc	r3, r0, #16
 800732e:	2000      	movcs	r0, #0
 8007330:	2010      	movcc	r0, #16
 8007332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007336:	bf3c      	itt	cc
 8007338:	021b      	lslcc	r3, r3, #8
 800733a:	3008      	addcc	r0, #8
 800733c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007340:	bf3c      	itt	cc
 8007342:	011b      	lslcc	r3, r3, #4
 8007344:	3004      	addcc	r0, #4
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734a:	bf3c      	itt	cc
 800734c:	009b      	lslcc	r3, r3, #2
 800734e:	3002      	addcc	r0, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	db05      	blt.n	8007360 <__hi0bits+0x3c>
 8007354:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007358:	f100 0001 	add.w	r0, r0, #1
 800735c:	bf08      	it	eq
 800735e:	2020      	moveq	r0, #32
 8007360:	4770      	bx	lr

08007362 <__lo0bits>:
 8007362:	6803      	ldr	r3, [r0, #0]
 8007364:	4602      	mov	r2, r0
 8007366:	f013 0007 	ands.w	r0, r3, #7
 800736a:	d00b      	beq.n	8007384 <__lo0bits+0x22>
 800736c:	07d9      	lsls	r1, r3, #31
 800736e:	d421      	bmi.n	80073b4 <__lo0bits+0x52>
 8007370:	0798      	lsls	r0, r3, #30
 8007372:	bf49      	itett	mi
 8007374:	085b      	lsrmi	r3, r3, #1
 8007376:	089b      	lsrpl	r3, r3, #2
 8007378:	2001      	movmi	r0, #1
 800737a:	6013      	strmi	r3, [r2, #0]
 800737c:	bf5c      	itt	pl
 800737e:	6013      	strpl	r3, [r2, #0]
 8007380:	2002      	movpl	r0, #2
 8007382:	4770      	bx	lr
 8007384:	b299      	uxth	r1, r3
 8007386:	b909      	cbnz	r1, 800738c <__lo0bits+0x2a>
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	2010      	movs	r0, #16
 800738c:	b2d9      	uxtb	r1, r3
 800738e:	b909      	cbnz	r1, 8007394 <__lo0bits+0x32>
 8007390:	3008      	adds	r0, #8
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	0719      	lsls	r1, r3, #28
 8007396:	bf04      	itt	eq
 8007398:	091b      	lsreq	r3, r3, #4
 800739a:	3004      	addeq	r0, #4
 800739c:	0799      	lsls	r1, r3, #30
 800739e:	bf04      	itt	eq
 80073a0:	089b      	lsreq	r3, r3, #2
 80073a2:	3002      	addeq	r0, #2
 80073a4:	07d9      	lsls	r1, r3, #31
 80073a6:	d403      	bmi.n	80073b0 <__lo0bits+0x4e>
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	f100 0001 	add.w	r0, r0, #1
 80073ae:	d003      	beq.n	80073b8 <__lo0bits+0x56>
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	4770      	bx	lr
 80073b4:	2000      	movs	r0, #0
 80073b6:	4770      	bx	lr
 80073b8:	2020      	movs	r0, #32
 80073ba:	4770      	bx	lr

080073bc <__i2b>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	460c      	mov	r4, r1
 80073c0:	2101      	movs	r1, #1
 80073c2:	f7ff febd 	bl	8007140 <_Balloc>
 80073c6:	4602      	mov	r2, r0
 80073c8:	b928      	cbnz	r0, 80073d6 <__i2b+0x1a>
 80073ca:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <__i2b+0x24>)
 80073cc:	4805      	ldr	r0, [pc, #20]	@ (80073e4 <__i2b+0x28>)
 80073ce:	f240 1145 	movw	r1, #325	@ 0x145
 80073d2:	f001 fc35 	bl	8008c40 <__assert_func>
 80073d6:	2301      	movs	r3, #1
 80073d8:	6144      	str	r4, [r0, #20]
 80073da:	6103      	str	r3, [r0, #16]
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	bf00      	nop
 80073e0:	08009f25 	.word	0x08009f25
 80073e4:	08009f36 	.word	0x08009f36

080073e8 <__multiply>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	4614      	mov	r4, r2
 80073ee:	690a      	ldr	r2, [r1, #16]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	bfa8      	it	ge
 80073f6:	4623      	movge	r3, r4
 80073f8:	460f      	mov	r7, r1
 80073fa:	bfa4      	itt	ge
 80073fc:	460c      	movge	r4, r1
 80073fe:	461f      	movge	r7, r3
 8007400:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007404:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007408:	68a3      	ldr	r3, [r4, #8]
 800740a:	6861      	ldr	r1, [r4, #4]
 800740c:	eb0a 0609 	add.w	r6, sl, r9
 8007410:	42b3      	cmp	r3, r6
 8007412:	b085      	sub	sp, #20
 8007414:	bfb8      	it	lt
 8007416:	3101      	addlt	r1, #1
 8007418:	f7ff fe92 	bl	8007140 <_Balloc>
 800741c:	b930      	cbnz	r0, 800742c <__multiply+0x44>
 800741e:	4602      	mov	r2, r0
 8007420:	4b44      	ldr	r3, [pc, #272]	@ (8007534 <__multiply+0x14c>)
 8007422:	4845      	ldr	r0, [pc, #276]	@ (8007538 <__multiply+0x150>)
 8007424:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007428:	f001 fc0a 	bl	8008c40 <__assert_func>
 800742c:	f100 0514 	add.w	r5, r0, #20
 8007430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007434:	462b      	mov	r3, r5
 8007436:	2200      	movs	r2, #0
 8007438:	4543      	cmp	r3, r8
 800743a:	d321      	bcc.n	8007480 <__multiply+0x98>
 800743c:	f107 0114 	add.w	r1, r7, #20
 8007440:	f104 0214 	add.w	r2, r4, #20
 8007444:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007448:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	1b13      	subs	r3, r2, r4
 8007450:	3b15      	subs	r3, #21
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	3304      	adds	r3, #4
 8007458:	f104 0715 	add.w	r7, r4, #21
 800745c:	42ba      	cmp	r2, r7
 800745e:	bf38      	it	cc
 8007460:	2304      	movcc	r3, #4
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	9103      	str	r1, [sp, #12]
 8007468:	428b      	cmp	r3, r1
 800746a:	d80c      	bhi.n	8007486 <__multiply+0x9e>
 800746c:	2e00      	cmp	r6, #0
 800746e:	dd03      	ble.n	8007478 <__multiply+0x90>
 8007470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007474:	2b00      	cmp	r3, #0
 8007476:	d05b      	beq.n	8007530 <__multiply+0x148>
 8007478:	6106      	str	r6, [r0, #16]
 800747a:	b005      	add	sp, #20
 800747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007480:	f843 2b04 	str.w	r2, [r3], #4
 8007484:	e7d8      	b.n	8007438 <__multiply+0x50>
 8007486:	f8b1 a000 	ldrh.w	sl, [r1]
 800748a:	f1ba 0f00 	cmp.w	sl, #0
 800748e:	d024      	beq.n	80074da <__multiply+0xf2>
 8007490:	f104 0e14 	add.w	lr, r4, #20
 8007494:	46a9      	mov	r9, r5
 8007496:	f04f 0c00 	mov.w	ip, #0
 800749a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800749e:	f8d9 3000 	ldr.w	r3, [r9]
 80074a2:	fa1f fb87 	uxth.w	fp, r7
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80074ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80074b0:	f8d9 7000 	ldr.w	r7, [r9]
 80074b4:	4463      	add	r3, ip
 80074b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80074be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074c8:	4572      	cmp	r2, lr
 80074ca:	f849 3b04 	str.w	r3, [r9], #4
 80074ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074d2:	d8e2      	bhi.n	800749a <__multiply+0xb2>
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	f845 c003 	str.w	ip, [r5, r3]
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074e0:	3104      	adds	r1, #4
 80074e2:	f1b9 0f00 	cmp.w	r9, #0
 80074e6:	d021      	beq.n	800752c <__multiply+0x144>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	f104 0c14 	add.w	ip, r4, #20
 80074ee:	46ae      	mov	lr, r5
 80074f0:	f04f 0a00 	mov.w	sl, #0
 80074f4:	f8bc b000 	ldrh.w	fp, [ip]
 80074f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074fc:	fb09 770b 	mla	r7, r9, fp, r7
 8007500:	4457      	add	r7, sl
 8007502:	b29b      	uxth	r3, r3
 8007504:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007508:	f84e 3b04 	str.w	r3, [lr], #4
 800750c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007514:	f8be 3000 	ldrh.w	r3, [lr]
 8007518:	fb09 330a 	mla	r3, r9, sl, r3
 800751c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007520:	4562      	cmp	r2, ip
 8007522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007526:	d8e5      	bhi.n	80074f4 <__multiply+0x10c>
 8007528:	9f01      	ldr	r7, [sp, #4]
 800752a:	51eb      	str	r3, [r5, r7]
 800752c:	3504      	adds	r5, #4
 800752e:	e799      	b.n	8007464 <__multiply+0x7c>
 8007530:	3e01      	subs	r6, #1
 8007532:	e79b      	b.n	800746c <__multiply+0x84>
 8007534:	08009f25 	.word	0x08009f25
 8007538:	08009f36 	.word	0x08009f36

0800753c <__pow5mult>:
 800753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007540:	4615      	mov	r5, r2
 8007542:	f012 0203 	ands.w	r2, r2, #3
 8007546:	4607      	mov	r7, r0
 8007548:	460e      	mov	r6, r1
 800754a:	d007      	beq.n	800755c <__pow5mult+0x20>
 800754c:	4c25      	ldr	r4, [pc, #148]	@ (80075e4 <__pow5mult+0xa8>)
 800754e:	3a01      	subs	r2, #1
 8007550:	2300      	movs	r3, #0
 8007552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007556:	f7ff fe55 	bl	8007204 <__multadd>
 800755a:	4606      	mov	r6, r0
 800755c:	10ad      	asrs	r5, r5, #2
 800755e:	d03d      	beq.n	80075dc <__pow5mult+0xa0>
 8007560:	69fc      	ldr	r4, [r7, #28]
 8007562:	b97c      	cbnz	r4, 8007584 <__pow5mult+0x48>
 8007564:	2010      	movs	r0, #16
 8007566:	f7ff fd35 	bl	8006fd4 <malloc>
 800756a:	4602      	mov	r2, r0
 800756c:	61f8      	str	r0, [r7, #28]
 800756e:	b928      	cbnz	r0, 800757c <__pow5mult+0x40>
 8007570:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <__pow5mult+0xac>)
 8007572:	481e      	ldr	r0, [pc, #120]	@ (80075ec <__pow5mult+0xb0>)
 8007574:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007578:	f001 fb62 	bl	8008c40 <__assert_func>
 800757c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007580:	6004      	str	r4, [r0, #0]
 8007582:	60c4      	str	r4, [r0, #12]
 8007584:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800758c:	b94c      	cbnz	r4, 80075a2 <__pow5mult+0x66>
 800758e:	f240 2171 	movw	r1, #625	@ 0x271
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff ff12 	bl	80073bc <__i2b>
 8007598:	2300      	movs	r3, #0
 800759a:	f8c8 0008 	str.w	r0, [r8, #8]
 800759e:	4604      	mov	r4, r0
 80075a0:	6003      	str	r3, [r0, #0]
 80075a2:	f04f 0900 	mov.w	r9, #0
 80075a6:	07eb      	lsls	r3, r5, #31
 80075a8:	d50a      	bpl.n	80075c0 <__pow5mult+0x84>
 80075aa:	4631      	mov	r1, r6
 80075ac:	4622      	mov	r2, r4
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7ff ff1a 	bl	80073e8 <__multiply>
 80075b4:	4631      	mov	r1, r6
 80075b6:	4680      	mov	r8, r0
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff fe01 	bl	80071c0 <_Bfree>
 80075be:	4646      	mov	r6, r8
 80075c0:	106d      	asrs	r5, r5, #1
 80075c2:	d00b      	beq.n	80075dc <__pow5mult+0xa0>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	b938      	cbnz	r0, 80075d8 <__pow5mult+0x9c>
 80075c8:	4622      	mov	r2, r4
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ff0b 	bl	80073e8 <__multiply>
 80075d2:	6020      	str	r0, [r4, #0]
 80075d4:	f8c0 9000 	str.w	r9, [r0]
 80075d8:	4604      	mov	r4, r0
 80075da:	e7e4      	b.n	80075a6 <__pow5mult+0x6a>
 80075dc:	4630      	mov	r0, r6
 80075de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e2:	bf00      	nop
 80075e4:	08009f90 	.word	0x08009f90
 80075e8:	08009eb6 	.word	0x08009eb6
 80075ec:	08009f36 	.word	0x08009f36

080075f0 <__lshift>:
 80075f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	6849      	ldr	r1, [r1, #4]
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075fe:	68a3      	ldr	r3, [r4, #8]
 8007600:	4607      	mov	r7, r0
 8007602:	4691      	mov	r9, r2
 8007604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007608:	f108 0601 	add.w	r6, r8, #1
 800760c:	42b3      	cmp	r3, r6
 800760e:	db0b      	blt.n	8007628 <__lshift+0x38>
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff fd95 	bl	8007140 <_Balloc>
 8007616:	4605      	mov	r5, r0
 8007618:	b948      	cbnz	r0, 800762e <__lshift+0x3e>
 800761a:	4602      	mov	r2, r0
 800761c:	4b28      	ldr	r3, [pc, #160]	@ (80076c0 <__lshift+0xd0>)
 800761e:	4829      	ldr	r0, [pc, #164]	@ (80076c4 <__lshift+0xd4>)
 8007620:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007624:	f001 fb0c 	bl	8008c40 <__assert_func>
 8007628:	3101      	adds	r1, #1
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	e7ee      	b.n	800760c <__lshift+0x1c>
 800762e:	2300      	movs	r3, #0
 8007630:	f100 0114 	add.w	r1, r0, #20
 8007634:	f100 0210 	add.w	r2, r0, #16
 8007638:	4618      	mov	r0, r3
 800763a:	4553      	cmp	r3, sl
 800763c:	db33      	blt.n	80076a6 <__lshift+0xb6>
 800763e:	6920      	ldr	r0, [r4, #16]
 8007640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007644:	f104 0314 	add.w	r3, r4, #20
 8007648:	f019 091f 	ands.w	r9, r9, #31
 800764c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007654:	d02b      	beq.n	80076ae <__lshift+0xbe>
 8007656:	f1c9 0e20 	rsb	lr, r9, #32
 800765a:	468a      	mov	sl, r1
 800765c:	2200      	movs	r2, #0
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	fa00 f009 	lsl.w	r0, r0, r9
 8007664:	4310      	orrs	r0, r2
 8007666:	f84a 0b04 	str.w	r0, [sl], #4
 800766a:	f853 2b04 	ldr.w	r2, [r3], #4
 800766e:	459c      	cmp	ip, r3
 8007670:	fa22 f20e 	lsr.w	r2, r2, lr
 8007674:	d8f3      	bhi.n	800765e <__lshift+0x6e>
 8007676:	ebac 0304 	sub.w	r3, ip, r4
 800767a:	3b15      	subs	r3, #21
 800767c:	f023 0303 	bic.w	r3, r3, #3
 8007680:	3304      	adds	r3, #4
 8007682:	f104 0015 	add.w	r0, r4, #21
 8007686:	4584      	cmp	ip, r0
 8007688:	bf38      	it	cc
 800768a:	2304      	movcc	r3, #4
 800768c:	50ca      	str	r2, [r1, r3]
 800768e:	b10a      	cbz	r2, 8007694 <__lshift+0xa4>
 8007690:	f108 0602 	add.w	r6, r8, #2
 8007694:	3e01      	subs	r6, #1
 8007696:	4638      	mov	r0, r7
 8007698:	612e      	str	r6, [r5, #16]
 800769a:	4621      	mov	r1, r4
 800769c:	f7ff fd90 	bl	80071c0 <_Bfree>
 80076a0:	4628      	mov	r0, r5
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076aa:	3301      	adds	r3, #1
 80076ac:	e7c5      	b.n	800763a <__lshift+0x4a>
 80076ae:	3904      	subs	r1, #4
 80076b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80076b8:	459c      	cmp	ip, r3
 80076ba:	d8f9      	bhi.n	80076b0 <__lshift+0xc0>
 80076bc:	e7ea      	b.n	8007694 <__lshift+0xa4>
 80076be:	bf00      	nop
 80076c0:	08009f25 	.word	0x08009f25
 80076c4:	08009f36 	.word	0x08009f36

080076c8 <__mcmp>:
 80076c8:	690a      	ldr	r2, [r1, #16]
 80076ca:	4603      	mov	r3, r0
 80076cc:	6900      	ldr	r0, [r0, #16]
 80076ce:	1a80      	subs	r0, r0, r2
 80076d0:	b530      	push	{r4, r5, lr}
 80076d2:	d10e      	bne.n	80076f2 <__mcmp+0x2a>
 80076d4:	3314      	adds	r3, #20
 80076d6:	3114      	adds	r1, #20
 80076d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076e8:	4295      	cmp	r5, r2
 80076ea:	d003      	beq.n	80076f4 <__mcmp+0x2c>
 80076ec:	d205      	bcs.n	80076fa <__mcmp+0x32>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d3f3      	bcc.n	80076e0 <__mcmp+0x18>
 80076f8:	e7fb      	b.n	80076f2 <__mcmp+0x2a>
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7f9      	b.n	80076f2 <__mcmp+0x2a>
	...

08007700 <__mdiff>:
 8007700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	4689      	mov	r9, r1
 8007706:	4606      	mov	r6, r0
 8007708:	4611      	mov	r1, r2
 800770a:	4648      	mov	r0, r9
 800770c:	4614      	mov	r4, r2
 800770e:	f7ff ffdb 	bl	80076c8 <__mcmp>
 8007712:	1e05      	subs	r5, r0, #0
 8007714:	d112      	bne.n	800773c <__mdiff+0x3c>
 8007716:	4629      	mov	r1, r5
 8007718:	4630      	mov	r0, r6
 800771a:	f7ff fd11 	bl	8007140 <_Balloc>
 800771e:	4602      	mov	r2, r0
 8007720:	b928      	cbnz	r0, 800772e <__mdiff+0x2e>
 8007722:	4b3f      	ldr	r3, [pc, #252]	@ (8007820 <__mdiff+0x120>)
 8007724:	f240 2137 	movw	r1, #567	@ 0x237
 8007728:	483e      	ldr	r0, [pc, #248]	@ (8007824 <__mdiff+0x124>)
 800772a:	f001 fa89 	bl	8008c40 <__assert_func>
 800772e:	2301      	movs	r3, #1
 8007730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007734:	4610      	mov	r0, r2
 8007736:	b003      	add	sp, #12
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	bfbc      	itt	lt
 800773e:	464b      	movlt	r3, r9
 8007740:	46a1      	movlt	r9, r4
 8007742:	4630      	mov	r0, r6
 8007744:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007748:	bfba      	itte	lt
 800774a:	461c      	movlt	r4, r3
 800774c:	2501      	movlt	r5, #1
 800774e:	2500      	movge	r5, #0
 8007750:	f7ff fcf6 	bl	8007140 <_Balloc>
 8007754:	4602      	mov	r2, r0
 8007756:	b918      	cbnz	r0, 8007760 <__mdiff+0x60>
 8007758:	4b31      	ldr	r3, [pc, #196]	@ (8007820 <__mdiff+0x120>)
 800775a:	f240 2145 	movw	r1, #581	@ 0x245
 800775e:	e7e3      	b.n	8007728 <__mdiff+0x28>
 8007760:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007764:	6926      	ldr	r6, [r4, #16]
 8007766:	60c5      	str	r5, [r0, #12]
 8007768:	f109 0310 	add.w	r3, r9, #16
 800776c:	f109 0514 	add.w	r5, r9, #20
 8007770:	f104 0e14 	add.w	lr, r4, #20
 8007774:	f100 0b14 	add.w	fp, r0, #20
 8007778:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800777c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	46d9      	mov	r9, fp
 8007784:	f04f 0c00 	mov.w	ip, #0
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800778e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	fa1f f38a 	uxth.w	r3, sl
 8007798:	4619      	mov	r1, r3
 800779a:	b283      	uxth	r3, r0
 800779c:	1acb      	subs	r3, r1, r3
 800779e:	0c00      	lsrs	r0, r0, #16
 80077a0:	4463      	add	r3, ip
 80077a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077b0:	4576      	cmp	r6, lr
 80077b2:	f849 3b04 	str.w	r3, [r9], #4
 80077b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077ba:	d8e5      	bhi.n	8007788 <__mdiff+0x88>
 80077bc:	1b33      	subs	r3, r6, r4
 80077be:	3b15      	subs	r3, #21
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	3415      	adds	r4, #21
 80077c6:	3304      	adds	r3, #4
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	bf38      	it	cc
 80077cc:	2304      	movcc	r3, #4
 80077ce:	441d      	add	r5, r3
 80077d0:	445b      	add	r3, fp
 80077d2:	461e      	mov	r6, r3
 80077d4:	462c      	mov	r4, r5
 80077d6:	4544      	cmp	r4, r8
 80077d8:	d30e      	bcc.n	80077f8 <__mdiff+0xf8>
 80077da:	f108 0103 	add.w	r1, r8, #3
 80077de:	1b49      	subs	r1, r1, r5
 80077e0:	f021 0103 	bic.w	r1, r1, #3
 80077e4:	3d03      	subs	r5, #3
 80077e6:	45a8      	cmp	r8, r5
 80077e8:	bf38      	it	cc
 80077ea:	2100      	movcc	r1, #0
 80077ec:	440b      	add	r3, r1
 80077ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077f2:	b191      	cbz	r1, 800781a <__mdiff+0x11a>
 80077f4:	6117      	str	r7, [r2, #16]
 80077f6:	e79d      	b.n	8007734 <__mdiff+0x34>
 80077f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80077fc:	46e6      	mov	lr, ip
 80077fe:	0c08      	lsrs	r0, r1, #16
 8007800:	fa1c fc81 	uxtah	ip, ip, r1
 8007804:	4471      	add	r1, lr
 8007806:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800780a:	b289      	uxth	r1, r1
 800780c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007810:	f846 1b04 	str.w	r1, [r6], #4
 8007814:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007818:	e7dd      	b.n	80077d6 <__mdiff+0xd6>
 800781a:	3f01      	subs	r7, #1
 800781c:	e7e7      	b.n	80077ee <__mdiff+0xee>
 800781e:	bf00      	nop
 8007820:	08009f25 	.word	0x08009f25
 8007824:	08009f36 	.word	0x08009f36

08007828 <__ulp>:
 8007828:	b082      	sub	sp, #8
 800782a:	ed8d 0b00 	vstr	d0, [sp]
 800782e:	9a01      	ldr	r2, [sp, #4]
 8007830:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <__ulp+0x48>)
 8007832:	4013      	ands	r3, r2
 8007834:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc08      	bgt.n	800784e <__ulp+0x26>
 800783c:	425b      	negs	r3, r3
 800783e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007842:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007846:	da04      	bge.n	8007852 <__ulp+0x2a>
 8007848:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800784c:	4113      	asrs	r3, r2
 800784e:	2200      	movs	r2, #0
 8007850:	e008      	b.n	8007864 <__ulp+0x3c>
 8007852:	f1a2 0314 	sub.w	r3, r2, #20
 8007856:	2b1e      	cmp	r3, #30
 8007858:	bfda      	itte	le
 800785a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800785e:	40da      	lsrle	r2, r3
 8007860:	2201      	movgt	r2, #1
 8007862:	2300      	movs	r3, #0
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	ec41 0b10 	vmov	d0, r0, r1
 800786c:	b002      	add	sp, #8
 800786e:	4770      	bx	lr
 8007870:	7ff00000 	.word	0x7ff00000

08007874 <__b2d>:
 8007874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007878:	6906      	ldr	r6, [r0, #16]
 800787a:	f100 0814 	add.w	r8, r0, #20
 800787e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007882:	1f37      	subs	r7, r6, #4
 8007884:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007888:	4610      	mov	r0, r2
 800788a:	f7ff fd4b 	bl	8007324 <__hi0bits>
 800788e:	f1c0 0320 	rsb	r3, r0, #32
 8007892:	280a      	cmp	r0, #10
 8007894:	600b      	str	r3, [r1, #0]
 8007896:	491b      	ldr	r1, [pc, #108]	@ (8007904 <__b2d+0x90>)
 8007898:	dc15      	bgt.n	80078c6 <__b2d+0x52>
 800789a:	f1c0 0c0b 	rsb	ip, r0, #11
 800789e:	fa22 f30c 	lsr.w	r3, r2, ip
 80078a2:	45b8      	cmp	r8, r7
 80078a4:	ea43 0501 	orr.w	r5, r3, r1
 80078a8:	bf34      	ite	cc
 80078aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078ae:	2300      	movcs	r3, #0
 80078b0:	3015      	adds	r0, #21
 80078b2:	fa02 f000 	lsl.w	r0, r2, r0
 80078b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80078ba:	4303      	orrs	r3, r0
 80078bc:	461c      	mov	r4, r3
 80078be:	ec45 4b10 	vmov	d0, r4, r5
 80078c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c6:	45b8      	cmp	r8, r7
 80078c8:	bf3a      	itte	cc
 80078ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80078d2:	2300      	movcs	r3, #0
 80078d4:	380b      	subs	r0, #11
 80078d6:	d012      	beq.n	80078fe <__b2d+0x8a>
 80078d8:	f1c0 0120 	rsb	r1, r0, #32
 80078dc:	fa23 f401 	lsr.w	r4, r3, r1
 80078e0:	4082      	lsls	r2, r0
 80078e2:	4322      	orrs	r2, r4
 80078e4:	4547      	cmp	r7, r8
 80078e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80078ea:	bf8c      	ite	hi
 80078ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80078f0:	2200      	movls	r2, #0
 80078f2:	4083      	lsls	r3, r0
 80078f4:	40ca      	lsrs	r2, r1
 80078f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80078fa:	4313      	orrs	r3, r2
 80078fc:	e7de      	b.n	80078bc <__b2d+0x48>
 80078fe:	ea42 0501 	orr.w	r5, r2, r1
 8007902:	e7db      	b.n	80078bc <__b2d+0x48>
 8007904:	3ff00000 	.word	0x3ff00000

08007908 <__d2b>:
 8007908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800790c:	460f      	mov	r7, r1
 800790e:	2101      	movs	r1, #1
 8007910:	ec59 8b10 	vmov	r8, r9, d0
 8007914:	4616      	mov	r6, r2
 8007916:	f7ff fc13 	bl	8007140 <_Balloc>
 800791a:	4604      	mov	r4, r0
 800791c:	b930      	cbnz	r0, 800792c <__d2b+0x24>
 800791e:	4602      	mov	r2, r0
 8007920:	4b23      	ldr	r3, [pc, #140]	@ (80079b0 <__d2b+0xa8>)
 8007922:	4824      	ldr	r0, [pc, #144]	@ (80079b4 <__d2b+0xac>)
 8007924:	f240 310f 	movw	r1, #783	@ 0x30f
 8007928:	f001 f98a 	bl	8008c40 <__assert_func>
 800792c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007934:	b10d      	cbz	r5, 800793a <__d2b+0x32>
 8007936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	f1b8 0300 	subs.w	r3, r8, #0
 8007940:	d023      	beq.n	800798a <__d2b+0x82>
 8007942:	4668      	mov	r0, sp
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f7ff fd0c 	bl	8007362 <__lo0bits>
 800794a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800794e:	b1d0      	cbz	r0, 8007986 <__d2b+0x7e>
 8007950:	f1c0 0320 	rsb	r3, r0, #32
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	430b      	orrs	r3, r1
 800795a:	40c2      	lsrs	r2, r0
 800795c:	6163      	str	r3, [r4, #20]
 800795e:	9201      	str	r2, [sp, #4]
 8007960:	9b01      	ldr	r3, [sp, #4]
 8007962:	61a3      	str	r3, [r4, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf0c      	ite	eq
 8007968:	2201      	moveq	r2, #1
 800796a:	2202      	movne	r2, #2
 800796c:	6122      	str	r2, [r4, #16]
 800796e:	b1a5      	cbz	r5, 800799a <__d2b+0x92>
 8007970:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007974:	4405      	add	r5, r0
 8007976:	603d      	str	r5, [r7, #0]
 8007978:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4620      	mov	r0, r4
 8007980:	b003      	add	sp, #12
 8007982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007986:	6161      	str	r1, [r4, #20]
 8007988:	e7ea      	b.n	8007960 <__d2b+0x58>
 800798a:	a801      	add	r0, sp, #4
 800798c:	f7ff fce9 	bl	8007362 <__lo0bits>
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	6163      	str	r3, [r4, #20]
 8007994:	3020      	adds	r0, #32
 8007996:	2201      	movs	r2, #1
 8007998:	e7e8      	b.n	800796c <__d2b+0x64>
 800799a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800799e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079a2:	6038      	str	r0, [r7, #0]
 80079a4:	6918      	ldr	r0, [r3, #16]
 80079a6:	f7ff fcbd 	bl	8007324 <__hi0bits>
 80079aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079ae:	e7e5      	b.n	800797c <__d2b+0x74>
 80079b0:	08009f25 	.word	0x08009f25
 80079b4:	08009f36 	.word	0x08009f36

080079b8 <__ratio>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	b085      	sub	sp, #20
 80079be:	e9cd 1000 	strd	r1, r0, [sp]
 80079c2:	a902      	add	r1, sp, #8
 80079c4:	f7ff ff56 	bl	8007874 <__b2d>
 80079c8:	9800      	ldr	r0, [sp, #0]
 80079ca:	a903      	add	r1, sp, #12
 80079cc:	ec55 4b10 	vmov	r4, r5, d0
 80079d0:	f7ff ff50 	bl	8007874 <__b2d>
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	6919      	ldr	r1, [r3, #16]
 80079d8:	9b00      	ldr	r3, [sp, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	1ac9      	subs	r1, r1, r3
 80079de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	ec5b ab10 	vmov	sl, fp, d0
 80079e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bfce      	itee	gt
 80079f0:	462a      	movgt	r2, r5
 80079f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079f6:	465a      	movle	r2, fp
 80079f8:	462f      	mov	r7, r5
 80079fa:	46d9      	mov	r9, fp
 80079fc:	bfcc      	ite	gt
 80079fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007a06:	464b      	mov	r3, r9
 8007a08:	4652      	mov	r2, sl
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 ff1d 	bl	800084c <__aeabi_ddiv>
 8007a12:	ec41 0b10 	vmov	d0, r0, r1
 8007a16:	b005      	add	sp, #20
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a1c <__copybits>:
 8007a1c:	3901      	subs	r1, #1
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	1149      	asrs	r1, r1, #5
 8007a22:	6914      	ldr	r4, [r2, #16]
 8007a24:	3101      	adds	r1, #1
 8007a26:	f102 0314 	add.w	r3, r2, #20
 8007a2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a32:	1f05      	subs	r5, r0, #4
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d30c      	bcc.n	8007a52 <__copybits+0x36>
 8007a38:	1aa3      	subs	r3, r4, r2
 8007a3a:	3b11      	subs	r3, #17
 8007a3c:	f023 0303 	bic.w	r3, r3, #3
 8007a40:	3211      	adds	r2, #17
 8007a42:	42a2      	cmp	r2, r4
 8007a44:	bf88      	it	hi
 8007a46:	2300      	movhi	r3, #0
 8007a48:	4418      	add	r0, r3
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4288      	cmp	r0, r1
 8007a4e:	d305      	bcc.n	8007a5c <__copybits+0x40>
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a56:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a5a:	e7eb      	b.n	8007a34 <__copybits+0x18>
 8007a5c:	f840 3b04 	str.w	r3, [r0], #4
 8007a60:	e7f4      	b.n	8007a4c <__copybits+0x30>

08007a62 <__any_on>:
 8007a62:	f100 0214 	add.w	r2, r0, #20
 8007a66:	6900      	ldr	r0, [r0, #16]
 8007a68:	114b      	asrs	r3, r1, #5
 8007a6a:	4298      	cmp	r0, r3
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	db11      	blt.n	8007a94 <__any_on+0x32>
 8007a70:	dd0a      	ble.n	8007a88 <__any_on+0x26>
 8007a72:	f011 011f 	ands.w	r1, r1, #31
 8007a76:	d007      	beq.n	8007a88 <__any_on+0x26>
 8007a78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a7c:	fa24 f001 	lsr.w	r0, r4, r1
 8007a80:	fa00 f101 	lsl.w	r1, r0, r1
 8007a84:	428c      	cmp	r4, r1
 8007a86:	d10b      	bne.n	8007aa0 <__any_on+0x3e>
 8007a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d803      	bhi.n	8007a98 <__any_on+0x36>
 8007a90:	2000      	movs	r0, #0
 8007a92:	bd10      	pop	{r4, pc}
 8007a94:	4603      	mov	r3, r0
 8007a96:	e7f7      	b.n	8007a88 <__any_on+0x26>
 8007a98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d0f5      	beq.n	8007a8c <__any_on+0x2a>
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	e7f6      	b.n	8007a92 <__any_on+0x30>

08007aa4 <sulp>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	ec45 4b10 	vmov	d0, r4, r5
 8007aae:	4616      	mov	r6, r2
 8007ab0:	f7ff feba 	bl	8007828 <__ulp>
 8007ab4:	ec51 0b10 	vmov	r0, r1, d0
 8007ab8:	b17e      	cbz	r6, 8007ada <sulp+0x36>
 8007aba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007abe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dd09      	ble.n	8007ada <sulp+0x36>
 8007ac6:	051b      	lsls	r3, r3, #20
 8007ac8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007acc:	2400      	movs	r4, #0
 8007ace:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	f7f8 fd8f 	bl	80005f8 <__aeabi_dmul>
 8007ada:	ec41 0b10 	vmov	d0, r0, r1
 8007ade:	bd70      	pop	{r4, r5, r6, pc}

08007ae0 <_strtod_l>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	b09f      	sub	sp, #124	@ 0x7c
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007aea:	2200      	movs	r2, #0
 8007aec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007aee:	9005      	str	r0, [sp, #20]
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	f04f 0b00 	mov.w	fp, #0
 8007af8:	460a      	mov	r2, r1
 8007afa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007afc:	7811      	ldrb	r1, [r2, #0]
 8007afe:	292b      	cmp	r1, #43	@ 0x2b
 8007b00:	d04a      	beq.n	8007b98 <_strtod_l+0xb8>
 8007b02:	d838      	bhi.n	8007b76 <_strtod_l+0x96>
 8007b04:	290d      	cmp	r1, #13
 8007b06:	d832      	bhi.n	8007b6e <_strtod_l+0x8e>
 8007b08:	2908      	cmp	r1, #8
 8007b0a:	d832      	bhi.n	8007b72 <_strtod_l+0x92>
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d03b      	beq.n	8007b88 <_strtod_l+0xa8>
 8007b10:	2200      	movs	r2, #0
 8007b12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b16:	782a      	ldrb	r2, [r5, #0]
 8007b18:	2a30      	cmp	r2, #48	@ 0x30
 8007b1a:	f040 80b3 	bne.w	8007c84 <_strtod_l+0x1a4>
 8007b1e:	786a      	ldrb	r2, [r5, #1]
 8007b20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b24:	2a58      	cmp	r2, #88	@ 0x58
 8007b26:	d16e      	bne.n	8007c06 <_strtod_l+0x126>
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4a8e      	ldr	r2, [pc, #568]	@ (8007d6c <_strtod_l+0x28c>)
 8007b34:	9805      	ldr	r0, [sp, #20]
 8007b36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b38:	a919      	add	r1, sp, #100	@ 0x64
 8007b3a:	f001 f91b 	bl	8008d74 <__gethex>
 8007b3e:	f010 060f 	ands.w	r6, r0, #15
 8007b42:	4604      	mov	r4, r0
 8007b44:	d005      	beq.n	8007b52 <_strtod_l+0x72>
 8007b46:	2e06      	cmp	r6, #6
 8007b48:	d128      	bne.n	8007b9c <_strtod_l+0xbc>
 8007b4a:	3501      	adds	r5, #1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 858e 	bne.w	8008676 <_strtod_l+0xb96>
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b5c:	b1cb      	cbz	r3, 8007b92 <_strtod_l+0xb2>
 8007b5e:	4652      	mov	r2, sl
 8007b60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007b64:	ec43 2b10 	vmov	d0, r2, r3
 8007b68:	b01f      	add	sp, #124	@ 0x7c
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6e:	2920      	cmp	r1, #32
 8007b70:	d1ce      	bne.n	8007b10 <_strtod_l+0x30>
 8007b72:	3201      	adds	r2, #1
 8007b74:	e7c1      	b.n	8007afa <_strtod_l+0x1a>
 8007b76:	292d      	cmp	r1, #45	@ 0x2d
 8007b78:	d1ca      	bne.n	8007b10 <_strtod_l+0x30>
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b7e:	1c51      	adds	r1, r2, #1
 8007b80:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b82:	7852      	ldrb	r2, [r2, #1]
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d1c5      	bne.n	8007b14 <_strtod_l+0x34>
 8007b88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 8570 	bne.w	8008672 <_strtod_l+0xb92>
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	e7e5      	b.n	8007b64 <_strtod_l+0x84>
 8007b98:	2100      	movs	r1, #0
 8007b9a:	e7ef      	b.n	8007b7c <_strtod_l+0x9c>
 8007b9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b9e:	b13a      	cbz	r2, 8007bb0 <_strtod_l+0xd0>
 8007ba0:	2135      	movs	r1, #53	@ 0x35
 8007ba2:	a81c      	add	r0, sp, #112	@ 0x70
 8007ba4:	f7ff ff3a 	bl	8007a1c <__copybits>
 8007ba8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007baa:	9805      	ldr	r0, [sp, #20]
 8007bac:	f7ff fb08 	bl	80071c0 <_Bfree>
 8007bb0:	3e01      	subs	r6, #1
 8007bb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007bb4:	2e04      	cmp	r6, #4
 8007bb6:	d806      	bhi.n	8007bc6 <_strtod_l+0xe6>
 8007bb8:	e8df f006 	tbb	[pc, r6]
 8007bbc:	201d0314 	.word	0x201d0314
 8007bc0:	14          	.byte	0x14
 8007bc1:	00          	.byte	0x00
 8007bc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007bc6:	05e1      	lsls	r1, r4, #23
 8007bc8:	bf48      	it	mi
 8007bca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007bce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bd2:	0d1b      	lsrs	r3, r3, #20
 8007bd4:	051b      	lsls	r3, r3, #20
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1bb      	bne.n	8007b52 <_strtod_l+0x72>
 8007bda:	f7fe fb21 	bl	8006220 <__errno>
 8007bde:	2322      	movs	r3, #34	@ 0x22
 8007be0:	6003      	str	r3, [r0, #0]
 8007be2:	e7b6      	b.n	8007b52 <_strtod_l+0x72>
 8007be4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007be8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007bec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bf4:	e7e7      	b.n	8007bc6 <_strtod_l+0xe6>
 8007bf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007d74 <_strtod_l+0x294>
 8007bfa:	e7e4      	b.n	8007bc6 <_strtod_l+0xe6>
 8007bfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c00:	f04f 3aff 	mov.w	sl, #4294967295
 8007c04:	e7df      	b.n	8007bc6 <_strtod_l+0xe6>
 8007c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b30      	cmp	r3, #48	@ 0x30
 8007c10:	d0f9      	beq.n	8007c06 <_strtod_l+0x126>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d09d      	beq.n	8007b52 <_strtod_l+0x72>
 8007c16:	2301      	movs	r3, #1
 8007c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9308      	str	r3, [sp, #32]
 8007c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c24:	461f      	mov	r7, r3
 8007c26:	220a      	movs	r2, #10
 8007c28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c2a:	7805      	ldrb	r5, [r0, #0]
 8007c2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007c30:	b2d9      	uxtb	r1, r3
 8007c32:	2909      	cmp	r1, #9
 8007c34:	d928      	bls.n	8007c88 <_strtod_l+0x1a8>
 8007c36:	494e      	ldr	r1, [pc, #312]	@ (8007d70 <_strtod_l+0x290>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f000 ffd5 	bl	8008be8 <strncmp>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d032      	beq.n	8007ca8 <_strtod_l+0x1c8>
 8007c42:	2000      	movs	r0, #0
 8007c44:	462a      	mov	r2, r5
 8007c46:	4681      	mov	r9, r0
 8007c48:	463d      	mov	r5, r7
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2a65      	cmp	r2, #101	@ 0x65
 8007c4e:	d001      	beq.n	8007c54 <_strtod_l+0x174>
 8007c50:	2a45      	cmp	r2, #69	@ 0x45
 8007c52:	d114      	bne.n	8007c7e <_strtod_l+0x19e>
 8007c54:	b91d      	cbnz	r5, 8007c5e <_strtod_l+0x17e>
 8007c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c58:	4302      	orrs	r2, r0
 8007c5a:	d095      	beq.n	8007b88 <_strtod_l+0xa8>
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c60:	1c62      	adds	r2, r4, #1
 8007c62:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c64:	7862      	ldrb	r2, [r4, #1]
 8007c66:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c68:	d077      	beq.n	8007d5a <_strtod_l+0x27a>
 8007c6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c6c:	d07b      	beq.n	8007d66 <_strtod_l+0x286>
 8007c6e:	f04f 0c00 	mov.w	ip, #0
 8007c72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c76:	2909      	cmp	r1, #9
 8007c78:	f240 8082 	bls.w	8007d80 <_strtod_l+0x2a0>
 8007c7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	e0a2      	b.n	8007dca <_strtod_l+0x2ea>
 8007c84:	2300      	movs	r3, #0
 8007c86:	e7c7      	b.n	8007c18 <_strtod_l+0x138>
 8007c88:	2f08      	cmp	r7, #8
 8007c8a:	bfd5      	itete	le
 8007c8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c8e:	9908      	ldrgt	r1, [sp, #32]
 8007c90:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c98:	f100 0001 	add.w	r0, r0, #1
 8007c9c:	bfd4      	ite	le
 8007c9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007ca0:	9308      	strgt	r3, [sp, #32]
 8007ca2:	3701      	adds	r7, #1
 8007ca4:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ca6:	e7bf      	b.n	8007c28 <_strtod_l+0x148>
 8007ca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cae:	785a      	ldrb	r2, [r3, #1]
 8007cb0:	b37f      	cbz	r7, 8007d12 <_strtod_l+0x232>
 8007cb2:	4681      	mov	r9, r0
 8007cb4:	463d      	mov	r5, r7
 8007cb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d912      	bls.n	8007ce4 <_strtod_l+0x204>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7c4      	b.n	8007c4c <_strtod_l+0x16c>
 8007cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cc8:	785a      	ldrb	r2, [r3, #1]
 8007cca:	3001      	adds	r0, #1
 8007ccc:	2a30      	cmp	r2, #48	@ 0x30
 8007cce:	d0f8      	beq.n	8007cc2 <_strtod_l+0x1e2>
 8007cd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	f200 84d3 	bhi.w	8008680 <_strtod_l+0xba0>
 8007cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cde:	4681      	mov	r9, r0
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	3a30      	subs	r2, #48	@ 0x30
 8007ce6:	f100 0301 	add.w	r3, r0, #1
 8007cea:	d02a      	beq.n	8007d42 <_strtod_l+0x262>
 8007cec:	4499      	add	r9, r3
 8007cee:	eb00 0c05 	add.w	ip, r0, r5
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	210a      	movs	r1, #10
 8007cf6:	4563      	cmp	r3, ip
 8007cf8:	d10d      	bne.n	8007d16 <_strtod_l+0x236>
 8007cfa:	1c69      	adds	r1, r5, #1
 8007cfc:	4401      	add	r1, r0
 8007cfe:	4428      	add	r0, r5
 8007d00:	2808      	cmp	r0, #8
 8007d02:	dc16      	bgt.n	8007d32 <_strtod_l+0x252>
 8007d04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d06:	230a      	movs	r3, #10
 8007d08:	fb03 2300 	mla	r3, r3, r0, r2
 8007d0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e018      	b.n	8007d44 <_strtod_l+0x264>
 8007d12:	4638      	mov	r0, r7
 8007d14:	e7da      	b.n	8007ccc <_strtod_l+0x1ec>
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	f103 0301 	add.w	r3, r3, #1
 8007d1c:	dc03      	bgt.n	8007d26 <_strtod_l+0x246>
 8007d1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d20:	434e      	muls	r6, r1
 8007d22:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d24:	e7e7      	b.n	8007cf6 <_strtod_l+0x216>
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	bfde      	ittt	le
 8007d2a:	9e08      	ldrle	r6, [sp, #32]
 8007d2c:	434e      	mulle	r6, r1
 8007d2e:	9608      	strle	r6, [sp, #32]
 8007d30:	e7e1      	b.n	8007cf6 <_strtod_l+0x216>
 8007d32:	280f      	cmp	r0, #15
 8007d34:	dceb      	bgt.n	8007d0e <_strtod_l+0x22e>
 8007d36:	9808      	ldr	r0, [sp, #32]
 8007d38:	230a      	movs	r3, #10
 8007d3a:	fb03 2300 	mla	r3, r3, r0, r2
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	e7e5      	b.n	8007d0e <_strtod_l+0x22e>
 8007d42:	4629      	mov	r1, r5
 8007d44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d46:	1c50      	adds	r0, r2, #1
 8007d48:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d4a:	7852      	ldrb	r2, [r2, #1]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	460d      	mov	r5, r1
 8007d50:	e7b1      	b.n	8007cb6 <_strtod_l+0x1d6>
 8007d52:	f04f 0900 	mov.w	r9, #0
 8007d56:	2301      	movs	r3, #1
 8007d58:	e77d      	b.n	8007c56 <_strtod_l+0x176>
 8007d5a:	f04f 0c00 	mov.w	ip, #0
 8007d5e:	1ca2      	adds	r2, r4, #2
 8007d60:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d62:	78a2      	ldrb	r2, [r4, #2]
 8007d64:	e785      	b.n	8007c72 <_strtod_l+0x192>
 8007d66:	f04f 0c01 	mov.w	ip, #1
 8007d6a:	e7f8      	b.n	8007d5e <_strtod_l+0x27e>
 8007d6c:	0800a0a8 	.word	0x0800a0a8
 8007d70:	0800a090 	.word	0x0800a090
 8007d74:	7ff00000 	.word	0x7ff00000
 8007d78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d7a:	1c51      	adds	r1, r2, #1
 8007d7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d7e:	7852      	ldrb	r2, [r2, #1]
 8007d80:	2a30      	cmp	r2, #48	@ 0x30
 8007d82:	d0f9      	beq.n	8007d78 <_strtod_l+0x298>
 8007d84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d88:	2908      	cmp	r1, #8
 8007d8a:	f63f af78 	bhi.w	8007c7e <_strtod_l+0x19e>
 8007d8e:	3a30      	subs	r2, #48	@ 0x30
 8007d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d96:	f04f 080a 	mov.w	r8, #10
 8007d9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d9c:	1c56      	adds	r6, r2, #1
 8007d9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007da0:	7852      	ldrb	r2, [r2, #1]
 8007da2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007da6:	f1be 0f09 	cmp.w	lr, #9
 8007daa:	d939      	bls.n	8007e20 <_strtod_l+0x340>
 8007dac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007dae:	1a76      	subs	r6, r6, r1
 8007db0:	2e08      	cmp	r6, #8
 8007db2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007db6:	dc03      	bgt.n	8007dc0 <_strtod_l+0x2e0>
 8007db8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dba:	4588      	cmp	r8, r1
 8007dbc:	bfa8      	it	ge
 8007dbe:	4688      	movge	r8, r1
 8007dc0:	f1bc 0f00 	cmp.w	ip, #0
 8007dc4:	d001      	beq.n	8007dca <_strtod_l+0x2ea>
 8007dc6:	f1c8 0800 	rsb	r8, r8, #0
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	d14e      	bne.n	8007e6c <_strtod_l+0x38c>
 8007dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dd0:	4308      	orrs	r0, r1
 8007dd2:	f47f aebe 	bne.w	8007b52 <_strtod_l+0x72>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f47f aed6 	bne.w	8007b88 <_strtod_l+0xa8>
 8007ddc:	2a69      	cmp	r2, #105	@ 0x69
 8007dde:	d028      	beq.n	8007e32 <_strtod_l+0x352>
 8007de0:	dc25      	bgt.n	8007e2e <_strtod_l+0x34e>
 8007de2:	2a49      	cmp	r2, #73	@ 0x49
 8007de4:	d025      	beq.n	8007e32 <_strtod_l+0x352>
 8007de6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007de8:	f47f aece 	bne.w	8007b88 <_strtod_l+0xa8>
 8007dec:	499b      	ldr	r1, [pc, #620]	@ (800805c <_strtod_l+0x57c>)
 8007dee:	a819      	add	r0, sp, #100	@ 0x64
 8007df0:	f001 f9e2 	bl	80091b8 <__match>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f43f aec7 	beq.w	8007b88 <_strtod_l+0xa8>
 8007dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b28      	cmp	r3, #40	@ 0x28
 8007e00:	d12e      	bne.n	8007e60 <_strtod_l+0x380>
 8007e02:	4997      	ldr	r1, [pc, #604]	@ (8008060 <_strtod_l+0x580>)
 8007e04:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e06:	a819      	add	r0, sp, #100	@ 0x64
 8007e08:	f001 f9ea 	bl	80091e0 <__hexnan>
 8007e0c:	2805      	cmp	r0, #5
 8007e0e:	d127      	bne.n	8007e60 <_strtod_l+0x380>
 8007e10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e1e:	e698      	b.n	8007b52 <_strtod_l+0x72>
 8007e20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e22:	fb08 2101 	mla	r1, r8, r1, r2
 8007e26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e2c:	e7b5      	b.n	8007d9a <_strtod_l+0x2ba>
 8007e2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007e30:	e7da      	b.n	8007de8 <_strtod_l+0x308>
 8007e32:	498c      	ldr	r1, [pc, #560]	@ (8008064 <_strtod_l+0x584>)
 8007e34:	a819      	add	r0, sp, #100	@ 0x64
 8007e36:	f001 f9bf 	bl	80091b8 <__match>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f43f aea4 	beq.w	8007b88 <_strtod_l+0xa8>
 8007e40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e42:	4989      	ldr	r1, [pc, #548]	@ (8008068 <_strtod_l+0x588>)
 8007e44:	3b01      	subs	r3, #1
 8007e46:	a819      	add	r0, sp, #100	@ 0x64
 8007e48:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e4a:	f001 f9b5 	bl	80091b8 <__match>
 8007e4e:	b910      	cbnz	r0, 8007e56 <_strtod_l+0x376>
 8007e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e52:	3301      	adds	r3, #1
 8007e54:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008078 <_strtod_l+0x598>
 8007e5a:	f04f 0a00 	mov.w	sl, #0
 8007e5e:	e678      	b.n	8007b52 <_strtod_l+0x72>
 8007e60:	4882      	ldr	r0, [pc, #520]	@ (800806c <_strtod_l+0x58c>)
 8007e62:	f000 fee5 	bl	8008c30 <nan>
 8007e66:	ec5b ab10 	vmov	sl, fp, d0
 8007e6a:	e672      	b.n	8007b52 <_strtod_l+0x72>
 8007e6c:	eba8 0309 	sub.w	r3, r8, r9
 8007e70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e74:	2f00      	cmp	r7, #0
 8007e76:	bf08      	it	eq
 8007e78:	462f      	moveq	r7, r5
 8007e7a:	2d10      	cmp	r5, #16
 8007e7c:	462c      	mov	r4, r5
 8007e7e:	bfa8      	it	ge
 8007e80:	2410      	movge	r4, #16
 8007e82:	f7f8 fb3f 	bl	8000504 <__aeabi_ui2d>
 8007e86:	2d09      	cmp	r5, #9
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	dc13      	bgt.n	8007eb6 <_strtod_l+0x3d6>
 8007e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f43f ae5e 	beq.w	8007b52 <_strtod_l+0x72>
 8007e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e98:	dd78      	ble.n	8007f8c <_strtod_l+0x4ac>
 8007e9a:	2b16      	cmp	r3, #22
 8007e9c:	dc5f      	bgt.n	8007f5e <_strtod_l+0x47e>
 8007e9e:	4974      	ldr	r1, [pc, #464]	@ (8008070 <_strtod_l+0x590>)
 8007ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	465b      	mov	r3, fp
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	4682      	mov	sl, r0
 8007eb2:	468b      	mov	fp, r1
 8007eb4:	e64d      	b.n	8007b52 <_strtod_l+0x72>
 8007eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8008070 <_strtod_l+0x590>)
 8007eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ebc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	9808      	ldr	r0, [sp, #32]
 8007ec8:	468b      	mov	fp, r1
 8007eca:	f7f8 fb1b 	bl	8000504 <__aeabi_ui2d>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4650      	mov	r0, sl
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	f7f8 f9d9 	bl	800028c <__adddf3>
 8007eda:	2d0f      	cmp	r5, #15
 8007edc:	4682      	mov	sl, r0
 8007ede:	468b      	mov	fp, r1
 8007ee0:	ddd5      	ble.n	8007e8e <_strtod_l+0x3ae>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee4:	1b2c      	subs	r4, r5, r4
 8007ee6:	441c      	add	r4, r3
 8007ee8:	2c00      	cmp	r4, #0
 8007eea:	f340 8096 	ble.w	800801a <_strtod_l+0x53a>
 8007eee:	f014 030f 	ands.w	r3, r4, #15
 8007ef2:	d00a      	beq.n	8007f0a <_strtod_l+0x42a>
 8007ef4:	495e      	ldr	r1, [pc, #376]	@ (8008070 <_strtod_l+0x590>)
 8007ef6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f02:	f7f8 fb79 	bl	80005f8 <__aeabi_dmul>
 8007f06:	4682      	mov	sl, r0
 8007f08:	468b      	mov	fp, r1
 8007f0a:	f034 040f 	bics.w	r4, r4, #15
 8007f0e:	d073      	beq.n	8007ff8 <_strtod_l+0x518>
 8007f10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f14:	dd48      	ble.n	8007fa8 <_strtod_l+0x4c8>
 8007f16:	2400      	movs	r4, #0
 8007f18:	46a0      	mov	r8, r4
 8007f1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f1c:	46a1      	mov	r9, r4
 8007f1e:	9a05      	ldr	r2, [sp, #20]
 8007f20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008078 <_strtod_l+0x598>
 8007f24:	2322      	movs	r3, #34	@ 0x22
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	f04f 0a00 	mov.w	sl, #0
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f43f ae0f 	beq.w	8007b52 <_strtod_l+0x72>
 8007f34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f36:	9805      	ldr	r0, [sp, #20]
 8007f38:	f7ff f942 	bl	80071c0 <_Bfree>
 8007f3c:	9805      	ldr	r0, [sp, #20]
 8007f3e:	4649      	mov	r1, r9
 8007f40:	f7ff f93e 	bl	80071c0 <_Bfree>
 8007f44:	9805      	ldr	r0, [sp, #20]
 8007f46:	4641      	mov	r1, r8
 8007f48:	f7ff f93a 	bl	80071c0 <_Bfree>
 8007f4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f4e:	9805      	ldr	r0, [sp, #20]
 8007f50:	f7ff f936 	bl	80071c0 <_Bfree>
 8007f54:	9805      	ldr	r0, [sp, #20]
 8007f56:	4621      	mov	r1, r4
 8007f58:	f7ff f932 	bl	80071c0 <_Bfree>
 8007f5c:	e5f9      	b.n	8007b52 <_strtod_l+0x72>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f64:	4293      	cmp	r3, r2
 8007f66:	dbbc      	blt.n	8007ee2 <_strtod_l+0x402>
 8007f68:	4c41      	ldr	r4, [pc, #260]	@ (8008070 <_strtod_l+0x590>)
 8007f6a:	f1c5 050f 	rsb	r5, r5, #15
 8007f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f72:	4652      	mov	r2, sl
 8007f74:	465b      	mov	r3, fp
 8007f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7a:	f7f8 fb3d 	bl	80005f8 <__aeabi_dmul>
 8007f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f80:	1b5d      	subs	r5, r3, r5
 8007f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f8a:	e78f      	b.n	8007eac <_strtod_l+0x3cc>
 8007f8c:	3316      	adds	r3, #22
 8007f8e:	dba8      	blt.n	8007ee2 <_strtod_l+0x402>
 8007f90:	4b37      	ldr	r3, [pc, #220]	@ (8008070 <_strtod_l+0x590>)
 8007f92:	eba9 0808 	sub.w	r8, r9, r8
 8007f96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	f7f8 fc53 	bl	800084c <__aeabi_ddiv>
 8007fa6:	e783      	b.n	8007eb0 <_strtod_l+0x3d0>
 8007fa8:	4b32      	ldr	r3, [pc, #200]	@ (8008074 <_strtod_l+0x594>)
 8007faa:	9308      	str	r3, [sp, #32]
 8007fac:	2300      	movs	r3, #0
 8007fae:	1124      	asrs	r4, r4, #4
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	4659      	mov	r1, fp
 8007fb4:	461e      	mov	r6, r3
 8007fb6:	2c01      	cmp	r4, #1
 8007fb8:	dc21      	bgt.n	8007ffe <_strtod_l+0x51e>
 8007fba:	b10b      	cbz	r3, 8007fc0 <_strtod_l+0x4e0>
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	468b      	mov	fp, r1
 8007fc0:	492c      	ldr	r1, [pc, #176]	@ (8008074 <_strtod_l+0x594>)
 8007fc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007fc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007fca:	4652      	mov	r2, sl
 8007fcc:	465b      	mov	r3, fp
 8007fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd2:	f7f8 fb11 	bl	80005f8 <__aeabi_dmul>
 8007fd6:	4b28      	ldr	r3, [pc, #160]	@ (8008078 <_strtod_l+0x598>)
 8007fd8:	460a      	mov	r2, r1
 8007fda:	400b      	ands	r3, r1
 8007fdc:	4927      	ldr	r1, [pc, #156]	@ (800807c <_strtod_l+0x59c>)
 8007fde:	428b      	cmp	r3, r1
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	d898      	bhi.n	8007f16 <_strtod_l+0x436>
 8007fe4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007fe8:	428b      	cmp	r3, r1
 8007fea:	bf86      	itte	hi
 8007fec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008080 <_strtod_l+0x5a0>
 8007ff0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ff4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9308      	str	r3, [sp, #32]
 8007ffc:	e07a      	b.n	80080f4 <_strtod_l+0x614>
 8007ffe:	07e2      	lsls	r2, r4, #31
 8008000:	d505      	bpl.n	800800e <_strtod_l+0x52e>
 8008002:	9b08      	ldr	r3, [sp, #32]
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 faf6 	bl	80005f8 <__aeabi_dmul>
 800800c:	2301      	movs	r3, #1
 800800e:	9a08      	ldr	r2, [sp, #32]
 8008010:	3208      	adds	r2, #8
 8008012:	3601      	adds	r6, #1
 8008014:	1064      	asrs	r4, r4, #1
 8008016:	9208      	str	r2, [sp, #32]
 8008018:	e7cd      	b.n	8007fb6 <_strtod_l+0x4d6>
 800801a:	d0ed      	beq.n	8007ff8 <_strtod_l+0x518>
 800801c:	4264      	negs	r4, r4
 800801e:	f014 020f 	ands.w	r2, r4, #15
 8008022:	d00a      	beq.n	800803a <_strtod_l+0x55a>
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <_strtod_l+0x590>)
 8008026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 fc0b 	bl	800084c <__aeabi_ddiv>
 8008036:	4682      	mov	sl, r0
 8008038:	468b      	mov	fp, r1
 800803a:	1124      	asrs	r4, r4, #4
 800803c:	d0dc      	beq.n	8007ff8 <_strtod_l+0x518>
 800803e:	2c1f      	cmp	r4, #31
 8008040:	dd20      	ble.n	8008084 <_strtod_l+0x5a4>
 8008042:	2400      	movs	r4, #0
 8008044:	46a0      	mov	r8, r4
 8008046:	940a      	str	r4, [sp, #40]	@ 0x28
 8008048:	46a1      	mov	r9, r4
 800804a:	9a05      	ldr	r2, [sp, #20]
 800804c:	2322      	movs	r3, #34	@ 0x22
 800804e:	f04f 0a00 	mov.w	sl, #0
 8008052:	f04f 0b00 	mov.w	fp, #0
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e768      	b.n	8007f2c <_strtod_l+0x44c>
 800805a:	bf00      	nop
 800805c:	08009e7d 	.word	0x08009e7d
 8008060:	0800a094 	.word	0x0800a094
 8008064:	08009e75 	.word	0x08009e75
 8008068:	08009eac 	.word	0x08009eac
 800806c:	0800a23d 	.word	0x0800a23d
 8008070:	08009fc8 	.word	0x08009fc8
 8008074:	08009fa0 	.word	0x08009fa0
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	7ca00000 	.word	0x7ca00000
 8008080:	7fefffff 	.word	0x7fefffff
 8008084:	f014 0310 	ands.w	r3, r4, #16
 8008088:	bf18      	it	ne
 800808a:	236a      	movne	r3, #106	@ 0x6a
 800808c:	4ea9      	ldr	r6, [pc, #676]	@ (8008334 <_strtod_l+0x854>)
 800808e:	9308      	str	r3, [sp, #32]
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	2300      	movs	r3, #0
 8008096:	07e2      	lsls	r2, r4, #31
 8008098:	d504      	bpl.n	80080a4 <_strtod_l+0x5c4>
 800809a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	2301      	movs	r3, #1
 80080a4:	1064      	asrs	r4, r4, #1
 80080a6:	f106 0608 	add.w	r6, r6, #8
 80080aa:	d1f4      	bne.n	8008096 <_strtod_l+0x5b6>
 80080ac:	b10b      	cbz	r3, 80080b2 <_strtod_l+0x5d2>
 80080ae:	4682      	mov	sl, r0
 80080b0:	468b      	mov	fp, r1
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	b1b3      	cbz	r3, 80080e4 <_strtod_l+0x604>
 80080b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80080ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80080be:	2b00      	cmp	r3, #0
 80080c0:	4659      	mov	r1, fp
 80080c2:	dd0f      	ble.n	80080e4 <_strtod_l+0x604>
 80080c4:	2b1f      	cmp	r3, #31
 80080c6:	dd55      	ble.n	8008174 <_strtod_l+0x694>
 80080c8:	2b34      	cmp	r3, #52	@ 0x34
 80080ca:	bfde      	ittt	le
 80080cc:	f04f 33ff 	movle.w	r3, #4294967295
 80080d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80080d4:	4093      	lslle	r3, r2
 80080d6:	f04f 0a00 	mov.w	sl, #0
 80080da:	bfcc      	ite	gt
 80080dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80080e0:	ea03 0b01 	andle.w	fp, r3, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1a6      	bne.n	8008042 <_strtod_l+0x562>
 80080f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080fa:	9805      	ldr	r0, [sp, #20]
 80080fc:	462b      	mov	r3, r5
 80080fe:	463a      	mov	r2, r7
 8008100:	f7ff f8c6 	bl	8007290 <__s2b>
 8008104:	900a      	str	r0, [sp, #40]	@ 0x28
 8008106:	2800      	cmp	r0, #0
 8008108:	f43f af05 	beq.w	8007f16 <_strtod_l+0x436>
 800810c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810e:	2a00      	cmp	r2, #0
 8008110:	eba9 0308 	sub.w	r3, r9, r8
 8008114:	bfa8      	it	ge
 8008116:	2300      	movge	r3, #0
 8008118:	9312      	str	r3, [sp, #72]	@ 0x48
 800811a:	2400      	movs	r4, #0
 800811c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008120:	9316      	str	r3, [sp, #88]	@ 0x58
 8008122:	46a0      	mov	r8, r4
 8008124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008126:	9805      	ldr	r0, [sp, #20]
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	f7ff f809 	bl	8007140 <_Balloc>
 800812e:	4681      	mov	r9, r0
 8008130:	2800      	cmp	r0, #0
 8008132:	f43f aef4 	beq.w	8007f1e <_strtod_l+0x43e>
 8008136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	3202      	adds	r2, #2
 800813c:	f103 010c 	add.w	r1, r3, #12
 8008140:	0092      	lsls	r2, r2, #2
 8008142:	300c      	adds	r0, #12
 8008144:	f7fe f899 	bl	800627a <memcpy>
 8008148:	ec4b ab10 	vmov	d0, sl, fp
 800814c:	9805      	ldr	r0, [sp, #20]
 800814e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008150:	a91b      	add	r1, sp, #108	@ 0x6c
 8008152:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008156:	f7ff fbd7 	bl	8007908 <__d2b>
 800815a:	901a      	str	r0, [sp, #104]	@ 0x68
 800815c:	2800      	cmp	r0, #0
 800815e:	f43f aede 	beq.w	8007f1e <_strtod_l+0x43e>
 8008162:	9805      	ldr	r0, [sp, #20]
 8008164:	2101      	movs	r1, #1
 8008166:	f7ff f929 	bl	80073bc <__i2b>
 800816a:	4680      	mov	r8, r0
 800816c:	b948      	cbnz	r0, 8008182 <_strtod_l+0x6a2>
 800816e:	f04f 0800 	mov.w	r8, #0
 8008172:	e6d4      	b.n	8007f1e <_strtod_l+0x43e>
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	ea03 0a0a 	and.w	sl, r3, sl
 8008180:	e7b0      	b.n	80080e4 <_strtod_l+0x604>
 8008182:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008184:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008186:	2d00      	cmp	r5, #0
 8008188:	bfab      	itete	ge
 800818a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800818c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800818e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008190:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008192:	bfac      	ite	ge
 8008194:	18ef      	addge	r7, r5, r3
 8008196:	1b5e      	sublt	r6, r3, r5
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	1aed      	subs	r5, r5, r3
 800819c:	4415      	add	r5, r2
 800819e:	4b66      	ldr	r3, [pc, #408]	@ (8008338 <_strtod_l+0x858>)
 80081a0:	3d01      	subs	r5, #1
 80081a2:	429d      	cmp	r5, r3
 80081a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80081a8:	da50      	bge.n	800824c <_strtod_l+0x76c>
 80081aa:	1b5b      	subs	r3, r3, r5
 80081ac:	2b1f      	cmp	r3, #31
 80081ae:	eba2 0203 	sub.w	r2, r2, r3
 80081b2:	f04f 0101 	mov.w	r1, #1
 80081b6:	dc3d      	bgt.n	8008234 <_strtod_l+0x754>
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081be:	2300      	movs	r3, #0
 80081c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80081c2:	18bd      	adds	r5, r7, r2
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	42af      	cmp	r7, r5
 80081c8:	4416      	add	r6, r2
 80081ca:	441e      	add	r6, r3
 80081cc:	463b      	mov	r3, r7
 80081ce:	bfa8      	it	ge
 80081d0:	462b      	movge	r3, r5
 80081d2:	42b3      	cmp	r3, r6
 80081d4:	bfa8      	it	ge
 80081d6:	4633      	movge	r3, r6
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfc2      	ittt	gt
 80081dc:	1aed      	subgt	r5, r5, r3
 80081de:	1af6      	subgt	r6, r6, r3
 80081e0:	1aff      	subgt	r7, r7, r3
 80081e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd16      	ble.n	8008216 <_strtod_l+0x736>
 80081e8:	4641      	mov	r1, r8
 80081ea:	9805      	ldr	r0, [sp, #20]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f7ff f9a5 	bl	800753c <__pow5mult>
 80081f2:	4680      	mov	r8, r0
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0ba      	beq.n	800816e <_strtod_l+0x68e>
 80081f8:	4601      	mov	r1, r0
 80081fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081fc:	9805      	ldr	r0, [sp, #20]
 80081fe:	f7ff f8f3 	bl	80073e8 <__multiply>
 8008202:	900e      	str	r0, [sp, #56]	@ 0x38
 8008204:	2800      	cmp	r0, #0
 8008206:	f43f ae8a 	beq.w	8007f1e <_strtod_l+0x43e>
 800820a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	f7fe ffd7 	bl	80071c0 <_Bfree>
 8008212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008214:	931a      	str	r3, [sp, #104]	@ 0x68
 8008216:	2d00      	cmp	r5, #0
 8008218:	dc1d      	bgt.n	8008256 <_strtod_l+0x776>
 800821a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd23      	ble.n	8008268 <_strtod_l+0x788>
 8008220:	4649      	mov	r1, r9
 8008222:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008224:	9805      	ldr	r0, [sp, #20]
 8008226:	f7ff f989 	bl	800753c <__pow5mult>
 800822a:	4681      	mov	r9, r0
 800822c:	b9e0      	cbnz	r0, 8008268 <_strtod_l+0x788>
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	e674      	b.n	8007f1e <_strtod_l+0x43e>
 8008234:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008238:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800823c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008240:	35e2      	adds	r5, #226	@ 0xe2
 8008242:	fa01 f305 	lsl.w	r3, r1, r5
 8008246:	9310      	str	r3, [sp, #64]	@ 0x40
 8008248:	9113      	str	r1, [sp, #76]	@ 0x4c
 800824a:	e7ba      	b.n	80081c2 <_strtod_l+0x6e2>
 800824c:	2300      	movs	r3, #0
 800824e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008250:	2301      	movs	r3, #1
 8008252:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008254:	e7b5      	b.n	80081c2 <_strtod_l+0x6e2>
 8008256:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008258:	9805      	ldr	r0, [sp, #20]
 800825a:	462a      	mov	r2, r5
 800825c:	f7ff f9c8 	bl	80075f0 <__lshift>
 8008260:	901a      	str	r0, [sp, #104]	@ 0x68
 8008262:	2800      	cmp	r0, #0
 8008264:	d1d9      	bne.n	800821a <_strtod_l+0x73a>
 8008266:	e65a      	b.n	8007f1e <_strtod_l+0x43e>
 8008268:	2e00      	cmp	r6, #0
 800826a:	dd07      	ble.n	800827c <_strtod_l+0x79c>
 800826c:	4649      	mov	r1, r9
 800826e:	9805      	ldr	r0, [sp, #20]
 8008270:	4632      	mov	r2, r6
 8008272:	f7ff f9bd 	bl	80075f0 <__lshift>
 8008276:	4681      	mov	r9, r0
 8008278:	2800      	cmp	r0, #0
 800827a:	d0d8      	beq.n	800822e <_strtod_l+0x74e>
 800827c:	2f00      	cmp	r7, #0
 800827e:	dd08      	ble.n	8008292 <_strtod_l+0x7b2>
 8008280:	4641      	mov	r1, r8
 8008282:	9805      	ldr	r0, [sp, #20]
 8008284:	463a      	mov	r2, r7
 8008286:	f7ff f9b3 	bl	80075f0 <__lshift>
 800828a:	4680      	mov	r8, r0
 800828c:	2800      	cmp	r0, #0
 800828e:	f43f ae46 	beq.w	8007f1e <_strtod_l+0x43e>
 8008292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008294:	9805      	ldr	r0, [sp, #20]
 8008296:	464a      	mov	r2, r9
 8008298:	f7ff fa32 	bl	8007700 <__mdiff>
 800829c:	4604      	mov	r4, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f ae3d 	beq.w	8007f1e <_strtod_l+0x43e>
 80082a4:	68c3      	ldr	r3, [r0, #12]
 80082a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082a8:	2300      	movs	r3, #0
 80082aa:	60c3      	str	r3, [r0, #12]
 80082ac:	4641      	mov	r1, r8
 80082ae:	f7ff fa0b 	bl	80076c8 <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	da46      	bge.n	8008344 <_strtod_l+0x864>
 80082b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b8:	ea53 030a 	orrs.w	r3, r3, sl
 80082bc:	d16c      	bne.n	8008398 <_strtod_l+0x8b8>
 80082be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d168      	bne.n	8008398 <_strtod_l+0x8b8>
 80082c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082ca:	0d1b      	lsrs	r3, r3, #20
 80082cc:	051b      	lsls	r3, r3, #20
 80082ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082d2:	d961      	bls.n	8008398 <_strtod_l+0x8b8>
 80082d4:	6963      	ldr	r3, [r4, #20]
 80082d6:	b913      	cbnz	r3, 80082de <_strtod_l+0x7fe>
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	dd5c      	ble.n	8008398 <_strtod_l+0x8b8>
 80082de:	4621      	mov	r1, r4
 80082e0:	2201      	movs	r2, #1
 80082e2:	9805      	ldr	r0, [sp, #20]
 80082e4:	f7ff f984 	bl	80075f0 <__lshift>
 80082e8:	4641      	mov	r1, r8
 80082ea:	4604      	mov	r4, r0
 80082ec:	f7ff f9ec 	bl	80076c8 <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	dd51      	ble.n	8008398 <_strtod_l+0x8b8>
 80082f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082f8:	9a08      	ldr	r2, [sp, #32]
 80082fa:	0d1b      	lsrs	r3, r3, #20
 80082fc:	051b      	lsls	r3, r3, #20
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d06b      	beq.n	80083da <_strtod_l+0x8fa>
 8008302:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008306:	d868      	bhi.n	80083da <_strtod_l+0x8fa>
 8008308:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800830c:	f67f ae9d 	bls.w	800804a <_strtod_l+0x56a>
 8008310:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <_strtod_l+0x85c>)
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	2200      	movs	r2, #0
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	4b08      	ldr	r3, [pc, #32]	@ (8008340 <_strtod_l+0x860>)
 800831e:	400b      	ands	r3, r1
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f ae05 	bne.w	8007f34 <_strtod_l+0x454>
 800832a:	9a05      	ldr	r2, [sp, #20]
 800832c:	2322      	movs	r3, #34	@ 0x22
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e600      	b.n	8007f34 <_strtod_l+0x454>
 8008332:	bf00      	nop
 8008334:	0800a0c0 	.word	0x0800a0c0
 8008338:	fffffc02 	.word	0xfffffc02
 800833c:	39500000 	.word	0x39500000
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008348:	d165      	bne.n	8008416 <_strtod_l+0x936>
 800834a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800834c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008350:	b35a      	cbz	r2, 80083aa <_strtod_l+0x8ca>
 8008352:	4a9f      	ldr	r2, [pc, #636]	@ (80085d0 <_strtod_l+0xaf0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d12b      	bne.n	80083b0 <_strtod_l+0x8d0>
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	4651      	mov	r1, sl
 800835c:	b303      	cbz	r3, 80083a0 <_strtod_l+0x8c0>
 800835e:	4b9d      	ldr	r3, [pc, #628]	@ (80085d4 <_strtod_l+0xaf4>)
 8008360:	465a      	mov	r2, fp
 8008362:	4013      	ands	r3, r2
 8008364:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	d81b      	bhi.n	80083a6 <_strtod_l+0x8c6>
 800836e:	0d1b      	lsrs	r3, r3, #20
 8008370:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	4299      	cmp	r1, r3
 800837a:	d119      	bne.n	80083b0 <_strtod_l+0x8d0>
 800837c:	4b96      	ldr	r3, [pc, #600]	@ (80085d8 <_strtod_l+0xaf8>)
 800837e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008380:	429a      	cmp	r2, r3
 8008382:	d102      	bne.n	800838a <_strtod_l+0x8aa>
 8008384:	3101      	adds	r1, #1
 8008386:	f43f adca 	beq.w	8007f1e <_strtod_l+0x43e>
 800838a:	4b92      	ldr	r3, [pc, #584]	@ (80085d4 <_strtod_l+0xaf4>)
 800838c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800838e:	401a      	ands	r2, r3
 8008390:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008394:	f04f 0a00 	mov.w	sl, #0
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1b8      	bne.n	8008310 <_strtod_l+0x830>
 800839e:	e5c9      	b.n	8007f34 <_strtod_l+0x454>
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295
 80083a4:	e7e8      	b.n	8008378 <_strtod_l+0x898>
 80083a6:	4613      	mov	r3, r2
 80083a8:	e7e6      	b.n	8008378 <_strtod_l+0x898>
 80083aa:	ea53 030a 	orrs.w	r3, r3, sl
 80083ae:	d0a1      	beq.n	80082f4 <_strtod_l+0x814>
 80083b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083b2:	b1db      	cbz	r3, 80083ec <_strtod_l+0x90c>
 80083b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083b6:	4213      	tst	r3, r2
 80083b8:	d0ee      	beq.n	8008398 <_strtod_l+0x8b8>
 80083ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083bc:	9a08      	ldr	r2, [sp, #32]
 80083be:	4650      	mov	r0, sl
 80083c0:	4659      	mov	r1, fp
 80083c2:	b1bb      	cbz	r3, 80083f4 <_strtod_l+0x914>
 80083c4:	f7ff fb6e 	bl	8007aa4 <sulp>
 80083c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083cc:	ec53 2b10 	vmov	r2, r3, d0
 80083d0:	f7f7 ff5c 	bl	800028c <__adddf3>
 80083d4:	4682      	mov	sl, r0
 80083d6:	468b      	mov	fp, r1
 80083d8:	e7de      	b.n	8008398 <_strtod_l+0x8b8>
 80083da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80083de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083e6:	f04f 3aff 	mov.w	sl, #4294967295
 80083ea:	e7d5      	b.n	8008398 <_strtod_l+0x8b8>
 80083ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ee:	ea13 0f0a 	tst.w	r3, sl
 80083f2:	e7e1      	b.n	80083b8 <_strtod_l+0x8d8>
 80083f4:	f7ff fb56 	bl	8007aa4 <sulp>
 80083f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083fc:	ec53 2b10 	vmov	r2, r3, d0
 8008400:	f7f7 ff42 	bl	8000288 <__aeabi_dsub>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	f7f8 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008410:	2800      	cmp	r0, #0
 8008412:	d0c1      	beq.n	8008398 <_strtod_l+0x8b8>
 8008414:	e619      	b.n	800804a <_strtod_l+0x56a>
 8008416:	4641      	mov	r1, r8
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff facd 	bl	80079b8 <__ratio>
 800841e:	ec57 6b10 	vmov	r6, r7, d0
 8008422:	2200      	movs	r2, #0
 8008424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f8 fb60 	bl	8000af0 <__aeabi_dcmple>
 8008430:	2800      	cmp	r0, #0
 8008432:	d06f      	beq.n	8008514 <_strtod_l+0xa34>
 8008434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d17a      	bne.n	8008530 <_strtod_l+0xa50>
 800843a:	f1ba 0f00 	cmp.w	sl, #0
 800843e:	d158      	bne.n	80084f2 <_strtod_l+0xa12>
 8008440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008446:	2b00      	cmp	r3, #0
 8008448:	d15a      	bne.n	8008500 <_strtod_l+0xa20>
 800844a:	4b64      	ldr	r3, [pc, #400]	@ (80085dc <_strtod_l+0xafc>)
 800844c:	2200      	movs	r2, #0
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fb43 	bl	8000adc <__aeabi_dcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d159      	bne.n	800850e <_strtod_l+0xa2e>
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	4b60      	ldr	r3, [pc, #384]	@ (80085e0 <_strtod_l+0xb00>)
 8008460:	2200      	movs	r2, #0
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800846e:	9606      	str	r6, [sp, #24]
 8008470:	9307      	str	r3, [sp, #28]
 8008472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008476:	4d57      	ldr	r5, [pc, #348]	@ (80085d4 <_strtod_l+0xaf4>)
 8008478:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800847c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800847e:	401d      	ands	r5, r3
 8008480:	4b58      	ldr	r3, [pc, #352]	@ (80085e4 <_strtod_l+0xb04>)
 8008482:	429d      	cmp	r5, r3
 8008484:	f040 80b2 	bne.w	80085ec <_strtod_l+0xb0c>
 8008488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800848a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800848e:	ec4b ab10 	vmov	d0, sl, fp
 8008492:	f7ff f9c9 	bl	8007828 <__ulp>
 8008496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800849a:	ec51 0b10 	vmov	r0, r1, d0
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	4652      	mov	r2, sl
 80084a4:	465b      	mov	r3, fp
 80084a6:	f7f7 fef1 	bl	800028c <__adddf3>
 80084aa:	460b      	mov	r3, r1
 80084ac:	4949      	ldr	r1, [pc, #292]	@ (80085d4 <_strtod_l+0xaf4>)
 80084ae:	4a4e      	ldr	r2, [pc, #312]	@ (80085e8 <_strtod_l+0xb08>)
 80084b0:	4019      	ands	r1, r3
 80084b2:	4291      	cmp	r1, r2
 80084b4:	4682      	mov	sl, r0
 80084b6:	d942      	bls.n	800853e <_strtod_l+0xa5e>
 80084b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084ba:	4b47      	ldr	r3, [pc, #284]	@ (80085d8 <_strtod_l+0xaf8>)
 80084bc:	429a      	cmp	r2, r3
 80084be:	d103      	bne.n	80084c8 <_strtod_l+0x9e8>
 80084c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084c2:	3301      	adds	r3, #1
 80084c4:	f43f ad2b 	beq.w	8007f1e <_strtod_l+0x43e>
 80084c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80085d8 <_strtod_l+0xaf8>
 80084cc:	f04f 3aff 	mov.w	sl, #4294967295
 80084d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084d2:	9805      	ldr	r0, [sp, #20]
 80084d4:	f7fe fe74 	bl	80071c0 <_Bfree>
 80084d8:	9805      	ldr	r0, [sp, #20]
 80084da:	4649      	mov	r1, r9
 80084dc:	f7fe fe70 	bl	80071c0 <_Bfree>
 80084e0:	9805      	ldr	r0, [sp, #20]
 80084e2:	4641      	mov	r1, r8
 80084e4:	f7fe fe6c 	bl	80071c0 <_Bfree>
 80084e8:	9805      	ldr	r0, [sp, #20]
 80084ea:	4621      	mov	r1, r4
 80084ec:	f7fe fe68 	bl	80071c0 <_Bfree>
 80084f0:	e618      	b.n	8008124 <_strtod_l+0x644>
 80084f2:	f1ba 0f01 	cmp.w	sl, #1
 80084f6:	d103      	bne.n	8008500 <_strtod_l+0xa20>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f43f ada5 	beq.w	800804a <_strtod_l+0x56a>
 8008500:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80085b0 <_strtod_l+0xad0>
 8008504:	4f35      	ldr	r7, [pc, #212]	@ (80085dc <_strtod_l+0xafc>)
 8008506:	ed8d 7b06 	vstr	d7, [sp, #24]
 800850a:	2600      	movs	r6, #0
 800850c:	e7b1      	b.n	8008472 <_strtod_l+0x992>
 800850e:	4f34      	ldr	r7, [pc, #208]	@ (80085e0 <_strtod_l+0xb00>)
 8008510:	2600      	movs	r6, #0
 8008512:	e7aa      	b.n	800846a <_strtod_l+0x98a>
 8008514:	4b32      	ldr	r3, [pc, #200]	@ (80085e0 <_strtod_l+0xb00>)
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 f86c 	bl	80005f8 <__aeabi_dmul>
 8008520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d09f      	beq.n	800846a <_strtod_l+0x98a>
 800852a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800852e:	e7a0      	b.n	8008472 <_strtod_l+0x992>
 8008530:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80085b8 <_strtod_l+0xad8>
 8008534:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008538:	ec57 6b17 	vmov	r6, r7, d7
 800853c:	e799      	b.n	8008472 <_strtod_l+0x992>
 800853e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1c1      	bne.n	80084d0 <_strtod_l+0x9f0>
 800854c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	051b      	lsls	r3, r3, #20
 8008554:	429d      	cmp	r5, r3
 8008556:	d1bb      	bne.n	80084d0 <_strtod_l+0x9f0>
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fb94 	bl	8000c88 <__aeabi_d2lz>
 8008560:	f7f8 f81c 	bl	800059c <__aeabi_l2d>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f7 fe8c 	bl	8000288 <__aeabi_dsub>
 8008570:	460b      	mov	r3, r1
 8008572:	4602      	mov	r2, r0
 8008574:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008578:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800857c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800857e:	ea46 060a 	orr.w	r6, r6, sl
 8008582:	431e      	orrs	r6, r3
 8008584:	d06f      	beq.n	8008666 <_strtod_l+0xb86>
 8008586:	a30e      	add	r3, pc, #56	@ (adr r3, 80085c0 <_strtod_l+0xae0>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 faa6 	bl	8000adc <__aeabi_dcmplt>
 8008590:	2800      	cmp	r0, #0
 8008592:	f47f accf 	bne.w	8007f34 <_strtod_l+0x454>
 8008596:	a30c      	add	r3, pc, #48	@ (adr r3, 80085c8 <_strtod_l+0xae8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a0:	f7f8 faba 	bl	8000b18 <__aeabi_dcmpgt>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d093      	beq.n	80084d0 <_strtod_l+0x9f0>
 80085a8:	e4c4      	b.n	8007f34 <_strtod_l+0x454>
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w
 80085b0:	00000000 	.word	0x00000000
 80085b4:	bff00000 	.word	0xbff00000
 80085b8:	00000000 	.word	0x00000000
 80085bc:	3ff00000 	.word	0x3ff00000
 80085c0:	94a03595 	.word	0x94a03595
 80085c4:	3fdfffff 	.word	0x3fdfffff
 80085c8:	35afe535 	.word	0x35afe535
 80085cc:	3fe00000 	.word	0x3fe00000
 80085d0:	000fffff 	.word	0x000fffff
 80085d4:	7ff00000 	.word	0x7ff00000
 80085d8:	7fefffff 	.word	0x7fefffff
 80085dc:	3ff00000 	.word	0x3ff00000
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	7fe00000 	.word	0x7fe00000
 80085e8:	7c9fffff 	.word	0x7c9fffff
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	b323      	cbz	r3, 800863a <_strtod_l+0xb5a>
 80085f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80085f4:	d821      	bhi.n	800863a <_strtod_l+0xb5a>
 80085f6:	a328      	add	r3, pc, #160	@ (adr r3, 8008698 <_strtod_l+0xbb8>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f8 fa76 	bl	8000af0 <__aeabi_dcmple>
 8008604:	b1a0      	cbz	r0, 8008630 <_strtod_l+0xb50>
 8008606:	4639      	mov	r1, r7
 8008608:	4630      	mov	r0, r6
 800860a:	f7f8 facd 	bl	8000ba8 <__aeabi_d2uiz>
 800860e:	2801      	cmp	r0, #1
 8008610:	bf38      	it	cc
 8008612:	2001      	movcc	r0, #1
 8008614:	f7f7 ff76 	bl	8000504 <__aeabi_ui2d>
 8008618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	b9fb      	cbnz	r3, 8008660 <_strtod_l+0xb80>
 8008620:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008624:	9014      	str	r0, [sp, #80]	@ 0x50
 8008626:	9315      	str	r3, [sp, #84]	@ 0x54
 8008628:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800862c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008630:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008632:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008636:	1b5b      	subs	r3, r3, r5
 8008638:	9311      	str	r3, [sp, #68]	@ 0x44
 800863a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800863e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008642:	f7ff f8f1 	bl	8007828 <__ulp>
 8008646:	4650      	mov	r0, sl
 8008648:	ec53 2b10 	vmov	r2, r3, d0
 800864c:	4659      	mov	r1, fp
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008656:	f7f7 fe19 	bl	800028c <__adddf3>
 800865a:	4682      	mov	sl, r0
 800865c:	468b      	mov	fp, r1
 800865e:	e770      	b.n	8008542 <_strtod_l+0xa62>
 8008660:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008664:	e7e0      	b.n	8008628 <_strtod_l+0xb48>
 8008666:	a30e      	add	r3, pc, #56	@ (adr r3, 80086a0 <_strtod_l+0xbc0>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f7f8 fa36 	bl	8000adc <__aeabi_dcmplt>
 8008670:	e798      	b.n	80085a4 <_strtod_l+0xac4>
 8008672:	2300      	movs	r3, #0
 8008674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008676:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	f7ff ba6d 	b.w	8007b5a <_strtod_l+0x7a>
 8008680:	2a65      	cmp	r2, #101	@ 0x65
 8008682:	f43f ab66 	beq.w	8007d52 <_strtod_l+0x272>
 8008686:	2a45      	cmp	r2, #69	@ 0x45
 8008688:	f43f ab63 	beq.w	8007d52 <_strtod_l+0x272>
 800868c:	2301      	movs	r3, #1
 800868e:	f7ff bb9e 	b.w	8007dce <_strtod_l+0x2ee>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	ffc00000 	.word	0xffc00000
 800869c:	41dfffff 	.word	0x41dfffff
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fcfffff 	.word	0x3fcfffff

080086a8 <_strtod_r>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	@ (80086b0 <_strtod_r+0x8>)
 80086aa:	f7ff ba19 	b.w	8007ae0 <_strtod_l>
 80086ae:	bf00      	nop
 80086b0:	20000060 	.word	0x20000060

080086b4 <_strtol_l.constprop.0>:
 80086b4:	2b24      	cmp	r3, #36	@ 0x24
 80086b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ba:	4686      	mov	lr, r0
 80086bc:	4690      	mov	r8, r2
 80086be:	d801      	bhi.n	80086c4 <_strtol_l.constprop.0+0x10>
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d106      	bne.n	80086d2 <_strtol_l.constprop.0+0x1e>
 80086c4:	f7fd fdac 	bl	8006220 <__errno>
 80086c8:	2316      	movs	r3, #22
 80086ca:	6003      	str	r3, [r0, #0]
 80086cc:	2000      	movs	r0, #0
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	4834      	ldr	r0, [pc, #208]	@ (80087a4 <_strtol_l.constprop.0+0xf0>)
 80086d4:	460d      	mov	r5, r1
 80086d6:	462a      	mov	r2, r5
 80086d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086dc:	5d06      	ldrb	r6, [r0, r4]
 80086de:	f016 0608 	ands.w	r6, r6, #8
 80086e2:	d1f8      	bne.n	80086d6 <_strtol_l.constprop.0+0x22>
 80086e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80086e6:	d12d      	bne.n	8008744 <_strtol_l.constprop.0+0x90>
 80086e8:	782c      	ldrb	r4, [r5, #0]
 80086ea:	2601      	movs	r6, #1
 80086ec:	1c95      	adds	r5, r2, #2
 80086ee:	f033 0210 	bics.w	r2, r3, #16
 80086f2:	d109      	bne.n	8008708 <_strtol_l.constprop.0+0x54>
 80086f4:	2c30      	cmp	r4, #48	@ 0x30
 80086f6:	d12a      	bne.n	800874e <_strtol_l.constprop.0+0x9a>
 80086f8:	782a      	ldrb	r2, [r5, #0]
 80086fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086fe:	2a58      	cmp	r2, #88	@ 0x58
 8008700:	d125      	bne.n	800874e <_strtol_l.constprop.0+0x9a>
 8008702:	786c      	ldrb	r4, [r5, #1]
 8008704:	2310      	movs	r3, #16
 8008706:	3502      	adds	r5, #2
 8008708:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800870c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008710:	2200      	movs	r2, #0
 8008712:	fbbc f9f3 	udiv	r9, ip, r3
 8008716:	4610      	mov	r0, r2
 8008718:	fb03 ca19 	mls	sl, r3, r9, ip
 800871c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008720:	2f09      	cmp	r7, #9
 8008722:	d81b      	bhi.n	800875c <_strtol_l.constprop.0+0xa8>
 8008724:	463c      	mov	r4, r7
 8008726:	42a3      	cmp	r3, r4
 8008728:	dd27      	ble.n	800877a <_strtol_l.constprop.0+0xc6>
 800872a:	1c57      	adds	r7, r2, #1
 800872c:	d007      	beq.n	800873e <_strtol_l.constprop.0+0x8a>
 800872e:	4581      	cmp	r9, r0
 8008730:	d320      	bcc.n	8008774 <_strtol_l.constprop.0+0xc0>
 8008732:	d101      	bne.n	8008738 <_strtol_l.constprop.0+0x84>
 8008734:	45a2      	cmp	sl, r4
 8008736:	db1d      	blt.n	8008774 <_strtol_l.constprop.0+0xc0>
 8008738:	fb00 4003 	mla	r0, r0, r3, r4
 800873c:	2201      	movs	r2, #1
 800873e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008742:	e7eb      	b.n	800871c <_strtol_l.constprop.0+0x68>
 8008744:	2c2b      	cmp	r4, #43	@ 0x2b
 8008746:	bf04      	itt	eq
 8008748:	782c      	ldrbeq	r4, [r5, #0]
 800874a:	1c95      	addeq	r5, r2, #2
 800874c:	e7cf      	b.n	80086ee <_strtol_l.constprop.0+0x3a>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1da      	bne.n	8008708 <_strtol_l.constprop.0+0x54>
 8008752:	2c30      	cmp	r4, #48	@ 0x30
 8008754:	bf0c      	ite	eq
 8008756:	2308      	moveq	r3, #8
 8008758:	230a      	movne	r3, #10
 800875a:	e7d5      	b.n	8008708 <_strtol_l.constprop.0+0x54>
 800875c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008760:	2f19      	cmp	r7, #25
 8008762:	d801      	bhi.n	8008768 <_strtol_l.constprop.0+0xb4>
 8008764:	3c37      	subs	r4, #55	@ 0x37
 8008766:	e7de      	b.n	8008726 <_strtol_l.constprop.0+0x72>
 8008768:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800876c:	2f19      	cmp	r7, #25
 800876e:	d804      	bhi.n	800877a <_strtol_l.constprop.0+0xc6>
 8008770:	3c57      	subs	r4, #87	@ 0x57
 8008772:	e7d8      	b.n	8008726 <_strtol_l.constprop.0+0x72>
 8008774:	f04f 32ff 	mov.w	r2, #4294967295
 8008778:	e7e1      	b.n	800873e <_strtol_l.constprop.0+0x8a>
 800877a:	1c53      	adds	r3, r2, #1
 800877c:	d108      	bne.n	8008790 <_strtol_l.constprop.0+0xdc>
 800877e:	2322      	movs	r3, #34	@ 0x22
 8008780:	f8ce 3000 	str.w	r3, [lr]
 8008784:	4660      	mov	r0, ip
 8008786:	f1b8 0f00 	cmp.w	r8, #0
 800878a:	d0a0      	beq.n	80086ce <_strtol_l.constprop.0+0x1a>
 800878c:	1e69      	subs	r1, r5, #1
 800878e:	e006      	b.n	800879e <_strtol_l.constprop.0+0xea>
 8008790:	b106      	cbz	r6, 8008794 <_strtol_l.constprop.0+0xe0>
 8008792:	4240      	negs	r0, r0
 8008794:	f1b8 0f00 	cmp.w	r8, #0
 8008798:	d099      	beq.n	80086ce <_strtol_l.constprop.0+0x1a>
 800879a:	2a00      	cmp	r2, #0
 800879c:	d1f6      	bne.n	800878c <_strtol_l.constprop.0+0xd8>
 800879e:	f8c8 1000 	str.w	r1, [r8]
 80087a2:	e794      	b.n	80086ce <_strtol_l.constprop.0+0x1a>
 80087a4:	0800a0e9 	.word	0x0800a0e9

080087a8 <_strtol_r>:
 80087a8:	f7ff bf84 	b.w	80086b4 <_strtol_l.constprop.0>

080087ac <__ssputs_r>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	688e      	ldr	r6, [r1, #8]
 80087b2:	461f      	mov	r7, r3
 80087b4:	42be      	cmp	r6, r7
 80087b6:	680b      	ldr	r3, [r1, #0]
 80087b8:	4682      	mov	sl, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	4690      	mov	r8, r2
 80087be:	d82d      	bhi.n	800881c <__ssputs_r+0x70>
 80087c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087c8:	d026      	beq.n	8008818 <__ssputs_r+0x6c>
 80087ca:	6965      	ldr	r5, [r4, #20]
 80087cc:	6909      	ldr	r1, [r1, #16]
 80087ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d2:	eba3 0901 	sub.w	r9, r3, r1
 80087d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087da:	1c7b      	adds	r3, r7, #1
 80087dc:	444b      	add	r3, r9
 80087de:	106d      	asrs	r5, r5, #1
 80087e0:	429d      	cmp	r5, r3
 80087e2:	bf38      	it	cc
 80087e4:	461d      	movcc	r5, r3
 80087e6:	0553      	lsls	r3, r2, #21
 80087e8:	d527      	bpl.n	800883a <__ssputs_r+0x8e>
 80087ea:	4629      	mov	r1, r5
 80087ec:	f7fe fc1c 	bl	8007028 <_malloc_r>
 80087f0:	4606      	mov	r6, r0
 80087f2:	b360      	cbz	r0, 800884e <__ssputs_r+0xa2>
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	464a      	mov	r2, r9
 80087f8:	f7fd fd3f 	bl	800627a <memcpy>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	6126      	str	r6, [r4, #16]
 800880a:	6165      	str	r5, [r4, #20]
 800880c:	444e      	add	r6, r9
 800880e:	eba5 0509 	sub.w	r5, r5, r9
 8008812:	6026      	str	r6, [r4, #0]
 8008814:	60a5      	str	r5, [r4, #8]
 8008816:	463e      	mov	r6, r7
 8008818:	42be      	cmp	r6, r7
 800881a:	d900      	bls.n	800881e <__ssputs_r+0x72>
 800881c:	463e      	mov	r6, r7
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	4632      	mov	r2, r6
 8008822:	4641      	mov	r1, r8
 8008824:	f000 f9c6 	bl	8008bb4 <memmove>
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	1b9b      	subs	r3, r3, r6
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	4433      	add	r3, r6
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	2000      	movs	r0, #0
 8008836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883a:	462a      	mov	r2, r5
 800883c:	f000 fd7d 	bl	800933a <_realloc_r>
 8008840:	4606      	mov	r6, r0
 8008842:	2800      	cmp	r0, #0
 8008844:	d1e0      	bne.n	8008808 <__ssputs_r+0x5c>
 8008846:	6921      	ldr	r1, [r4, #16]
 8008848:	4650      	mov	r0, sl
 800884a:	f7fe fb79 	bl	8006f40 <_free_r>
 800884e:	230c      	movs	r3, #12
 8008850:	f8ca 3000 	str.w	r3, [sl]
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800885a:	81a3      	strh	r3, [r4, #12]
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	e7e9      	b.n	8008836 <__ssputs_r+0x8a>
	...

08008864 <_svfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4698      	mov	r8, r3
 800886a:	898b      	ldrh	r3, [r1, #12]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	b09d      	sub	sp, #116	@ 0x74
 8008870:	4607      	mov	r7, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4614      	mov	r4, r2
 8008876:	d510      	bpl.n	800889a <_svfiprintf_r+0x36>
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	b973      	cbnz	r3, 800889a <_svfiprintf_r+0x36>
 800887c:	2140      	movs	r1, #64	@ 0x40
 800887e:	f7fe fbd3 	bl	8007028 <_malloc_r>
 8008882:	6028      	str	r0, [r5, #0]
 8008884:	6128      	str	r0, [r5, #16]
 8008886:	b930      	cbnz	r0, 8008896 <_svfiprintf_r+0x32>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	b01d      	add	sp, #116	@ 0x74
 8008892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008896:	2340      	movs	r3, #64	@ 0x40
 8008898:	616b      	str	r3, [r5, #20]
 800889a:	2300      	movs	r3, #0
 800889c:	9309      	str	r3, [sp, #36]	@ 0x24
 800889e:	2320      	movs	r3, #32
 80088a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a8:	2330      	movs	r3, #48	@ 0x30
 80088aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a48 <_svfiprintf_r+0x1e4>
 80088ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088b2:	f04f 0901 	mov.w	r9, #1
 80088b6:	4623      	mov	r3, r4
 80088b8:	469a      	mov	sl, r3
 80088ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088be:	b10a      	cbz	r2, 80088c4 <_svfiprintf_r+0x60>
 80088c0:	2a25      	cmp	r2, #37	@ 0x25
 80088c2:	d1f9      	bne.n	80088b8 <_svfiprintf_r+0x54>
 80088c4:	ebba 0b04 	subs.w	fp, sl, r4
 80088c8:	d00b      	beq.n	80088e2 <_svfiprintf_r+0x7e>
 80088ca:	465b      	mov	r3, fp
 80088cc:	4622      	mov	r2, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ff6b 	bl	80087ac <__ssputs_r>
 80088d6:	3001      	adds	r0, #1
 80088d8:	f000 80a7 	beq.w	8008a2a <_svfiprintf_r+0x1c6>
 80088dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088de:	445a      	add	r2, fp
 80088e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80088e2:	f89a 3000 	ldrb.w	r3, [sl]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 809f 	beq.w	8008a2a <_svfiprintf_r+0x1c6>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f6:	f10a 0a01 	add.w	sl, sl, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008902:	931a      	str	r3, [sp, #104]	@ 0x68
 8008904:	4654      	mov	r4, sl
 8008906:	2205      	movs	r2, #5
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	484e      	ldr	r0, [pc, #312]	@ (8008a48 <_svfiprintf_r+0x1e4>)
 800890e:	f7f7 fc5f 	bl	80001d0 <memchr>
 8008912:	9a04      	ldr	r2, [sp, #16]
 8008914:	b9d8      	cbnz	r0, 800894e <_svfiprintf_r+0xea>
 8008916:	06d0      	lsls	r0, r2, #27
 8008918:	bf44      	itt	mi
 800891a:	2320      	movmi	r3, #32
 800891c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008920:	0711      	lsls	r1, r2, #28
 8008922:	bf44      	itt	mi
 8008924:	232b      	movmi	r3, #43	@ 0x2b
 8008926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800892a:	f89a 3000 	ldrb.w	r3, [sl]
 800892e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008930:	d015      	beq.n	800895e <_svfiprintf_r+0xfa>
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	4654      	mov	r4, sl
 8008936:	2000      	movs	r0, #0
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4621      	mov	r1, r4
 800893e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008942:	3b30      	subs	r3, #48	@ 0x30
 8008944:	2b09      	cmp	r3, #9
 8008946:	d94b      	bls.n	80089e0 <_svfiprintf_r+0x17c>
 8008948:	b1b0      	cbz	r0, 8008978 <_svfiprintf_r+0x114>
 800894a:	9207      	str	r2, [sp, #28]
 800894c:	e014      	b.n	8008978 <_svfiprintf_r+0x114>
 800894e:	eba0 0308 	sub.w	r3, r0, r8
 8008952:	fa09 f303 	lsl.w	r3, r9, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	46a2      	mov	sl, r4
 800895c:	e7d2      	b.n	8008904 <_svfiprintf_r+0xa0>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	9103      	str	r1, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfbb      	ittet	lt
 800896a:	425b      	neglt	r3, r3
 800896c:	f042 0202 	orrlt.w	r2, r2, #2
 8008970:	9307      	strge	r3, [sp, #28]
 8008972:	9307      	strlt	r3, [sp, #28]
 8008974:	bfb8      	it	lt
 8008976:	9204      	strlt	r2, [sp, #16]
 8008978:	7823      	ldrb	r3, [r4, #0]
 800897a:	2b2e      	cmp	r3, #46	@ 0x2e
 800897c:	d10a      	bne.n	8008994 <_svfiprintf_r+0x130>
 800897e:	7863      	ldrb	r3, [r4, #1]
 8008980:	2b2a      	cmp	r3, #42	@ 0x2a
 8008982:	d132      	bne.n	80089ea <_svfiprintf_r+0x186>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9203      	str	r2, [sp, #12]
 800898c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008990:	3402      	adds	r4, #2
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a58 <_svfiprintf_r+0x1f4>
 8008998:	7821      	ldrb	r1, [r4, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4650      	mov	r0, sl
 800899e:	f7f7 fc17 	bl	80001d0 <memchr>
 80089a2:	b138      	cbz	r0, 80089b4 <_svfiprintf_r+0x150>
 80089a4:	9b04      	ldr	r3, [sp, #16]
 80089a6:	eba0 000a 	sub.w	r0, r0, sl
 80089aa:	2240      	movs	r2, #64	@ 0x40
 80089ac:	4082      	lsls	r2, r0
 80089ae:	4313      	orrs	r3, r2
 80089b0:	3401      	adds	r4, #1
 80089b2:	9304      	str	r3, [sp, #16]
 80089b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b8:	4824      	ldr	r0, [pc, #144]	@ (8008a4c <_svfiprintf_r+0x1e8>)
 80089ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089be:	2206      	movs	r2, #6
 80089c0:	f7f7 fc06 	bl	80001d0 <memchr>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d036      	beq.n	8008a36 <_svfiprintf_r+0x1d2>
 80089c8:	4b21      	ldr	r3, [pc, #132]	@ (8008a50 <_svfiprintf_r+0x1ec>)
 80089ca:	bb1b      	cbnz	r3, 8008a14 <_svfiprintf_r+0x1b0>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	3307      	adds	r3, #7
 80089d0:	f023 0307 	bic.w	r3, r3, #7
 80089d4:	3308      	adds	r3, #8
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089da:	4433      	add	r3, r6
 80089dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089de:	e76a      	b.n	80088b6 <_svfiprintf_r+0x52>
 80089e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e4:	460c      	mov	r4, r1
 80089e6:	2001      	movs	r0, #1
 80089e8:	e7a8      	b.n	800893c <_svfiprintf_r+0xd8>
 80089ea:	2300      	movs	r3, #0
 80089ec:	3401      	adds	r4, #1
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f04f 0c0a 	mov.w	ip, #10
 80089f6:	4620      	mov	r0, r4
 80089f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fc:	3a30      	subs	r2, #48	@ 0x30
 80089fe:	2a09      	cmp	r2, #9
 8008a00:	d903      	bls.n	8008a0a <_svfiprintf_r+0x1a6>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0c6      	beq.n	8008994 <_svfiprintf_r+0x130>
 8008a06:	9105      	str	r1, [sp, #20]
 8008a08:	e7c4      	b.n	8008994 <_svfiprintf_r+0x130>
 8008a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a0e:	4604      	mov	r4, r0
 8008a10:	2301      	movs	r3, #1
 8008a12:	e7f0      	b.n	80089f6 <_svfiprintf_r+0x192>
 8008a14:	ab03      	add	r3, sp, #12
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	462a      	mov	r2, r5
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a54 <_svfiprintf_r+0x1f0>)
 8008a1c:	a904      	add	r1, sp, #16
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f7fc fc82 	bl	8005328 <_printf_float>
 8008a24:	1c42      	adds	r2, r0, #1
 8008a26:	4606      	mov	r6, r0
 8008a28:	d1d6      	bne.n	80089d8 <_svfiprintf_r+0x174>
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	065b      	lsls	r3, r3, #25
 8008a2e:	f53f af2d 	bmi.w	800888c <_svfiprintf_r+0x28>
 8008a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a34:	e72c      	b.n	8008890 <_svfiprintf_r+0x2c>
 8008a36:	ab03      	add	r3, sp, #12
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <_svfiprintf_r+0x1f0>)
 8008a3e:	a904      	add	r1, sp, #16
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7fc ff09 	bl	8005858 <_printf_i>
 8008a46:	e7ed      	b.n	8008a24 <_svfiprintf_r+0x1c0>
 8008a48:	0800a1e9 	.word	0x0800a1e9
 8008a4c:	0800a1f3 	.word	0x0800a1f3
 8008a50:	08005329 	.word	0x08005329
 8008a54:	080087ad 	.word	0x080087ad
 8008a58:	0800a1ef 	.word	0x0800a1ef

08008a5c <__sflush_r>:
 8008a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	0716      	lsls	r6, r2, #28
 8008a66:	4605      	mov	r5, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	d454      	bmi.n	8008b16 <__sflush_r+0xba>
 8008a6c:	684b      	ldr	r3, [r1, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dc02      	bgt.n	8008a78 <__sflush_r+0x1c>
 8008a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd48      	ble.n	8008b0a <__sflush_r+0xae>
 8008a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d045      	beq.n	8008b0a <__sflush_r+0xae>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a84:	682f      	ldr	r7, [r5, #0]
 8008a86:	6a21      	ldr	r1, [r4, #32]
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	d030      	beq.n	8008aee <__sflush_r+0x92>
 8008a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	0759      	lsls	r1, r3, #29
 8008a92:	d505      	bpl.n	8008aa0 <__sflush_r+0x44>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a9a:	b10b      	cbz	r3, 8008aa0 <__sflush_r+0x44>
 8008a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa4:	6a21      	ldr	r1, [r4, #32]
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	d106      	bne.n	8008abe <__sflush_r+0x62>
 8008ab0:	6829      	ldr	r1, [r5, #0]
 8008ab2:	291d      	cmp	r1, #29
 8008ab4:	d82b      	bhi.n	8008b0e <__sflush_r+0xb2>
 8008ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b60 <__sflush_r+0x104>)
 8008ab8:	410a      	asrs	r2, r1
 8008aba:	07d6      	lsls	r6, r2, #31
 8008abc:	d427      	bmi.n	8008b0e <__sflush_r+0xb2>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6062      	str	r2, [r4, #4]
 8008ac2:	04d9      	lsls	r1, r3, #19
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	d504      	bpl.n	8008ad4 <__sflush_r+0x78>
 8008aca:	1c42      	adds	r2, r0, #1
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0x76>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b903      	cbnz	r3, 8008ad4 <__sflush_r+0x78>
 8008ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad6:	602f      	str	r7, [r5, #0]
 8008ad8:	b1b9      	cbz	r1, 8008b0a <__sflush_r+0xae>
 8008ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	d002      	beq.n	8008ae8 <__sflush_r+0x8c>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f7fe fa2c 	bl	8006f40 <_free_r>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aec:	e00d      	b.n	8008b0a <__sflush_r+0xae>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b0      	blx	r6
 8008af4:	4602      	mov	r2, r0
 8008af6:	1c50      	adds	r0, r2, #1
 8008af8:	d1c9      	bne.n	8008a8e <__sflush_r+0x32>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0c6      	beq.n	8008a8e <__sflush_r+0x32>
 8008b00:	2b1d      	cmp	r3, #29
 8008b02:	d001      	beq.n	8008b08 <__sflush_r+0xac>
 8008b04:	2b16      	cmp	r3, #22
 8008b06:	d11e      	bne.n	8008b46 <__sflush_r+0xea>
 8008b08:	602f      	str	r7, [r5, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e022      	b.n	8008b54 <__sflush_r+0xf8>
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b12:	b21b      	sxth	r3, r3
 8008b14:	e01b      	b.n	8008b4e <__sflush_r+0xf2>
 8008b16:	690f      	ldr	r7, [r1, #16]
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	d0f6      	beq.n	8008b0a <__sflush_r+0xae>
 8008b1c:	0793      	lsls	r3, r2, #30
 8008b1e:	680e      	ldr	r6, [r1, #0]
 8008b20:	bf08      	it	eq
 8008b22:	694b      	ldreq	r3, [r1, #20]
 8008b24:	600f      	str	r7, [r1, #0]
 8008b26:	bf18      	it	ne
 8008b28:	2300      	movne	r3, #0
 8008b2a:	eba6 0807 	sub.w	r8, r6, r7
 8008b2e:	608b      	str	r3, [r1, #8]
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	dde9      	ble.n	8008b0a <__sflush_r+0xae>
 8008b36:	6a21      	ldr	r1, [r4, #32]
 8008b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b3a:	4643      	mov	r3, r8
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b0      	blx	r6
 8008b42:	2800      	cmp	r0, #0
 8008b44:	dc08      	bgt.n	8008b58 <__sflush_r+0xfc>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4407      	add	r7, r0
 8008b5a:	eba8 0800 	sub.w	r8, r8, r0
 8008b5e:	e7e7      	b.n	8008b30 <__sflush_r+0xd4>
 8008b60:	dfbffffe 	.word	0xdfbffffe

08008b64 <_fflush_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	b913      	cbnz	r3, 8008b74 <_fflush_r+0x10>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	4628      	mov	r0, r5
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	b118      	cbz	r0, 8008b7e <_fflush_r+0x1a>
 8008b76:	6a03      	ldr	r3, [r0, #32]
 8008b78:	b90b      	cbnz	r3, 8008b7e <_fflush_r+0x1a>
 8008b7a:	f7fd fa2d 	bl	8005fd8 <__sinit>
 8008b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f3      	beq.n	8008b6e <_fflush_r+0xa>
 8008b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b88:	07d0      	lsls	r0, r2, #31
 8008b8a:	d404      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b8c:	0599      	lsls	r1, r3, #22
 8008b8e:	d402      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b92:	f7fd fb70 	bl	8006276 <__retarget_lock_acquire_recursive>
 8008b96:	4628      	mov	r0, r5
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f7ff ff5f 	bl	8008a5c <__sflush_r>
 8008b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba0:	07da      	lsls	r2, r3, #31
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	d4e4      	bmi.n	8008b70 <_fflush_r+0xc>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	059b      	lsls	r3, r3, #22
 8008baa:	d4e1      	bmi.n	8008b70 <_fflush_r+0xc>
 8008bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bae:	f7fd fb63 	bl	8006278 <__retarget_lock_release_recursive>
 8008bb2:	e7dd      	b.n	8008b70 <_fflush_r+0xc>

08008bb4 <memmove>:
 8008bb4:	4288      	cmp	r0, r1
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	eb01 0402 	add.w	r4, r1, r2
 8008bbc:	d902      	bls.n	8008bc4 <memmove+0x10>
 8008bbe:	4284      	cmp	r4, r0
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	d807      	bhi.n	8008bd4 <memmove+0x20>
 8008bc4:	1e43      	subs	r3, r0, #1
 8008bc6:	42a1      	cmp	r1, r4
 8008bc8:	d008      	beq.n	8008bdc <memmove+0x28>
 8008bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd2:	e7f8      	b.n	8008bc6 <memmove+0x12>
 8008bd4:	4402      	add	r2, r0
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	d100      	bne.n	8008bde <memmove+0x2a>
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be6:	e7f7      	b.n	8008bd8 <memmove+0x24>

08008be8 <strncmp>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	b16a      	cbz	r2, 8008c08 <strncmp+0x20>
 8008bec:	3901      	subs	r1, #1
 8008bee:	1884      	adds	r4, r0, r2
 8008bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d103      	bne.n	8008c04 <strncmp+0x1c>
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d001      	beq.n	8008c04 <strncmp+0x1c>
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	d1f5      	bne.n	8008bf0 <strncmp+0x8>
 8008c04:	1ad0      	subs	r0, r2, r3
 8008c06:	bd10      	pop	{r4, pc}
 8008c08:	4610      	mov	r0, r2
 8008c0a:	e7fc      	b.n	8008c06 <strncmp+0x1e>

08008c0c <_sbrk_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d06      	ldr	r5, [pc, #24]	@ (8008c28 <_sbrk_r+0x1c>)
 8008c10:	2300      	movs	r3, #0
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	f7fc f9f6 	bl	8005008 <_sbrk>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_sbrk_r+0x1a>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_sbrk_r+0x1a>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	200009b0 	.word	0x200009b0
 8008c2c:	00000000 	.word	0x00000000

08008c30 <nan>:
 8008c30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c38 <nan+0x8>
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	7ff80000 	.word	0x7ff80000

08008c40 <__assert_func>:
 8008c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c42:	4614      	mov	r4, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <__assert_func+0x2c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	68d8      	ldr	r0, [r3, #12]
 8008c4e:	b954      	cbnz	r4, 8008c66 <__assert_func+0x26>
 8008c50:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <__assert_func+0x30>)
 8008c52:	461c      	mov	r4, r3
 8008c54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c58:	9100      	str	r1, [sp, #0]
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	4905      	ldr	r1, [pc, #20]	@ (8008c74 <__assert_func+0x34>)
 8008c5e:	f000 fba7 	bl	80093b0 <fiprintf>
 8008c62:	f000 fbb7 	bl	80093d4 <abort>
 8008c66:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <__assert_func+0x38>)
 8008c68:	e7f4      	b.n	8008c54 <__assert_func+0x14>
 8008c6a:	bf00      	nop
 8008c6c:	20000010 	.word	0x20000010
 8008c70:	0800a23d 	.word	0x0800a23d
 8008c74:	0800a20f 	.word	0x0800a20f
 8008c78:	0800a202 	.word	0x0800a202

08008c7c <_calloc_r>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	fba1 5402 	umull	r5, r4, r1, r2
 8008c82:	b93c      	cbnz	r4, 8008c94 <_calloc_r+0x18>
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7fe f9cf 	bl	8007028 <_malloc_r>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <_calloc_r+0x1e>
 8008c8e:	2600      	movs	r6, #0
 8008c90:	4630      	mov	r0, r6
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	220c      	movs	r2, #12
 8008c96:	6002      	str	r2, [r0, #0]
 8008c98:	e7f9      	b.n	8008c8e <_calloc_r+0x12>
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	f7fd fa6d 	bl	800617c <memset>
 8008ca2:	e7f5      	b.n	8008c90 <_calloc_r+0x14>

08008ca4 <rshift>:
 8008ca4:	6903      	ldr	r3, [r0, #16]
 8008ca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cb2:	f100 0414 	add.w	r4, r0, #20
 8008cb6:	dd45      	ble.n	8008d44 <rshift+0xa0>
 8008cb8:	f011 011f 	ands.w	r1, r1, #31
 8008cbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cc4:	d10c      	bne.n	8008ce0 <rshift+0x3c>
 8008cc6:	f100 0710 	add.w	r7, r0, #16
 8008cca:	4629      	mov	r1, r5
 8008ccc:	42b1      	cmp	r1, r6
 8008cce:	d334      	bcc.n	8008d3a <rshift+0x96>
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	1eea      	subs	r2, r5, #3
 8008cd6:	4296      	cmp	r6, r2
 8008cd8:	bf38      	it	cc
 8008cda:	2300      	movcc	r3, #0
 8008cdc:	4423      	add	r3, r4
 8008cde:	e015      	b.n	8008d0c <rshift+0x68>
 8008ce0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ce4:	f1c1 0820 	rsb	r8, r1, #32
 8008ce8:	40cf      	lsrs	r7, r1
 8008cea:	f105 0e04 	add.w	lr, r5, #4
 8008cee:	46a1      	mov	r9, r4
 8008cf0:	4576      	cmp	r6, lr
 8008cf2:	46f4      	mov	ip, lr
 8008cf4:	d815      	bhi.n	8008d22 <rshift+0x7e>
 8008cf6:	1a9a      	subs	r2, r3, r2
 8008cf8:	0092      	lsls	r2, r2, #2
 8008cfa:	3a04      	subs	r2, #4
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	42ae      	cmp	r6, r5
 8008d00:	bf38      	it	cc
 8008d02:	2200      	movcc	r2, #0
 8008d04:	18a3      	adds	r3, r4, r2
 8008d06:	50a7      	str	r7, [r4, r2]
 8008d08:	b107      	cbz	r7, 8008d0c <rshift+0x68>
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	1b1a      	subs	r2, r3, r4
 8008d0e:	42a3      	cmp	r3, r4
 8008d10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d14:	bf08      	it	eq
 8008d16:	2300      	moveq	r3, #0
 8008d18:	6102      	str	r2, [r0, #16]
 8008d1a:	bf08      	it	eq
 8008d1c:	6143      	streq	r3, [r0, #20]
 8008d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d22:	f8dc c000 	ldr.w	ip, [ip]
 8008d26:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d2a:	ea4c 0707 	orr.w	r7, ip, r7
 8008d2e:	f849 7b04 	str.w	r7, [r9], #4
 8008d32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d36:	40cf      	lsrs	r7, r1
 8008d38:	e7da      	b.n	8008cf0 <rshift+0x4c>
 8008d3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d42:	e7c3      	b.n	8008ccc <rshift+0x28>
 8008d44:	4623      	mov	r3, r4
 8008d46:	e7e1      	b.n	8008d0c <rshift+0x68>

08008d48 <__hexdig_fun>:
 8008d48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d4c:	2b09      	cmp	r3, #9
 8008d4e:	d802      	bhi.n	8008d56 <__hexdig_fun+0xe>
 8008d50:	3820      	subs	r0, #32
 8008d52:	b2c0      	uxtb	r0, r0
 8008d54:	4770      	bx	lr
 8008d56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d801      	bhi.n	8008d62 <__hexdig_fun+0x1a>
 8008d5e:	3847      	subs	r0, #71	@ 0x47
 8008d60:	e7f7      	b.n	8008d52 <__hexdig_fun+0xa>
 8008d62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d801      	bhi.n	8008d6e <__hexdig_fun+0x26>
 8008d6a:	3827      	subs	r0, #39	@ 0x27
 8008d6c:	e7f1      	b.n	8008d52 <__hexdig_fun+0xa>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	4770      	bx	lr
	...

08008d74 <__gethex>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	b085      	sub	sp, #20
 8008d7a:	468a      	mov	sl, r1
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	680b      	ldr	r3, [r1, #0]
 8008d80:	9001      	str	r0, [sp, #4]
 8008d82:	4690      	mov	r8, r2
 8008d84:	1c9c      	adds	r4, r3, #2
 8008d86:	46a1      	mov	r9, r4
 8008d88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d8c:	2830      	cmp	r0, #48	@ 0x30
 8008d8e:	d0fa      	beq.n	8008d86 <__gethex+0x12>
 8008d90:	eba9 0303 	sub.w	r3, r9, r3
 8008d94:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d98:	f7ff ffd6 	bl	8008d48 <__hexdig_fun>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d168      	bne.n	8008e74 <__gethex+0x100>
 8008da2:	49a0      	ldr	r1, [pc, #640]	@ (8009024 <__gethex+0x2b0>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	4648      	mov	r0, r9
 8008da8:	f7ff ff1e 	bl	8008be8 <strncmp>
 8008dac:	4607      	mov	r7, r0
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d167      	bne.n	8008e82 <__gethex+0x10e>
 8008db2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008db6:	4626      	mov	r6, r4
 8008db8:	f7ff ffc6 	bl	8008d48 <__hexdig_fun>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d062      	beq.n	8008e86 <__gethex+0x112>
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	7818      	ldrb	r0, [r3, #0]
 8008dc4:	2830      	cmp	r0, #48	@ 0x30
 8008dc6:	4699      	mov	r9, r3
 8008dc8:	f103 0301 	add.w	r3, r3, #1
 8008dcc:	d0f9      	beq.n	8008dc2 <__gethex+0x4e>
 8008dce:	f7ff ffbb 	bl	8008d48 <__hexdig_fun>
 8008dd2:	fab0 f580 	clz	r5, r0
 8008dd6:	096d      	lsrs	r5, r5, #5
 8008dd8:	f04f 0b01 	mov.w	fp, #1
 8008ddc:	464a      	mov	r2, r9
 8008dde:	4616      	mov	r6, r2
 8008de0:	3201      	adds	r2, #1
 8008de2:	7830      	ldrb	r0, [r6, #0]
 8008de4:	f7ff ffb0 	bl	8008d48 <__hexdig_fun>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d1f8      	bne.n	8008dde <__gethex+0x6a>
 8008dec:	498d      	ldr	r1, [pc, #564]	@ (8009024 <__gethex+0x2b0>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff fef9 	bl	8008be8 <strncmp>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d13f      	bne.n	8008e7a <__gethex+0x106>
 8008dfa:	b944      	cbnz	r4, 8008e0e <__gethex+0x9a>
 8008dfc:	1c74      	adds	r4, r6, #1
 8008dfe:	4622      	mov	r2, r4
 8008e00:	4616      	mov	r6, r2
 8008e02:	3201      	adds	r2, #1
 8008e04:	7830      	ldrb	r0, [r6, #0]
 8008e06:	f7ff ff9f 	bl	8008d48 <__hexdig_fun>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1f8      	bne.n	8008e00 <__gethex+0x8c>
 8008e0e:	1ba4      	subs	r4, r4, r6
 8008e10:	00a7      	lsls	r7, r4, #2
 8008e12:	7833      	ldrb	r3, [r6, #0]
 8008e14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008e18:	2b50      	cmp	r3, #80	@ 0x50
 8008e1a:	d13e      	bne.n	8008e9a <__gethex+0x126>
 8008e1c:	7873      	ldrb	r3, [r6, #1]
 8008e1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e20:	d033      	beq.n	8008e8a <__gethex+0x116>
 8008e22:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e24:	d034      	beq.n	8008e90 <__gethex+0x11c>
 8008e26:	1c71      	adds	r1, r6, #1
 8008e28:	2400      	movs	r4, #0
 8008e2a:	7808      	ldrb	r0, [r1, #0]
 8008e2c:	f7ff ff8c 	bl	8008d48 <__hexdig_fun>
 8008e30:	1e43      	subs	r3, r0, #1
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b18      	cmp	r3, #24
 8008e36:	d830      	bhi.n	8008e9a <__gethex+0x126>
 8008e38:	f1a0 0210 	sub.w	r2, r0, #16
 8008e3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e40:	f7ff ff82 	bl	8008d48 <__hexdig_fun>
 8008e44:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e48:	fa5f fc8c 	uxtb.w	ip, ip
 8008e4c:	f1bc 0f18 	cmp.w	ip, #24
 8008e50:	f04f 030a 	mov.w	r3, #10
 8008e54:	d91e      	bls.n	8008e94 <__gethex+0x120>
 8008e56:	b104      	cbz	r4, 8008e5a <__gethex+0xe6>
 8008e58:	4252      	negs	r2, r2
 8008e5a:	4417      	add	r7, r2
 8008e5c:	f8ca 1000 	str.w	r1, [sl]
 8008e60:	b1ed      	cbz	r5, 8008e9e <__gethex+0x12a>
 8008e62:	f1bb 0f00 	cmp.w	fp, #0
 8008e66:	bf0c      	ite	eq
 8008e68:	2506      	moveq	r5, #6
 8008e6a:	2500      	movne	r5, #0
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	b005      	add	sp, #20
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	2500      	movs	r5, #0
 8008e76:	462c      	mov	r4, r5
 8008e78:	e7b0      	b.n	8008ddc <__gethex+0x68>
 8008e7a:	2c00      	cmp	r4, #0
 8008e7c:	d1c7      	bne.n	8008e0e <__gethex+0x9a>
 8008e7e:	4627      	mov	r7, r4
 8008e80:	e7c7      	b.n	8008e12 <__gethex+0x9e>
 8008e82:	464e      	mov	r6, r9
 8008e84:	462f      	mov	r7, r5
 8008e86:	2501      	movs	r5, #1
 8008e88:	e7c3      	b.n	8008e12 <__gethex+0x9e>
 8008e8a:	2400      	movs	r4, #0
 8008e8c:	1cb1      	adds	r1, r6, #2
 8008e8e:	e7cc      	b.n	8008e2a <__gethex+0xb6>
 8008e90:	2401      	movs	r4, #1
 8008e92:	e7fb      	b.n	8008e8c <__gethex+0x118>
 8008e94:	fb03 0002 	mla	r0, r3, r2, r0
 8008e98:	e7ce      	b.n	8008e38 <__gethex+0xc4>
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	e7de      	b.n	8008e5c <__gethex+0xe8>
 8008e9e:	eba6 0309 	sub.w	r3, r6, r9
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	2b07      	cmp	r3, #7
 8008ea8:	dc0a      	bgt.n	8008ec0 <__gethex+0x14c>
 8008eaa:	9801      	ldr	r0, [sp, #4]
 8008eac:	f7fe f948 	bl	8007140 <_Balloc>
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	b940      	cbnz	r0, 8008ec6 <__gethex+0x152>
 8008eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8009028 <__gethex+0x2b4>)
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	21e4      	movs	r1, #228	@ 0xe4
 8008eba:	485c      	ldr	r0, [pc, #368]	@ (800902c <__gethex+0x2b8>)
 8008ebc:	f7ff fec0 	bl	8008c40 <__assert_func>
 8008ec0:	3101      	adds	r1, #1
 8008ec2:	105b      	asrs	r3, r3, #1
 8008ec4:	e7ef      	b.n	8008ea6 <__gethex+0x132>
 8008ec6:	f100 0a14 	add.w	sl, r0, #20
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4655      	mov	r5, sl
 8008ece:	469b      	mov	fp, r3
 8008ed0:	45b1      	cmp	r9, r6
 8008ed2:	d337      	bcc.n	8008f44 <__gethex+0x1d0>
 8008ed4:	f845 bb04 	str.w	fp, [r5], #4
 8008ed8:	eba5 050a 	sub.w	r5, r5, sl
 8008edc:	10ad      	asrs	r5, r5, #2
 8008ede:	6125      	str	r5, [r4, #16]
 8008ee0:	4658      	mov	r0, fp
 8008ee2:	f7fe fa1f 	bl	8007324 <__hi0bits>
 8008ee6:	016d      	lsls	r5, r5, #5
 8008ee8:	f8d8 6000 	ldr.w	r6, [r8]
 8008eec:	1a2d      	subs	r5, r5, r0
 8008eee:	42b5      	cmp	r5, r6
 8008ef0:	dd54      	ble.n	8008f9c <__gethex+0x228>
 8008ef2:	1bad      	subs	r5, r5, r6
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7fe fdb3 	bl	8007a62 <__any_on>
 8008efc:	4681      	mov	r9, r0
 8008efe:	b178      	cbz	r0, 8008f20 <__gethex+0x1ac>
 8008f00:	1e6b      	subs	r3, r5, #1
 8008f02:	1159      	asrs	r1, r3, #5
 8008f04:	f003 021f 	and.w	r2, r3, #31
 8008f08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f0c:	f04f 0901 	mov.w	r9, #1
 8008f10:	fa09 f202 	lsl.w	r2, r9, r2
 8008f14:	420a      	tst	r2, r1
 8008f16:	d003      	beq.n	8008f20 <__gethex+0x1ac>
 8008f18:	454b      	cmp	r3, r9
 8008f1a:	dc36      	bgt.n	8008f8a <__gethex+0x216>
 8008f1c:	f04f 0902 	mov.w	r9, #2
 8008f20:	4629      	mov	r1, r5
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7ff febe 	bl	8008ca4 <rshift>
 8008f28:	442f      	add	r7, r5
 8008f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f2e:	42bb      	cmp	r3, r7
 8008f30:	da42      	bge.n	8008fb8 <__gethex+0x244>
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	4621      	mov	r1, r4
 8008f36:	f7fe f943 	bl	80071c0 <_Bfree>
 8008f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	25a3      	movs	r5, #163	@ 0xa3
 8008f42:	e793      	b.n	8008e6c <__gethex+0xf8>
 8008f44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f48:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f4a:	d012      	beq.n	8008f72 <__gethex+0x1fe>
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d104      	bne.n	8008f5a <__gethex+0x1e6>
 8008f50:	f845 bb04 	str.w	fp, [r5], #4
 8008f54:	f04f 0b00 	mov.w	fp, #0
 8008f58:	465b      	mov	r3, fp
 8008f5a:	7830      	ldrb	r0, [r6, #0]
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	f7ff fef3 	bl	8008d48 <__hexdig_fun>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	f000 000f 	and.w	r0, r0, #15
 8008f68:	4098      	lsls	r0, r3
 8008f6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f6e:	3304      	adds	r3, #4
 8008f70:	e7ae      	b.n	8008ed0 <__gethex+0x15c>
 8008f72:	45b1      	cmp	r9, r6
 8008f74:	d8ea      	bhi.n	8008f4c <__gethex+0x1d8>
 8008f76:	492b      	ldr	r1, [pc, #172]	@ (8009024 <__gethex+0x2b0>)
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff fe33 	bl	8008be8 <strncmp>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1e1      	bne.n	8008f4c <__gethex+0x1d8>
 8008f88:	e7a2      	b.n	8008ed0 <__gethex+0x15c>
 8008f8a:	1ea9      	subs	r1, r5, #2
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7fe fd68 	bl	8007a62 <__any_on>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d0c2      	beq.n	8008f1c <__gethex+0x1a8>
 8008f96:	f04f 0903 	mov.w	r9, #3
 8008f9a:	e7c1      	b.n	8008f20 <__gethex+0x1ac>
 8008f9c:	da09      	bge.n	8008fb2 <__gethex+0x23e>
 8008f9e:	1b75      	subs	r5, r6, r5
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	9801      	ldr	r0, [sp, #4]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	f7fe fb23 	bl	80075f0 <__lshift>
 8008faa:	1b7f      	subs	r7, r7, r5
 8008fac:	4604      	mov	r4, r0
 8008fae:	f100 0a14 	add.w	sl, r0, #20
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	e7b8      	b.n	8008f2a <__gethex+0x1b6>
 8008fb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fbc:	42bd      	cmp	r5, r7
 8008fbe:	dd6f      	ble.n	80090a0 <__gethex+0x32c>
 8008fc0:	1bed      	subs	r5, r5, r7
 8008fc2:	42ae      	cmp	r6, r5
 8008fc4:	dc34      	bgt.n	8009030 <__gethex+0x2bc>
 8008fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d022      	beq.n	8009014 <__gethex+0x2a0>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d024      	beq.n	800901c <__gethex+0x2a8>
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d115      	bne.n	8009002 <__gethex+0x28e>
 8008fd6:	42ae      	cmp	r6, r5
 8008fd8:	d113      	bne.n	8009002 <__gethex+0x28e>
 8008fda:	2e01      	cmp	r6, #1
 8008fdc:	d10b      	bne.n	8008ff6 <__gethex+0x282>
 8008fde:	9a02      	ldr	r2, [sp, #8]
 8008fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	f8ca 3000 	str.w	r3, [sl]
 8008fee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff0:	2562      	movs	r5, #98	@ 0x62
 8008ff2:	601c      	str	r4, [r3, #0]
 8008ff4:	e73a      	b.n	8008e6c <__gethex+0xf8>
 8008ff6:	1e71      	subs	r1, r6, #1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7fe fd32 	bl	8007a62 <__any_on>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d1ed      	bne.n	8008fde <__gethex+0x26a>
 8009002:	9801      	ldr	r0, [sp, #4]
 8009004:	4621      	mov	r1, r4
 8009006:	f7fe f8db 	bl	80071c0 <_Bfree>
 800900a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800900c:	2300      	movs	r3, #0
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	2550      	movs	r5, #80	@ 0x50
 8009012:	e72b      	b.n	8008e6c <__gethex+0xf8>
 8009014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f3      	bne.n	8009002 <__gethex+0x28e>
 800901a:	e7e0      	b.n	8008fde <__gethex+0x26a>
 800901c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1dd      	bne.n	8008fde <__gethex+0x26a>
 8009022:	e7ee      	b.n	8009002 <__gethex+0x28e>
 8009024:	0800a090 	.word	0x0800a090
 8009028:	08009f25 	.word	0x08009f25
 800902c:	0800a23e 	.word	0x0800a23e
 8009030:	1e6f      	subs	r7, r5, #1
 8009032:	f1b9 0f00 	cmp.w	r9, #0
 8009036:	d130      	bne.n	800909a <__gethex+0x326>
 8009038:	b127      	cbz	r7, 8009044 <__gethex+0x2d0>
 800903a:	4639      	mov	r1, r7
 800903c:	4620      	mov	r0, r4
 800903e:	f7fe fd10 	bl	8007a62 <__any_on>
 8009042:	4681      	mov	r9, r0
 8009044:	117a      	asrs	r2, r7, #5
 8009046:	2301      	movs	r3, #1
 8009048:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800904c:	f007 071f 	and.w	r7, r7, #31
 8009050:	40bb      	lsls	r3, r7
 8009052:	4213      	tst	r3, r2
 8009054:	4629      	mov	r1, r5
 8009056:	4620      	mov	r0, r4
 8009058:	bf18      	it	ne
 800905a:	f049 0902 	orrne.w	r9, r9, #2
 800905e:	f7ff fe21 	bl	8008ca4 <rshift>
 8009062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009066:	1b76      	subs	r6, r6, r5
 8009068:	2502      	movs	r5, #2
 800906a:	f1b9 0f00 	cmp.w	r9, #0
 800906e:	d047      	beq.n	8009100 <__gethex+0x38c>
 8009070:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d015      	beq.n	80090a4 <__gethex+0x330>
 8009078:	2b03      	cmp	r3, #3
 800907a:	d017      	beq.n	80090ac <__gethex+0x338>
 800907c:	2b01      	cmp	r3, #1
 800907e:	d109      	bne.n	8009094 <__gethex+0x320>
 8009080:	f019 0f02 	tst.w	r9, #2
 8009084:	d006      	beq.n	8009094 <__gethex+0x320>
 8009086:	f8da 3000 	ldr.w	r3, [sl]
 800908a:	ea49 0903 	orr.w	r9, r9, r3
 800908e:	f019 0f01 	tst.w	r9, #1
 8009092:	d10e      	bne.n	80090b2 <__gethex+0x33e>
 8009094:	f045 0510 	orr.w	r5, r5, #16
 8009098:	e032      	b.n	8009100 <__gethex+0x38c>
 800909a:	f04f 0901 	mov.w	r9, #1
 800909e:	e7d1      	b.n	8009044 <__gethex+0x2d0>
 80090a0:	2501      	movs	r5, #1
 80090a2:	e7e2      	b.n	800906a <__gethex+0x2f6>
 80090a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090a6:	f1c3 0301 	rsb	r3, r3, #1
 80090aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0f0      	beq.n	8009094 <__gethex+0x320>
 80090b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090b6:	f104 0314 	add.w	r3, r4, #20
 80090ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090c2:	f04f 0c00 	mov.w	ip, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090d0:	d01b      	beq.n	800910a <__gethex+0x396>
 80090d2:	3201      	adds	r2, #1
 80090d4:	6002      	str	r2, [r0, #0]
 80090d6:	2d02      	cmp	r5, #2
 80090d8:	f104 0314 	add.w	r3, r4, #20
 80090dc:	d13c      	bne.n	8009158 <__gethex+0x3e4>
 80090de:	f8d8 2000 	ldr.w	r2, [r8]
 80090e2:	3a01      	subs	r2, #1
 80090e4:	42b2      	cmp	r2, r6
 80090e6:	d109      	bne.n	80090fc <__gethex+0x388>
 80090e8:	1171      	asrs	r1, r6, #5
 80090ea:	2201      	movs	r2, #1
 80090ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090f0:	f006 061f 	and.w	r6, r6, #31
 80090f4:	fa02 f606 	lsl.w	r6, r2, r6
 80090f8:	421e      	tst	r6, r3
 80090fa:	d13a      	bne.n	8009172 <__gethex+0x3fe>
 80090fc:	f045 0520 	orr.w	r5, r5, #32
 8009100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009102:	601c      	str	r4, [r3, #0]
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	601f      	str	r7, [r3, #0]
 8009108:	e6b0      	b.n	8008e6c <__gethex+0xf8>
 800910a:	4299      	cmp	r1, r3
 800910c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009110:	d8d9      	bhi.n	80090c6 <__gethex+0x352>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	459b      	cmp	fp, r3
 8009116:	db17      	blt.n	8009148 <__gethex+0x3d4>
 8009118:	6861      	ldr	r1, [r4, #4]
 800911a:	9801      	ldr	r0, [sp, #4]
 800911c:	3101      	adds	r1, #1
 800911e:	f7fe f80f 	bl	8007140 <_Balloc>
 8009122:	4681      	mov	r9, r0
 8009124:	b918      	cbnz	r0, 800912e <__gethex+0x3ba>
 8009126:	4b1a      	ldr	r3, [pc, #104]	@ (8009190 <__gethex+0x41c>)
 8009128:	4602      	mov	r2, r0
 800912a:	2184      	movs	r1, #132	@ 0x84
 800912c:	e6c5      	b.n	8008eba <__gethex+0x146>
 800912e:	6922      	ldr	r2, [r4, #16]
 8009130:	3202      	adds	r2, #2
 8009132:	f104 010c 	add.w	r1, r4, #12
 8009136:	0092      	lsls	r2, r2, #2
 8009138:	300c      	adds	r0, #12
 800913a:	f7fd f89e 	bl	800627a <memcpy>
 800913e:	4621      	mov	r1, r4
 8009140:	9801      	ldr	r0, [sp, #4]
 8009142:	f7fe f83d 	bl	80071c0 <_Bfree>
 8009146:	464c      	mov	r4, r9
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009150:	6122      	str	r2, [r4, #16]
 8009152:	2201      	movs	r2, #1
 8009154:	615a      	str	r2, [r3, #20]
 8009156:	e7be      	b.n	80090d6 <__gethex+0x362>
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	455a      	cmp	r2, fp
 800915c:	dd0b      	ble.n	8009176 <__gethex+0x402>
 800915e:	2101      	movs	r1, #1
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fd9f 	bl	8008ca4 <rshift>
 8009166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800916a:	3701      	adds	r7, #1
 800916c:	42bb      	cmp	r3, r7
 800916e:	f6ff aee0 	blt.w	8008f32 <__gethex+0x1be>
 8009172:	2501      	movs	r5, #1
 8009174:	e7c2      	b.n	80090fc <__gethex+0x388>
 8009176:	f016 061f 	ands.w	r6, r6, #31
 800917a:	d0fa      	beq.n	8009172 <__gethex+0x3fe>
 800917c:	4453      	add	r3, sl
 800917e:	f1c6 0620 	rsb	r6, r6, #32
 8009182:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009186:	f7fe f8cd 	bl	8007324 <__hi0bits>
 800918a:	42b0      	cmp	r0, r6
 800918c:	dbe7      	blt.n	800915e <__gethex+0x3ea>
 800918e:	e7f0      	b.n	8009172 <__gethex+0x3fe>
 8009190:	08009f25 	.word	0x08009f25

08009194 <L_shift>:
 8009194:	f1c2 0208 	rsb	r2, r2, #8
 8009198:	0092      	lsls	r2, r2, #2
 800919a:	b570      	push	{r4, r5, r6, lr}
 800919c:	f1c2 0620 	rsb	r6, r2, #32
 80091a0:	6843      	ldr	r3, [r0, #4]
 80091a2:	6804      	ldr	r4, [r0, #0]
 80091a4:	fa03 f506 	lsl.w	r5, r3, r6
 80091a8:	432c      	orrs	r4, r5
 80091aa:	40d3      	lsrs	r3, r2
 80091ac:	6004      	str	r4, [r0, #0]
 80091ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80091b2:	4288      	cmp	r0, r1
 80091b4:	d3f4      	bcc.n	80091a0 <L_shift+0xc>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}

080091b8 <__match>:
 80091b8:	b530      	push	{r4, r5, lr}
 80091ba:	6803      	ldr	r3, [r0, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c2:	b914      	cbnz	r4, 80091ca <__match+0x12>
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	bd30      	pop	{r4, r5, pc}
 80091ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80091d2:	2d19      	cmp	r5, #25
 80091d4:	bf98      	it	ls
 80091d6:	3220      	addls	r2, #32
 80091d8:	42a2      	cmp	r2, r4
 80091da:	d0f0      	beq.n	80091be <__match+0x6>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7f3      	b.n	80091c8 <__match+0x10>

080091e0 <__hexnan>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	680b      	ldr	r3, [r1, #0]
 80091e6:	6801      	ldr	r1, [r0, #0]
 80091e8:	115e      	asrs	r6, r3, #5
 80091ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091ee:	f013 031f 	ands.w	r3, r3, #31
 80091f2:	b087      	sub	sp, #28
 80091f4:	bf18      	it	ne
 80091f6:	3604      	addne	r6, #4
 80091f8:	2500      	movs	r5, #0
 80091fa:	1f37      	subs	r7, r6, #4
 80091fc:	4682      	mov	sl, r0
 80091fe:	4690      	mov	r8, r2
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	f846 5c04 	str.w	r5, [r6, #-4]
 8009206:	46b9      	mov	r9, r7
 8009208:	463c      	mov	r4, r7
 800920a:	9502      	str	r5, [sp, #8]
 800920c:	46ab      	mov	fp, r5
 800920e:	784a      	ldrb	r2, [r1, #1]
 8009210:	1c4b      	adds	r3, r1, #1
 8009212:	9303      	str	r3, [sp, #12]
 8009214:	b342      	cbz	r2, 8009268 <__hexnan+0x88>
 8009216:	4610      	mov	r0, r2
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	9204      	str	r2, [sp, #16]
 800921c:	f7ff fd94 	bl	8008d48 <__hexdig_fun>
 8009220:	2800      	cmp	r0, #0
 8009222:	d151      	bne.n	80092c8 <__hexnan+0xe8>
 8009224:	9a04      	ldr	r2, [sp, #16]
 8009226:	9905      	ldr	r1, [sp, #20]
 8009228:	2a20      	cmp	r2, #32
 800922a:	d818      	bhi.n	800925e <__hexnan+0x7e>
 800922c:	9b02      	ldr	r3, [sp, #8]
 800922e:	459b      	cmp	fp, r3
 8009230:	dd13      	ble.n	800925a <__hexnan+0x7a>
 8009232:	454c      	cmp	r4, r9
 8009234:	d206      	bcs.n	8009244 <__hexnan+0x64>
 8009236:	2d07      	cmp	r5, #7
 8009238:	dc04      	bgt.n	8009244 <__hexnan+0x64>
 800923a:	462a      	mov	r2, r5
 800923c:	4649      	mov	r1, r9
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff ffa8 	bl	8009194 <L_shift>
 8009244:	4544      	cmp	r4, r8
 8009246:	d952      	bls.n	80092ee <__hexnan+0x10e>
 8009248:	2300      	movs	r3, #0
 800924a:	f1a4 0904 	sub.w	r9, r4, #4
 800924e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009252:	f8cd b008 	str.w	fp, [sp, #8]
 8009256:	464c      	mov	r4, r9
 8009258:	461d      	mov	r5, r3
 800925a:	9903      	ldr	r1, [sp, #12]
 800925c:	e7d7      	b.n	800920e <__hexnan+0x2e>
 800925e:	2a29      	cmp	r2, #41	@ 0x29
 8009260:	d157      	bne.n	8009312 <__hexnan+0x132>
 8009262:	3102      	adds	r1, #2
 8009264:	f8ca 1000 	str.w	r1, [sl]
 8009268:	f1bb 0f00 	cmp.w	fp, #0
 800926c:	d051      	beq.n	8009312 <__hexnan+0x132>
 800926e:	454c      	cmp	r4, r9
 8009270:	d206      	bcs.n	8009280 <__hexnan+0xa0>
 8009272:	2d07      	cmp	r5, #7
 8009274:	dc04      	bgt.n	8009280 <__hexnan+0xa0>
 8009276:	462a      	mov	r2, r5
 8009278:	4649      	mov	r1, r9
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff ff8a 	bl	8009194 <L_shift>
 8009280:	4544      	cmp	r4, r8
 8009282:	d936      	bls.n	80092f2 <__hexnan+0x112>
 8009284:	f1a8 0204 	sub.w	r2, r8, #4
 8009288:	4623      	mov	r3, r4
 800928a:	f853 1b04 	ldr.w	r1, [r3], #4
 800928e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009292:	429f      	cmp	r7, r3
 8009294:	d2f9      	bcs.n	800928a <__hexnan+0xaa>
 8009296:	1b3b      	subs	r3, r7, r4
 8009298:	f023 0303 	bic.w	r3, r3, #3
 800929c:	3304      	adds	r3, #4
 800929e:	3401      	adds	r4, #1
 80092a0:	3e03      	subs	r6, #3
 80092a2:	42b4      	cmp	r4, r6
 80092a4:	bf88      	it	hi
 80092a6:	2304      	movhi	r3, #4
 80092a8:	4443      	add	r3, r8
 80092aa:	2200      	movs	r2, #0
 80092ac:	f843 2b04 	str.w	r2, [r3], #4
 80092b0:	429f      	cmp	r7, r3
 80092b2:	d2fb      	bcs.n	80092ac <__hexnan+0xcc>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	b91b      	cbnz	r3, 80092c0 <__hexnan+0xe0>
 80092b8:	4547      	cmp	r7, r8
 80092ba:	d128      	bne.n	800930e <__hexnan+0x12e>
 80092bc:	2301      	movs	r3, #1
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	2005      	movs	r0, #5
 80092c2:	b007      	add	sp, #28
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	3501      	adds	r5, #1
 80092ca:	2d08      	cmp	r5, #8
 80092cc:	f10b 0b01 	add.w	fp, fp, #1
 80092d0:	dd06      	ble.n	80092e0 <__hexnan+0x100>
 80092d2:	4544      	cmp	r4, r8
 80092d4:	d9c1      	bls.n	800925a <__hexnan+0x7a>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80092dc:	2501      	movs	r5, #1
 80092de:	3c04      	subs	r4, #4
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	f000 000f 	and.w	r0, r0, #15
 80092e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092ea:	6020      	str	r0, [r4, #0]
 80092ec:	e7b5      	b.n	800925a <__hexnan+0x7a>
 80092ee:	2508      	movs	r5, #8
 80092f0:	e7b3      	b.n	800925a <__hexnan+0x7a>
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0dd      	beq.n	80092b4 <__hexnan+0xd4>
 80092f8:	f1c3 0320 	rsb	r3, r3, #32
 80092fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009300:	40da      	lsrs	r2, r3
 8009302:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009306:	4013      	ands	r3, r2
 8009308:	f846 3c04 	str.w	r3, [r6, #-4]
 800930c:	e7d2      	b.n	80092b4 <__hexnan+0xd4>
 800930e:	3f04      	subs	r7, #4
 8009310:	e7d0      	b.n	80092b4 <__hexnan+0xd4>
 8009312:	2004      	movs	r0, #4
 8009314:	e7d5      	b.n	80092c2 <__hexnan+0xe2>

08009316 <__ascii_mbtowc>:
 8009316:	b082      	sub	sp, #8
 8009318:	b901      	cbnz	r1, 800931c <__ascii_mbtowc+0x6>
 800931a:	a901      	add	r1, sp, #4
 800931c:	b142      	cbz	r2, 8009330 <__ascii_mbtowc+0x1a>
 800931e:	b14b      	cbz	r3, 8009334 <__ascii_mbtowc+0x1e>
 8009320:	7813      	ldrb	r3, [r2, #0]
 8009322:	600b      	str	r3, [r1, #0]
 8009324:	7812      	ldrb	r2, [r2, #0]
 8009326:	1e10      	subs	r0, r2, #0
 8009328:	bf18      	it	ne
 800932a:	2001      	movne	r0, #1
 800932c:	b002      	add	sp, #8
 800932e:	4770      	bx	lr
 8009330:	4610      	mov	r0, r2
 8009332:	e7fb      	b.n	800932c <__ascii_mbtowc+0x16>
 8009334:	f06f 0001 	mvn.w	r0, #1
 8009338:	e7f8      	b.n	800932c <__ascii_mbtowc+0x16>

0800933a <_realloc_r>:
 800933a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933e:	4680      	mov	r8, r0
 8009340:	4615      	mov	r5, r2
 8009342:	460c      	mov	r4, r1
 8009344:	b921      	cbnz	r1, 8009350 <_realloc_r+0x16>
 8009346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934a:	4611      	mov	r1, r2
 800934c:	f7fd be6c 	b.w	8007028 <_malloc_r>
 8009350:	b92a      	cbnz	r2, 800935e <_realloc_r+0x24>
 8009352:	f7fd fdf5 	bl	8006f40 <_free_r>
 8009356:	2400      	movs	r4, #0
 8009358:	4620      	mov	r0, r4
 800935a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935e:	f000 f840 	bl	80093e2 <_malloc_usable_size_r>
 8009362:	4285      	cmp	r5, r0
 8009364:	4606      	mov	r6, r0
 8009366:	d802      	bhi.n	800936e <_realloc_r+0x34>
 8009368:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800936c:	d8f4      	bhi.n	8009358 <_realloc_r+0x1e>
 800936e:	4629      	mov	r1, r5
 8009370:	4640      	mov	r0, r8
 8009372:	f7fd fe59 	bl	8007028 <_malloc_r>
 8009376:	4607      	mov	r7, r0
 8009378:	2800      	cmp	r0, #0
 800937a:	d0ec      	beq.n	8009356 <_realloc_r+0x1c>
 800937c:	42b5      	cmp	r5, r6
 800937e:	462a      	mov	r2, r5
 8009380:	4621      	mov	r1, r4
 8009382:	bf28      	it	cs
 8009384:	4632      	movcs	r2, r6
 8009386:	f7fc ff78 	bl	800627a <memcpy>
 800938a:	4621      	mov	r1, r4
 800938c:	4640      	mov	r0, r8
 800938e:	f7fd fdd7 	bl	8006f40 <_free_r>
 8009392:	463c      	mov	r4, r7
 8009394:	e7e0      	b.n	8009358 <_realloc_r+0x1e>

08009396 <__ascii_wctomb>:
 8009396:	4603      	mov	r3, r0
 8009398:	4608      	mov	r0, r1
 800939a:	b141      	cbz	r1, 80093ae <__ascii_wctomb+0x18>
 800939c:	2aff      	cmp	r2, #255	@ 0xff
 800939e:	d904      	bls.n	80093aa <__ascii_wctomb+0x14>
 80093a0:	228a      	movs	r2, #138	@ 0x8a
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	4770      	bx	lr
 80093aa:	700a      	strb	r2, [r1, #0]
 80093ac:	2001      	movs	r0, #1
 80093ae:	4770      	bx	lr

080093b0 <fiprintf>:
 80093b0:	b40e      	push	{r1, r2, r3}
 80093b2:	b503      	push	{r0, r1, lr}
 80093b4:	4601      	mov	r1, r0
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	4805      	ldr	r0, [pc, #20]	@ (80093d0 <fiprintf+0x20>)
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	f000 f83f 	bl	8009444 <_vfiprintf_r>
 80093c6:	b002      	add	sp, #8
 80093c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093cc:	b003      	add	sp, #12
 80093ce:	4770      	bx	lr
 80093d0:	20000010 	.word	0x20000010

080093d4 <abort>:
 80093d4:	b508      	push	{r3, lr}
 80093d6:	2006      	movs	r0, #6
 80093d8:	f000 fa08 	bl	80097ec <raise>
 80093dc:	2001      	movs	r0, #1
 80093de:	f7fb fd9b 	bl	8004f18 <_exit>

080093e2 <_malloc_usable_size_r>:
 80093e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e6:	1f18      	subs	r0, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbc      	itt	lt
 80093ec:	580b      	ldrlt	r3, [r1, r0]
 80093ee:	18c0      	addlt	r0, r0, r3
 80093f0:	4770      	bx	lr

080093f2 <__sfputc_r>:
 80093f2:	6893      	ldr	r3, [r2, #8]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	b410      	push	{r4}
 80093fa:	6093      	str	r3, [r2, #8]
 80093fc:	da08      	bge.n	8009410 <__sfputc_r+0x1e>
 80093fe:	6994      	ldr	r4, [r2, #24]
 8009400:	42a3      	cmp	r3, r4
 8009402:	db01      	blt.n	8009408 <__sfputc_r+0x16>
 8009404:	290a      	cmp	r1, #10
 8009406:	d103      	bne.n	8009410 <__sfputc_r+0x1e>
 8009408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940c:	f000 b932 	b.w	8009674 <__swbuf_r>
 8009410:	6813      	ldr	r3, [r2, #0]
 8009412:	1c58      	adds	r0, r3, #1
 8009414:	6010      	str	r0, [r2, #0]
 8009416:	7019      	strb	r1, [r3, #0]
 8009418:	4608      	mov	r0, r1
 800941a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800941e:	4770      	bx	lr

08009420 <__sfputs_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	4614      	mov	r4, r2
 8009428:	18d5      	adds	r5, r2, r3
 800942a:	42ac      	cmp	r4, r5
 800942c:	d101      	bne.n	8009432 <__sfputs_r+0x12>
 800942e:	2000      	movs	r0, #0
 8009430:	e007      	b.n	8009442 <__sfputs_r+0x22>
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	463a      	mov	r2, r7
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff ffda 	bl	80093f2 <__sfputc_r>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d1f3      	bne.n	800942a <__sfputs_r+0xa>
 8009442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009444 <_vfiprintf_r>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	460d      	mov	r5, r1
 800944a:	b09d      	sub	sp, #116	@ 0x74
 800944c:	4614      	mov	r4, r2
 800944e:	4698      	mov	r8, r3
 8009450:	4606      	mov	r6, r0
 8009452:	b118      	cbz	r0, 800945c <_vfiprintf_r+0x18>
 8009454:	6a03      	ldr	r3, [r0, #32]
 8009456:	b90b      	cbnz	r3, 800945c <_vfiprintf_r+0x18>
 8009458:	f7fc fdbe 	bl	8005fd8 <__sinit>
 800945c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800945e:	07d9      	lsls	r1, r3, #31
 8009460:	d405      	bmi.n	800946e <_vfiprintf_r+0x2a>
 8009462:	89ab      	ldrh	r3, [r5, #12]
 8009464:	059a      	lsls	r2, r3, #22
 8009466:	d402      	bmi.n	800946e <_vfiprintf_r+0x2a>
 8009468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800946a:	f7fc ff04 	bl	8006276 <__retarget_lock_acquire_recursive>
 800946e:	89ab      	ldrh	r3, [r5, #12]
 8009470:	071b      	lsls	r3, r3, #28
 8009472:	d501      	bpl.n	8009478 <_vfiprintf_r+0x34>
 8009474:	692b      	ldr	r3, [r5, #16]
 8009476:	b99b      	cbnz	r3, 80094a0 <_vfiprintf_r+0x5c>
 8009478:	4629      	mov	r1, r5
 800947a:	4630      	mov	r0, r6
 800947c:	f000 f938 	bl	80096f0 <__swsetup_r>
 8009480:	b170      	cbz	r0, 80094a0 <_vfiprintf_r+0x5c>
 8009482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009484:	07dc      	lsls	r4, r3, #31
 8009486:	d504      	bpl.n	8009492 <_vfiprintf_r+0x4e>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	b01d      	add	sp, #116	@ 0x74
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	0598      	lsls	r0, r3, #22
 8009496:	d4f7      	bmi.n	8009488 <_vfiprintf_r+0x44>
 8009498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800949a:	f7fc feed 	bl	8006278 <__retarget_lock_release_recursive>
 800949e:	e7f3      	b.n	8009488 <_vfiprintf_r+0x44>
 80094a0:	2300      	movs	r3, #0
 80094a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a4:	2320      	movs	r3, #32
 80094a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ae:	2330      	movs	r3, #48	@ 0x30
 80094b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009660 <_vfiprintf_r+0x21c>
 80094b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094b8:	f04f 0901 	mov.w	r9, #1
 80094bc:	4623      	mov	r3, r4
 80094be:	469a      	mov	sl, r3
 80094c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c4:	b10a      	cbz	r2, 80094ca <_vfiprintf_r+0x86>
 80094c6:	2a25      	cmp	r2, #37	@ 0x25
 80094c8:	d1f9      	bne.n	80094be <_vfiprintf_r+0x7a>
 80094ca:	ebba 0b04 	subs.w	fp, sl, r4
 80094ce:	d00b      	beq.n	80094e8 <_vfiprintf_r+0xa4>
 80094d0:	465b      	mov	r3, fp
 80094d2:	4622      	mov	r2, r4
 80094d4:	4629      	mov	r1, r5
 80094d6:	4630      	mov	r0, r6
 80094d8:	f7ff ffa2 	bl	8009420 <__sfputs_r>
 80094dc:	3001      	adds	r0, #1
 80094de:	f000 80a7 	beq.w	8009630 <_vfiprintf_r+0x1ec>
 80094e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094e4:	445a      	add	r2, fp
 80094e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80094e8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 809f 	beq.w	8009630 <_vfiprintf_r+0x1ec>
 80094f2:	2300      	movs	r3, #0
 80094f4:	f04f 32ff 	mov.w	r2, #4294967295
 80094f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fc:	f10a 0a01 	add.w	sl, sl, #1
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	9307      	str	r3, [sp, #28]
 8009504:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009508:	931a      	str	r3, [sp, #104]	@ 0x68
 800950a:	4654      	mov	r4, sl
 800950c:	2205      	movs	r2, #5
 800950e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009512:	4853      	ldr	r0, [pc, #332]	@ (8009660 <_vfiprintf_r+0x21c>)
 8009514:	f7f6 fe5c 	bl	80001d0 <memchr>
 8009518:	9a04      	ldr	r2, [sp, #16]
 800951a:	b9d8      	cbnz	r0, 8009554 <_vfiprintf_r+0x110>
 800951c:	06d1      	lsls	r1, r2, #27
 800951e:	bf44      	itt	mi
 8009520:	2320      	movmi	r3, #32
 8009522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009526:	0713      	lsls	r3, r2, #28
 8009528:	bf44      	itt	mi
 800952a:	232b      	movmi	r3, #43	@ 0x2b
 800952c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009530:	f89a 3000 	ldrb.w	r3, [sl]
 8009534:	2b2a      	cmp	r3, #42	@ 0x2a
 8009536:	d015      	beq.n	8009564 <_vfiprintf_r+0x120>
 8009538:	9a07      	ldr	r2, [sp, #28]
 800953a:	4654      	mov	r4, sl
 800953c:	2000      	movs	r0, #0
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	4621      	mov	r1, r4
 8009544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009548:	3b30      	subs	r3, #48	@ 0x30
 800954a:	2b09      	cmp	r3, #9
 800954c:	d94b      	bls.n	80095e6 <_vfiprintf_r+0x1a2>
 800954e:	b1b0      	cbz	r0, 800957e <_vfiprintf_r+0x13a>
 8009550:	9207      	str	r2, [sp, #28]
 8009552:	e014      	b.n	800957e <_vfiprintf_r+0x13a>
 8009554:	eba0 0308 	sub.w	r3, r0, r8
 8009558:	fa09 f303 	lsl.w	r3, r9, r3
 800955c:	4313      	orrs	r3, r2
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	46a2      	mov	sl, r4
 8009562:	e7d2      	b.n	800950a <_vfiprintf_r+0xc6>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	1d19      	adds	r1, r3, #4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	9103      	str	r1, [sp, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	bfbb      	ittet	lt
 8009570:	425b      	neglt	r3, r3
 8009572:	f042 0202 	orrlt.w	r2, r2, #2
 8009576:	9307      	strge	r3, [sp, #28]
 8009578:	9307      	strlt	r3, [sp, #28]
 800957a:	bfb8      	it	lt
 800957c:	9204      	strlt	r2, [sp, #16]
 800957e:	7823      	ldrb	r3, [r4, #0]
 8009580:	2b2e      	cmp	r3, #46	@ 0x2e
 8009582:	d10a      	bne.n	800959a <_vfiprintf_r+0x156>
 8009584:	7863      	ldrb	r3, [r4, #1]
 8009586:	2b2a      	cmp	r3, #42	@ 0x2a
 8009588:	d132      	bne.n	80095f0 <_vfiprintf_r+0x1ac>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	1d1a      	adds	r2, r3, #4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9203      	str	r2, [sp, #12]
 8009592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009596:	3402      	adds	r4, #2
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009670 <_vfiprintf_r+0x22c>
 800959e:	7821      	ldrb	r1, [r4, #0]
 80095a0:	2203      	movs	r2, #3
 80095a2:	4650      	mov	r0, sl
 80095a4:	f7f6 fe14 	bl	80001d0 <memchr>
 80095a8:	b138      	cbz	r0, 80095ba <_vfiprintf_r+0x176>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	eba0 000a 	sub.w	r0, r0, sl
 80095b0:	2240      	movs	r2, #64	@ 0x40
 80095b2:	4082      	lsls	r2, r0
 80095b4:	4313      	orrs	r3, r2
 80095b6:	3401      	adds	r4, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095be:	4829      	ldr	r0, [pc, #164]	@ (8009664 <_vfiprintf_r+0x220>)
 80095c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095c4:	2206      	movs	r2, #6
 80095c6:	f7f6 fe03 	bl	80001d0 <memchr>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d03f      	beq.n	800964e <_vfiprintf_r+0x20a>
 80095ce:	4b26      	ldr	r3, [pc, #152]	@ (8009668 <_vfiprintf_r+0x224>)
 80095d0:	bb1b      	cbnz	r3, 800961a <_vfiprintf_r+0x1d6>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	3307      	adds	r3, #7
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	3308      	adds	r3, #8
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e0:	443b      	add	r3, r7
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	e76a      	b.n	80094bc <_vfiprintf_r+0x78>
 80095e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ea:	460c      	mov	r4, r1
 80095ec:	2001      	movs	r0, #1
 80095ee:	e7a8      	b.n	8009542 <_vfiprintf_r+0xfe>
 80095f0:	2300      	movs	r3, #0
 80095f2:	3401      	adds	r4, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4619      	mov	r1, r3
 80095f8:	f04f 0c0a 	mov.w	ip, #10
 80095fc:	4620      	mov	r0, r4
 80095fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009602:	3a30      	subs	r2, #48	@ 0x30
 8009604:	2a09      	cmp	r2, #9
 8009606:	d903      	bls.n	8009610 <_vfiprintf_r+0x1cc>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0c6      	beq.n	800959a <_vfiprintf_r+0x156>
 800960c:	9105      	str	r1, [sp, #20]
 800960e:	e7c4      	b.n	800959a <_vfiprintf_r+0x156>
 8009610:	fb0c 2101 	mla	r1, ip, r1, r2
 8009614:	4604      	mov	r4, r0
 8009616:	2301      	movs	r3, #1
 8009618:	e7f0      	b.n	80095fc <_vfiprintf_r+0x1b8>
 800961a:	ab03      	add	r3, sp, #12
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	462a      	mov	r2, r5
 8009620:	4b12      	ldr	r3, [pc, #72]	@ (800966c <_vfiprintf_r+0x228>)
 8009622:	a904      	add	r1, sp, #16
 8009624:	4630      	mov	r0, r6
 8009626:	f7fb fe7f 	bl	8005328 <_printf_float>
 800962a:	4607      	mov	r7, r0
 800962c:	1c78      	adds	r0, r7, #1
 800962e:	d1d6      	bne.n	80095de <_vfiprintf_r+0x19a>
 8009630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d405      	bmi.n	8009642 <_vfiprintf_r+0x1fe>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	059a      	lsls	r2, r3, #22
 800963a:	d402      	bmi.n	8009642 <_vfiprintf_r+0x1fe>
 800963c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800963e:	f7fc fe1b 	bl	8006278 <__retarget_lock_release_recursive>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	065b      	lsls	r3, r3, #25
 8009646:	f53f af1f 	bmi.w	8009488 <_vfiprintf_r+0x44>
 800964a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800964c:	e71e      	b.n	800948c <_vfiprintf_r+0x48>
 800964e:	ab03      	add	r3, sp, #12
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	462a      	mov	r2, r5
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <_vfiprintf_r+0x228>)
 8009656:	a904      	add	r1, sp, #16
 8009658:	4630      	mov	r0, r6
 800965a:	f7fc f8fd 	bl	8005858 <_printf_i>
 800965e:	e7e4      	b.n	800962a <_vfiprintf_r+0x1e6>
 8009660:	0800a1e9 	.word	0x0800a1e9
 8009664:	0800a1f3 	.word	0x0800a1f3
 8009668:	08005329 	.word	0x08005329
 800966c:	08009421 	.word	0x08009421
 8009670:	0800a1ef 	.word	0x0800a1ef

08009674 <__swbuf_r>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	460e      	mov	r6, r1
 8009678:	4614      	mov	r4, r2
 800967a:	4605      	mov	r5, r0
 800967c:	b118      	cbz	r0, 8009686 <__swbuf_r+0x12>
 800967e:	6a03      	ldr	r3, [r0, #32]
 8009680:	b90b      	cbnz	r3, 8009686 <__swbuf_r+0x12>
 8009682:	f7fc fca9 	bl	8005fd8 <__sinit>
 8009686:	69a3      	ldr	r3, [r4, #24]
 8009688:	60a3      	str	r3, [r4, #8]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	071a      	lsls	r2, r3, #28
 800968e:	d501      	bpl.n	8009694 <__swbuf_r+0x20>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	b943      	cbnz	r3, 80096a6 <__swbuf_r+0x32>
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f82a 	bl	80096f0 <__swsetup_r>
 800969c:	b118      	cbz	r0, 80096a6 <__swbuf_r+0x32>
 800969e:	f04f 37ff 	mov.w	r7, #4294967295
 80096a2:	4638      	mov	r0, r7
 80096a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	1a98      	subs	r0, r3, r2
 80096ac:	6963      	ldr	r3, [r4, #20]
 80096ae:	b2f6      	uxtb	r6, r6
 80096b0:	4283      	cmp	r3, r0
 80096b2:	4637      	mov	r7, r6
 80096b4:	dc05      	bgt.n	80096c2 <__swbuf_r+0x4e>
 80096b6:	4621      	mov	r1, r4
 80096b8:	4628      	mov	r0, r5
 80096ba:	f7ff fa53 	bl	8008b64 <_fflush_r>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d1ed      	bne.n	800969e <__swbuf_r+0x2a>
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	6022      	str	r2, [r4, #0]
 80096ce:	701e      	strb	r6, [r3, #0]
 80096d0:	6962      	ldr	r2, [r4, #20]
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d004      	beq.n	80096e2 <__swbuf_r+0x6e>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	07db      	lsls	r3, r3, #31
 80096dc:	d5e1      	bpl.n	80096a2 <__swbuf_r+0x2e>
 80096de:	2e0a      	cmp	r6, #10
 80096e0:	d1df      	bne.n	80096a2 <__swbuf_r+0x2e>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4628      	mov	r0, r5
 80096e6:	f7ff fa3d 	bl	8008b64 <_fflush_r>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d0d9      	beq.n	80096a2 <__swbuf_r+0x2e>
 80096ee:	e7d6      	b.n	800969e <__swbuf_r+0x2a>

080096f0 <__swsetup_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4b29      	ldr	r3, [pc, #164]	@ (8009798 <__swsetup_r+0xa8>)
 80096f4:	4605      	mov	r5, r0
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	460c      	mov	r4, r1
 80096fa:	b118      	cbz	r0, 8009704 <__swsetup_r+0x14>
 80096fc:	6a03      	ldr	r3, [r0, #32]
 80096fe:	b90b      	cbnz	r3, 8009704 <__swsetup_r+0x14>
 8009700:	f7fc fc6a 	bl	8005fd8 <__sinit>
 8009704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009708:	0719      	lsls	r1, r3, #28
 800970a:	d422      	bmi.n	8009752 <__swsetup_r+0x62>
 800970c:	06da      	lsls	r2, r3, #27
 800970e:	d407      	bmi.n	8009720 <__swsetup_r+0x30>
 8009710:	2209      	movs	r2, #9
 8009712:	602a      	str	r2, [r5, #0]
 8009714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	e033      	b.n	8009788 <__swsetup_r+0x98>
 8009720:	0758      	lsls	r0, r3, #29
 8009722:	d512      	bpl.n	800974a <__swsetup_r+0x5a>
 8009724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009726:	b141      	cbz	r1, 800973a <__swsetup_r+0x4a>
 8009728:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800972c:	4299      	cmp	r1, r3
 800972e:	d002      	beq.n	8009736 <__swsetup_r+0x46>
 8009730:	4628      	mov	r0, r5
 8009732:	f7fd fc05 	bl	8006f40 <_free_r>
 8009736:	2300      	movs	r3, #0
 8009738:	6363      	str	r3, [r4, #52]	@ 0x34
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	2300      	movs	r3, #0
 8009744:	6063      	str	r3, [r4, #4]
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	f043 0308 	orr.w	r3, r3, #8
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	b94b      	cbnz	r3, 800976a <__swsetup_r+0x7a>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800975c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009760:	d003      	beq.n	800976a <__swsetup_r+0x7a>
 8009762:	4621      	mov	r1, r4
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f883 	bl	8009870 <__smakebuf_r>
 800976a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976e:	f013 0201 	ands.w	r2, r3, #1
 8009772:	d00a      	beq.n	800978a <__swsetup_r+0x9a>
 8009774:	2200      	movs	r2, #0
 8009776:	60a2      	str	r2, [r4, #8]
 8009778:	6962      	ldr	r2, [r4, #20]
 800977a:	4252      	negs	r2, r2
 800977c:	61a2      	str	r2, [r4, #24]
 800977e:	6922      	ldr	r2, [r4, #16]
 8009780:	b942      	cbnz	r2, 8009794 <__swsetup_r+0xa4>
 8009782:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009786:	d1c5      	bne.n	8009714 <__swsetup_r+0x24>
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	0799      	lsls	r1, r3, #30
 800978c:	bf58      	it	pl
 800978e:	6962      	ldrpl	r2, [r4, #20]
 8009790:	60a2      	str	r2, [r4, #8]
 8009792:	e7f4      	b.n	800977e <__swsetup_r+0x8e>
 8009794:	2000      	movs	r0, #0
 8009796:	e7f7      	b.n	8009788 <__swsetup_r+0x98>
 8009798:	20000010 	.word	0x20000010

0800979c <_raise_r>:
 800979c:	291f      	cmp	r1, #31
 800979e:	b538      	push	{r3, r4, r5, lr}
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	d904      	bls.n	80097b0 <_raise_r+0x14>
 80097a6:	2316      	movs	r3, #22
 80097a8:	6003      	str	r3, [r0, #0]
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097b2:	b112      	cbz	r2, 80097ba <_raise_r+0x1e>
 80097b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097b8:	b94b      	cbnz	r3, 80097ce <_raise_r+0x32>
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 f830 	bl	8009820 <_getpid_r>
 80097c0:	4622      	mov	r2, r4
 80097c2:	4601      	mov	r1, r0
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ca:	f000 b817 	b.w	80097fc <_kill_r>
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d00a      	beq.n	80097e8 <_raise_r+0x4c>
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	d103      	bne.n	80097de <_raise_r+0x42>
 80097d6:	2316      	movs	r3, #22
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	2001      	movs	r0, #1
 80097dc:	e7e7      	b.n	80097ae <_raise_r+0x12>
 80097de:	2100      	movs	r1, #0
 80097e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097e4:	4620      	mov	r0, r4
 80097e6:	4798      	blx	r3
 80097e8:	2000      	movs	r0, #0
 80097ea:	e7e0      	b.n	80097ae <_raise_r+0x12>

080097ec <raise>:
 80097ec:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <raise+0xc>)
 80097ee:	4601      	mov	r1, r0
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	f7ff bfd3 	b.w	800979c <_raise_r>
 80097f6:	bf00      	nop
 80097f8:	20000010 	.word	0x20000010

080097fc <_kill_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d07      	ldr	r5, [pc, #28]	@ (800981c <_kill_r+0x20>)
 8009800:	2300      	movs	r3, #0
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	4611      	mov	r1, r2
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	f7fb fb75 	bl	8004ef8 <_kill>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	d102      	bne.n	8009818 <_kill_r+0x1c>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	b103      	cbz	r3, 8009818 <_kill_r+0x1c>
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	bd38      	pop	{r3, r4, r5, pc}
 800981a:	bf00      	nop
 800981c:	200009b0 	.word	0x200009b0

08009820 <_getpid_r>:
 8009820:	f7fb bb62 	b.w	8004ee8 <_getpid>

08009824 <__swhatbuf_r>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	460c      	mov	r4, r1
 8009828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982c:	2900      	cmp	r1, #0
 800982e:	b096      	sub	sp, #88	@ 0x58
 8009830:	4615      	mov	r5, r2
 8009832:	461e      	mov	r6, r3
 8009834:	da0d      	bge.n	8009852 <__swhatbuf_r+0x2e>
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800983c:	f04f 0100 	mov.w	r1, #0
 8009840:	bf14      	ite	ne
 8009842:	2340      	movne	r3, #64	@ 0x40
 8009844:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009848:	2000      	movs	r0, #0
 800984a:	6031      	str	r1, [r6, #0]
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	b016      	add	sp, #88	@ 0x58
 8009850:	bd70      	pop	{r4, r5, r6, pc}
 8009852:	466a      	mov	r2, sp
 8009854:	f000 f848 	bl	80098e8 <_fstat_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	dbec      	blt.n	8009836 <__swhatbuf_r+0x12>
 800985c:	9901      	ldr	r1, [sp, #4]
 800985e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009862:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009866:	4259      	negs	r1, r3
 8009868:	4159      	adcs	r1, r3
 800986a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986e:	e7eb      	b.n	8009848 <__swhatbuf_r+0x24>

08009870 <__smakebuf_r>:
 8009870:	898b      	ldrh	r3, [r1, #12]
 8009872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009874:	079d      	lsls	r5, r3, #30
 8009876:	4606      	mov	r6, r0
 8009878:	460c      	mov	r4, r1
 800987a:	d507      	bpl.n	800988c <__smakebuf_r+0x1c>
 800987c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	6123      	str	r3, [r4, #16]
 8009884:	2301      	movs	r3, #1
 8009886:	6163      	str	r3, [r4, #20]
 8009888:	b003      	add	sp, #12
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	ab01      	add	r3, sp, #4
 800988e:	466a      	mov	r2, sp
 8009890:	f7ff ffc8 	bl	8009824 <__swhatbuf_r>
 8009894:	9f00      	ldr	r7, [sp, #0]
 8009896:	4605      	mov	r5, r0
 8009898:	4639      	mov	r1, r7
 800989a:	4630      	mov	r0, r6
 800989c:	f7fd fbc4 	bl	8007028 <_malloc_r>
 80098a0:	b948      	cbnz	r0, 80098b6 <__smakebuf_r+0x46>
 80098a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a6:	059a      	lsls	r2, r3, #22
 80098a8:	d4ee      	bmi.n	8009888 <__smakebuf_r+0x18>
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	f043 0302 	orr.w	r3, r3, #2
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	e7e2      	b.n	800987c <__smakebuf_r+0xc>
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	6020      	str	r0, [r4, #0]
 80098ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098c6:	b15b      	cbz	r3, 80098e0 <__smakebuf_r+0x70>
 80098c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 f81d 	bl	800990c <_isatty_r>
 80098d2:	b128      	cbz	r0, 80098e0 <__smakebuf_r+0x70>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	431d      	orrs	r5, r3
 80098e4:	81a5      	strh	r5, [r4, #12]
 80098e6:	e7cf      	b.n	8009888 <__smakebuf_r+0x18>

080098e8 <_fstat_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d07      	ldr	r5, [pc, #28]	@ (8009908 <_fstat_r+0x20>)
 80098ec:	2300      	movs	r3, #0
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	4611      	mov	r1, r2
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f7fb fb5f 	bl	8004fb8 <_fstat>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d102      	bne.n	8009904 <_fstat_r+0x1c>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b103      	cbz	r3, 8009904 <_fstat_r+0x1c>
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	200009b0 	.word	0x200009b0

0800990c <_isatty_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d06      	ldr	r5, [pc, #24]	@ (8009928 <_isatty_r+0x1c>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	f7fb fb5e 	bl	8004fd8 <_isatty>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_isatty_r+0x1a>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_isatty_r+0x1a>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	200009b0 	.word	0x200009b0
 800992c:	00000000 	.word	0x00000000

08009930 <ceil>:
 8009930:	ec51 0b10 	vmov	r0, r1, d0
 8009934:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009940:	2e13      	cmp	r6, #19
 8009942:	460c      	mov	r4, r1
 8009944:	4605      	mov	r5, r0
 8009946:	4680      	mov	r8, r0
 8009948:	dc2e      	bgt.n	80099a8 <ceil+0x78>
 800994a:	2e00      	cmp	r6, #0
 800994c:	da11      	bge.n	8009972 <ceil+0x42>
 800994e:	a332      	add	r3, pc, #200	@ (adr r3, 8009a18 <ceil+0xe8>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f6 fc9a 	bl	800028c <__adddf3>
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	f7f7 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8009960:	b120      	cbz	r0, 800996c <ceil+0x3c>
 8009962:	2c00      	cmp	r4, #0
 8009964:	db4f      	blt.n	8009a06 <ceil+0xd6>
 8009966:	4325      	orrs	r5, r4
 8009968:	d151      	bne.n	8009a0e <ceil+0xde>
 800996a:	462c      	mov	r4, r5
 800996c:	4621      	mov	r1, r4
 800996e:	4628      	mov	r0, r5
 8009970:	e023      	b.n	80099ba <ceil+0x8a>
 8009972:	4f2b      	ldr	r7, [pc, #172]	@ (8009a20 <ceil+0xf0>)
 8009974:	4137      	asrs	r7, r6
 8009976:	ea01 0307 	and.w	r3, r1, r7
 800997a:	4303      	orrs	r3, r0
 800997c:	d01d      	beq.n	80099ba <ceil+0x8a>
 800997e:	a326      	add	r3, pc, #152	@ (adr r3, 8009a18 <ceil+0xe8>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fc82 	bl	800028c <__adddf3>
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	f7f7 f8c4 	bl	8000b18 <__aeabi_dcmpgt>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0eb      	beq.n	800996c <ceil+0x3c>
 8009994:	2c00      	cmp	r4, #0
 8009996:	bfc2      	ittt	gt
 8009998:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800999c:	4133      	asrgt	r3, r6
 800999e:	18e4      	addgt	r4, r4, r3
 80099a0:	ea24 0407 	bic.w	r4, r4, r7
 80099a4:	2500      	movs	r5, #0
 80099a6:	e7e1      	b.n	800996c <ceil+0x3c>
 80099a8:	2e33      	cmp	r6, #51	@ 0x33
 80099aa:	dd0a      	ble.n	80099c2 <ceil+0x92>
 80099ac:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80099b0:	d103      	bne.n	80099ba <ceil+0x8a>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	f7f6 fc69 	bl	800028c <__adddf3>
 80099ba:	ec41 0b10 	vmov	d0, r0, r1
 80099be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80099c6:	f04f 37ff 	mov.w	r7, #4294967295
 80099ca:	40df      	lsrs	r7, r3
 80099cc:	4238      	tst	r0, r7
 80099ce:	d0f4      	beq.n	80099ba <ceil+0x8a>
 80099d0:	a311      	add	r3, pc, #68	@ (adr r3, 8009a18 <ceil+0xe8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fc59 	bl	800028c <__adddf3>
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	f7f7 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d0c2      	beq.n	800996c <ceil+0x3c>
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	dd0a      	ble.n	8009a00 <ceil+0xd0>
 80099ea:	2e14      	cmp	r6, #20
 80099ec:	d101      	bne.n	80099f2 <ceil+0xc2>
 80099ee:	3401      	adds	r4, #1
 80099f0:	e006      	b.n	8009a00 <ceil+0xd0>
 80099f2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099f6:	2301      	movs	r3, #1
 80099f8:	40b3      	lsls	r3, r6
 80099fa:	441d      	add	r5, r3
 80099fc:	45a8      	cmp	r8, r5
 80099fe:	d8f6      	bhi.n	80099ee <ceil+0xbe>
 8009a00:	ea25 0507 	bic.w	r5, r5, r7
 8009a04:	e7b2      	b.n	800996c <ceil+0x3c>
 8009a06:	2500      	movs	r5, #0
 8009a08:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8009a0c:	e7ae      	b.n	800996c <ceil+0x3c>
 8009a0e:	4c05      	ldr	r4, [pc, #20]	@ (8009a24 <ceil+0xf4>)
 8009a10:	2500      	movs	r5, #0
 8009a12:	e7ab      	b.n	800996c <ceil+0x3c>
 8009a14:	f3af 8000 	nop.w
 8009a18:	8800759c 	.word	0x8800759c
 8009a1c:	7e37e43c 	.word	0x7e37e43c
 8009a20:	000fffff 	.word	0x000fffff
 8009a24:	3ff00000 	.word	0x3ff00000

08009a28 <_init>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr

08009a34 <_fini>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr
