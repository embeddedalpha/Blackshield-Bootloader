
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005940  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f34  08005f34  00007054  2**0
                  CONTENTS
  4 .ARM          00000008  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f3c  08005f3c  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08005f44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007054  2**0
                  CONTENTS
 10 .bss          000007f0  20000054  20000054  00007054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  00007054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089d9  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f99  00000000  00000000  0000fa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000358  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000027f  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000115c  00000000  00000000  00010fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006960  00000000  00000000  0001212b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fd74  00000000  00000000  00018a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a87ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001350  00000000  00000000  000a8844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a9b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ab8 	.word	0x08005ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08005ab8 	.word	0x08005ab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Console_IRQ>:
//        rx_flag = 1; // Set the flag indicating data reception is complete
//    }
//}

void Console_IRQ(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
    if (rx_get_flag == 1) { // Check if reception is active
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <Console_IRQ+0x74>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d12d      	bne.n	8000c90 <Console_IRQ+0x68>
        (void)UART4->SR; // Read the status register to clear flags
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <Console_IRQ+0x78>)
 8000c36:	681b      	ldr	r3, [r3, #0]
        (void)UART4->DR; // Read the data register to clear flags
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <Console_IRQ+0x78>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop

        __disable_irq(); // Disable interrupts to safely update DMA configurations

        // Disable DMA stream
        serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

        // Calculate the length of received data
        RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <Console_IRQ+0x80>)
 8000c5e:	601a      	str	r2, [r3, #0]

        // Prevent buffer overflow
        if (RX_Length > RX_Buffer_Length) {
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <Console_IRQ+0x80>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c66:	dd02      	ble.n	8000c6e <Console_IRQ+0x46>
            RX_Length = RX_Buffer_Length;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <Console_IRQ+0x80>)
 8000c6a:	22c8      	movs	r2, #200	@ 0xc8
 8000c6c:	601a      	str	r2, [r3, #0]
        }

        // Reset DMA stream for the next reception
        serial.USART_DMA_Instance_RX.Request.Stream->NDTR = RX_Buffer_Length;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c72:	22c8      	movs	r2, #200	@ 0xc8
 8000c74:	605a      	str	r2, [r3, #4]
        serial.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <Console_IRQ+0x7c>)
 8000c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c86:	b662      	cpsie	i
}
 8000c88:	bf00      	nop

        __enable_irq(); // Re-enable interrupts

        rx_flag = 1; // Set the flag indicating data reception is complete
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <Console_IRQ+0x84>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
    }
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000070 	.word	0x20000070
 8000ca0:	40004c00 	.word	0x40004c00
 8000ca4:	20000144 	.word	0x20000144
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	20000074 	.word	0x20000074

08000cb0 <Console_Init>:
 * This function configures UART4 for communication, sets up DMA for
 * data handling, and prepares the GPIO pins for UART communication.
 *
 * @param baudrate Desired baud rate for UART communication.
 */
void Console_Init(int32_t baudrate) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    // Reset USART configuration to default values
    USART_Config_Reset(&serial);
 8000cb8:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <Console_Init+0x60>)
 8000cba:	f002 fbc5 	bl	8003448 <USART_Config_Reset>

    // Configure USART parameters
    serial.Port = UART4; // Use UART4 for console communication
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <Console_Init+0x60>)
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <Console_Init+0x64>)
 8000cc2:	601a      	str	r2, [r3, #0]
    serial.baudrate = baudrate; // Set the baud rate
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <Console_Init+0x60>)
 8000cc8:	6053      	str	r3, [r2, #4]
    serial.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <Console_Init+0x60>)
 8000cce:	721a      	strb	r2, [r3, #8]
    serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <Console_Init+0x60>)
 8000cd6:	741a      	strb	r2, [r3, #16]
    serial.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000cd8:	220a      	movs	r2, #10
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <Console_Init+0x60>)
 8000cdc:	725a      	strb	r2, [r3, #9]
    serial.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000cde:	220b      	movs	r2, #11
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <Console_Init+0x60>)
 8000ce2:	729a      	strb	r2, [r3, #10]
    serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <Console_Init+0x60>)
 8000cea:	739a      	strb	r2, [r3, #14]
    serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000cec:	2201      	movs	r2, #1
 8000cee:	2302      	movs	r3, #2
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <Console_Init+0x60>)
 8000cf6:	745a      	strb	r2, [r3, #17]
    serial.ISR_Routines.Idle_Line_ISR = Console_IRQ;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <Console_Init+0x60>)
 8000cfa:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <Console_Init+0x68>)
 8000cfc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    // Initialize USART
    if (USART_Init(&serial) != true) {
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <Console_Init+0x60>)
 8000d02:	f003 f9df 	bl	80040c4 <USART_Init>
        // Handle USART initialization failure (e.g., log error or halt execution)
    }
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000144 	.word	0x20000144
 8000d14:	40004c00 	.word	0x40004c00
 8000d18:	08000c29 	.word	0x08000c29

08000d1c <printConsole>:
  * using DMA. It supports formatted strings with variable arguments.
  *
  * @param msg Format string for the message to send.
  * @param ... Variable arguments for the format string.
  */
 void printConsole(char *msg, ...) {
 8000d1c:	b40f      	push	{r0, r1, r2, r3}
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
     va_list args;
     va_start(args, msg);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	603b      	str	r3, [r7, #0]

     // Format the message and store it in the transmission buffer
//     vsprintf((char *)TRX_Buffer, msg, args);

     vsnprintf((char *)TRX_Buffer, RX_Buffer_Length, msg, args);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	21c8      	movs	r1, #200	@ 0xc8
 8000d30:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <printConsole+0x40>)
 8000d32:	f004 f9bd 	bl	80050b0 <vsniprintf>

     // Get the length of the formatted string
     uint16_t len = strlen((char *)TRX_Buffer);
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <printConsole+0x40>)
 8000d38:	f7ff fa4a 	bl	80001d0 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	80fb      	strh	r3, [r7, #6]

     // Transmit the buffer using DMA
     USART_TX_Buffer(&serial, (uint8_t *)&TRX_Buffer[0], len);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4905      	ldr	r1, [pc, #20]	@ (8000d5c <printConsole+0x40>)
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <printConsole+0x44>)
 8000d48:	f003 fe26 	bl	8004998 <USART_TX_Buffer>

     va_end(args);
 }
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d56:	b004      	add	sp, #16
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	20000144 	.word	0x20000144

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000da4:	4b60      	ldr	r3, [pc, #384]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a60      	ldr	r2, [pc, #384]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000daa:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000dac:	4b5f      	ldr	r3, [pc, #380]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d015      	beq.n	8000de4 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000db8:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00e      	beq.n	8000de4 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d009      	beq.n	8000de4 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000dd0:	4b57      	ldr	r3, [pc, #348]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000dd8:	4b53      	ldr	r3, [pc, #332]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000df0:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2202      	movs	r2, #2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00e      	beq.n	8000e1c <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e08:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000e10:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a44      	ldr	r2, [pc, #272]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000e1c:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d015      	beq.n	8000e54 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000e28:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00e      	beq.n	8000e54 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e36:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d009      	beq.n	8000e54 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e40:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000e48:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	4a36      	ldr	r2, [pc, #216]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000e54:	4b35      	ldr	r3, [pc, #212]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d02d      	beq.n	8000ebc <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000e60:	4b33      	ldr	r3, [pc, #204]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	2208      	movs	r2, #8
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d026      	beq.n	8000ebc <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e6e:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d021      	beq.n	8000ebc <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e7e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000e80:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a28      	ldr	r2, [pc, #160]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e92:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d110      	bne.n	8000ebc <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e9a:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d004      	beq.n	8000eb4 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eb0:	4798      	blx	r3
 8000eb2:	e003      	b.n	8000ebc <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eba:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x18c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0320 	and.w	r3, r3, #32
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d02d      	beq.n	8000f24 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2210      	movs	r2, #16
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d026      	beq.n	8000f24 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d021      	beq.n	8000f24 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <DMA1_Stream0_IRQHandler+0x188>)
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000efa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d110      	bne.n	8000f24 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f18:	4798      	blx	r3
				}
			}
		}

	}
}
 8000f1a:	e003      	b.n	8000f24 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <DMA1_Stream0_IRQHandler+0x190>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f22:	4798      	blx	r3
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40026000 	.word	0x40026000
 8000f2c:	20000268 	.word	0x20000268
 8000f30:	20000228 	.word	0x20000228

08000f34 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000f38:	4b60      	ldr	r3, [pc, #384]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a60      	ldr	r2, [pc, #384]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8000f3e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000f40:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d015      	beq.n	8000f78 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00e      	beq.n	8000f78 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000f64:	4b57      	ldr	r3, [pc, #348]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f6a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000f6c:	4b53      	ldr	r3, [pc, #332]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f76:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000f78:	4b51      	ldr	r3, [pc, #324]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d015      	beq.n	8000fb0 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000f84:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00e      	beq.n	8000fb0 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f92:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f9c:	4b49      	ldr	r3, [pc, #292]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000fa4:	4b45      	ldr	r3, [pc, #276]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	4a44      	ldr	r2, [pc, #272]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fae:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d015      	beq.n	8000fe8 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000fbc:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00e      	beq.n	8000fe8 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000fca:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a36      	ldr	r2, [pc, #216]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000fe8:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d02d      	beq.n	8001050 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000ff4:	4b33      	ldr	r3, [pc, #204]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d026      	beq.n	8001050 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001008:	2b00      	cmp	r3, #0
 800100a:	d021      	beq.n	8001050 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001012:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a28      	ldr	r2, [pc, #160]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001020:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001026:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800102a:	4293      	cmp	r3, r2
 800102c:	d110      	bne.n	8001050 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d004      	beq.n	8001048 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001044:	4798      	blx	r3
 8001046:	e003      	b.n	8001050 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <DMA1_Stream1_IRQHandler+0x18c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001058:	2b00      	cmp	r3, #0
 800105a:	d02d      	beq.n	80010b8 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2210      	movs	r2, #16
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d026      	beq.n	80010b8 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d021      	beq.n	80010b8 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <DMA1_Stream1_IRQHandler+0x188>)
 8001082:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001086:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001092:	4293      	cmp	r3, r2
 8001094:	d110      	bne.n	80010b8 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ac:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80010ae:	e003      	b.n	80010b8 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <DMA1_Stream1_IRQHandler+0x190>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b6:	4798      	blx	r3
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40026000 	.word	0x40026000
 80010c0:	20000268 	.word	0x20000268
 80010c4:	2000022c 	.word	0x2000022c

080010c8 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80010cc:	4b64      	ldr	r3, [pc, #400]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a64      	ldr	r2, [pc, #400]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 80010d2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80010d4:	4b63      	ldr	r3, [pc, #396]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d015      	beq.n	800110c <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80010e0:	4b61      	ldr	r3, [pc, #388]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00e      	beq.n	800110c <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80010ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010fe:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001100:	4b57      	ldr	r3, [pc, #348]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a56      	ldr	r2, [pc, #344]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 800110c:	4b55      	ldr	r3, [pc, #340]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d015      	beq.n	8001144 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001118:	4b53      	ldr	r3, [pc, #332]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00e      	beq.n	8001144 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001126:	4b50      	ldr	r3, [pc, #320]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d009      	beq.n	8001144 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001130:	4b4d      	ldr	r3, [pc, #308]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001138:	4b49      	ldr	r3, [pc, #292]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001142:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001144:	4b47      	ldr	r3, [pc, #284]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01c      	beq.n	800118a <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001150:	4b45      	ldr	r3, [pc, #276]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2204      	movs	r2, #4
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d015      	beq.n	800118a <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800115e:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800116c:	4b3e      	ldr	r3, [pc, #248]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001176:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001184:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001188:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800118a:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d02d      	beq.n	80011f2 <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2208      	movs	r2, #8
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d026      	beq.n	80011f2 <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d021      	beq.n	80011f2 <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b4:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 80011bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011c0:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011c2:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d110      	bne.n	80011f2 <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011e6:	4798      	blx	r3
 80011e8:	e003      	b.n	80011f2 <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f0:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <DMA1_Stream2_IRQHandler+0x19c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02d      	beq.n	800125a <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2208      	movs	r2, #8
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d026      	beq.n	800125a <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	2b00      	cmp	r3, #0
 8001214:	d021      	beq.n	800125a <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <DMA1_Stream2_IRQHandler+0x198>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001228:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001230:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001234:	4293      	cmp	r3, r2
 8001236:	d110      	bne.n	800125a <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800124e:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001250:	e003      	b.n	800125a <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001258:	4798      	blx	r3
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40026000 	.word	0x40026000
 8001264:	20000268 	.word	0x20000268
 8001268:	20000230 	.word	0x20000230

0800126c <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001270:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a60      	ldr	r2, [pc, #384]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 8001276:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001278:	4b5f      	ldr	r3, [pc, #380]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d015      	beq.n	80012b0 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001284:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2280      	movs	r2, #128	@ 0x80
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001292:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800129c:	4b57      	ldr	r3, [pc, #348]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80012aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012ae:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80012b0:	4b51      	ldr	r3, [pc, #324]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d015      	beq.n	80012e8 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80012bc:	4b4f      	ldr	r3, [pc, #316]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00e      	beq.n	80012e8 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80012ca:	4b4c      	ldr	r3, [pc, #304]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80012d4:	4b49      	ldr	r3, [pc, #292]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80012dc:	4b45      	ldr	r3, [pc, #276]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a44      	ldr	r2, [pc, #272]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80012e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012e6:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80012e8:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d015      	beq.n	8001320 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80012f4:	4b41      	ldr	r3, [pc, #260]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800130c:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001314:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a36      	ldr	r2, [pc, #216]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 800131a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800131e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001320:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02d      	beq.n	8001388 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800132c:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	2208      	movs	r2, #8
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d026      	beq.n	8001388 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800133a:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001340:	2b00      	cmp	r3, #0
 8001342:	d021      	beq.n	8001388 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a28      	ldr	r2, [pc, #160]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 8001352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001356:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001358:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800135e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001362:	4293      	cmp	r3, r2
 8001364:	d110      	bne.n	8001388 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137c:	4798      	blx	r3
 800137e:	e003      	b.n	8001388 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001386:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <DMA1_Stream3_IRQHandler+0x18c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02d      	beq.n	80013f0 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2210      	movs	r2, #16
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d026      	beq.n	80013f0 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d021      	beq.n	80013f0 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x188>)
 80013ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013be:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d110      	bne.n	80013f0 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013e4:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80013e6:	e003      	b.n	80013f0 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <DMA1_Stream3_IRQHandler+0x190>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ee:	4798      	blx	r3
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40026000 	.word	0x40026000
 80013f8:	20000268 	.word	0x20000268
 80013fc:	20000234 	.word	0x20000234

08001400 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001404:	4b4f      	ldr	r3, [pc, #316]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 800140a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800140c:	4b4e      	ldr	r3, [pc, #312]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001418:	4b4c      	ldr	r3, [pc, #304]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001422:	4b4a      	ldr	r3, [pc, #296]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001428:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800142a:	4b46      	ldr	r3, [pc, #280]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4a45      	ldr	r2, [pc, #276]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001434:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001436:	4b44      	ldr	r3, [pc, #272]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001442:	4b42      	ldr	r3, [pc, #264]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800144c:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001454:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a3a      	ldr	r2, [pc, #232]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800146c:	4b37      	ldr	r3, [pc, #220]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001476:	4b35      	ldr	r3, [pc, #212]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	4a30      	ldr	r2, [pc, #192]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	d026      	beq.n	80014e4 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d021      	beq.n	80014e4 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80014a8:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a25      	ldr	r2, [pc, #148]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014be:	4293      	cmp	r3, r2
 80014c0:	d110      	bne.n	80014e4 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014d8:	4798      	blx	r3
 80014da:	e003      	b.n	80014e4 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <DMA1_Stream4_IRQHandler+0x148>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d026      	beq.n	800153e <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d021      	beq.n	800153e <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <DMA1_Stream4_IRQHandler+0x144>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001514:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001518:	4293      	cmp	r3, r2
 800151a:	d110      	bne.n	800153e <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001532:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001534:	e003      	b.n	800153e <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <DMA1_Stream4_IRQHandler+0x14c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800153c:	4798      	blx	r3
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40026000 	.word	0x40026000
 8001548:	2000026c 	.word	0x2000026c
 800154c:	20000238 	.word	0x20000238

08001550 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001554:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 800155a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 800155c:	4b4e      	ldr	r3, [pc, #312]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001568:	4b4c      	ldr	r3, [pc, #304]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001572:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001578:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800157a:	4b46      	ldr	r3, [pc, #280]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4a45      	ldr	r2, [pc, #276]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 8001580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001584:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001586:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001592:	4b42      	ldr	r3, [pc, #264]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800159c:	4b3f      	ldr	r3, [pc, #252]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80015a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80015b0:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80015c6:	4b35      	ldr	r3, [pc, #212]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4a30      	ldr	r2, [pc, #192]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d026      	beq.n	8001634 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 80015fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001602:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	4293      	cmp	r3, r2
 8001610:	d110      	bne.n	8001634 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001628:	4798      	blx	r3
 800162a:	e003      	b.n	8001634 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <DMA1_Stream5_IRQHandler+0x148>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800163c:	2b00      	cmp	r3, #0
 800163e:	d026      	beq.n	800168e <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d021      	beq.n	800168e <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001650:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <DMA1_Stream5_IRQHandler+0x144>)
 8001658:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800165c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001664:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001668:	4293      	cmp	r3, r2
 800166a:	d110      	bne.n	800168e <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001684:	e003      	b.n	800168e <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <DMA1_Stream5_IRQHandler+0x14c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	4798      	blx	r3
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40026000 	.word	0x40026000
 8001698:	2000026c 	.word	0x2000026c
 800169c:	2000023c 	.word	0x2000023c

080016a0 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80016a4:	4b4f      	ldr	r3, [pc, #316]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 80016aa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80016ac:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00e      	beq.n	80016d6 <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80016b8:	4b4c      	ldr	r3, [pc, #304]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80016c2:	4b4a      	ldr	r3, [pc, #296]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80016ca:	4b46      	ldr	r3, [pc, #280]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80016d6:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00e      	beq.n	8001700 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80016e2:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a3a      	ldr	r2, [pc, #232]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80016fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016fe:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001700:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00e      	beq.n	800172a <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800170c:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800171e:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4a30      	ldr	r2, [pc, #192]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 8001724:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001728:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800172a:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d026      	beq.n	8001784 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001736:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173c:	2b00      	cmp	r3, #0
 800173e:	d021      	beq.n	8001784 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001746:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001748:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 800174e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001752:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800175e:	4293      	cmp	r3, r2
 8001760:	d110      	bne.n	8001784 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001778:	4798      	blx	r3
 800177a:	e003      	b.n	8001784 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <DMA1_Stream6_IRQHandler+0x148>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d026      	beq.n	80017de <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d021      	beq.n	80017de <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x144>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ac:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d110      	bne.n	80017de <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017d2:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80017d4:	e003      	b.n	80017de <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <DMA1_Stream6_IRQHandler+0x14c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	4798      	blx	r3
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40026000 	.word	0x40026000
 80017e8:	2000026c 	.word	0x2000026c
 80017ec:	20000240 	.word	0x20000240

080017f0 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80017f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 80017fa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80017fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001812:	4b4a      	ldr	r3, [pc, #296]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800181a:	4b46      	ldr	r3, [pc, #280]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a45      	ldr	r2, [pc, #276]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 8001820:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001824:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001826:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00e      	beq.n	8001850 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001832:	4b42      	ldr	r3, [pc, #264]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001844:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a3a      	ldr	r2, [pc, #232]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001850:	4b39      	ldr	r3, [pc, #228]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001866:	4b35      	ldr	r3, [pc, #212]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a30      	ldr	r2, [pc, #192]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 8001874:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001878:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800187a:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d026      	beq.n	80018d4 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188c:	2b00      	cmp	r3, #0
 800188e:	d021      	beq.n	80018d4 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001896:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 800189e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018a2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018a4:	4b25      	ldr	r3, [pc, #148]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d110      	bne.n	80018d4 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c8:	4798      	blx	r3
 80018ca:	e003      	b.n	80018d4 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <DMA1_Stream7_IRQHandler+0x148>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d026      	beq.n	800192e <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d021      	beq.n	800192e <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <DMA1_Stream7_IRQHandler+0x144>)
 80018f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018fc:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001904:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001908:	4293      	cmp	r3, r2
 800190a:	d110      	bne.n	800192e <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001922:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001924:	e003      	b.n	800192e <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <DMA1_Stream7_IRQHandler+0x14c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	4798      	blx	r3
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40026000 	.word	0x40026000
 8001938:	2000026c 	.word	0x2000026c
 800193c:	20000244 	.word	0x20000244

08001940 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001944:	4b60      	ldr	r3, [pc, #384]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a60      	ldr	r2, [pc, #384]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 800194a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 800194c:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001958:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00e      	beq.n	8001984 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001966:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001984:	4b51      	ldr	r3, [pc, #324]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d015      	beq.n	80019bc <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001990:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800199e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80019a8:	4b49      	ldr	r3, [pc, #292]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80019b0:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a44      	ldr	r2, [pc, #272]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 80019bc:	4b43      	ldr	r3, [pc, #268]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80019c8:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80019e0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80019e8:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a36      	ldr	r2, [pc, #216]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 80019f4:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02d      	beq.n	8001a5c <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001a00:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2208      	movs	r2, #8
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d026      	beq.n	8001a5c <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001a0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a28      	ldr	r2, [pc, #160]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d110      	bne.n	8001a5c <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a50:	4798      	blx	r3
 8001a52:	e003      	b.n	8001a5c <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5a:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <DMA2_Stream0_IRQHandler+0x18c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02d      	beq.n	8001ac4 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d026      	beq.n	8001ac4 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x188>)
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d110      	bne.n	8001ac4 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab8:	4798      	blx	r3
				}
			}
		}

	}
}
 8001aba:	e003      	b.n	8001ac4 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <DMA2_Stream0_IRQHandler+0x190>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac2:	4798      	blx	r3
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40026400 	.word	0x40026400
 8001acc:	20000268 	.word	0x20000268
 8001ad0:	20000248 	.word	0x20000248

08001ad4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001ade:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001aec:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001afc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001afe:	4b46      	ldr	r3, [pc, #280]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a45      	ldr	r2, [pc, #276]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b08:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00e      	beq.n	8001b34 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001b20:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001b28:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b32:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001b34:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001b4a:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d026      	beq.n	8001bb8 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d021      	beq.n	8001bb8 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b74:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a25      	ldr	r2, [pc, #148]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d110      	bne.n	8001bb8 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bac:	4798      	blx	r3
 8001bae:	e003      	b.n	8001bb8 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <DMA2_Stream1_IRQHandler+0x148>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d026      	beq.n	8001c12 <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d021      	beq.n	8001c12 <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <DMA2_Stream1_IRQHandler+0x144>)
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001be0:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d110      	bne.n	8001c12 <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c06:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001c08:	e003      	b.n	8001c12 <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	4798      	blx	r3
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40026400 	.word	0x40026400
 8001c1c:	20000268 	.word	0x20000268
 8001c20:	2000024c 	.word	0x2000024c

08001c24 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001c28:	4b4f      	ldr	r3, [pc, #316]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001c2e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001c30:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00e      	beq.n	8001c5a <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001c4e:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a45      	ldr	r2, [pc, #276]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001c66:	4b42      	ldr	r3, [pc, #264]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001c70:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c82:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001c84:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c90:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c9a:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cac:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d026      	beq.n	8001d08 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001cba:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d021      	beq.n	8001d08 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cd6:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d110      	bne.n	8001d08 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001ce6:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfc:	4798      	blx	r3
 8001cfe:	e003      	b.n	8001d08 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <DMA2_Stream2_IRQHandler+0x148>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d026      	beq.n	8001d62 <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d021      	beq.n	8001d62 <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d24:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <DMA2_Stream2_IRQHandler+0x144>)
 8001d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d30:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d110      	bne.n	8001d62 <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d56:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001d58:	e003      	b.n	8001d62 <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	4798      	blx	r3
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40026400 	.word	0x40026400
 8001d6c:	20000268 	.word	0x20000268
 8001d70:	20000250 	.word	0x20000250

08001d74 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001d78:	4b60      	ldr	r3, [pc, #384]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a60      	ldr	r2, [pc, #384]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001d7e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001d80:	4b5f      	ldr	r3, [pc, #380]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00e      	beq.n	8001db8 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001da4:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001daa:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001db6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001db8:	4b51      	ldr	r3, [pc, #324]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00e      	beq.n	8001df0 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001ddc:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001de4:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001dfc:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2204      	movs	r2, #4
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00e      	beq.n	8001e28 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001e1c:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a36      	ldr	r2, [pc, #216]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001e22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001e28:	4b35      	ldr	r3, [pc, #212]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02d      	beq.n	8001e90 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001e34:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d026      	beq.n	8001e90 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001e42:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d021      	beq.n	8001e90 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001e54:	4b29      	ldr	r3, [pc, #164]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001e5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e5e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d110      	bne.n	8001e90 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e6e:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e7e:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e84:	4798      	blx	r3
 8001e86:	e003      	b.n	8001e90 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02d      	beq.n	8001ef8 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d026      	beq.n	8001ef8 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d021      	beq.n	8001ef8 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <DMA2_Stream3_IRQHandler+0x188>)
 8001ec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ec6:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ece:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d110      	bne.n	8001ef8 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eec:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001eee:	e003      	b.n	8001ef8 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <DMA2_Stream3_IRQHandler+0x190>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	4798      	blx	r3
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40026400 	.word	0x40026400
 8001f00:	20000268 	.word	0x20000268
 8001f04:	20000254 	.word	0x20000254

08001f08 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001f12:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001f14:	4b4e      	ldr	r3, [pc, #312]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00e      	beq.n	8001f3e <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001f20:	4b4c      	ldr	r3, [pc, #304]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001f32:	4b46      	ldr	r3, [pc, #280]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a45      	ldr	r2, [pc, #276]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f3c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001f4a:	4b42      	ldr	r3, [pc, #264]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001f54:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001f74:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001f7e:	4b35      	ldr	r3, [pc, #212]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a30      	ldr	r2, [pc, #192]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001f92:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d026      	beq.n	8001fec <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fae:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d110      	bne.n	8001fec <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001fca:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe0:	4798      	blx	r3
 8001fe2:	e003      	b.n	8001fec <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <DMA2_Stream4_IRQHandler+0x148>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d021      	beq.n	8002046 <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <DMA2_Stream4_IRQHandler+0x144>)
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002020:	4293      	cmp	r3, r2
 8002022:	d110      	bne.n	8002046 <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203a:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800203c:	e003      	b.n	8002046 <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <DMA2_Stream4_IRQHandler+0x14c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	4798      	blx	r3
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40026400 	.word	0x40026400
 8002050:	2000026c 	.word	0x2000026c
 8002054:	20000258 	.word	0x20000258

08002058 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800205c:	4b4f      	ldr	r3, [pc, #316]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a4f      	ldr	r2, [pc, #316]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 8002062:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8002064:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002070:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800207a:	4b4a      	ldr	r3, [pc, #296]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002082:	4b46      	ldr	r3, [pc, #280]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a45      	ldr	r2, [pc, #276]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 8002088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800208c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800208e:	4b44      	ldr	r3, [pc, #272]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800209a:	4b42      	ldr	r3, [pc, #264]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80020a4:	4b3f      	ldr	r3, [pc, #252]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80020ac:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3a      	ldr	r2, [pc, #232]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80020b8:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80020c4:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80020ce:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80020d6:	4b31      	ldr	r3, [pc, #196]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a30      	ldr	r2, [pc, #192]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 80020dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d026      	beq.n	800213c <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80020ee:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d021      	beq.n	800213c <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80020f8:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fe:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002100:	4b26      	ldr	r3, [pc, #152]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a25      	ldr	r2, [pc, #148]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800210c:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002116:	4293      	cmp	r3, r2
 8002118:	d110      	bne.n	800213c <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800212a:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002130:	4798      	blx	r3
 8002132:	e003      	b.n	800213c <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <DMA2_Stream5_IRQHandler+0x148>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002144:	2b00      	cmp	r3, #0
 8002146:	d026      	beq.n	8002196 <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d021      	beq.n	8002196 <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002152:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002158:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a0f      	ldr	r2, [pc, #60]	@ (800219c <DMA2_Stream5_IRQHandler+0x144>)
 8002160:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002164:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002170:	4293      	cmp	r3, r2
 8002172:	d110      	bne.n	8002196 <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002184:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800218c:	e003      	b.n	8002196 <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	4798      	blx	r3
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40026400 	.word	0x40026400
 80021a0:	2000026c 	.word	0x2000026c
 80021a4:	2000025c 	.word	0x2000025c

080021a8 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80021ac:	4b4f      	ldr	r3, [pc, #316]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 80021b2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80021b4:	4b4e      	ldr	r3, [pc, #312]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80021ca:	4b4a      	ldr	r3, [pc, #296]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80021de:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00e      	beq.n	8002208 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80021ea:	4b42      	ldr	r3, [pc, #264]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80021f4:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80021fc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a3a      	ldr	r2, [pc, #232]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 8002202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002206:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002214:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a30      	ldr	r2, [pc, #192]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 800222c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002230:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d026      	beq.n	800228c <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800223e:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d021      	beq.n	800228c <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002250:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a25      	ldr	r2, [pc, #148]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800225c:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002262:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002266:	4293      	cmp	r3, r2
 8002268:	d110      	bne.n	800228c <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800226a:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002280:	4798      	blx	r3
 8002282:	e003      	b.n	800228c <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <DMA2_Stream6_IRQHandler+0x148>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d026      	beq.n	80022e6 <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d021      	beq.n	80022e6 <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <DMA2_Stream6_IRQHandler+0x144>)
 80022b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b4:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d110      	bne.n	80022e6 <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022da:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80022dc:	e003      	b.n	80022e6 <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e4:	4798      	blx	r3
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40026400 	.word	0x40026400
 80022f0:	2000026c 	.word	0x2000026c
 80022f4:	20000260 	.word	0x20000260

080022f8 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80022fc:	4b4f      	ldr	r3, [pc, #316]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 8002302:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8002304:	4b4e      	ldr	r3, [pc, #312]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00e      	beq.n	800232e <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002310:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8002322:	4b46      	ldr	r3, [pc, #280]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4a45      	ldr	r2, [pc, #276]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800232c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 800232e:	4b44      	ldr	r3, [pc, #272]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800233a:	4b42      	ldr	r3, [pc, #264]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002344:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002356:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8002358:	4b39      	ldr	r3, [pc, #228]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002364:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800236e:	4b35      	ldr	r3, [pc, #212]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002376:	4b31      	ldr	r3, [pc, #196]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a30      	ldr	r2, [pc, #192]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002380:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8002382:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d026      	beq.n	80023dc <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800238e:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80023a0:	4b26      	ldr	r3, [pc, #152]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a25      	ldr	r2, [pc, #148]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 80023a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023aa:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d110      	bne.n	80023dc <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	4798      	blx	r3
 80023d2:	e003      	b.n	80023dc <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <DMA2_Stream7_IRQHandler+0x148>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d026      	beq.n	8002436 <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80023e8:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d021      	beq.n	8002436 <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80023f2:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a0f      	ldr	r2, [pc, #60]	@ (800243c <DMA2_Stream7_IRQHandler+0x144>)
 8002400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002404:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002410:	4293      	cmp	r3, r2
 8002412:	d110      	bne.n	8002436 <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002424:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242a:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800242c:	e003      	b.n	8002436 <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <DMA2_Stream7_IRQHandler+0x14c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	4798      	blx	r3
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40026400 	.word	0x40026400
 8002440:	2000026c 	.word	0x2000026c
 8002444:	20000264 	.word	0x20000264

08002448 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0c      	ldr	r2, [pc, #48]	@ (8002488 <DMA_Clock_Enable+0x40>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d105      	bne.n	8002466 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <DMA_Clock_Enable+0x44>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <DMA_Clock_Enable+0x44>)
 8002460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <DMA_Clock_Enable+0x48>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d105      	bne.n	800247c <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <DMA_Clock_Enable+0x44>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	4a05      	ldr	r2, [pc, #20]	@ (800248c <DMA_Clock_Enable+0x44>)
 8002476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800247a:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40026000 	.word	0x40026000
 800248c:	40023800 	.word	0x40023800
 8002490:	40026400 	.word	0x40026400

08002494 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffd3 	bl	8002448 <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00f      	beq.n	80024d0 <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 80024c0:	bf00      	nop
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f8      	bne.n	80024c2 <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7a1b      	ldrb	r3, [r3, #8]
 80024da:	065a      	lsls	r2, r3, #25
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2200      	movs	r2, #0
 8002556:	4293      	cmp	r3, r2
 8002558:	f000 8110 	beq.w	800277c <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	6959      	ldr	r1, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	430a      	orrs	r2, r1
 8002578:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2210      	movs	r2, #16
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f042 0210 	orr.w	r2, r2, #16
 8002594:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2208      	movs	r2, #8
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f042 0208 	orr.w	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2204      	movs	r2, #4
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f042 0204 	orr.w	r2, r2, #4
 80025cc:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f042 0202 	orr.w	r2, r2, #2
 80025e8:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a80      	ldr	r2, [pc, #512]	@ (80027f0 <DMA_Init+0x35c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d15f      	bne.n	80026b4 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a7e      	ldr	r2, [pc, #504]	@ (80027f4 <DMA_Init+0x360>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d106      	bne.n	800260c <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 80025fe:	4a7e      	ldr	r2, [pc, #504]	@ (80027f8 <DMA_Init+0x364>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002604:	200b      	movs	r0, #11
 8002606:	f7fe fbad 	bl	8000d64 <__NVIC_EnableIRQ>
 800260a:	e0b7      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a7a      	ldr	r2, [pc, #488]	@ (80027fc <DMA_Init+0x368>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d106      	bne.n	8002624 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 8002616:	4a7a      	ldr	r2, [pc, #488]	@ (8002800 <DMA_Init+0x36c>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800261c:	200c      	movs	r0, #12
 800261e:	f7fe fba1 	bl	8000d64 <__NVIC_EnableIRQ>
 8002622:	e0ab      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a76      	ldr	r2, [pc, #472]	@ (8002804 <DMA_Init+0x370>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d106      	bne.n	800263c <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 800262e:	4a76      	ldr	r2, [pc, #472]	@ (8002808 <DMA_Init+0x374>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002634:	200d      	movs	r0, #13
 8002636:	f7fe fb95 	bl	8000d64 <__NVIC_EnableIRQ>
 800263a:	e09f      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a72      	ldr	r2, [pc, #456]	@ (800280c <DMA_Init+0x378>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d106      	bne.n	8002654 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 8002646:	4a72      	ldr	r2, [pc, #456]	@ (8002810 <DMA_Init+0x37c>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800264c:	200e      	movs	r0, #14
 800264e:	f7fe fb89 	bl	8000d64 <__NVIC_EnableIRQ>
 8002652:	e093      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <DMA_Init+0x380>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d106      	bne.n	800266c <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 800265e:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <DMA_Init+0x384>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002664:	200f      	movs	r0, #15
 8002666:	f7fe fb7d 	bl	8000d64 <__NVIC_EnableIRQ>
 800266a:	e087      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a6a      	ldr	r2, [pc, #424]	@ (800281c <DMA_Init+0x388>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d106      	bne.n	8002684 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 8002676:	4a6a      	ldr	r2, [pc, #424]	@ (8002820 <DMA_Init+0x38c>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800267c:	2010      	movs	r0, #16
 800267e:	f7fe fb71 	bl	8000d64 <__NVIC_EnableIRQ>
 8002682:	e07b      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a66      	ldr	r2, [pc, #408]	@ (8002824 <DMA_Init+0x390>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d106      	bne.n	800269c <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 800268e:	4a66      	ldr	r2, [pc, #408]	@ (8002828 <DMA_Init+0x394>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002694:	2011      	movs	r0, #17
 8002696:	f7fe fb65 	bl	8000d64 <__NVIC_EnableIRQ>
 800269a:	e06f      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a62      	ldr	r2, [pc, #392]	@ (800282c <DMA_Init+0x398>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d16a      	bne.n	800277c <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 80026a6:	4a62      	ldr	r2, [pc, #392]	@ (8002830 <DMA_Init+0x39c>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026ac:	202f      	movs	r0, #47	@ 0x2f
 80026ae:	f7fe fb59 	bl	8000d64 <__NVIC_EnableIRQ>
 80026b2:	e063      	b.n	800277c <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002834 <DMA_Init+0x3a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d15e      	bne.n	800277c <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002838 <DMA_Init+0x3a4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d106      	bne.n	80026d6 <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 80026c8:	4a5c      	ldr	r2, [pc, #368]	@ (800283c <DMA_Init+0x3a8>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026ce:	2038      	movs	r0, #56	@ 0x38
 80026d0:	f7fe fb48 	bl	8000d64 <__NVIC_EnableIRQ>
 80026d4:	e052      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a59      	ldr	r2, [pc, #356]	@ (8002840 <DMA_Init+0x3ac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d106      	bne.n	80026ee <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 80026e0:	4a58      	ldr	r2, [pc, #352]	@ (8002844 <DMA_Init+0x3b0>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80026e6:	2039      	movs	r0, #57	@ 0x39
 80026e8:	f7fe fb3c 	bl	8000d64 <__NVIC_EnableIRQ>
 80026ec:	e046      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a55      	ldr	r2, [pc, #340]	@ (8002848 <DMA_Init+0x3b4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d106      	bne.n	8002706 <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 80026f8:	4a54      	ldr	r2, [pc, #336]	@ (800284c <DMA_Init+0x3b8>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026fe:	203a      	movs	r0, #58	@ 0x3a
 8002700:	f7fe fb30 	bl	8000d64 <__NVIC_EnableIRQ>
 8002704:	e03a      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a51      	ldr	r2, [pc, #324]	@ (8002850 <DMA_Init+0x3bc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d106      	bne.n	800271e <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <DMA_Init+0x3c0>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002716:	203b      	movs	r0, #59	@ 0x3b
 8002718:	f7fe fb24 	bl	8000d64 <__NVIC_EnableIRQ>
 800271c:	e02e      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a4d      	ldr	r2, [pc, #308]	@ (8002858 <DMA_Init+0x3c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d106      	bne.n	8002736 <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 8002728:	4a4c      	ldr	r2, [pc, #304]	@ (800285c <DMA_Init+0x3c8>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800272e:	203c      	movs	r0, #60	@ 0x3c
 8002730:	f7fe fb18 	bl	8000d64 <__NVIC_EnableIRQ>
 8002734:	e022      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a49      	ldr	r2, [pc, #292]	@ (8002860 <DMA_Init+0x3cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d106      	bne.n	800274e <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 8002740:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <DMA_Init+0x3d0>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002746:	2044      	movs	r0, #68	@ 0x44
 8002748:	f7fe fb0c 	bl	8000d64 <__NVIC_EnableIRQ>
 800274c:	e016      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a45      	ldr	r2, [pc, #276]	@ (8002868 <DMA_Init+0x3d4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d106      	bne.n	8002766 <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 8002758:	4a44      	ldr	r2, [pc, #272]	@ (800286c <DMA_Init+0x3d8>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800275e:	2045      	movs	r0, #69	@ 0x45
 8002760:	f7fe fb00 	bl	8000d64 <__NVIC_EnableIRQ>
 8002764:	e00a      	b.n	800277c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a41      	ldr	r2, [pc, #260]	@ (8002870 <DMA_Init+0x3dc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d105      	bne.n	800277c <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 8002770:	4a40      	ldr	r2, [pc, #256]	@ (8002874 <DMA_Init+0x3e0>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002776:	2046      	movs	r0, #70	@ 0x46
 8002778:	f7fe faf4 	bl	8000d64 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8c1b      	ldrh	r3, [r3, #32]
 8002786:	4619      	mov	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800279a:	4619      	mov	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e010      	b.n	80027e4 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2200      	movs	r2, #0
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e002      	b.n	80027e4 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e000      	b.n	80027e6 <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40026000 	.word	0x40026000
 80027f4:	40026010 	.word	0x40026010
 80027f8:	20000228 	.word	0x20000228
 80027fc:	40026028 	.word	0x40026028
 8002800:	2000022c 	.word	0x2000022c
 8002804:	40026040 	.word	0x40026040
 8002808:	20000230 	.word	0x20000230
 800280c:	40026058 	.word	0x40026058
 8002810:	20000234 	.word	0x20000234
 8002814:	40026070 	.word	0x40026070
 8002818:	20000238 	.word	0x20000238
 800281c:	40026088 	.word	0x40026088
 8002820:	2000023c 	.word	0x2000023c
 8002824:	400260a0 	.word	0x400260a0
 8002828:	20000240 	.word	0x20000240
 800282c:	400260b8 	.word	0x400260b8
 8002830:	20000244 	.word	0x20000244
 8002834:	40026400 	.word	0x40026400
 8002838:	40026410 	.word	0x40026410
 800283c:	20000248 	.word	0x20000248
 8002840:	40026428 	.word	0x40026428
 8002844:	2000024c 	.word	0x2000024c
 8002848:	40026440 	.word	0x40026440
 800284c:	20000250 	.word	0x20000250
 8002850:	40026458 	.word	0x40026458
 8002854:	20000254 	.word	0x20000254
 8002858:	40026470 	.word	0x40026470
 800285c:	20000258 	.word	0x20000258
 8002860:	40026488 	.word	0x40026488
 8002864:	2000025c 	.word	0x2000025c
 8002868:	400264a0 	.word	0x400264a0
 800286c:	20000260 	.word	0x20000260
 8002870:	400264b8 	.word	0x400264b8
 8002874:	20000264 	.word	0x20000264

08002878 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2200      	movs	r2, #0
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e00d      	b.n	80028c8 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d107      	bne.n	80028c8 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c6:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80028d6:	601a      	str	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002914:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800291e:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	613b      	str	r3, [r7, #16]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <DMA_Set_Trigger+0x124>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <DMA_Set_Trigger+0x24>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	4a42      	ldr	r2, [pc, #264]	@ (8002a60 <DMA_Set_Trigger+0x128>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d178      	bne.n	8002a4e <DMA_Set_Trigger+0x116>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4a41      	ldr	r2, [pc, #260]	@ (8002a64 <DMA_Set_Trigger+0x12c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d918      	bls.n	8002996 <DMA_Set_Trigger+0x5e>
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4a40      	ldr	r2, [pc, #256]	@ (8002a68 <DMA_Set_Trigger+0x130>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d814      	bhi.n	8002996 <DMA_Set_Trigger+0x5e>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <DMA_Set_Trigger+0x134>)
 8002970:	4413      	add	r3, r2
 8002972:	10db      	asrs	r3, r3, #3
 8002974:	4a3e      	ldr	r2, [pc, #248]	@ (8002a70 <DMA_Set_Trigger+0x138>)
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	461a      	mov	r2, r3
 800297c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <DMA_Set_Trigger+0x13c>)
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	213f      	movs	r1, #63	@ 0x3f
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e055      	b.n	8002a42 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4a37      	ldr	r2, [pc, #220]	@ (8002a78 <DMA_Set_Trigger+0x140>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d918      	bls.n	80029d0 <DMA_Set_Trigger+0x98>
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a36      	ldr	r2, [pc, #216]	@ (8002a7c <DMA_Set_Trigger+0x144>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d814      	bhi.n	80029d0 <DMA_Set_Trigger+0x98>
		{
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <DMA_Set_Trigger+0x148>)
 80029aa:	4413      	add	r3, r2
 80029ac:	10db      	asrs	r3, r3, #3
 80029ae:	4a30      	ldr	r2, [pc, #192]	@ (8002a70 <DMA_Set_Trigger+0x138>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b33      	ldr	r3, [pc, #204]	@ (8002a84 <DMA_Set_Trigger+0x14c>)
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	213f      	movs	r1, #63	@ 0x3f
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	e038      	b.n	8002a42 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <DMA_Set_Trigger+0x150>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d918      	bls.n	8002a0a <DMA_Set_Trigger+0xd2>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4a2c      	ldr	r2, [pc, #176]	@ (8002a8c <DMA_Set_Trigger+0x154>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d814      	bhi.n	8002a0a <DMA_Set_Trigger+0xd2>
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <DMA_Set_Trigger+0x158>)
 80029e4:	4413      	add	r3, r2
 80029e6:	10db      	asrs	r3, r3, #3
 80029e8:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <DMA_Set_Trigger+0x138>)
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <DMA_Set_Trigger+0x13c>)
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	213f      	movs	r1, #63	@ 0x3f
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	431a      	orrs	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e01b      	b.n	8002a42 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4a21      	ldr	r2, [pc, #132]	@ (8002a94 <DMA_Set_Trigger+0x15c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d917      	bls.n	8002a42 <DMA_Set_Trigger+0x10a>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <DMA_Set_Trigger+0x160>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d813      	bhi.n	8002a42 <DMA_Set_Trigger+0x10a>
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <DMA_Set_Trigger+0x164>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	10db      	asrs	r3, r3, #3
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <DMA_Set_Trigger+0x138>)
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <DMA_Set_Trigger+0x14c>)
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	213f      	movs	r1, #63	@ 0x3f
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	60da      	str	r2, [r3, #12]
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	601a      	str	r2, [r3, #0]
	}
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40026000 	.word	0x40026000
 8002a60:	40026400 	.word	0x40026400
 8002a64:	4002600f 	.word	0x4002600f
 8002a68:	40026058 	.word	0x40026058
 8002a6c:	bffd9ff0 	.word	0xbffd9ff0
 8002a70:	aaaaaaab 	.word	0xaaaaaaab
 8002a74:	08005adc 	.word	0x08005adc
 8002a78:	4002606f 	.word	0x4002606f
 8002a7c:	400260b8 	.word	0x400260b8
 8002a80:	bffd9f90 	.word	0xbffd9f90
 8002a84:	08005ae0 	.word	0x08005ae0
 8002a88:	4002640f 	.word	0x4002640f
 8002a8c:	40026458 	.word	0x40026458
 8002a90:	bffd9bf0 	.word	0xbffd9bf0
 8002a94:	4002646f 	.word	0x4002646f
 8002a98:	400264b8 	.word	0x400264b8
 8002a9c:	bffd9b90 	.word	0xbffd9b90

08002aa0 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002aa4:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <EXTI0_IRQHandler+0x24>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <EXTI0_IRQHandler+0x12>
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <EXTI0_IRQHandler+0x24>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <EXTI0_IRQHandler+0x28>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <EXTI0_IRQHandler+0x28>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6153      	str	r3, [r2, #20]
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000270 	.word	0x20000270
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <EXTI1_IRQHandler+0x24>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <EXTI1_IRQHandler+0x12>
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <EXTI1_IRQHandler+0x24>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <EXTI1_IRQHandler+0x28>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <EXTI1_IRQHandler+0x28>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6153      	str	r3, [r2, #20]
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000270 	.word	0x20000270
 8002af4:	40013c00 	.word	0x40013c00

08002af8 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002afc:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <EXTI2_IRQHandler+0x24>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <EXTI2_IRQHandler+0x12>
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <EXTI2_IRQHandler+0x24>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <EXTI2_IRQHandler+0x28>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <EXTI2_IRQHandler+0x28>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6153      	str	r3, [r2, #20]
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000270 	.word	0x20000270
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <EXTI3_IRQHandler+0x24>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <EXTI3_IRQHandler+0x12>
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <EXTI3_IRQHandler+0x24>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <EXTI3_IRQHandler+0x28>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <EXTI3_IRQHandler+0x28>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6153      	str	r3, [r2, #20]
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000270 	.word	0x20000270
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <EXTI4_IRQHandler+0x24>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <EXTI4_IRQHandler+0x12>
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <EXTI4_IRQHandler+0x24>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <EXTI4_IRQHandler+0x28>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <EXTI4_IRQHandler+0x28>)
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	6153      	str	r3, [r2, #20]
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000270 	.word	0x20000270
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002b82:	2305      	movs	r3, #5
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	e020      	b.n	8002bca <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <EXTI9_5_IRQHandler+0x60>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d014      	beq.n	8002bc4 <EXTI9_5_IRQHandler+0x48>
 8002b9a:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <EXTI9_5_IRQHandler+0x64>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8002be0 <EXTI9_5_IRQHandler+0x64>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <EXTI9_5_IRQHandler+0x60>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <EXTI9_5_IRQHandler+0x60>)
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	dddb      	ble.n	8002b88 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40013c00 	.word	0x40013c00
 8002be0:	20000270 	.word	0x20000270

08002be4 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002bea:	230a      	movs	r3, #10
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e020      	b.n	8002c32 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <EXTI15_10_IRQHandler+0x60>)
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d014      	beq.n	8002c2c <EXTI15_10_IRQHandler+0x48>
 8002c02:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <EXTI15_10_IRQHandler+0x64>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <EXTI15_10_IRQHandler+0x64>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002c18:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <EXTI15_10_IRQHandler+0x60>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4611      	mov	r1, r2
 8002c26:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <EXTI15_10_IRQHandler+0x60>)
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	dddb      	ble.n	8002bf0 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40013c00 	.word	0x40013c00
 8002c48:	20000270 	.word	0x20000270

08002c4c <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a30      	ldr	r2, [pc, #192]	@ (8002d18 <GPIO_Clock_Enable+0xcc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d04b      	beq.n	8002cf4 <GPIO_Clock_Enable+0xa8>
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d18 <GPIO_Clock_Enable+0xcc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d84f      	bhi.n	8002d02 <GPIO_Clock_Enable+0xb6>
 8002c62:	4a2e      	ldr	r2, [pc, #184]	@ (8002d1c <GPIO_Clock_Enable+0xd0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d03e      	beq.n	8002ce6 <GPIO_Clock_Enable+0x9a>
 8002c68:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <GPIO_Clock_Enable+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d849      	bhi.n	8002d02 <GPIO_Clock_Enable+0xb6>
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <GPIO_Clock_Enable+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d031      	beq.n	8002cd8 <GPIO_Clock_Enable+0x8c>
 8002c74:	4a2a      	ldr	r2, [pc, #168]	@ (8002d20 <GPIO_Clock_Enable+0xd4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d843      	bhi.n	8002d02 <GPIO_Clock_Enable+0xb6>
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <GPIO_Clock_Enable+0xd8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d024      	beq.n	8002cca <GPIO_Clock_Enable+0x7e>
 8002c80:	4a28      	ldr	r2, [pc, #160]	@ (8002d24 <GPIO_Clock_Enable+0xd8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d83d      	bhi.n	8002d02 <GPIO_Clock_Enable+0xb6>
 8002c86:	4a28      	ldr	r2, [pc, #160]	@ (8002d28 <GPIO_Clock_Enable+0xdc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d017      	beq.n	8002cbc <GPIO_Clock_Enable+0x70>
 8002c8c:	4a26      	ldr	r2, [pc, #152]	@ (8002d28 <GPIO_Clock_Enable+0xdc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d837      	bhi.n	8002d02 <GPIO_Clock_Enable+0xb6>
 8002c92:	4a26      	ldr	r2, [pc, #152]	@ (8002d2c <GPIO_Clock_Enable+0xe0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <GPIO_Clock_Enable+0x54>
 8002c98:	4a25      	ldr	r2, [pc, #148]	@ (8002d30 <GPIO_Clock_Enable+0xe4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <GPIO_Clock_Enable+0x62>
 8002c9e:	e030      	b.n	8002d02 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002ca0:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cac:	e02c      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002cae:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a20      	ldr	r2, [pc, #128]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	e025      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc8:	e01e      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd6:	e017      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cde:	f043 0310 	orr.w	r3, r3, #16
 8002ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce4:	e010      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf2:	e009      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <GPIO_Clock_Enable+0xe8>)
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d00:	e002      	b.n	8002d08 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e000      	b.n	8002d0a <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40021400 	.word	0x40021400
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40023800 	.word	0x40023800

08002d38 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	70fb      	strb	r3, [r7, #3]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70bb      	strb	r3, [r7, #2]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ff7a 	bl	8002c4c <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	0052      	lsls	r2, r2, #1
 8002d60:	2103      	movs	r1, #3
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	43d2      	mvns	r2, r2
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78b9      	ldrb	r1, [r7, #2]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	43d2      	mvns	r2, r2
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002d96:	2202      	movs	r2, #2
 8002d98:	787b      	ldrb	r3, [r7, #1]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d008      	beq.n	8002db0 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	7879      	ldrb	r1, [r7, #1]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	0052      	lsls	r2, r2, #1
 8002db8:	2103      	movs	r1, #3
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	43d2      	mvns	r2, r2
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	7c3b      	ldrb	r3, [r7, #16]
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	7c39      	ldrb	r1, [r7, #16]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	0052      	lsls	r2, r2, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	0052      	lsls	r2, r2, #1
 8002dea:	2103      	movs	r1, #3
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	43d2      	mvns	r2, r2
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002df8:	2204      	movs	r2, #4
 8002dfa:	7d3b      	ldrb	r3, [r7, #20]
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	7d39      	ldrb	r1, [r7, #20]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	0052      	lsls	r2, r2, #1
 8002e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002e14:	2202      	movs	r2, #2
 8002e16:	78bb      	ldrb	r3, [r7, #2]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d12f      	bne.n	8002e7c <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	2b07      	cmp	r3, #7
 8002e20:	d815      	bhi.n	8002e4e <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	43d2      	mvns	r2, r2
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	7e39      	ldrb	r1, [r7, #24]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	621a      	str	r2, [r3, #32]
 8002e4c:	e016      	b.n	8002e7c <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	3a08      	subs	r2, #8
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	210f      	movs	r1, #15
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	43d2      	mvns	r2, r2
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	7e39      	ldrb	r1, [r7, #24]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	3a08      	subs	r2, #8
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <__NVIC_EnableIRQ>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db0b      	blt.n	8002eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <__NVIC_EnableIRQ+0x38>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0a      	blt.n	8002eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	490c      	ldr	r1, [pc, #48]	@ (8002f10 <__NVIC_SetPriority+0x4c>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eec:	e00a      	b.n	8002f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4908      	ldr	r1, [pc, #32]	@ (8002f14 <__NVIC_SetPriority+0x50>)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	3b04      	subs	r3, #4
 8002efc:	0112      	lsls	r2, r2, #4
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	440b      	add	r3, r1
 8002f02:	761a      	strb	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <SystemAPB1_Clock_Speed>:


void BSP_Init(void);

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <SystemAPB1_Clock_Speed+0x24>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <SystemAPB1_Clock_Speed+0x28>)
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	0a92      	lsrs	r2, r2, #10
 8002f26:	f002 0207 	and.w	r2, r2, #7
 8002f2a:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <SystemAPB1_Clock_Speed+0x2c>)
 8002f2c:	5c8a      	ldrb	r2, [r1, r2]
 8002f2e:	40d3      	lsrs	r3, r2
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08005ef8 	.word	0x08005ef8

08002f48 <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <SystemAPB2_Clock_Speed+0x24>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <SystemAPB2_Clock_Speed+0x28>)
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	0b52      	lsrs	r2, r2, #13
 8002f56:	f002 0207 	and.w	r2, r2, #7
 8002f5a:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <SystemAPB2_Clock_Speed+0x2c>)
 8002f5c:	5c8a      	ldrb	r2, [r1, r2]
 8002f5e:	40d3      	lsrs	r3, r2
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	40023800 	.word	0x40023800
 8002f74:	08005ef8 	.word	0x08005ef8

08002f78 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8a:	f7fd fdf7 	bl	8000b7c <__aeabi_d2lz>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fb01 	bl	800059c <__aeabi_l2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	6839      	ldr	r1, [r7, #0]
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fae:	f7fd f96b 	bl	8000288 <__aeabi_dsub>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <USART1_TX_ISR>:
volatile bool U5RX_Complete = 0;

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
	U1TX_Complete = 1;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <USART1_TX_ISR+0x14>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200006ea 	.word	0x200006ea

08002fdc <USART1_RX_ISR>:

void USART1_RX_ISR() {
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	U1RX_Complete = 1;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <USART1_RX_ISR+0x14>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	200006eb 	.word	0x200006eb

08002ff4 <USART2_TX_ISR>:

void USART2_TX_ISR() {
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	U2TX_Complete = 1;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	@ (8003008 <USART2_TX_ISR+0x14>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	200006ec 	.word	0x200006ec

0800300c <USART2_RX_ISR>:

void USART2_RX_ISR() {
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	U2RX_Complete = 1;
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <USART2_RX_ISR+0x14>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	200006ed 	.word	0x200006ed

08003024 <USART3_TX_ISR>:

void USART3_TX_ISR() {
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	U3TX_Complete = 1;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <USART3_TX_ISR+0x14>)
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200006ee 	.word	0x200006ee

0800303c <USART3_RX_ISR>:

void USART3_RX_ISR() {
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	U3RX_Complete = 1;
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <USART3_RX_ISR+0x14>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	200006ef 	.word	0x200006ef

08003054 <USART4_TX_ISR>:

void USART4_TX_ISR() {
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
	U4TX_Complete = 1;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <USART4_TX_ISR+0x14>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200006f0 	.word	0x200006f0

0800306c <USART4_RX_ISR>:

void USART4_RX_ISR() {
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	U4RX_Complete = 1;
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <USART4_RX_ISR+0x14>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	200006f1 	.word	0x200006f1

08003084 <USART5_TX_ISR>:

void USART5_TX_ISR() {
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
	U5TX_Complete = 1;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <USART5_TX_ISR+0x14>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	200006f2 	.word	0x200006f2

0800309c <USART5_RX_ISR>:

void USART5_RX_ISR() {
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
	U5RX_Complete = 1;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <USART5_RX_ISR+0x14>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	200006f3 	.word	0x200006f3

080030b4 <USART6_TX_ISR>:

void USART6_TX_ISR() {
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	U6TX_Complete = 1;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <USART6_TX_ISR+0x14>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	200006f4 	.word	0x200006f4

080030cc <USART6_RX_ISR>:

void USART6_RX_ISR() {
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
	U6RX_Complete = 1;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <USART6_RX_ISR+0x14>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	200006f5 	.word	0x200006f5

080030e4 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 80030e8:	4b57      	ldr	r3, [pc, #348]	@ (8003248 <UART4_IRQHandler+0x164>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b57      	ldr	r3, [pc, #348]	@ (800324c <UART4_IRQHandler+0x168>)
 80030f0:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80030f2:	4b56      	ldr	r3, [pc, #344]	@ (800324c <UART4_IRQHandler+0x168>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <UART4_IRQHandler+0x3e>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8003100:	4b53      	ldr	r3, [pc, #332]	@ (8003250 <UART4_IRQHandler+0x16c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART4_IRQHandler+0x3e>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <UART4_IRQHandler+0x16c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003114:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8003116:	4b4c      	ldr	r3, [pc, #304]	@ (8003248 <UART4_IRQHandler+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a4b      	ldr	r2, [pc, #300]	@ (8003248 <UART4_IRQHandler+0x164>)
 800311c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003120:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8003122:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <UART4_IRQHandler+0x168>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <UART4_IRQHandler+0x6e>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003130:	4b47      	ldr	r3, [pc, #284]	@ (8003250 <UART4_IRQHandler+0x16c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <UART4_IRQHandler+0x6e>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 800313c:	4b44      	ldr	r3, [pc, #272]	@ (8003250 <UART4_IRQHandler+0x16c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003144:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8003146:	4b40      	ldr	r3, [pc, #256]	@ (8003248 <UART4_IRQHandler+0x164>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <UART4_IRQHandler+0x164>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8003152:	4b3e      	ldr	r3, [pc, #248]	@ (800324c <UART4_IRQHandler+0x168>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <UART4_IRQHandler+0x9e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003160:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <UART4_IRQHandler+0x16c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <UART4_IRQHandler+0x9e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800316c:	4b38      	ldr	r3, [pc, #224]	@ (8003250 <UART4_IRQHandler+0x16c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003174:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8003176:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <UART4_IRQHandler+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a33      	ldr	r2, [pc, #204]	@ (8003248 <UART4_IRQHandler+0x164>)
 800317c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003180:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8003182:	4b32      	ldr	r3, [pc, #200]	@ (800324c <UART4_IRQHandler+0x168>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003190:	4b2f      	ldr	r3, [pc, #188]	@ (8003250 <UART4_IRQHandler+0x16c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800319c:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <UART4_IRQHandler+0x16c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80031a4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80031a6:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <UART4_IRQHandler+0x164>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <UART4_IRQHandler+0x164>)
 80031ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 80031b2:	4b26      	ldr	r3, [pc, #152]	@ (800324c <UART4_IRQHandler+0x168>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <UART4_IRQHandler+0xfe>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80031c0:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <UART4_IRQHandler+0x16c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <UART4_IRQHandler+0xfe>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <UART4_IRQHandler+0x16c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031d4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <UART4_IRQHandler+0x164>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <UART4_IRQHandler+0x164>)
 80031dc:	f023 0320 	bic.w	r3, r3, #32
 80031e0:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <UART4_IRQHandler+0x168>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <UART4_IRQHandler+0x12e>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <UART4_IRQHandler+0x16c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART4_IRQHandler+0x12e>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <UART4_IRQHandler+0x16c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003204:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <UART4_IRQHandler+0x164>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0f      	ldr	r2, [pc, #60]	@ (8003248 <UART4_IRQHandler+0x164>)
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <UART4_IRQHandler+0x168>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <UART4_IRQHandler+0x15e>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <UART4_IRQHandler+0x16c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART4_IRQHandler+0x15e>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <UART4_IRQHandler+0x16c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003234:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8003236:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <UART4_IRQHandler+0x164>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a03      	ldr	r2, [pc, #12]	@ (8003248 <UART4_IRQHandler+0x164>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]
		}
	}

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40004c00 	.word	0x40004c00
 800324c:	200006e8 	.word	0x200006e8
 8003250:	200006e0 	.word	0x200006e0

08003254 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8003258:	4b57      	ldr	r3, [pc, #348]	@ (80033b8 <USART1_IRQHandler+0x164>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003260:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <USART1_IRQHandler+0x3e>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8003270:	4b53      	ldr	r3, [pc, #332]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <USART1_IRQHandler+0x3e>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 800327c:	4b50      	ldr	r3, [pc, #320]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003284:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8003286:	4b4c      	ldr	r3, [pc, #304]	@ (80033b8 <USART1_IRQHandler+0x164>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a4b      	ldr	r2, [pc, #300]	@ (80033b8 <USART1_IRQHandler+0x164>)
 800328c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003290:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8003292:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <USART1_IRQHandler+0x6e>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80032a0:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <USART1_IRQHandler+0x6e>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80032ac:	4b44      	ldr	r3, [pc, #272]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80032b6:	4b40      	ldr	r3, [pc, #256]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80032bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 80032c2:	4b3e      	ldr	r3, [pc, #248]	@ (80033bc <USART1_IRQHandler+0x168>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <USART1_IRQHandler+0x9e>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80032d0:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <USART1_IRQHandler+0x9e>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80032e4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80032e6:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a33      	ldr	r2, [pc, #204]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80032ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f0:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 80032f2:	4b32      	ldr	r3, [pc, #200]	@ (80033bc <USART1_IRQHandler+0x168>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <USART1_IRQHandler+0xce>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003300:	4b2f      	ldr	r3, [pc, #188]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <USART1_IRQHandler+0xce>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800330c:	4b2c      	ldr	r3, [pc, #176]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003314:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8003316:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <USART1_IRQHandler+0x164>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <USART1_IRQHandler+0x164>)
 800331c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003320:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <USART1_IRQHandler+0xfe>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <USART1_IRQHandler+0xfe>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003344:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8003346:	4b1c      	ldr	r3, [pc, #112]	@ (80033b8 <USART1_IRQHandler+0x164>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <USART1_IRQHandler+0x164>)
 800334c:	f023 0320 	bic.w	r3, r3, #32
 8003350:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <USART1_IRQHandler+0x12e>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <USART1_IRQHandler+0x12e>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003374:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <USART1_IRQHandler+0x164>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <USART1_IRQHandler+0x164>)
 800337c:	f023 0310 	bic.w	r3, r3, #16
 8003380:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8003382:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <USART1_IRQHandler+0x168>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d010      	beq.n	80033b2 <USART1_IRQHandler+0x15e>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <USART1_IRQHandler+0x15e>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <USART1_IRQHandler+0x16c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80033a4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80033a6:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a03      	ldr	r2, [pc, #12]	@ (80033b8 <USART1_IRQHandler+0x164>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6013      	str	r3, [r2, #0]
		}
	}

}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40011000 	.word	0x40011000
 80033bc:	200006e8 	.word	0x200006e8
 80033c0:	200006d4 	.word	0x200006d4

080033c4 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <USART_Get_Instance_Number+0x6c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <USART_Get_Instance_Number+0x16>
 80033d6:	2300      	movs	r3, #0
 80033d8:	e024      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <USART_Get_Instance_Number+0x70>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <USART_Get_Instance_Number+0x24>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01d      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <USART_Get_Instance_Number+0x74>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <USART_Get_Instance_Number+0x32>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e016      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a10      	ldr	r2, [pc, #64]	@ (800343c <USART_Get_Instance_Number+0x78>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <USART_Get_Instance_Number+0x40>
 8003400:	2303      	movs	r3, #3
 8003402:	e00f      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0d      	ldr	r2, [pc, #52]	@ (8003440 <USART_Get_Instance_Number+0x7c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <USART_Get_Instance_Number+0x4e>
 800340e:	2304      	movs	r3, #4
 8003410:	e008      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a0b      	ldr	r2, [pc, #44]	@ (8003444 <USART_Get_Instance_Number+0x80>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <USART_Get_Instance_Number+0x5c>
 800341c:	2305      	movs	r3, #5
 800341e:	e001      	b.n	8003424 <USART_Get_Instance_Number+0x60>
	else {return -1;}
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40011000 	.word	0x40011000
 8003434:	40004400 	.word	0x40004400
 8003438:	40004800 	.word	0x40004800
 800343c:	40004c00 	.word	0x40004c00
 8003440:	40005000 	.word	0x40005000
 8003444:	40011400 	.word	0x40011400

08003448 <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8003450:	2200      	movs	r2, #0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 8003456:	2200      	movs	r2, #0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003462:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8003464:	2200      	movs	r2, #0
 8003466:	2300      	movs	r3, #0
 8003468:	4313      	orrs	r3, r2
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8003470:	2300      	movs	r3, #0
 8003472:	b2da      	uxtb	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	739a      	strb	r2, [r3, #14]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <USART_Clock_Enable+0xac>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d106      	bne.n	80034a4 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8003496:	4b27      	ldr	r3, [pc, #156]	@ (8003534 <USART_Clock_Enable+0xb0>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	4a26      	ldr	r2, [pc, #152]	@ (8003534 <USART_Clock_Enable+0xb0>)
 800349c:	f043 0310 	orr.w	r3, r3, #16
 80034a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a2:	e03e      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <USART_Clock_Enable+0xb4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d106      	bne.n	80034bc <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a20      	ldr	r2, [pc, #128]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	e032      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <USART_Clock_Enable+0xb8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d106      	bne.n	80034d4 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80034c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d2:	e026      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	@ (8003540 <USART_Clock_Enable+0xbc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d106      	bne.n	80034ec <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	e01a      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	@ (8003544 <USART_Clock_Enable+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d106      	bne.n	8003504 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003534 <USART_Clock_Enable+0xb0>)
 80034fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003500:	6413      	str	r3, [r2, #64]	@ 0x40
 8003502:	e00e      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <USART_Clock_Enable+0xc4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d106      	bne.n	800351c <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <USART_Clock_Enable+0xb0>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <USART_Clock_Enable+0xb0>)
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6453      	str	r3, [r2, #68]	@ 0x44
 800351a:	e002      	b.n	8003522 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	e000      	b.n	8003524 <USART_Clock_Enable+0xa0>
	}
	return 1;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40011000 	.word	0x40011000
 8003534:	40023800 	.word	0x40023800
 8003538:	40004400 	.word	0x40004400
 800353c:	40004800 	.word	0x40004800
 8003540:	40004c00 	.word	0x40004c00
 8003544:	40005000 	.word	0x40005000
 8003548:	40011400 	.word	0x40011400

0800354c <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af04      	add	r7, sp, #16
 8003552:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4aa4      	ldr	r2, [pc, #656]	@ (80037ec <PIN_Setup+0x2a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	f040 8112 	bne.w	8003784 <PIN_Setup+0x238>
	{
		__usart_1_config__ = config;
 8003560:	4aa3      	ldr	r2, [pc, #652]	@ (80037f0 <PIN_Setup+0x2a4>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]

		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7a1b      	ldrb	r3, [r3, #8]
 800356a:	2201      	movs	r2, #1
 800356c:	4293      	cmp	r3, r2
 800356e:	d00f      	beq.n	8003590 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7a1b      	ldrb	r3, [r3, #8]
 8003574:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003576:	4293      	cmp	r3, r2
 8003578:	d00a      	beq.n	8003590 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7a1b      	ldrb	r3, [r3, #8]
 800357e:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d005      	beq.n	8003590 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	7a1b      	ldrb	r3, [r3, #8]
 8003588:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800358a:	4293      	cmp	r3, r2
 800358c:	f040 80bf 	bne.w	800370e <PIN_Setup+0x1c2>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7a5b      	ldrb	r3, [r3, #9]
 8003594:	2209      	movs	r2, #9
 8003596:	4293      	cmp	r3, r2
 8003598:	d10f      	bne.n	80035ba <PIN_Setup+0x6e>
 800359a:	2009      	movs	r0, #9
 800359c:	2402      	movs	r4, #2
 800359e:	2500      	movs	r5, #0
 80035a0:	2302      	movs	r3, #2
 80035a2:	2200      	movs	r2, #0
 80035a4:	2107      	movs	r1, #7
 80035a6:	9102      	str	r1, [sp, #8]
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	462b      	mov	r3, r5
 80035ae:	4622      	mov	r2, r4
 80035b0:	4601      	mov	r1, r0
 80035b2:	4890      	ldr	r0, [pc, #576]	@ (80037f4 <PIN_Setup+0x2a8>)
 80035b4:	f7ff fbc0 	bl	8002d38 <GPIO_Pin_Init>
 80035b8:	e013      	b.n	80035e2 <PIN_Setup+0x96>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7a5b      	ldrb	r3, [r3, #9]
 80035be:	2206      	movs	r2, #6
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10e      	bne.n	80035e2 <PIN_Setup+0x96>
 80035c4:	2006      	movs	r0, #6
 80035c6:	2402      	movs	r4, #2
 80035c8:	2500      	movs	r5, #0
 80035ca:	2302      	movs	r3, #2
 80035cc:	2200      	movs	r2, #0
 80035ce:	2107      	movs	r1, #7
 80035d0:	9102      	str	r1, [sp, #8]
 80035d2:	9201      	str	r2, [sp, #4]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	462b      	mov	r3, r5
 80035d8:	4622      	mov	r2, r4
 80035da:	4601      	mov	r1, r0
 80035dc:	4886      	ldr	r0, [pc, #536]	@ (80037f8 <PIN_Setup+0x2ac>)
 80035de:	f7ff fbab 	bl	8002d38 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7a9b      	ldrb	r3, [r3, #10]
 80035e6:	220a      	movs	r2, #10
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10f      	bne.n	800360c <PIN_Setup+0xc0>
 80035ec:	200a      	movs	r0, #10
 80035ee:	2402      	movs	r4, #2
 80035f0:	2500      	movs	r5, #0
 80035f2:	2302      	movs	r3, #2
 80035f4:	2200      	movs	r2, #0
 80035f6:	2107      	movs	r1, #7
 80035f8:	9102      	str	r1, [sp, #8]
 80035fa:	9201      	str	r2, [sp, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	462b      	mov	r3, r5
 8003600:	4622      	mov	r2, r4
 8003602:	4601      	mov	r1, r0
 8003604:	487b      	ldr	r0, [pc, #492]	@ (80037f4 <PIN_Setup+0x2a8>)
 8003606:	f7ff fb97 	bl	8002d38 <GPIO_Pin_Init>
 800360a:	e013      	b.n	8003634 <PIN_Setup+0xe8>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7a9b      	ldrb	r3, [r3, #10]
 8003610:	2207      	movs	r2, #7
 8003612:	4293      	cmp	r3, r2
 8003614:	d10e      	bne.n	8003634 <PIN_Setup+0xe8>
 8003616:	2007      	movs	r0, #7
 8003618:	2402      	movs	r4, #2
 800361a:	2500      	movs	r5, #0
 800361c:	2302      	movs	r3, #2
 800361e:	2200      	movs	r2, #0
 8003620:	2107      	movs	r1, #7
 8003622:	9102      	str	r1, [sp, #8]
 8003624:	9201      	str	r2, [sp, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	462b      	mov	r3, r5
 800362a:	4622      	mov	r2, r4
 800362c:	4601      	mov	r1, r0
 800362e:	4872      	ldr	r0, [pc, #456]	@ (80037f8 <PIN_Setup+0x2ac>)
 8003630:	f7ff fb82 	bl	8002d38 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7a1b      	ldrb	r3, [r3, #8]
 8003638:	2202      	movs	r2, #2
 800363a:	4293      	cmp	r3, r2
 800363c:	d113      	bne.n	8003666 <PIN_Setup+0x11a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7adb      	ldrb	r3, [r3, #11]
 8003642:	2208      	movs	r2, #8
 8003644:	4293      	cmp	r3, r2
 8003646:	d10e      	bne.n	8003666 <PIN_Setup+0x11a>
 8003648:	2008      	movs	r0, #8
 800364a:	2402      	movs	r4, #2
 800364c:	2500      	movs	r5, #0
 800364e:	2302      	movs	r3, #2
 8003650:	2200      	movs	r2, #0
 8003652:	2107      	movs	r1, #7
 8003654:	9102      	str	r1, [sp, #8]
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462b      	mov	r3, r5
 800365c:	4622      	mov	r2, r4
 800365e:	4601      	mov	r1, r0
 8003660:	4864      	ldr	r0, [pc, #400]	@ (80037f4 <PIN_Setup+0x2a8>)
 8003662:	f7ff fb69 	bl	8002d38 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7bdb      	ldrb	r3, [r3, #15]
 800366a:	2200      	movs	r2, #0
 800366c:	4293      	cmp	r3, r2
 800366e:	f000 851a 	beq.w	80040a6 <PIN_Setup+0xb5a>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7bdb      	ldrb	r3, [r3, #15]
 8003676:	2201      	movs	r2, #1
 8003678:	4293      	cmp	r3, r2
 800367a:	d10e      	bne.n	800369a <PIN_Setup+0x14e>
 800367c:	200b      	movs	r0, #11
 800367e:	2402      	movs	r4, #2
 8003680:	2500      	movs	r5, #0
 8003682:	2302      	movs	r3, #2
 8003684:	2200      	movs	r2, #0
 8003686:	2107      	movs	r1, #7
 8003688:	9102      	str	r1, [sp, #8]
 800368a:	9201      	str	r2, [sp, #4]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462b      	mov	r3, r5
 8003690:	4622      	mov	r2, r4
 8003692:	4601      	mov	r1, r0
 8003694:	4857      	ldr	r0, [pc, #348]	@ (80037f4 <PIN_Setup+0x2a8>)
 8003696:	f7ff fb4f 	bl	8002d38 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7bdb      	ldrb	r3, [r3, #15]
 800369e:	2202      	movs	r2, #2
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10e      	bne.n	80036c2 <PIN_Setup+0x176>
 80036a4:	200c      	movs	r0, #12
 80036a6:	2402      	movs	r4, #2
 80036a8:	2500      	movs	r5, #0
 80036aa:	2302      	movs	r3, #2
 80036ac:	2200      	movs	r2, #0
 80036ae:	2107      	movs	r1, #7
 80036b0:	9102      	str	r1, [sp, #8]
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	462b      	mov	r3, r5
 80036b8:	4622      	mov	r2, r4
 80036ba:	4601      	mov	r1, r0
 80036bc:	484d      	ldr	r0, [pc, #308]	@ (80037f4 <PIN_Setup+0x2a8>)
 80036be:	f7ff fb3b 	bl	8002d38 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7bdb      	ldrb	r3, [r3, #15]
 80036c6:	2203      	movs	r2, #3
 80036c8:	4293      	cmp	r3, r2
 80036ca:	f040 84ec 	bne.w	80040a6 <PIN_Setup+0xb5a>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036ce:	200b      	movs	r0, #11
 80036d0:	2402      	movs	r4, #2
 80036d2:	2500      	movs	r5, #0
 80036d4:	2302      	movs	r3, #2
 80036d6:	2200      	movs	r2, #0
 80036d8:	2107      	movs	r1, #7
 80036da:	9102      	str	r1, [sp, #8]
 80036dc:	9201      	str	r2, [sp, #4]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	462b      	mov	r3, r5
 80036e2:	4622      	mov	r2, r4
 80036e4:	4601      	mov	r1, r0
 80036e6:	4843      	ldr	r0, [pc, #268]	@ (80037f4 <PIN_Setup+0x2a8>)
 80036e8:	f7ff fb26 	bl	8002d38 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80036ec:	200c      	movs	r0, #12
 80036ee:	2402      	movs	r4, #2
 80036f0:	2500      	movs	r5, #0
 80036f2:	2302      	movs	r3, #2
 80036f4:	2200      	movs	r2, #0
 80036f6:	2107      	movs	r1, #7
 80036f8:	9102      	str	r1, [sp, #8]
 80036fa:	9201      	str	r2, [sp, #4]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	462b      	mov	r3, r5
 8003700:	4622      	mov	r2, r4
 8003702:	4601      	mov	r1, r0
 8003704:	483b      	ldr	r0, [pc, #236]	@ (80037f4 <PIN_Setup+0x2a8>)
 8003706:	f7ff fb17 	bl	8002d38 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800370a:	f000 bccc 	b.w	80040a6 <PIN_Setup+0xb5a>
				}
			}
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7a1b      	ldrb	r3, [r3, #8]
 8003712:	2206      	movs	r2, #6
 8003714:	4293      	cmp	r3, r2
 8003716:	d00a      	beq.n	800372e <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7a1b      	ldrb	r3, [r3, #8]
 800371c:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800371e:	4293      	cmp	r3, r2
 8003720:	d005      	beq.n	800372e <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7a1b      	ldrb	r3, [r3, #8]
 8003726:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003728:	4293      	cmp	r3, r2
 800372a:	f040 84c1 	bne.w	80040b0 <PIN_Setup+0xb64>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7a5b      	ldrb	r3, [r3, #9]
 8003732:	2209      	movs	r2, #9
 8003734:	4293      	cmp	r3, r2
 8003736:	d10e      	bne.n	8003756 <PIN_Setup+0x20a>
 8003738:	2009      	movs	r0, #9
 800373a:	2402      	movs	r4, #2
 800373c:	2500      	movs	r5, #0
 800373e:	2302      	movs	r3, #2
 8003740:	2200      	movs	r2, #0
 8003742:	2107      	movs	r1, #7
 8003744:	9102      	str	r1, [sp, #8]
 8003746:	9201      	str	r2, [sp, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	462b      	mov	r3, r5
 800374c:	4622      	mov	r2, r4
 800374e:	4601      	mov	r1, r0
 8003750:	4828      	ldr	r0, [pc, #160]	@ (80037f4 <PIN_Setup+0x2a8>)
 8003752:	f7ff faf1 	bl	8002d38 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a1b      	ldrb	r3, [r3, #8]
 800375a:	2207      	movs	r2, #7
 800375c:	4293      	cmp	r3, r2
 800375e:	f040 84a7 	bne.w	80040b0 <PIN_Setup+0xb64>
 8003762:	2008      	movs	r0, #8
 8003764:	2402      	movs	r4, #2
 8003766:	2500      	movs	r5, #0
 8003768:	2302      	movs	r3, #2
 800376a:	2200      	movs	r2, #0
 800376c:	2107      	movs	r1, #7
 800376e:	9102      	str	r1, [sp, #8]
 8003770:	9201      	str	r2, [sp, #4]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	462b      	mov	r3, r5
 8003776:	4622      	mov	r2, r4
 8003778:	4601      	mov	r1, r0
 800377a:	481e      	ldr	r0, [pc, #120]	@ (80037f4 <PIN_Setup+0x2a8>)
 800377c:	f7ff fadc 	bl	8002d38 <GPIO_Pin_Init>

		}
	}


}
 8003780:	f000 bc96 	b.w	80040b0 <PIN_Setup+0xb64>
	else if(config->Port == USART2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <PIN_Setup+0x2b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f040 8182 	bne.w	8003a94 <PIN_Setup+0x548>
		__usart_2_config__ = config;
 8003790:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <PIN_Setup+0x2b4>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7a1b      	ldrb	r3, [r3, #8]
 800379a:	2201      	movs	r2, #1
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7a1b      	ldrb	r3, [r3, #8]
 80037a4:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00a      	beq.n	80037c0 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7a1b      	ldrb	r3, [r3, #8]
 80037ae:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d005      	beq.n	80037c0 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.LIN) )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7a1b      	ldrb	r3, [r3, #8]
 80037b8:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f040 80fc 	bne.w	80039b8 <PIN_Setup+0x46c>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7a5b      	ldrb	r3, [r3, #9]
 80037c4:	2202      	movs	r2, #2
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11c      	bne.n	8003804 <PIN_Setup+0x2b8>
 80037ca:	2002      	movs	r0, #2
 80037cc:	2402      	movs	r4, #2
 80037ce:	2500      	movs	r5, #0
 80037d0:	2302      	movs	r3, #2
 80037d2:	2200      	movs	r2, #0
 80037d4:	2107      	movs	r1, #7
 80037d6:	9102      	str	r1, [sp, #8]
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	462b      	mov	r3, r5
 80037de:	4622      	mov	r2, r4
 80037e0:	4601      	mov	r1, r0
 80037e2:	4804      	ldr	r0, [pc, #16]	@ (80037f4 <PIN_Setup+0x2a8>)
 80037e4:	f7ff faa8 	bl	8002d38 <GPIO_Pin_Init>
 80037e8:	e020      	b.n	800382c <PIN_Setup+0x2e0>
 80037ea:	bf00      	nop
 80037ec:	40011000 	.word	0x40011000
 80037f0:	200006d4 	.word	0x200006d4
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40004400 	.word	0x40004400
 8003800:	200006d8 	.word	0x200006d8
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7a5b      	ldrb	r3, [r3, #9]
 8003808:	2205      	movs	r2, #5
 800380a:	4293      	cmp	r3, r2
 800380c:	d10e      	bne.n	800382c <PIN_Setup+0x2e0>
 800380e:	2005      	movs	r0, #5
 8003810:	2402      	movs	r4, #2
 8003812:	2500      	movs	r5, #0
 8003814:	2302      	movs	r3, #2
 8003816:	2200      	movs	r2, #0
 8003818:	2107      	movs	r1, #7
 800381a:	9102      	str	r1, [sp, #8]
 800381c:	9201      	str	r2, [sp, #4]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	462b      	mov	r3, r5
 8003822:	4622      	mov	r2, r4
 8003824:	4601      	mov	r1, r0
 8003826:	4899      	ldr	r0, [pc, #612]	@ (8003a8c <PIN_Setup+0x540>)
 8003828:	f7ff fa86 	bl	8002d38 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7a9b      	ldrb	r3, [r3, #10]
 8003830:	2203      	movs	r2, #3
 8003832:	4293      	cmp	r3, r2
 8003834:	d10f      	bne.n	8003856 <PIN_Setup+0x30a>
 8003836:	2003      	movs	r0, #3
 8003838:	2402      	movs	r4, #2
 800383a:	2500      	movs	r5, #0
 800383c:	2302      	movs	r3, #2
 800383e:	2200      	movs	r2, #0
 8003840:	2107      	movs	r1, #7
 8003842:	9102      	str	r1, [sp, #8]
 8003844:	9201      	str	r2, [sp, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	462b      	mov	r3, r5
 800384a:	4622      	mov	r2, r4
 800384c:	4601      	mov	r1, r0
 800384e:	4890      	ldr	r0, [pc, #576]	@ (8003a90 <PIN_Setup+0x544>)
 8003850:	f7ff fa72 	bl	8002d38 <GPIO_Pin_Init>
 8003854:	e013      	b.n	800387e <PIN_Setup+0x332>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7a9b      	ldrb	r3, [r3, #10]
 800385a:	2206      	movs	r2, #6
 800385c:	4293      	cmp	r3, r2
 800385e:	d10e      	bne.n	800387e <PIN_Setup+0x332>
 8003860:	2006      	movs	r0, #6
 8003862:	2402      	movs	r4, #2
 8003864:	2500      	movs	r5, #0
 8003866:	2302      	movs	r3, #2
 8003868:	2200      	movs	r2, #0
 800386a:	2107      	movs	r1, #7
 800386c:	9102      	str	r1, [sp, #8]
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	462b      	mov	r3, r5
 8003874:	4622      	mov	r2, r4
 8003876:	4601      	mov	r1, r0
 8003878:	4884      	ldr	r0, [pc, #528]	@ (8003a8c <PIN_Setup+0x540>)
 800387a:	f7ff fa5d 	bl	8002d38 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7a1b      	ldrb	r3, [r3, #8]
 8003882:	2202      	movs	r2, #2
 8003884:	4293      	cmp	r3, r2
 8003886:	d128      	bne.n	80038da <PIN_Setup+0x38e>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7adb      	ldrb	r3, [r3, #11]
 800388c:	2204      	movs	r2, #4
 800388e:	4293      	cmp	r3, r2
 8003890:	d10f      	bne.n	80038b2 <PIN_Setup+0x366>
 8003892:	2004      	movs	r0, #4
 8003894:	2402      	movs	r4, #2
 8003896:	2500      	movs	r5, #0
 8003898:	2302      	movs	r3, #2
 800389a:	2200      	movs	r2, #0
 800389c:	2107      	movs	r1, #7
 800389e:	9102      	str	r1, [sp, #8]
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462b      	mov	r3, r5
 80038a6:	4622      	mov	r2, r4
 80038a8:	4601      	mov	r1, r0
 80038aa:	4879      	ldr	r0, [pc, #484]	@ (8003a90 <PIN_Setup+0x544>)
 80038ac:	f7ff fa44 	bl	8002d38 <GPIO_Pin_Init>
 80038b0:	e013      	b.n	80038da <PIN_Setup+0x38e>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7adb      	ldrb	r3, [r3, #11]
 80038b6:	2207      	movs	r2, #7
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10e      	bne.n	80038da <PIN_Setup+0x38e>
 80038bc:	2007      	movs	r0, #7
 80038be:	2402      	movs	r4, #2
 80038c0:	2500      	movs	r5, #0
 80038c2:	2302      	movs	r3, #2
 80038c4:	2200      	movs	r2, #0
 80038c6:	2107      	movs	r1, #7
 80038c8:	9102      	str	r1, [sp, #8]
 80038ca:	9201      	str	r2, [sp, #4]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	462b      	mov	r3, r5
 80038d0:	4622      	mov	r2, r4
 80038d2:	4601      	mov	r1, r0
 80038d4:	486e      	ldr	r0, [pc, #440]	@ (8003a90 <PIN_Setup+0x544>)
 80038d6:	f7ff fa2f 	bl	8002d38 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7bdb      	ldrb	r3, [r3, #15]
 80038de:	2200      	movs	r2, #0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d105      	bne.n	80038f0 <PIN_Setup+0x3a4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7bdb      	ldrb	r3, [r3, #15]
 80038e8:	2203      	movs	r2, #3
 80038ea:	4293      	cmp	r3, r2
 80038ec:	f040 83dd 	bne.w	80040aa <PIN_Setup+0xb5e>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7bdb      	ldrb	r3, [r3, #15]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d128      	bne.n	800394c <PIN_Setup+0x400>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7adb      	ldrb	r3, [r3, #11]
 80038fe:	2200      	movs	r2, #0
 8003900:	4293      	cmp	r3, r2
 8003902:	d10f      	bne.n	8003924 <PIN_Setup+0x3d8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003904:	2000      	movs	r0, #0
 8003906:	2402      	movs	r4, #2
 8003908:	2500      	movs	r5, #0
 800390a:	2302      	movs	r3, #2
 800390c:	2200      	movs	r2, #0
 800390e:	2107      	movs	r1, #7
 8003910:	9102      	str	r1, [sp, #8]
 8003912:	9201      	str	r2, [sp, #4]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	462b      	mov	r3, r5
 8003918:	4622      	mov	r2, r4
 800391a:	4601      	mov	r1, r0
 800391c:	485c      	ldr	r0, [pc, #368]	@ (8003a90 <PIN_Setup+0x544>)
 800391e:	f7ff fa0b 	bl	8002d38 <GPIO_Pin_Init>
 8003922:	e013      	b.n	800394c <PIN_Setup+0x400>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7adb      	ldrb	r3, [r3, #11]
 8003928:	2203      	movs	r2, #3
 800392a:	4293      	cmp	r3, r2
 800392c:	d10e      	bne.n	800394c <PIN_Setup+0x400>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800392e:	2003      	movs	r0, #3
 8003930:	2402      	movs	r4, #2
 8003932:	2500      	movs	r5, #0
 8003934:	2302      	movs	r3, #2
 8003936:	2200      	movs	r2, #0
 8003938:	2107      	movs	r1, #7
 800393a:	9102      	str	r1, [sp, #8]
 800393c:	9201      	str	r2, [sp, #4]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	462b      	mov	r3, r5
 8003942:	4622      	mov	r2, r4
 8003944:	4601      	mov	r1, r0
 8003946:	4851      	ldr	r0, [pc, #324]	@ (8003a8c <PIN_Setup+0x540>)
 8003948:	f7ff f9f6 	bl	8002d38 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7bdb      	ldrb	r3, [r3, #15]
 8003950:	2202      	movs	r2, #2
 8003952:	4293      	cmp	r3, r2
 8003954:	d005      	beq.n	8003962 <PIN_Setup+0x416>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7bdb      	ldrb	r3, [r3, #15]
 800395a:	2203      	movs	r2, #3
 800395c:	4293      	cmp	r3, r2
 800395e:	f040 83a4 	bne.w	80040aa <PIN_Setup+0xb5e>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7adb      	ldrb	r3, [r3, #11]
 8003966:	2201      	movs	r2, #1
 8003968:	4293      	cmp	r3, r2
 800396a:	d10f      	bne.n	800398c <PIN_Setup+0x440>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800396c:	2001      	movs	r0, #1
 800396e:	2402      	movs	r4, #2
 8003970:	2500      	movs	r5, #0
 8003972:	2302      	movs	r3, #2
 8003974:	2200      	movs	r2, #0
 8003976:	2107      	movs	r1, #7
 8003978:	9102      	str	r1, [sp, #8]
 800397a:	9201      	str	r2, [sp, #4]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	462b      	mov	r3, r5
 8003980:	4622      	mov	r2, r4
 8003982:	4601      	mov	r1, r0
 8003984:	4842      	ldr	r0, [pc, #264]	@ (8003a90 <PIN_Setup+0x544>)
 8003986:	f7ff f9d7 	bl	8002d38 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800398a:	e38e      	b.n	80040aa <PIN_Setup+0xb5e>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7adb      	ldrb	r3, [r3, #11]
 8003990:	2204      	movs	r2, #4
 8003992:	4293      	cmp	r3, r2
 8003994:	f040 8389 	bne.w	80040aa <PIN_Setup+0xb5e>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003998:	2004      	movs	r0, #4
 800399a:	2402      	movs	r4, #2
 800399c:	2500      	movs	r5, #0
 800399e:	2302      	movs	r3, #2
 80039a0:	2200      	movs	r2, #0
 80039a2:	2107      	movs	r1, #7
 80039a4:	9102      	str	r1, [sp, #8]
 80039a6:	9201      	str	r2, [sp, #4]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	462b      	mov	r3, r5
 80039ac:	4622      	mov	r2, r4
 80039ae:	4601      	mov	r1, r0
 80039b0:	4836      	ldr	r0, [pc, #216]	@ (8003a8c <PIN_Setup+0x540>)
 80039b2:	f7ff f9c1 	bl	8002d38 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80039b6:	e378      	b.n	80040aa <PIN_Setup+0xb5e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7a1b      	ldrb	r3, [r3, #8]
 80039bc:	2206      	movs	r2, #6
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00a      	beq.n	80039d8 <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7a1b      	ldrb	r3, [r3, #8]
 80039c6:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d005      	beq.n	80039d8 <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	7a1b      	ldrb	r3, [r3, #8]
 80039d0:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f040 836c 	bne.w	80040b0 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7a5b      	ldrb	r3, [r3, #9]
 80039dc:	2202      	movs	r2, #2
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10f      	bne.n	8003a02 <PIN_Setup+0x4b6>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80039e2:	2002      	movs	r0, #2
 80039e4:	2402      	movs	r4, #2
 80039e6:	2500      	movs	r5, #0
 80039e8:	2302      	movs	r3, #2
 80039ea:	2200      	movs	r2, #0
 80039ec:	2107      	movs	r1, #7
 80039ee:	9102      	str	r1, [sp, #8]
 80039f0:	9201      	str	r2, [sp, #4]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	462b      	mov	r3, r5
 80039f6:	4622      	mov	r2, r4
 80039f8:	4601      	mov	r1, r0
 80039fa:	4825      	ldr	r0, [pc, #148]	@ (8003a90 <PIN_Setup+0x544>)
 80039fc:	f7ff f99c 	bl	8002d38 <GPIO_Pin_Init>
 8003a00:	e013      	b.n	8003a2a <PIN_Setup+0x4de>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7a5b      	ldrb	r3, [r3, #9]
 8003a06:	2205      	movs	r2, #5
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d10e      	bne.n	8003a2a <PIN_Setup+0x4de>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a0c:	2005      	movs	r0, #5
 8003a0e:	2402      	movs	r4, #2
 8003a10:	2500      	movs	r5, #0
 8003a12:	2302      	movs	r3, #2
 8003a14:	2200      	movs	r2, #0
 8003a16:	2107      	movs	r1, #7
 8003a18:	9102      	str	r1, [sp, #8]
 8003a1a:	9201      	str	r2, [sp, #4]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	462b      	mov	r3, r5
 8003a20:	4622      	mov	r2, r4
 8003a22:	4601      	mov	r1, r0
 8003a24:	4819      	ldr	r0, [pc, #100]	@ (8003a8c <PIN_Setup+0x540>)
 8003a26:	f7ff f987 	bl	8002d38 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7a1b      	ldrb	r3, [r3, #8]
 8003a2e:	2207      	movs	r2, #7
 8003a30:	4293      	cmp	r3, r2
 8003a32:	f040 833d 	bne.w	80040b0 <PIN_Setup+0xb64>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7adb      	ldrb	r3, [r3, #11]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10f      	bne.n	8003a60 <PIN_Setup+0x514>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a40:	2004      	movs	r0, #4
 8003a42:	2402      	movs	r4, #2
 8003a44:	2500      	movs	r5, #0
 8003a46:	2302      	movs	r3, #2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2107      	movs	r1, #7
 8003a4c:	9102      	str	r1, [sp, #8]
 8003a4e:	9201      	str	r2, [sp, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	462b      	mov	r3, r5
 8003a54:	4622      	mov	r2, r4
 8003a56:	4601      	mov	r1, r0
 8003a58:	480d      	ldr	r0, [pc, #52]	@ (8003a90 <PIN_Setup+0x544>)
 8003a5a:	f7ff f96d 	bl	8002d38 <GPIO_Pin_Init>
}
 8003a5e:	e327      	b.n	80040b0 <PIN_Setup+0xb64>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7adb      	ldrb	r3, [r3, #11]
 8003a64:	2207      	movs	r2, #7
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f040 8322 	bne.w	80040b0 <PIN_Setup+0xb64>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a6c:	2007      	movs	r0, #7
 8003a6e:	2402      	movs	r4, #2
 8003a70:	2500      	movs	r5, #0
 8003a72:	2302      	movs	r3, #2
 8003a74:	2200      	movs	r2, #0
 8003a76:	2107      	movs	r1, #7
 8003a78:	9102      	str	r1, [sp, #8]
 8003a7a:	9201      	str	r2, [sp, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	4622      	mov	r2, r4
 8003a82:	4601      	mov	r1, r0
 8003a84:	4802      	ldr	r0, [pc, #8]	@ (8003a90 <PIN_Setup+0x544>)
 8003a86:	f7ff f957 	bl	8002d38 <GPIO_Pin_Init>
}
 8003a8a:	e311      	b.n	80040b0 <PIN_Setup+0xb64>
 8003a8c:	40020c00 	.word	0x40020c00
 8003a90:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a9a      	ldr	r2, [pc, #616]	@ (8003d04 <PIN_Setup+0x7b8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f040 81b5 	bne.w	8003e0a <PIN_Setup+0x8be>
		__usart_3_config__ = config;
 8003aa0:	4a99      	ldr	r2, [pc, #612]	@ (8003d08 <PIN_Setup+0x7bc>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7a1b      	ldrb	r3, [r3, #8]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00f      	beq.n	8003ad0 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7a1b      	ldrb	r3, [r3, #8]
 8003ab4:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00a      	beq.n	8003ad0 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7a1b      	ldrb	r3, [r3, #8]
 8003abe:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d005      	beq.n	8003ad0 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7a1b      	ldrb	r3, [r3, #8]
 8003ac8:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f040 8124 	bne.w	8003d18 <PIN_Setup+0x7cc>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7a5b      	ldrb	r3, [r3, #9]
 8003ad4:	220b      	movs	r2, #11
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10f      	bne.n	8003afa <PIN_Setup+0x5ae>
 8003ada:	200b      	movs	r0, #11
 8003adc:	2402      	movs	r4, #2
 8003ade:	2500      	movs	r5, #0
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2107      	movs	r1, #7
 8003ae6:	9102      	str	r1, [sp, #8]
 8003ae8:	9201      	str	r2, [sp, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	462b      	mov	r3, r5
 8003aee:	4622      	mov	r2, r4
 8003af0:	4601      	mov	r1, r0
 8003af2:	4886      	ldr	r0, [pc, #536]	@ (8003d0c <PIN_Setup+0x7c0>)
 8003af4:	f7ff f920 	bl	8002d38 <GPIO_Pin_Init>
 8003af8:	e028      	b.n	8003b4c <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7a5b      	ldrb	r3, [r3, #9]
 8003afe:	220a      	movs	r2, #10
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10f      	bne.n	8003b24 <PIN_Setup+0x5d8>
 8003b04:	200a      	movs	r0, #10
 8003b06:	2402      	movs	r4, #2
 8003b08:	2500      	movs	r5, #0
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2107      	movs	r1, #7
 8003b10:	9102      	str	r1, [sp, #8]
 8003b12:	9201      	str	r2, [sp, #4]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	462b      	mov	r3, r5
 8003b18:	4622      	mov	r2, r4
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	487c      	ldr	r0, [pc, #496]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003b1e:	f7ff f90b 	bl	8002d38 <GPIO_Pin_Init>
 8003b22:	e013      	b.n	8003b4c <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7a5b      	ldrb	r3, [r3, #9]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10e      	bne.n	8003b4c <PIN_Setup+0x600>
 8003b2e:	2008      	movs	r0, #8
 8003b30:	2402      	movs	r4, #2
 8003b32:	2500      	movs	r5, #0
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	2107      	movs	r1, #7
 8003b3a:	9102      	str	r1, [sp, #8]
 8003b3c:	9201      	str	r2, [sp, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	462b      	mov	r3, r5
 8003b42:	4622      	mov	r2, r4
 8003b44:	4601      	mov	r1, r0
 8003b46:	4872      	ldr	r0, [pc, #456]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003b48:	f7ff f8f6 	bl	8002d38 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7a9b      	ldrb	r3, [r3, #10]
 8003b50:	220a      	movs	r2, #10
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10f      	bne.n	8003b76 <PIN_Setup+0x62a>
 8003b56:	200a      	movs	r0, #10
 8003b58:	2402      	movs	r4, #2
 8003b5a:	2500      	movs	r5, #0
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2107      	movs	r1, #7
 8003b62:	9102      	str	r1, [sp, #8]
 8003b64:	9201      	str	r2, [sp, #4]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	462b      	mov	r3, r5
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4601      	mov	r1, r0
 8003b6e:	4867      	ldr	r0, [pc, #412]	@ (8003d0c <PIN_Setup+0x7c0>)
 8003b70:	f7ff f8e2 	bl	8002d38 <GPIO_Pin_Init>
 8003b74:	e028      	b.n	8003bc8 <PIN_Setup+0x67c>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7a9b      	ldrb	r3, [r3, #10]
 8003b7a:	220b      	movs	r2, #11
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10f      	bne.n	8003ba0 <PIN_Setup+0x654>
 8003b80:	200b      	movs	r0, #11
 8003b82:	2402      	movs	r4, #2
 8003b84:	2500      	movs	r5, #0
 8003b86:	2302      	movs	r3, #2
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2107      	movs	r1, #7
 8003b8c:	9102      	str	r1, [sp, #8]
 8003b8e:	9201      	str	r2, [sp, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	462b      	mov	r3, r5
 8003b94:	4622      	mov	r2, r4
 8003b96:	4601      	mov	r1, r0
 8003b98:	485d      	ldr	r0, [pc, #372]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003b9a:	f7ff f8cd 	bl	8002d38 <GPIO_Pin_Init>
 8003b9e:	e013      	b.n	8003bc8 <PIN_Setup+0x67c>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7a5b      	ldrb	r3, [r3, #9]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10e      	bne.n	8003bc8 <PIN_Setup+0x67c>
 8003baa:	2008      	movs	r0, #8
 8003bac:	2402      	movs	r4, #2
 8003bae:	2500      	movs	r5, #0
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2107      	movs	r1, #7
 8003bb6:	9102      	str	r1, [sp, #8]
 8003bb8:	9201      	str	r2, [sp, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4601      	mov	r1, r0
 8003bc2:	4853      	ldr	r0, [pc, #332]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003bc4:	f7ff f8b8 	bl	8002d38 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7a1b      	ldrb	r3, [r3, #8]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d128      	bne.n	8003c24 <PIN_Setup+0x6d8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7adb      	ldrb	r3, [r3, #11]
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10f      	bne.n	8003bfc <PIN_Setup+0x6b0>
 8003bdc:	200c      	movs	r0, #12
 8003bde:	2402      	movs	r4, #2
 8003be0:	2500      	movs	r5, #0
 8003be2:	2302      	movs	r3, #2
 8003be4:	2200      	movs	r2, #0
 8003be6:	2107      	movs	r1, #7
 8003be8:	9102      	str	r1, [sp, #8]
 8003bea:	9201      	str	r2, [sp, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	462b      	mov	r3, r5
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4846      	ldr	r0, [pc, #280]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003bf6:	f7ff f89f 	bl	8002d38 <GPIO_Pin_Init>
 8003bfa:	e013      	b.n	8003c24 <PIN_Setup+0x6d8>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7adb      	ldrb	r3, [r3, #11]
 8003c00:	220a      	movs	r2, #10
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10e      	bne.n	8003c24 <PIN_Setup+0x6d8>
 8003c06:	200a      	movs	r0, #10
 8003c08:	2402      	movs	r4, #2
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2107      	movs	r1, #7
 8003c12:	9102      	str	r1, [sp, #8]
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	462b      	mov	r3, r5
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4601      	mov	r1, r0
 8003c1e:	483d      	ldr	r0, [pc, #244]	@ (8003d14 <PIN_Setup+0x7c8>)
 8003c20:	f7ff f88a 	bl	8002d38 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7bdb      	ldrb	r3, [r3, #15]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	f000 823f 	beq.w	80040ae <PIN_Setup+0xb62>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7bdb      	ldrb	r3, [r3, #15]
 8003c34:	2201      	movs	r2, #1
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <PIN_Setup+0x6f8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7bdb      	ldrb	r3, [r3, #15]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d128      	bne.n	8003c96 <PIN_Setup+0x74a>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7adb      	ldrb	r3, [r3, #11]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10f      	bne.n	8003c6e <PIN_Setup+0x722>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	2402      	movs	r4, #2
 8003c52:	2500      	movs	r5, #0
 8003c54:	2302      	movs	r3, #2
 8003c56:	2200      	movs	r2, #0
 8003c58:	2107      	movs	r1, #7
 8003c5a:	9102      	str	r1, [sp, #8]
 8003c5c:	9201      	str	r2, [sp, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	462b      	mov	r3, r5
 8003c62:	4622      	mov	r2, r4
 8003c64:	4601      	mov	r1, r0
 8003c66:	482a      	ldr	r0, [pc, #168]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003c68:	f7ff f866 	bl	8002d38 <GPIO_Pin_Init>
 8003c6c:	e013      	b.n	8003c96 <PIN_Setup+0x74a>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7adb      	ldrb	r3, [r3, #11]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10e      	bne.n	8003c96 <PIN_Setup+0x74a>
 8003c78:	2003      	movs	r0, #3
 8003c7a:	2402      	movs	r4, #2
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	2302      	movs	r3, #2
 8003c80:	2200      	movs	r2, #0
 8003c82:	2107      	movs	r1, #7
 8003c84:	9102      	str	r1, [sp, #8]
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4601      	mov	r1, r0
 8003c90:	4820      	ldr	r0, [pc, #128]	@ (8003d14 <PIN_Setup+0x7c8>)
 8003c92:	f7ff f851 	bl	8002d38 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7bdb      	ldrb	r3, [r3, #15]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d005      	beq.n	8003cac <PIN_Setup+0x760>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7bdb      	ldrb	r3, [r3, #15]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f040 8201 	bne.w	80040ae <PIN_Setup+0xb62>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7adb      	ldrb	r3, [r3, #11]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10f      	bne.n	8003cd6 <PIN_Setup+0x78a>
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	2402      	movs	r4, #2
 8003cba:	2500      	movs	r5, #0
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2107      	movs	r1, #7
 8003cc2:	9102      	str	r1, [sp, #8]
 8003cc4:	9201      	str	r2, [sp, #4]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	462b      	mov	r3, r5
 8003cca:	4622      	mov	r2, r4
 8003ccc:	4601      	mov	r1, r0
 8003cce:	4810      	ldr	r0, [pc, #64]	@ (8003d10 <PIN_Setup+0x7c4>)
 8003cd0:	f7ff f832 	bl	8002d38 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003cd4:	e1eb      	b.n	80040ae <PIN_Setup+0xb62>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7adb      	ldrb	r3, [r3, #11]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f040 81e6 	bne.w	80040ae <PIN_Setup+0xb62>
 8003ce2:	2004      	movs	r0, #4
 8003ce4:	2402      	movs	r4, #2
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	2107      	movs	r1, #7
 8003cee:	9102      	str	r1, [sp, #8]
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4806      	ldr	r0, [pc, #24]	@ (8003d14 <PIN_Setup+0x7c8>)
 8003cfc:	f7ff f81c 	bl	8002d38 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003d00:	e1d5      	b.n	80040ae <PIN_Setup+0xb62>
 8003d02:	bf00      	nop
 8003d04:	40004800 	.word	0x40004800
 8003d08:	200006dc 	.word	0x200006dc
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020c00 	.word	0x40020c00
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7a1b      	ldrb	r3, [r3, #8]
 8003d1c:	2206      	movs	r2, #6
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00a      	beq.n	8003d38 <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7a1b      	ldrb	r3, [r3, #8]
 8003d26:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d005      	beq.n	8003d38 <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7a1b      	ldrb	r3, [r3, #8]
 8003d30:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f040 81bc 	bne.w	80040b0 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7a5b      	ldrb	r3, [r3, #9]
 8003d3c:	220b      	movs	r2, #11
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10f      	bne.n	8003d62 <PIN_Setup+0x816>
 8003d42:	200b      	movs	r0, #11
 8003d44:	2402      	movs	r4, #2
 8003d46:	2500      	movs	r5, #0
 8003d48:	2302      	movs	r3, #2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2107      	movs	r1, #7
 8003d4e:	9102      	str	r1, [sp, #8]
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	462b      	mov	r3, r5
 8003d56:	4622      	mov	r2, r4
 8003d58:	4601      	mov	r1, r0
 8003d5a:	4883      	ldr	r0, [pc, #524]	@ (8003f68 <PIN_Setup+0xa1c>)
 8003d5c:	f7fe ffec 	bl	8002d38 <GPIO_Pin_Init>
 8003d60:	e028      	b.n	8003db4 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7a5b      	ldrb	r3, [r3, #9]
 8003d66:	220a      	movs	r2, #10
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10f      	bne.n	8003d8c <PIN_Setup+0x840>
 8003d6c:	200a      	movs	r0, #10
 8003d6e:	2402      	movs	r4, #2
 8003d70:	2500      	movs	r5, #0
 8003d72:	2302      	movs	r3, #2
 8003d74:	2200      	movs	r2, #0
 8003d76:	2107      	movs	r1, #7
 8003d78:	9102      	str	r1, [sp, #8]
 8003d7a:	9201      	str	r2, [sp, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	462b      	mov	r3, r5
 8003d80:	4622      	mov	r2, r4
 8003d82:	4601      	mov	r1, r0
 8003d84:	4879      	ldr	r0, [pc, #484]	@ (8003f6c <PIN_Setup+0xa20>)
 8003d86:	f7fe ffd7 	bl	8002d38 <GPIO_Pin_Init>
 8003d8a:	e013      	b.n	8003db4 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7a5b      	ldrb	r3, [r3, #9]
 8003d90:	2208      	movs	r2, #8
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10e      	bne.n	8003db4 <PIN_Setup+0x868>
 8003d96:	2008      	movs	r0, #8
 8003d98:	2402      	movs	r4, #2
 8003d9a:	2500      	movs	r5, #0
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2107      	movs	r1, #7
 8003da2:	9102      	str	r1, [sp, #8]
 8003da4:	9201      	str	r2, [sp, #4]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	462b      	mov	r3, r5
 8003daa:	4622      	mov	r2, r4
 8003dac:	4601      	mov	r1, r0
 8003dae:	486f      	ldr	r0, [pc, #444]	@ (8003f6c <PIN_Setup+0xa20>)
 8003db0:	f7fe ffc2 	bl	8002d38 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7adb      	ldrb	r3, [r3, #11]
 8003db8:	220c      	movs	r2, #12
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10f      	bne.n	8003dde <PIN_Setup+0x892>
 8003dbe:	200c      	movs	r0, #12
 8003dc0:	2402      	movs	r4, #2
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2107      	movs	r1, #7
 8003dca:	9102      	str	r1, [sp, #8]
 8003dcc:	9201      	str	r2, [sp, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	4865      	ldr	r0, [pc, #404]	@ (8003f6c <PIN_Setup+0xa20>)
 8003dd8:	f7fe ffae 	bl	8002d38 <GPIO_Pin_Init>
}
 8003ddc:	e168      	b.n	80040b0 <PIN_Setup+0xb64>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7adb      	ldrb	r3, [r3, #11]
 8003de2:	220a      	movs	r2, #10
 8003de4:	4293      	cmp	r3, r2
 8003de6:	f040 8163 	bne.w	80040b0 <PIN_Setup+0xb64>
 8003dea:	200a      	movs	r0, #10
 8003dec:	2402      	movs	r4, #2
 8003dee:	2500      	movs	r5, #0
 8003df0:	2302      	movs	r3, #2
 8003df2:	2200      	movs	r2, #0
 8003df4:	2107      	movs	r1, #7
 8003df6:	9102      	str	r1, [sp, #8]
 8003df8:	9201      	str	r2, [sp, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4601      	mov	r1, r0
 8003e02:	485b      	ldr	r0, [pc, #364]	@ (8003f70 <PIN_Setup+0xa24>)
 8003e04:	f7fe ff98 	bl	8002d38 <GPIO_Pin_Init>
}
 8003e08:	e152      	b.n	80040b0 <PIN_Setup+0xb64>
	else if(config -> Port == UART4)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a59      	ldr	r2, [pc, #356]	@ (8003f74 <PIN_Setup+0xa28>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d166      	bne.n	8003ee2 <PIN_Setup+0x996>
		__usart_4_config__ = config;
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <PIN_Setup+0xa2c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7a1b      	ldrb	r3, [r3, #8]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00a      	beq.n	8003e3a <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7a1b      	ldrb	r3, [r3, #8]
 8003e28:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d005      	beq.n	8003e3a <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.LIN))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7a1b      	ldrb	r3, [r3, #8]
 8003e32:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 813b 	bne.w	80040b0 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7a5b      	ldrb	r3, [r3, #9]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10f      	bne.n	8003e64 <PIN_Setup+0x918>
 8003e44:	2000      	movs	r0, #0
 8003e46:	2402      	movs	r4, #2
 8003e48:	2500      	movs	r5, #0
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2108      	movs	r1, #8
 8003e50:	9102      	str	r1, [sp, #8]
 8003e52:	9201      	str	r2, [sp, #4]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	462b      	mov	r3, r5
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	4842      	ldr	r0, [pc, #264]	@ (8003f68 <PIN_Setup+0xa1c>)
 8003e5e:	f7fe ff6b 	bl	8002d38 <GPIO_Pin_Init>
 8003e62:	e013      	b.n	8003e8c <PIN_Setup+0x940>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7a5b      	ldrb	r3, [r3, #9]
 8003e68:	220a      	movs	r2, #10
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10e      	bne.n	8003e8c <PIN_Setup+0x940>
 8003e6e:	200a      	movs	r0, #10
 8003e70:	2402      	movs	r4, #2
 8003e72:	2500      	movs	r5, #0
 8003e74:	2302      	movs	r3, #2
 8003e76:	2200      	movs	r2, #0
 8003e78:	2108      	movs	r1, #8
 8003e7a:	9102      	str	r1, [sp, #8]
 8003e7c:	9201      	str	r2, [sp, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462b      	mov	r3, r5
 8003e82:	4622      	mov	r2, r4
 8003e84:	4601      	mov	r1, r0
 8003e86:	483d      	ldr	r0, [pc, #244]	@ (8003f7c <PIN_Setup+0xa30>)
 8003e88:	f7fe ff56 	bl	8002d38 <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7a9b      	ldrb	r3, [r3, #10]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10f      	bne.n	8003eb6 <PIN_Setup+0x96a>
 8003e96:	2001      	movs	r0, #1
 8003e98:	2402      	movs	r4, #2
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	9102      	str	r1, [sp, #8]
 8003ea4:	9201      	str	r2, [sp, #4]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4601      	mov	r1, r0
 8003eae:	482e      	ldr	r0, [pc, #184]	@ (8003f68 <PIN_Setup+0xa1c>)
 8003eb0:	f7fe ff42 	bl	8002d38 <GPIO_Pin_Init>
}
 8003eb4:	e0fc      	b.n	80040b0 <PIN_Setup+0xb64>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7a9b      	ldrb	r3, [r3, #10]
 8003eba:	220b      	movs	r2, #11
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 80f7 	bne.w	80040b0 <PIN_Setup+0xb64>
 8003ec2:	200b      	movs	r0, #11
 8003ec4:	2402      	movs	r4, #2
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	2302      	movs	r3, #2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2108      	movs	r1, #8
 8003ece:	9102      	str	r1, [sp, #8]
 8003ed0:	9201      	str	r2, [sp, #4]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	4601      	mov	r1, r0
 8003eda:	4828      	ldr	r0, [pc, #160]	@ (8003f7c <PIN_Setup+0xa30>)
 8003edc:	f7fe ff2c 	bl	8002d38 <GPIO_Pin_Init>
}
 8003ee0:	e0e6      	b.n	80040b0 <PIN_Setup+0xb64>
	else if(config -> Port == UART5)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <PIN_Setup+0xa34>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d14d      	bne.n	8003f88 <PIN_Setup+0xa3c>
		__usart_5_config__ = config;
 8003eec:	4a25      	ldr	r2, [pc, #148]	@ (8003f84 <PIN_Setup+0xa38>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7a1b      	ldrb	r3, [r3, #8]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00a      	beq.n	8003f12 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7a1b      	ldrb	r3, [r3, #8]
 8003f00:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d005      	beq.n	8003f12 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.LIN))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7a1b      	ldrb	r3, [r3, #8]
 8003f0a:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f040 80cf 	bne.w	80040b0 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7a5b      	ldrb	r3, [r3, #9]
 8003f16:	2202      	movs	r2, #2
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10e      	bne.n	8003f3a <PIN_Setup+0x9ee>
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	2402      	movs	r4, #2
 8003f20:	2500      	movs	r5, #0
 8003f22:	2302      	movs	r3, #2
 8003f24:	2200      	movs	r2, #0
 8003f26:	2108      	movs	r1, #8
 8003f28:	9102      	str	r1, [sp, #8]
 8003f2a:	9201      	str	r2, [sp, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	462b      	mov	r3, r5
 8003f30:	4622      	mov	r2, r4
 8003f32:	4601      	mov	r1, r0
 8003f34:	480c      	ldr	r0, [pc, #48]	@ (8003f68 <PIN_Setup+0xa1c>)
 8003f36:	f7fe feff 	bl	8002d38 <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7a9b      	ldrb	r3, [r3, #10]
 8003f3e:	220c      	movs	r2, #12
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 80b5 	bne.w	80040b0 <PIN_Setup+0xb64>
 8003f46:	200c      	movs	r0, #12
 8003f48:	2402      	movs	r4, #2
 8003f4a:	2500      	movs	r5, #0
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2108      	movs	r1, #8
 8003f52:	9102      	str	r1, [sp, #8]
 8003f54:	9201      	str	r2, [sp, #4]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	462b      	mov	r3, r5
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <PIN_Setup+0xa1c>)
 8003f60:	f7fe feea 	bl	8002d38 <GPIO_Pin_Init>
}
 8003f64:	e0a4      	b.n	80040b0 <PIN_Setup+0xb64>
 8003f66:	bf00      	nop
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	40020c00 	.word	0x40020c00
 8003f74:	40004c00 	.word	0x40004c00
 8003f78:	200006e0 	.word	0x200006e0
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	40005000 	.word	0x40005000
 8003f84:	200006e4 	.word	0x200006e4
	else if(config->Port == USART6)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <PIN_Setup+0xb6c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	f040 808e 	bne.w	80040b0 <PIN_Setup+0xb64>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7a1b      	ldrb	r3, [r3, #8]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7a1b      	ldrb	r3, [r3, #8]
 8003fa2:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7a1b      	ldrb	r3, [r3, #8]
 8003fac:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	7a1b      	ldrb	r3, [r3, #8]
 8003fb6:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d13c      	bne.n	8004036 <PIN_Setup+0xaea>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7a5b      	ldrb	r3, [r3, #9]
 8003fc0:	2206      	movs	r2, #6
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10e      	bne.n	8003fe4 <PIN_Setup+0xa98>
 8003fc6:	2006      	movs	r0, #6
 8003fc8:	2402      	movs	r4, #2
 8003fca:	2500      	movs	r5, #0
 8003fcc:	2302      	movs	r3, #2
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2108      	movs	r1, #8
 8003fd2:	9102      	str	r1, [sp, #8]
 8003fd4:	9201      	str	r2, [sp, #4]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	462b      	mov	r3, r5
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4601      	mov	r1, r0
 8003fde:	4837      	ldr	r0, [pc, #220]	@ (80040bc <PIN_Setup+0xb70>)
 8003fe0:	f7fe feaa 	bl	8002d38 <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7a9b      	ldrb	r3, [r3, #10]
 8003fe8:	2207      	movs	r2, #7
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10e      	bne.n	800400c <PIN_Setup+0xac0>
 8003fee:	2007      	movs	r0, #7
 8003ff0:	2402      	movs	r4, #2
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2108      	movs	r1, #8
 8003ffa:	9102      	str	r1, [sp, #8]
 8003ffc:	9201      	str	r2, [sp, #4]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	462b      	mov	r3, r5
 8004002:	4622      	mov	r2, r4
 8004004:	4601      	mov	r1, r0
 8004006:	482d      	ldr	r0, [pc, #180]	@ (80040bc <PIN_Setup+0xb70>)
 8004008:	f7fe fe96 	bl	8002d38 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7adb      	ldrb	r3, [r3, #11]
 8004010:	2208      	movs	r2, #8
 8004012:	4293      	cmp	r3, r2
 8004014:	d14c      	bne.n	80040b0 <PIN_Setup+0xb64>
 8004016:	2008      	movs	r0, #8
 8004018:	2402      	movs	r4, #2
 800401a:	2500      	movs	r5, #0
 800401c:	2302      	movs	r3, #2
 800401e:	2200      	movs	r2, #0
 8004020:	2108      	movs	r1, #8
 8004022:	9102      	str	r1, [sp, #8]
 8004024:	9201      	str	r2, [sp, #4]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	462b      	mov	r3, r5
 800402a:	4622      	mov	r2, r4
 800402c:	4601      	mov	r1, r0
 800402e:	4823      	ldr	r0, [pc, #140]	@ (80040bc <PIN_Setup+0xb70>)
 8004030:	f7fe fe82 	bl	8002d38 <GPIO_Pin_Init>
 8004034:	e03c      	b.n	80040b0 <PIN_Setup+0xb64>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7a1b      	ldrb	r3, [r3, #8]
 800403a:	2206      	movs	r2, #6
 800403c:	4293      	cmp	r3, r2
 800403e:	d009      	beq.n	8004054 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7a1b      	ldrb	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7a1b      	ldrb	r3, [r3, #8]
 800404e:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	d12d      	bne.n	80040b0 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7a5b      	ldrb	r3, [r3, #9]
 8004058:	2206      	movs	r2, #6
 800405a:	4293      	cmp	r3, r2
 800405c:	d10e      	bne.n	800407c <PIN_Setup+0xb30>
 800405e:	2006      	movs	r0, #6
 8004060:	2402      	movs	r4, #2
 8004062:	2500      	movs	r5, #0
 8004064:	2302      	movs	r3, #2
 8004066:	2200      	movs	r2, #0
 8004068:	2108      	movs	r1, #8
 800406a:	9102      	str	r1, [sp, #8]
 800406c:	9201      	str	r2, [sp, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	462b      	mov	r3, r5
 8004072:	4622      	mov	r2, r4
 8004074:	4601      	mov	r1, r0
 8004076:	4812      	ldr	r0, [pc, #72]	@ (80040c0 <PIN_Setup+0xb74>)
 8004078:	f7fe fe5e 	bl	8002d38 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7a1b      	ldrb	r3, [r3, #8]
 8004080:	2207      	movs	r2, #7
 8004082:	4293      	cmp	r3, r2
 8004084:	d114      	bne.n	80040b0 <PIN_Setup+0xb64>
 8004086:	2008      	movs	r0, #8
 8004088:	2402      	movs	r4, #2
 800408a:	2500      	movs	r5, #0
 800408c:	2302      	movs	r3, #2
 800408e:	2200      	movs	r2, #0
 8004090:	2108      	movs	r1, #8
 8004092:	9102      	str	r1, [sp, #8]
 8004094:	9201      	str	r2, [sp, #4]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	462b      	mov	r3, r5
 800409a:	4622      	mov	r2, r4
 800409c:	4601      	mov	r1, r0
 800409e:	4808      	ldr	r0, [pc, #32]	@ (80040c0 <PIN_Setup+0xb74>)
 80040a0:	f7fe fe4a 	bl	8002d38 <GPIO_Pin_Init>
}
 80040a4:	e004      	b.n	80040b0 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <PIN_Setup+0xb64>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80040ae:	bf00      	nop
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bdb0      	pop	{r4, r5, r7, pc}
 80040b8:	40011400 	.word	0x40011400
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020000 	.word	0x40020000

080040c4 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b08e      	sub	sp, #56	@ 0x38
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff f9d9 	bl	8003484 <USART_Clock_Enable>
	PIN_Setup(config);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fa3a 	bl	800354c <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff f973 	bl	80033c4 <USART_Get_Instance_Number>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b74      	ldr	r3, [pc, #464]	@ (80042b4 <USART_Init+0x1f0>)
 80040e4:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 80040e6:	4b73      	ldr	r3, [pc, #460]	@ (80042b4 <USART_Init+0x1f0>)
 80040e8:	f993 3000 	ldrsb.w	r3, [r3]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d103      	bne.n	80040fa <USART_Init+0x36>
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295
 80040f6:	f000 bc2e 	b.w	8004956 <USART_Init+0x892>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if((config -> Port == USART1) || (config -> Port == USART6))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6e      	ldr	r2, [pc, #440]	@ (80042b8 <USART_Init+0x1f4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <USART_Init+0x4a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6c      	ldr	r2, [pc, #432]	@ (80042bc <USART_Init+0x1f8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d150      	bne.n	80041b0 <USART_Init+0xec>
	{
		uint32_t freq = SystemAPB2_Clock_Speed();
 800410e:	f7fe ff1b 	bl	8002f48 <SystemAPB2_Clock_Speed>
 8004112:	4603      	mov	r3, r0
 8004114:	61fb      	str	r3, [r7, #28]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 8004116:	69f8      	ldr	r0, [r7, #28]
 8004118:	f7fc f9f4 	bl	8000504 <__aeabi_ui2d>
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc f9ed 	bl	8000504 <__aeabi_ui2d>
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <USART_Init+0x1fc>)
 8004130:	f7fc fa62 	bl	80005f8 <__aeabi_dmul>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4620      	mov	r0, r4
 800413a:	4629      	mov	r1, r5
 800413c:	f7fc fb86 	bl	800084c <__aeabi_ddiv>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8004148:	f107 0208 	add.w	r2, r7, #8
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	ed97 0b08 	vldr	d0, [r7, #32]
 8004158:	f7fe ff0e 	bl	8002f78 <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 800415c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	4b57      	ldr	r3, [pc, #348]	@ (80042c4 <USART_Init+0x200>)
 8004166:	f7fc fa47 	bl	80005f8 <__aeabi_dmul>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	ec43 2b17 	vmov	d7, r2, r3
 8004172:	eeb0 0a47 	vmov.f32	s0, s14
 8004176:	eef0 0a67 	vmov.f32	s1, s15
 800417a:	f001 fc21 	bl	80059c0 <ceil>
 800417e:	ec53 2b10 	vmov	r2, r3, d0
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f7fc fcd1 	bl	8000b2c <__aeabi_d2iz>
 800418a:	4603      	mov	r3, r0
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 800418e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004192:	eeb0 0a47 	vmov.f32	s0, s14
 8004196:	eef0 0a67 	vmov.f32	s1, s15
 800419a:	f001 fc11 	bl	80059c0 <ceil>
 800419e:	ec53 2b10 	vmov	r2, r3, d0
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f7fc fcc1 	bl	8000b2c <__aeabi_d2iz>
 80041aa:	4603      	mov	r3, r0
 80041ac:	633b      	str	r3, [r7, #48]	@ 0x30
	{
 80041ae:	e04f      	b.n	8004250 <USART_Init+0x18c>
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
 80041b0:	f7fe feb2 	bl	8002f18 <SystemAPB1_Clock_Speed>
 80041b4:	4603      	mov	r3, r0
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 80041b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80041ba:	f7fc f9a3 	bl	8000504 <__aeabi_ui2d>
 80041be:	4604      	mov	r4, r0
 80041c0:	460d      	mov	r5, r1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f99c 	bl	8000504 <__aeabi_ui2d>
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <USART_Init+0x200>)
 80041d2:	f7fc fa11 	bl	80005f8 <__aeabi_dmul>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	f7fc fb35 	bl	800084c <__aeabi_ddiv>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80041ea:	f107 0208 	add.w	r2, r7, #8
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80041fa:	f7fe febd 	bl	8002f78 <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80041fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	4b2f      	ldr	r3, [pc, #188]	@ (80042c4 <USART_Init+0x200>)
 8004208:	f7fc f9f6 	bl	80005f8 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	ec43 2b17 	vmov	d7, r2, r3
 8004214:	eeb0 0a47 	vmov.f32	s0, s14
 8004218:	eef0 0a67 	vmov.f32	s1, s15
 800421c:	f001 fbd0 	bl	80059c0 <ceil>
 8004220:	ec53 2b10 	vmov	r2, r3, d0
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	f7fc fc80 	bl	8000b2c <__aeabi_d2iz>
 800422c:	4603      	mov	r3, r0
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 8004230:	ed97 7b02 	vldr	d7, [r7, #8]
 8004234:	eeb0 0a47 	vmov.f32	s0, s14
 8004238:	eef0 0a67 	vmov.f32	s1, s15
 800423c:	f001 fbc0 	bl	80059c0 <ceil>
 8004240:	ec53 2b10 	vmov	r2, r3, d0
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fc70 	bl	8000b2c <__aeabi_d2iz>
 800424c:	4603      	mov	r3, r0
 800424e:	633b      	str	r3, [r7, #48]	@ 0x30
	}




	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	011a      	lsls	r2, r3, #4
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity ;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7c9b      	ldrb	r3, [r3, #18]
 8004268:	4619      	mov	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	60da      	str	r2, [r3, #12]
	//	config->Port->CR1 |= USART_CR1_OVER8 ;

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7b9b      	ldrb	r3, [r3, #14]
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	429a      	cmp	r2, r3
 800427c:	d124      	bne.n	80042c8 <USART_Init+0x204>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 800428c:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6153      	str	r3, [r2, #20]
 80042b2:	e0c8      	b.n	8004446 <USART_Init+0x382>
 80042b4:	200006d0 	.word	0x200006d0
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40011400 	.word	0x40011400
 80042c0:	40400000 	.word	0x40400000
 80042c4:	40300000 	.word	0x40300000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7b9b      	ldrb	r3, [r3, #14]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042d2:	4013      	ands	r3, r2
 80042d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042d8:	4293      	cmp	r3, r2
 80042da:	d107      	bne.n	80042ec <USART_Init+0x228>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ea:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7b9b      	ldrb	r3, [r3, #14]
 80042f0:	461a      	mov	r2, r3
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	4013      	ands	r3, r2
 80042f6:	2280      	movs	r2, #128	@ 0x80
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d107      	bne.n	800430c <USART_Init+0x248>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800430a:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7b9b      	ldrb	r3, [r3, #14]
 8004310:	461a      	mov	r2, r3
 8004312:	2340      	movs	r3, #64	@ 0x40
 8004314:	4013      	ands	r3, r2
 8004316:	2240      	movs	r2, #64	@ 0x40
 8004318:	4293      	cmp	r3, r2
 800431a:	d107      	bne.n	800432c <USART_Init+0x268>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432a:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7b9b      	ldrb	r3, [r3, #14]
 8004330:	461a      	mov	r2, r3
 8004332:	2320      	movs	r3, #32
 8004334:	4013      	ands	r3, r2
 8004336:	2220      	movs	r2, #32
 8004338:	4293      	cmp	r3, r2
 800433a:	d107      	bne.n	800434c <USART_Init+0x288>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0220 	orr.w	r2, r2, #32
 800434a:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7b9b      	ldrb	r3, [r3, #14]
 8004350:	461a      	mov	r2, r3
 8004352:	2310      	movs	r3, #16
 8004354:	4013      	ands	r3, r2
 8004356:	2210      	movs	r2, #16
 8004358:	4293      	cmp	r3, r2
 800435a:	d107      	bne.n	800436c <USART_Init+0x2a8>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0210 	orr.w	r2, r2, #16
 800436a:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7b9b      	ldrb	r3, [r3, #14]
 8004370:	461a      	mov	r2, r3
 8004372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004376:	4013      	ands	r3, r2
 8004378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437c:	4293      	cmp	r3, r2
 800437e:	d107      	bne.n	8004390 <USART_Init+0x2cc>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800438e:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7b9b      	ldrb	r3, [r3, #14]
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800439a:	4013      	ands	r3, r2
 800439c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d107      	bne.n	80043b4 <USART_Init+0x2f0>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043b2:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7b9b      	ldrb	r3, [r3, #14]
 80043b8:	461a      	mov	r2, r3
 80043ba:	2301      	movs	r3, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	2201      	movs	r2, #1
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d107      	bne.n	80043d4 <USART_Init+0x310>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4aa8      	ldr	r2, [pc, #672]	@ (800467c <USART_Init+0x5b8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d107      	bne.n	80043ee <USART_Init+0x32a>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 80043de:	2100      	movs	r1, #0
 80043e0:	2025      	movs	r0, #37	@ 0x25
 80043e2:	f7fe fd6f 	bl	8002ec4 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 80043e6:	2025      	movs	r0, #37	@ 0x25
 80043e8:	f7fe fd4e 	bl	8002e88 <__NVIC_EnableIRQ>
 80043ec:	e02b      	b.n	8004446 <USART_Init+0x382>
		}
		else if(config -> Port == USART2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4aa3      	ldr	r2, [pc, #652]	@ (8004680 <USART_Init+0x5bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <USART_Init+0x33c>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80043f8:	2026      	movs	r0, #38	@ 0x26
 80043fa:	f7fe fd45 	bl	8002e88 <__NVIC_EnableIRQ>
 80043fe:	e022      	b.n	8004446 <USART_Init+0x382>
		}
		else if(config -> Port == USART3)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a9f      	ldr	r2, [pc, #636]	@ (8004684 <USART_Init+0x5c0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d103      	bne.n	8004412 <USART_Init+0x34e>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 800440a:	2027      	movs	r0, #39	@ 0x27
 800440c:	f7fe fd3c 	bl	8002e88 <__NVIC_EnableIRQ>
 8004410:	e019      	b.n	8004446 <USART_Init+0x382>
		}
		else if(config -> Port == UART4)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a9c      	ldr	r2, [pc, #624]	@ (8004688 <USART_Init+0x5c4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <USART_Init+0x360>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 800441c:	2034      	movs	r0, #52	@ 0x34
 800441e:	f7fe fd33 	bl	8002e88 <__NVIC_EnableIRQ>
 8004422:	e010      	b.n	8004446 <USART_Init+0x382>
		}
		else if(config -> Port == UART5)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a98      	ldr	r2, [pc, #608]	@ (800468c <USART_Init+0x5c8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d103      	bne.n	8004436 <USART_Init+0x372>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 800442e:	2035      	movs	r0, #53	@ 0x35
 8004430:	f7fe fd2a 	bl	8002e88 <__NVIC_EnableIRQ>
 8004434:	e007      	b.n	8004446 <USART_Init+0x382>
		}
		else if(config -> Port == USART6)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a95      	ldr	r2, [pc, #596]	@ (8004690 <USART_Init+0x5cc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d102      	bne.n	8004446 <USART_Init+0x382>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004440:	2047      	movs	r0, #71	@ 0x47
 8004442:	f7fe fd21 	bl	8002e88 <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7c1b      	ldrb	r3, [r3, #16]
 8004450:	4619      	mov	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7c5b      	ldrb	r3, [r3, #17]
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2202      	movs	r2, #2
 8004466:	4293      	cmp	r3, r2
 8004468:	f040 8126 	bne.w	80046b8 <USART_Init+0x5f4>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800447a:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7e      	ldr	r2, [pc, #504]	@ (800467c <USART_Init+0x5b8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10e      	bne.n	80044a4 <USART_Init+0x3e0>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8004486:	4a83      	ldr	r2, [pc, #524]	@ (8004694 <USART_Init+0x5d0>)
 8004488:	4b83      	ldr	r3, [pc, #524]	@ (8004698 <USART_Init+0x5d4>)
 800448a:	4614      	mov	r4, r2
 800448c:	33c0      	adds	r3, #192	@ 0xc0
 800448e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004496:	2210      	movs	r2, #16
 8004498:	4b7e      	ldr	r3, [pc, #504]	@ (8004694 <USART_Init+0x5d0>)
 800449a:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 800449c:	4b7d      	ldr	r3, [pc, #500]	@ (8004694 <USART_Init+0x5d0>)
 800449e:	4a7f      	ldr	r2, [pc, #508]	@ (800469c <USART_Init+0x5d8>)
 80044a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80044a2:	e067      	b.n	8004574 <USART_Init+0x4b0>
		}
		else if(config->Port == USART2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a75      	ldr	r2, [pc, #468]	@ (8004680 <USART_Init+0x5bc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10e      	bne.n	80044cc <USART_Init+0x408>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 80044ae:	4b79      	ldr	r3, [pc, #484]	@ (8004694 <USART_Init+0x5d0>)
 80044b0:	4a79      	ldr	r2, [pc, #484]	@ (8004698 <USART_Init+0x5d4>)
 80044b2:	3358      	adds	r3, #88	@ 0x58
 80044b4:	32d8      	adds	r2, #216	@ 0xd8
 80044b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80044bc:	2210      	movs	r2, #16
 80044be:	4b75      	ldr	r3, [pc, #468]	@ (8004694 <USART_Init+0x5d0>)
 80044c0:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 80044c2:	4b74      	ldr	r3, [pc, #464]	@ (8004694 <USART_Init+0x5d0>)
 80044c4:	4a76      	ldr	r2, [pc, #472]	@ (80046a0 <USART_Init+0x5dc>)
 80044c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80044ca:	e053      	b.n	8004574 <USART_Init+0x4b0>
		}
		else if(config->Port == USART3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6c      	ldr	r2, [pc, #432]	@ (8004684 <USART_Init+0x5c0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10f      	bne.n	80044f6 <USART_Init+0x432>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 80044d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004694 <USART_Init+0x5d0>)
 80044d8:	4a6f      	ldr	r2, [pc, #444]	@ (8004698 <USART_Init+0x5d4>)
 80044da:	33b0      	adds	r3, #176	@ 0xb0
 80044dc:	32f0      	adds	r2, #240	@ 0xf0
 80044de:	ca07      	ldmia	r2, {r0, r1, r2}
 80044e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80044e4:	2210      	movs	r2, #16
 80044e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004694 <USART_Init+0x5d0>)
 80044e8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 80044ec:	4b69      	ldr	r3, [pc, #420]	@ (8004694 <USART_Init+0x5d0>)
 80044ee:	4a6d      	ldr	r2, [pc, #436]	@ (80046a4 <USART_Init+0x5e0>)
 80044f0:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80044f4:	e03e      	b.n	8004574 <USART_Init+0x4b0>
		}
		else if(config->Port == UART4)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a63      	ldr	r2, [pc, #396]	@ (8004688 <USART_Init+0x5c4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <USART_Init+0x460>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8004500:	4b64      	ldr	r3, [pc, #400]	@ (8004694 <USART_Init+0x5d0>)
 8004502:	4a65      	ldr	r2, [pc, #404]	@ (8004698 <USART_Init+0x5d4>)
 8004504:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004508:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 800450c:	ca07      	ldmia	r2, {r0, r1, r2}
 800450e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004512:	2210      	movs	r2, #16
 8004514:	4b5f      	ldr	r3, [pc, #380]	@ (8004694 <USART_Init+0x5d0>)
 8004516:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 800451a:	4b5e      	ldr	r3, [pc, #376]	@ (8004694 <USART_Init+0x5d0>)
 800451c:	4a62      	ldr	r2, [pc, #392]	@ (80046a8 <USART_Init+0x5e4>)
 800451e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004522:	e027      	b.n	8004574 <USART_Init+0x4b0>
		}
		else if(config->Port == UART5)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a58      	ldr	r2, [pc, #352]	@ (800468c <USART_Init+0x5c8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d111      	bne.n	8004552 <USART_Init+0x48e>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 800452e:	4b59      	ldr	r3, [pc, #356]	@ (8004694 <USART_Init+0x5d0>)
 8004530:	4a59      	ldr	r2, [pc, #356]	@ (8004698 <USART_Init+0x5d4>)
 8004532:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004536:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 800453a:	ca07      	ldmia	r2, {r0, r1, r2}
 800453c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004540:	2210      	movs	r2, #16
 8004542:	4b54      	ldr	r3, [pc, #336]	@ (8004694 <USART_Init+0x5d0>)
 8004544:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 8004548:	4b52      	ldr	r3, [pc, #328]	@ (8004694 <USART_Init+0x5d0>)
 800454a:	4a58      	ldr	r2, [pc, #352]	@ (80046ac <USART_Init+0x5e8>)
 800454c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004550:	e010      	b.n	8004574 <USART_Init+0x4b0>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8004552:	4b50      	ldr	r3, [pc, #320]	@ (8004694 <USART_Init+0x5d0>)
 8004554:	4a50      	ldr	r2, [pc, #320]	@ (8004698 <USART_Init+0x5d4>)
 8004556:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800455a:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 800455e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004560:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004564:	2210      	movs	r2, #16
 8004566:	4b4b      	ldr	r3, [pc, #300]	@ (8004694 <USART_Init+0x5d0>)
 8004568:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 800456c:	4b49      	ldr	r3, [pc, #292]	@ (8004694 <USART_Init+0x5d0>)
 800456e:	4a50      	ldr	r2, [pc, #320]	@ (80046b0 <USART_Init+0x5ec>)
 8004570:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004574:	4b4f      	ldr	r3, [pc, #316]	@ (80046b4 <USART_Init+0x5f0>)
 8004576:	f993 3000 	ldrsb.w	r3, [r3]
 800457a:	4618      	mov	r0, r3
 800457c:	2200      	movs	r2, #0
 800457e:	4945      	ldr	r1, [pc, #276]	@ (8004694 <USART_Init+0x5d0>)
 8004580:	2358      	movs	r3, #88	@ 0x58
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	440b      	add	r3, r1
 8004588:	3318      	adds	r3, #24
 800458a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800458c:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <USART_Init+0x5f0>)
 800458e:	f993 3000 	ldrsb.w	r3, [r3]
 8004592:	4618      	mov	r0, r3
 8004594:	2200      	movs	r2, #0
 8004596:	493f      	ldr	r1, [pc, #252]	@ (8004694 <USART_Init+0x5d0>)
 8004598:	2358      	movs	r3, #88	@ 0x58
 800459a:	fb00 f303 	mul.w	r3, r0, r3
 800459e:	440b      	add	r3, r1
 80045a0:	330c      	adds	r3, #12
 80045a2:	601a      	str	r2, [r3, #0]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80045a4:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <USART_Init+0x5f0>)
 80045a6:	f993 3000 	ldrsb.w	r3, [r3]
 80045aa:	4618      	mov	r0, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	4939      	ldr	r1, [pc, #228]	@ (8004694 <USART_Init+0x5d0>)
 80045b0:	2358      	movs	r3, #88	@ 0x58
 80045b2:	fb00 f303 	mul.w	r3, r0, r3
 80045b6:	440b      	add	r3, r1
 80045b8:	3328      	adds	r3, #40	@ 0x28
 80045ba:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80045bc:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <USART_Init+0x5f0>)
 80045be:	f993 3000 	ldrsb.w	r3, [r3]
 80045c2:	4618      	mov	r0, r3
 80045c4:	2200      	movs	r2, #0
 80045c6:	4933      	ldr	r1, [pc, #204]	@ (8004694 <USART_Init+0x5d0>)
 80045c8:	2358      	movs	r3, #88	@ 0x58
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	440b      	add	r3, r1
 80045d0:	3324      	adds	r3, #36	@ 0x24
 80045d2:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80045d4:	2200      	movs	r2, #0
 80045d6:	4b37      	ldr	r3, [pc, #220]	@ (80046b4 <USART_Init+0x5f0>)
 80045d8:	f993 3000 	ldrsb.w	r3, [r3]
 80045dc:	4618      	mov	r0, r3
 80045de:	b291      	uxth	r1, r2
 80045e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004694 <USART_Init+0x5d0>)
 80045e2:	2358      	movs	r3, #88	@ 0x58
 80045e4:	fb00 f303 	mul.w	r3, r0, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3322      	adds	r3, #34	@ 0x22
 80045ec:	460a      	mov	r2, r1
 80045ee:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80045f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f4:	4b2f      	ldr	r3, [pc, #188]	@ (80046b4 <USART_Init+0x5f0>)
 80045f6:	f993 3000 	ldrsb.w	r3, [r3]
 80045fa:	4618      	mov	r0, r3
 80045fc:	b291      	uxth	r1, r2
 80045fe:	4a25      	ldr	r2, [pc, #148]	@ (8004694 <USART_Init+0x5d0>)
 8004600:	2358      	movs	r3, #88	@ 0x58
 8004602:	fb00 f303 	mul.w	r3, r0, r3
 8004606:	4413      	add	r3, r2
 8004608:	3320      	adds	r3, #32
 800460a:	460a      	mov	r2, r1
 800460c:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 800460e:	4b29      	ldr	r3, [pc, #164]	@ (80046b4 <USART_Init+0x5f0>)
 8004610:	f993 3000 	ldrsb.w	r3, [r3]
 8004614:	4618      	mov	r0, r3
 8004616:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800461a:	491e      	ldr	r1, [pc, #120]	@ (8004694 <USART_Init+0x5d0>)
 800461c:	2358      	movs	r3, #88	@ 0x58
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	440b      	add	r3, r1
 8004624:	3314      	adds	r3, #20
 8004626:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8004628:	4b22      	ldr	r3, [pc, #136]	@ (80046b4 <USART_Init+0x5f0>)
 800462a:	f993 3000 	ldrsb.w	r3, [r3]
 800462e:	4618      	mov	r0, r3
 8004630:	2200      	movs	r2, #0
 8004632:	4918      	ldr	r1, [pc, #96]	@ (8004694 <USART_Init+0x5d0>)
 8004634:	2358      	movs	r3, #88	@ 0x58
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	440b      	add	r3, r1
 800463c:	3310      	adds	r3, #16
 800463e:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8004640:	4b1c      	ldr	r3, [pc, #112]	@ (80046b4 <USART_Init+0x5f0>)
 8004642:	f993 3000 	ldrsb.w	r3, [r3]
 8004646:	4618      	mov	r0, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4912      	ldr	r1, [pc, #72]	@ (8004694 <USART_Init+0x5d0>)
 800464c:	2258      	movs	r2, #88	@ 0x58
 800464e:	fb00 f202 	mul.w	r2, r0, r2
 8004652:	440a      	add	r2, r1
 8004654:	336c      	adds	r3, #108	@ 0x6c
 8004656:	4611      	mov	r1, r2
 8004658:	2258      	movs	r2, #88	@ 0x58
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fd62 	bl	8005124 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8004660:	4b14      	ldr	r3, [pc, #80]	@ (80046b4 <USART_Init+0x5f0>)
 8004662:	f993 3000 	ldrsb.w	r3, [r3]
 8004666:	461a      	mov	r2, r3
 8004668:	2358      	movs	r3, #88	@ 0x58
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	4a09      	ldr	r2, [pc, #36]	@ (8004694 <USART_Init+0x5d0>)
 8004670:	4413      	add	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd ff0e 	bl	8002494 <DMA_Init>
 8004678:	e026      	b.n	80046c8 <USART_Init+0x604>
 800467a:	bf00      	nop
 800467c:	40011000 	.word	0x40011000
 8004680:	40004400 	.word	0x40004400
 8004684:	40004800 	.word	0x40004800
 8004688:	40004c00 	.word	0x40004c00
 800468c:	40005000 	.word	0x40005000
 8004690:	40011400 	.word	0x40011400
 8004694:	200002b0 	.word	0x200002b0
 8004698:	08005ae4 	.word	0x08005ae4
 800469c:	08002fdd 	.word	0x08002fdd
 80046a0:	0800300d 	.word	0x0800300d
 80046a4:	0800303d 	.word	0x0800303d
 80046a8:	0800306d 	.word	0x0800306d
 80046ac:	0800309d 	.word	0x0800309d
 80046b0:	080030cd 	.word	0x080030cd
 80046b4:	200006d0 	.word	0x200006d0
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c6:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c5b      	ldrb	r3, [r3, #17]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2201      	movs	r2, #1
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f040 810b 	bne.w	80048f0 <USART_Init+0x82c>
	{



		if(config->Port == USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4aa0      	ldr	r2, [pc, #640]	@ (8004960 <USART_Init+0x89c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10e      	bne.n	8004702 <USART_Init+0x63e>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 80046e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004964 <USART_Init+0x8a0>)
 80046e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004968 <USART_Init+0x8a4>)
 80046e8:	4614      	mov	r4, r2
 80046ea:	33cc      	adds	r3, #204	@ 0xcc
 80046ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80046f4:	2210      	movs	r2, #16
 80046f6:	4b9b      	ldr	r3, [pc, #620]	@ (8004964 <USART_Init+0x8a0>)
 80046f8:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 80046fa:	4b9a      	ldr	r3, [pc, #616]	@ (8004964 <USART_Init+0x8a0>)
 80046fc:	4a9b      	ldr	r2, [pc, #620]	@ (800496c <USART_Init+0x8a8>)
 80046fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004700:	e067      	b.n	80047d2 <USART_Init+0x70e>
		}
		else if(config->Port == USART2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a9a      	ldr	r2, [pc, #616]	@ (8004970 <USART_Init+0x8ac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10e      	bne.n	800472a <USART_Init+0x666>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 800470c:	4b95      	ldr	r3, [pc, #596]	@ (8004964 <USART_Init+0x8a0>)
 800470e:	4a96      	ldr	r2, [pc, #600]	@ (8004968 <USART_Init+0x8a4>)
 8004710:	3358      	adds	r3, #88	@ 0x58
 8004712:	32e4      	adds	r2, #228	@ 0xe4
 8004714:	ca07      	ldmia	r2, {r0, r1, r2}
 8004716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800471a:	2210      	movs	r2, #16
 800471c:	4b91      	ldr	r3, [pc, #580]	@ (8004964 <USART_Init+0x8a0>)
 800471e:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 8004720:	4b90      	ldr	r3, [pc, #576]	@ (8004964 <USART_Init+0x8a0>)
 8004722:	4a94      	ldr	r2, [pc, #592]	@ (8004974 <USART_Init+0x8b0>)
 8004724:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004728:	e053      	b.n	80047d2 <USART_Init+0x70e>
		}
		else if(config->Port == USART3)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a92      	ldr	r2, [pc, #584]	@ (8004978 <USART_Init+0x8b4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10f      	bne.n	8004754 <USART_Init+0x690>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8004734:	4b8b      	ldr	r3, [pc, #556]	@ (8004964 <USART_Init+0x8a0>)
 8004736:	4a8c      	ldr	r2, [pc, #560]	@ (8004968 <USART_Init+0x8a4>)
 8004738:	33b0      	adds	r3, #176	@ 0xb0
 800473a:	32fc      	adds	r2, #252	@ 0xfc
 800473c:	ca07      	ldmia	r2, {r0, r1, r2}
 800473e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004742:	2210      	movs	r2, #16
 8004744:	4b87      	ldr	r3, [pc, #540]	@ (8004964 <USART_Init+0x8a0>)
 8004746:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 800474a:	4b86      	ldr	r3, [pc, #536]	@ (8004964 <USART_Init+0x8a0>)
 800474c:	4a8b      	ldr	r2, [pc, #556]	@ (800497c <USART_Init+0x8b8>)
 800474e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8004752:	e03e      	b.n	80047d2 <USART_Init+0x70e>
		}
		else if(config->Port == UART4)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a89      	ldr	r2, [pc, #548]	@ (8004980 <USART_Init+0x8bc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <USART_Init+0x6be>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 800475e:	4b81      	ldr	r3, [pc, #516]	@ (8004964 <USART_Init+0x8a0>)
 8004760:	4a81      	ldr	r2, [pc, #516]	@ (8004968 <USART_Init+0x8a4>)
 8004762:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004766:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 800476a:	ca07      	ldmia	r2, {r0, r1, r2}
 800476c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004770:	2210      	movs	r2, #16
 8004772:	4b7c      	ldr	r3, [pc, #496]	@ (8004964 <USART_Init+0x8a0>)
 8004774:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 8004778:	4b7a      	ldr	r3, [pc, #488]	@ (8004964 <USART_Init+0x8a0>)
 800477a:	4a82      	ldr	r2, [pc, #520]	@ (8004984 <USART_Init+0x8c0>)
 800477c:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004780:	e027      	b.n	80047d2 <USART_Init+0x70e>
		}
		else if(config->Port == UART5)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a80      	ldr	r2, [pc, #512]	@ (8004988 <USART_Init+0x8c4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d111      	bne.n	80047b0 <USART_Init+0x6ec>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 800478c:	4b75      	ldr	r3, [pc, #468]	@ (8004964 <USART_Init+0x8a0>)
 800478e:	4a76      	ldr	r2, [pc, #472]	@ (8004968 <USART_Init+0x8a4>)
 8004790:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004794:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8004798:	ca07      	ldmia	r2, {r0, r1, r2}
 800479a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800479e:	2210      	movs	r2, #16
 80047a0:	4b70      	ldr	r3, [pc, #448]	@ (8004964 <USART_Init+0x8a0>)
 80047a2:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 80047a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004964 <USART_Init+0x8a0>)
 80047a8:	4a78      	ldr	r2, [pc, #480]	@ (800498c <USART_Init+0x8c8>)
 80047aa:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80047ae:	e010      	b.n	80047d2 <USART_Init+0x70e>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 80047b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004964 <USART_Init+0x8a0>)
 80047b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004968 <USART_Init+0x8a4>)
 80047b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80047b8:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 80047bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80047be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80047c2:	2210      	movs	r2, #16
 80047c4:	4b67      	ldr	r3, [pc, #412]	@ (8004964 <USART_Init+0x8a0>)
 80047c6:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 80047ca:	4b66      	ldr	r3, [pc, #408]	@ (8004964 <USART_Init+0x8a0>)
 80047cc:	4a70      	ldr	r2, [pc, #448]	@ (8004990 <USART_Init+0x8cc>)
 80047ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80047d2:	4b70      	ldr	r3, [pc, #448]	@ (8004994 <USART_Init+0x8d0>)
 80047d4:	f993 3000 	ldrsb.w	r3, [r3]
 80047d8:	4618      	mov	r0, r3
 80047da:	2200      	movs	r2, #0
 80047dc:	4961      	ldr	r1, [pc, #388]	@ (8004964 <USART_Init+0x8a0>)
 80047de:	2358      	movs	r3, #88	@ 0x58
 80047e0:	fb00 f303 	mul.w	r3, r0, r3
 80047e4:	440b      	add	r3, r1
 80047e6:	3318      	adds	r3, #24
 80047e8:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80047ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004994 <USART_Init+0x8d0>)
 80047ec:	f993 3000 	ldrsb.w	r3, [r3]
 80047f0:	4618      	mov	r0, r3
 80047f2:	2200      	movs	r2, #0
 80047f4:	495b      	ldr	r1, [pc, #364]	@ (8004964 <USART_Init+0x8a0>)
 80047f6:	2358      	movs	r3, #88	@ 0x58
 80047f8:	fb00 f303 	mul.w	r3, r0, r3
 80047fc:	440b      	add	r3, r1
 80047fe:	330c      	adds	r3, #12
 8004800:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004802:	4b64      	ldr	r3, [pc, #400]	@ (8004994 <USART_Init+0x8d0>)
 8004804:	f993 3000 	ldrsb.w	r3, [r3]
 8004808:	4618      	mov	r0, r3
 800480a:	2210      	movs	r2, #16
 800480c:	4955      	ldr	r1, [pc, #340]	@ (8004964 <USART_Init+0x8a0>)
 800480e:	2358      	movs	r3, #88	@ 0x58
 8004810:	fb00 f303 	mul.w	r3, r0, r3
 8004814:	440b      	add	r3, r1
 8004816:	331c      	adds	r3, #28
 8004818:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800481a:	4b5e      	ldr	r3, [pc, #376]	@ (8004994 <USART_Init+0x8d0>)
 800481c:	f993 3000 	ldrsb.w	r3, [r3]
 8004820:	4618      	mov	r0, r3
 8004822:	2200      	movs	r2, #0
 8004824:	494f      	ldr	r1, [pc, #316]	@ (8004964 <USART_Init+0x8a0>)
 8004826:	2358      	movs	r3, #88	@ 0x58
 8004828:	fb00 f303 	mul.w	r3, r0, r3
 800482c:	440b      	add	r3, r1
 800482e:	3328      	adds	r3, #40	@ 0x28
 8004830:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004832:	4b58      	ldr	r3, [pc, #352]	@ (8004994 <USART_Init+0x8d0>)
 8004834:	f993 3000 	ldrsb.w	r3, [r3]
 8004838:	4618      	mov	r0, r3
 800483a:	2200      	movs	r2, #0
 800483c:	4949      	ldr	r1, [pc, #292]	@ (8004964 <USART_Init+0x8a0>)
 800483e:	2358      	movs	r3, #88	@ 0x58
 8004840:	fb00 f303 	mul.w	r3, r0, r3
 8004844:	440b      	add	r3, r1
 8004846:	3324      	adds	r3, #36	@ 0x24
 8004848:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800484a:	2200      	movs	r2, #0
 800484c:	4b51      	ldr	r3, [pc, #324]	@ (8004994 <USART_Init+0x8d0>)
 800484e:	f993 3000 	ldrsb.w	r3, [r3]
 8004852:	4618      	mov	r0, r3
 8004854:	b291      	uxth	r1, r2
 8004856:	4a43      	ldr	r2, [pc, #268]	@ (8004964 <USART_Init+0x8a0>)
 8004858:	2358      	movs	r3, #88	@ 0x58
 800485a:	fb00 f303 	mul.w	r3, r0, r3
 800485e:	4413      	add	r3, r2
 8004860:	3322      	adds	r3, #34	@ 0x22
 8004862:	460a      	mov	r2, r1
 8004864:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800486a:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <USART_Init+0x8d0>)
 800486c:	f993 3000 	ldrsb.w	r3, [r3]
 8004870:	4618      	mov	r0, r3
 8004872:	b291      	uxth	r1, r2
 8004874:	4a3b      	ldr	r2, [pc, #236]	@ (8004964 <USART_Init+0x8a0>)
 8004876:	2358      	movs	r3, #88	@ 0x58
 8004878:	fb00 f303 	mul.w	r3, r0, r3
 800487c:	4413      	add	r3, r2
 800487e:	3320      	adds	r3, #32
 8004880:	460a      	mov	r2, r1
 8004882:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8004884:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <USART_Init+0x8d0>)
 8004886:	f993 3000 	ldrsb.w	r3, [r3]
 800488a:	4618      	mov	r0, r3
 800488c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004890:	4934      	ldr	r1, [pc, #208]	@ (8004964 <USART_Init+0x8a0>)
 8004892:	2358      	movs	r3, #88	@ 0x58
 8004894:	fb00 f303 	mul.w	r3, r0, r3
 8004898:	440b      	add	r3, r1
 800489a:	3314      	adds	r3, #20
 800489c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 800489e:	4b3d      	ldr	r3, [pc, #244]	@ (8004994 <USART_Init+0x8d0>)
 80048a0:	f993 3000 	ldrsb.w	r3, [r3]
 80048a4:	4618      	mov	r0, r3
 80048a6:	2240      	movs	r2, #64	@ 0x40
 80048a8:	492e      	ldr	r1, [pc, #184]	@ (8004964 <USART_Init+0x8a0>)
 80048aa:	2358      	movs	r3, #88	@ 0x58
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
 80048b0:	440b      	add	r3, r1
 80048b2:	3310      	adds	r3, #16
 80048b4:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <USART_Init+0x8d0>)
 80048b8:	f993 3000 	ldrsb.w	r3, [r3]
 80048bc:	4618      	mov	r0, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4928      	ldr	r1, [pc, #160]	@ (8004964 <USART_Init+0x8a0>)
 80048c2:	2258      	movs	r2, #88	@ 0x58
 80048c4:	fb00 f202 	mul.w	r2, r0, r2
 80048c8:	440a      	add	r2, r1
 80048ca:	3314      	adds	r3, #20
 80048cc:	4611      	mov	r1, r2
 80048ce:	2258      	movs	r2, #88	@ 0x58
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fc27 	bl	8005124 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 80048d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <USART_Init+0x8d0>)
 80048d8:	f993 3000 	ldrsb.w	r3, [r3]
 80048dc:	461a      	mov	r2, r3
 80048de:	2358      	movs	r3, #88	@ 0x58
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <USART_Init+0x8a0>)
 80048e6:	4413      	add	r3, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fd fdd3 	bl	8002494 <DMA_Init>
 80048ee:	e007      	b.n	8004900 <USART_Init+0x83c>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048fe:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7a1b      	ldrb	r3, [r3, #8]
 8004904:	2203      	movs	r2, #3
 8004906:	4293      	cmp	r3, r2
 8004908:	d107      	bne.n	800491a <USART_Init+0x856>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0208 	orr.w	r2, r2, #8
 8004918:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7a1b      	ldrb	r3, [r3, #8]
 800491e:	2205      	movs	r2, #5
 8004920:	4293      	cmp	r3, r2
 8004922:	d107      	bne.n	8004934 <USART_Init+0x870>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004932:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 020c 	orr.w	r2, r2, #12
 8004942:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004952:	60da      	str	r2, [r3, #12]

	return 1;
 8004954:	2301      	movs	r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	3738      	adds	r7, #56	@ 0x38
 800495a:	46bd      	mov	sp, r7
 800495c:	bdb0      	pop	{r4, r5, r7, pc}
 800495e:	bf00      	nop
 8004960:	40011000 	.word	0x40011000
 8004964:	200004c0 	.word	0x200004c0
 8004968:	08005ae4 	.word	0x08005ae4
 800496c:	08002fc5 	.word	0x08002fc5
 8004970:	40004400 	.word	0x40004400
 8004974:	08002ff5 	.word	0x08002ff5
 8004978:	40004800 	.word	0x40004800
 800497c:	08003025 	.word	0x08003025
 8004980:	40004c00 	.word	0x40004c00
 8004984:	08003055 	.word	0x08003055
 8004988:	40005000 	.word	0x40005000
 800498c:	08003085 	.word	0x08003085
 8004990:	080030b5 	.word	0x080030b5
 8004994:	200006d0 	.word	0x200006d0

08004998 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fe fd0c 	bl	80033c4 <USART_Get_Instance_Number>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 80049b2:	701a      	strb	r2, [r3, #0]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	7c5b      	ldrb	r3, [r3, #17]
 80049b8:	2201      	movs	r2, #1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	745a      	strb	r2, [r3, #17]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	7c5b      	ldrb	r3, [r3, #17]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80bb 	beq.w	8004b42 <USART_TX_Buffer+0x1aa>
		config -> Port -> SR &= ~USART_SR_TC;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049da:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 80049dc:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 80049de:	f993 3000 	ldrsb.w	r3, [r3]
 80049e2:	4618      	mov	r0, r3
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	4967      	ldr	r1, [pc, #412]	@ (8004b84 <USART_TX_Buffer+0x1ec>)
 80049e8:	2358      	movs	r3, #88	@ 0x58
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	440b      	add	r3, r1
 80049f0:	3330      	adds	r3, #48	@ 0x30
 80049f2:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	4b61      	ldr	r3, [pc, #388]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 80049fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004a00:	4618      	mov	r0, r3
 8004a02:	4611      	mov	r1, r2
 8004a04:	4a5f      	ldr	r2, [pc, #380]	@ (8004b84 <USART_TX_Buffer+0x1ec>)
 8004a06:	2358      	movs	r3, #88	@ 0x58
 8004a08:	fb00 f303 	mul.w	r3, r0, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	332c      	adds	r3, #44	@ 0x2c
 8004a10:	6019      	str	r1, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004a12:	4b5b      	ldr	r3, [pc, #364]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 8004a14:	f993 3000 	ldrsb.w	r3, [r3]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4a5a      	ldr	r2, [pc, #360]	@ (8004b84 <USART_TX_Buffer+0x1ec>)
 8004a1c:	2358      	movs	r3, #88	@ 0x58
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3334      	adds	r3, #52	@ 0x34
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8004a2a:	4b55      	ldr	r3, [pc, #340]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 8004a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a30:	461a      	mov	r2, r3
 8004a32:	2358      	movs	r3, #88	@ 0x58
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <USART_TX_Buffer+0x1ec>)
 8004a3a:	4413      	add	r3, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd ff1b 	bl	8002878 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004a42:	4b4f      	ldr	r3, [pc, #316]	@ (8004b80 <USART_TX_Buffer+0x1e8>)
 8004a44:	f993 3000 	ldrsb.w	r3, [r3]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2358      	movs	r3, #88	@ 0x58
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	4a4c      	ldr	r2, [pc, #304]	@ (8004b84 <USART_TX_Buffer+0x1ec>)
 8004a52:	4413      	add	r3, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd ff6f 	bl	8002938 <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a68:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a46      	ldr	r2, [pc, #280]	@ (8004b88 <USART_TX_Buffer+0x1f0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10c      	bne.n	8004a8e <USART_TX_Buffer+0xf6>
		{
			while(!U1TX_Complete){}
 8004a74:	bf00      	nop
 8004a76:	4b45      	ldr	r3, [pc, #276]	@ (8004b8c <USART_TX_Buffer+0x1f4>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f083 0301 	eor.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f7      	bne.n	8004a76 <USART_TX_Buffer+0xde>
			U1TX_Complete = 0;
 8004a86:	4b41      	ldr	r3, [pc, #260]	@ (8004b8c <USART_TX_Buffer+0x1f4>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e072      	b.n	8004b74 <USART_TX_Buffer+0x1dc>

		}
		else if(config->Port == USART2)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3f      	ldr	r2, [pc, #252]	@ (8004b90 <USART_TX_Buffer+0x1f8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10c      	bne.n	8004ab2 <USART_TX_Buffer+0x11a>
		{
			while(!U2TX_Complete){}
 8004a98:	bf00      	nop
 8004a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b94 <USART_TX_Buffer+0x1fc>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f083 0301 	eor.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f7      	bne.n	8004a9a <USART_TX_Buffer+0x102>
			U2TX_Complete = 0;
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8004b94 <USART_TX_Buffer+0x1fc>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e060      	b.n	8004b74 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART3)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	@ (8004b98 <USART_TX_Buffer+0x200>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10c      	bne.n	8004ad6 <USART_TX_Buffer+0x13e>
		{
			while(!U3TX_Complete){}
 8004abc:	bf00      	nop
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <USART_TX_Buffer+0x204>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f7      	bne.n	8004abe <USART_TX_Buffer+0x126>
			U3TX_Complete = 0;
 8004ace:	4b33      	ldr	r3, [pc, #204]	@ (8004b9c <USART_TX_Buffer+0x204>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e04e      	b.n	8004b74 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART4)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a31      	ldr	r2, [pc, #196]	@ (8004ba0 <USART_TX_Buffer+0x208>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10c      	bne.n	8004afa <USART_TX_Buffer+0x162>
		{
			while(!U4TX_Complete){}
 8004ae0:	bf00      	nop
 8004ae2:	4b30      	ldr	r3, [pc, #192]	@ (8004ba4 <USART_TX_Buffer+0x20c>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f083 0301 	eor.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f7      	bne.n	8004ae2 <USART_TX_Buffer+0x14a>
			U4TX_Complete = 0;
 8004af2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba4 <USART_TX_Buffer+0x20c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e03c      	b.n	8004b74 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART5)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba8 <USART_TX_Buffer+0x210>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10c      	bne.n	8004b1e <USART_TX_Buffer+0x186>
		{
			while(!U5TX_Complete){}
 8004b04:	bf00      	nop
 8004b06:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <USART_TX_Buffer+0x214>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f083 0301 	eor.w	r3, r3, #1
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f7      	bne.n	8004b06 <USART_TX_Buffer+0x16e>
			U5TX_Complete = 0;
 8004b16:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <USART_TX_Buffer+0x214>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e02a      	b.n	8004b74 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART6)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a23      	ldr	r2, [pc, #140]	@ (8004bb0 <USART_TX_Buffer+0x218>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d125      	bne.n	8004b74 <USART_TX_Buffer+0x1dc>
		{
			while(!U6TX_Complete){}
 8004b28:	bf00      	nop
 8004b2a:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <USART_TX_Buffer+0x21c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f083 0301 	eor.w	r3, r3, #1
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f7      	bne.n	8004b2a <USART_TX_Buffer+0x192>
			U6TX_Complete = 0;
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb4 <USART_TX_Buffer+0x21c>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e018      	b.n	8004b74 <USART_TX_Buffer+0x1dc>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e011      	b.n	8004b6c <USART_TX_Buffer+0x1d4>
		{
			config->Port->DR = tx_buffer[i];
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004b56:	bf00      	nop
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f8      	beq.n	8004b58 <USART_TX_Buffer+0x1c0>
		for(int i = 0; i <= length; i++)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	dde9      	ble.n	8004b48 <USART_TX_Buffer+0x1b0>
		}
	}

	return 1;
 8004b74:	2301      	movs	r3, #1

}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200006d0 	.word	0x200006d0
 8004b84:	200004c0 	.word	0x200004c0
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	200006ea 	.word	0x200006ea
 8004b90:	40004400 	.word	0x40004400
 8004b94:	200006ec 	.word	0x200006ec
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	200006ee 	.word	0x200006ee
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	200006f0 	.word	0x200006f0
 8004ba8:	40005000 	.word	0x40005000
 8004bac:	200006f2 	.word	0x200006f2
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	200006f4 	.word	0x200006f4

08004bb8 <__NVIC_SetPriority>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	@ (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	@ (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c1c:	d301      	bcc.n	8004c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e00f      	b.n	8004c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c22:	4a0a      	ldr	r2, [pc, #40]	@ (8004c4c <SysTick_Config+0x40>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c2a:	210f      	movs	r1, #15
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c30:	f7ff ffc2 	bl	8004bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c34:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <SysTick_Config+0x40>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c3a:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <SysTick_Config+0x40>)
 8004c3c:	2207      	movs	r2, #7
 8004c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	e000e010 	.word	0xe000e010

08004c50 <MCU_Clock_Setup>:
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	SystemInit();
 8004c56:	f000 f945 	bl	8004ee4 <SystemInit>
	uint8_t pll_m = 8;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004c5e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004c62:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004c68:	2307      	movs	r3, #7
 8004c6a:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004c72:	4b3b      	ldr	r3, [pc, #236]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3a      	ldr	r2, [pc, #232]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004c7e:	bf00      	nop
 8004c80:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f9      	beq.n	8004c80 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004c8c:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	4a33      	ldr	r2, [pc, #204]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004c98:	4b32      	ldr	r3, [pc, #200]	@ (8004d64 <MCU_Clock_Setup+0x114>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a31      	ldr	r2, [pc, #196]	@ (8004d64 <MCU_Clock_Setup+0x114>)
 8004c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ca2:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <MCU_Clock_Setup+0x118>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d68 <MCU_Clock_Setup+0x118>)
 8004caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cae:	f043 0305 	orr.w	r3, r3, #5
 8004cb2:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	78ba      	ldrb	r2, [r7, #2]
 8004cba:	0611      	lsls	r1, r2, #24
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	0412      	lsls	r2, r2, #16
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	88ba      	ldrh	r2, [r7, #4]
 8004cc4:	0192      	lsls	r2, r2, #6
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	79fa      	ldrb	r2, [r7, #7]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4a24      	ldr	r2, [pc, #144]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004cd4:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a21      	ldr	r2, [pc, #132]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cde:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cee:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004cf2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfe:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004d00:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004d0c:	bf00      	nop
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f9      	beq.n	8004d0e <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004d26:	bf00      	nop
 8004d28:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d1f9      	bne.n	8004d28 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004d34:	f000 f8e8 	bl	8004f08 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <MCU_Clock_Setup+0x11c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d70 <MCU_Clock_Setup+0x120>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff60 	bl	8004c0c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d50:	4a03      	ldr	r2, [pc, #12]	@ (8004d60 <MCU_Clock_Setup+0x110>)
 8004d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d56:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
 8004d68:	40023c00 	.word	0x40023c00
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	18618619 	.word	0x18618619

08004d74 <Delay_Config>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <Delay_Config+0x2c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <Delay_Config+0x2c>)
 8004d80:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004d84:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <Delay_Config+0x2c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <Delay_Config+0x2c>)
 8004d8e:	2205      	movs	r2, #5
 8004d90:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010

08004da4 <Delay_ms>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8004dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004db2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004df8 <Delay_ms+0x54>
 8004db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dbe:	ee17 3a90 	vmov	r3, s15
 8004dc2:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <Delay_ms+0x58>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <Delay_ms+0x58>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <Delay_ms+0x58>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a09      	ldr	r2, [pc, #36]	@ (8004dfc <Delay_ms+0x58>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004ddc:	bf00      	nop
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <Delay_ms+0x58>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f9      	beq.n	8004dde <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	48241000 	.word	0x48241000
 8004dfc:	e000e010 	.word	0xe000e010

08004e00 <Delay_milli>:
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8004e0a:	e00b      	b.n	8004e24 <Delay_milli+0x24>
		Delay_ms(1);
 8004e0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004e10:	f7ff ffc8 	bl	8004da4 <Delay_ms>
	for (; ms>0; ms--)
 8004e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e20:	edc7 7a01 	vstr	s15, [r7, #4]
 8004e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e30:	dcec      	bgt.n	8004e0c <Delay_milli+0xc>
	return ms;
 8004e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 3a90 	vmov	r3, s15
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <main>:
#include "Console/Console.h"



int main(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004e4c:	f7ff ff00 	bl	8004c50 <MCU_Clock_Setup>
	Delay_Config();
 8004e50:	f7ff ff90 	bl	8004d74 <Delay_Config>
	Console_Init(115200);
 8004e54:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8004e58:	f7fb ff2a 	bl	8000cb0 <Console_Init>


    /* Loop forever */
	for(;;)
	{
		printConsole("Hello \r\n");
 8004e5c:	4804      	ldr	r0, [pc, #16]	@ (8004e70 <main+0x28>)
 8004e5e:	f7fb ff5d 	bl	8000d1c <printConsole>
		Delay_milli(750);
 8004e62:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8004e74 <main+0x2c>
 8004e66:	f7ff ffcb 	bl	8004e00 <Delay_milli>
		printConsole("Hello \r\n");
 8004e6a:	bf00      	nop
 8004e6c:	e7f6      	b.n	8004e5c <main+0x14>
 8004e6e:	bf00      	nop
 8004e70:	08005ad0 	.word	0x08005ad0
 8004e74:	443b8000 	.word	0x443b8000

08004e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e80:	4a14      	ldr	r2, [pc, #80]	@ (8004ed4 <_sbrk+0x5c>)
 8004e82:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <_sbrk+0x60>)
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e8c:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <_sbrk+0x64>)
 8004e96:	4a12      	ldr	r2, [pc, #72]	@ (8004ee0 <_sbrk+0x68>)
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ea8:	f000 f910 	bl	80050cc <__errno>
 8004eac:	4603      	mov	r3, r0
 8004eae:	220c      	movs	r2, #12
 8004eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e009      	b.n	8004ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eb8:	4b08      	ldr	r3, [pc, #32]	@ (8004edc <_sbrk+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a05      	ldr	r2, [pc, #20]	@ (8004edc <_sbrk+0x64>)
 8004ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20020000 	.word	0x20020000
 8004ed8:	00000400 	.word	0x00000400
 8004edc:	200006f8 	.word	0x200006f8
 8004ee0:	20000848 	.word	0x20000848

08004ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <SystemInit+0x20>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <SystemInit+0x20>)
 8004ef0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	2302      	movs	r3, #2
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	2302      	movs	r3, #2
 8004f20:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004f22:	4b34      	ldr	r3, [pc, #208]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d011      	beq.n	8004f56 <SystemCoreClockUpdate+0x4e>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d844      	bhi.n	8004fc2 <SystemCoreClockUpdate+0xba>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <SystemCoreClockUpdate+0x3e>
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d004      	beq.n	8004f4e <SystemCoreClockUpdate+0x46>
 8004f44:	e03d      	b.n	8004fc2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004f46:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004f48:	4a2c      	ldr	r2, [pc, #176]	@ (8004ffc <SystemCoreClockUpdate+0xf4>)
 8004f4a:	601a      	str	r2, [r3, #0]
      break;
 8004f4c:	e03d      	b.n	8004fca <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004f50:	4a2b      	ldr	r2, [pc, #172]	@ (8005000 <SystemCoreClockUpdate+0xf8>)
 8004f52:	601a      	str	r2, [r3, #0]
      break;
 8004f54:	e039      	b.n	8004fca <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004f56:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	0d9b      	lsrs	r3, r3, #22
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f62:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f6a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004f72:	4a23      	ldr	r2, [pc, #140]	@ (8005000 <SystemCoreClockUpdate+0xf8>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004f7c:	6852      	ldr	r2, [r2, #4]
 8004f7e:	0992      	lsrs	r2, r2, #6
 8004f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e00b      	b.n	8004fa4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ffc <SystemCoreClockUpdate+0xf4>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004f96:	6852      	ldr	r2, [r2, #4]
 8004f98:	0992      	lsrs	r2, r2, #6
 8004f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004fa4:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004fbe:	6013      	str	r3, [r2, #0]
      break;
 8004fc0:	e003      	b.n	8004fca <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004ffc <SystemCoreClockUpdate+0xf4>)
 8004fc6:	601a      	str	r2, [r3, #0]
      break;
 8004fc8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <SystemCoreClockUpdate+0xec>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8005004 <SystemCoreClockUpdate+0xfc>)
 8004fd6:	5cd3      	ldrb	r3, [r2, r3]
 8004fd8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004fda:	4b07      	ldr	r3, [pc, #28]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <SystemCoreClockUpdate+0xf0>)
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200
 8005004:	08005ee8 	.word	0x08005ee8

08005008 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005008:	480d      	ldr	r0, [pc, #52]	@ (8005040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800500a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800500c:	f7ff ff6a 	bl	8004ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005010:	480c      	ldr	r0, [pc, #48]	@ (8005044 <LoopForever+0x6>)
  ldr r1, =_edata
 8005012:	490d      	ldr	r1, [pc, #52]	@ (8005048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <LoopForever+0xe>)
  movs r3, #0
 8005016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005018:	e002      	b.n	8005020 <LoopCopyDataInit>

0800501a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800501a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800501c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501e:	3304      	adds	r3, #4

08005020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005024:	d3f9      	bcc.n	800501a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005028:	4c0a      	ldr	r4, [pc, #40]	@ (8005054 <LoopForever+0x16>)
  movs r3, #0
 800502a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800502c:	e001      	b.n	8005032 <LoopFillZerobss>

0800502e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005030:	3204      	adds	r2, #4

08005032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005034:	d3fb      	bcc.n	800502e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005036:	f000 f84f 	bl	80050d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800503a:	f7ff ff05 	bl	8004e48 <main>

0800503e <LoopForever>:

LoopForever:
  b LoopForever
 800503e:	e7fe      	b.n	800503e <LoopForever>
  ldr   r0, =_estack
 8005040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005048:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800504c:	08005f44 	.word	0x08005f44
  ldr r2, =_sbss
 8005050:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8005054:	20000844 	.word	0x20000844

08005058 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005058:	e7fe      	b.n	8005058 <ADC_IRQHandler>

0800505a <_vsniprintf_r>:
 800505a:	b530      	push	{r4, r5, lr}
 800505c:	4614      	mov	r4, r2
 800505e:	2c00      	cmp	r4, #0
 8005060:	b09b      	sub	sp, #108	@ 0x6c
 8005062:	4605      	mov	r5, r0
 8005064:	461a      	mov	r2, r3
 8005066:	da05      	bge.n	8005074 <_vsniprintf_r+0x1a>
 8005068:	238b      	movs	r3, #139	@ 0x8b
 800506a:	6003      	str	r3, [r0, #0]
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	b01b      	add	sp, #108	@ 0x6c
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005078:	f8ad 300c 	strh.w	r3, [sp, #12]
 800507c:	bf14      	ite	ne
 800507e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005082:	4623      	moveq	r3, r4
 8005084:	9302      	str	r3, [sp, #8]
 8005086:	9305      	str	r3, [sp, #20]
 8005088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800508c:	9100      	str	r1, [sp, #0]
 800508e:	9104      	str	r1, [sp, #16]
 8005090:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005094:	4669      	mov	r1, sp
 8005096:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005098:	f000 f9a6 	bl	80053e8 <_svfiprintf_r>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	bfbc      	itt	lt
 80050a0:	238b      	movlt	r3, #139	@ 0x8b
 80050a2:	602b      	strlt	r3, [r5, #0]
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	d0e3      	beq.n	8005070 <_vsniprintf_r+0x16>
 80050a8:	9b00      	ldr	r3, [sp, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e7df      	b.n	8005070 <_vsniprintf_r+0x16>

080050b0 <vsniprintf>:
 80050b0:	b507      	push	{r0, r1, r2, lr}
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	460a      	mov	r2, r1
 80050b8:	4601      	mov	r1, r0
 80050ba:	4803      	ldr	r0, [pc, #12]	@ (80050c8 <vsniprintf+0x18>)
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f7ff ffcc 	bl	800505a <_vsniprintf_r>
 80050c2:	b003      	add	sp, #12
 80050c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80050c8:	20000004 	.word	0x20000004

080050cc <__errno>:
 80050cc:	4b01      	ldr	r3, [pc, #4]	@ (80050d4 <__errno+0x8>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004

080050d8 <__libc_init_array>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4d0d      	ldr	r5, [pc, #52]	@ (8005110 <__libc_init_array+0x38>)
 80050dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005114 <__libc_init_array+0x3c>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	2600      	movs	r6, #0
 80050e4:	42a6      	cmp	r6, r4
 80050e6:	d109      	bne.n	80050fc <__libc_init_array+0x24>
 80050e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005118 <__libc_init_array+0x40>)
 80050ea:	4c0c      	ldr	r4, [pc, #48]	@ (800511c <__libc_init_array+0x44>)
 80050ec:	f000 fce4 	bl	8005ab8 <_init>
 80050f0:	1b64      	subs	r4, r4, r5
 80050f2:	10a4      	asrs	r4, r4, #2
 80050f4:	2600      	movs	r6, #0
 80050f6:	42a6      	cmp	r6, r4
 80050f8:	d105      	bne.n	8005106 <__libc_init_array+0x2e>
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005100:	4798      	blx	r3
 8005102:	3601      	adds	r6, #1
 8005104:	e7ee      	b.n	80050e4 <__libc_init_array+0xc>
 8005106:	f855 3b04 	ldr.w	r3, [r5], #4
 800510a:	4798      	blx	r3
 800510c:	3601      	adds	r6, #1
 800510e:	e7f2      	b.n	80050f6 <__libc_init_array+0x1e>
 8005110:	08005f3c 	.word	0x08005f3c
 8005114:	08005f3c 	.word	0x08005f3c
 8005118:	08005f3c 	.word	0x08005f3c
 800511c:	08005f40 	.word	0x08005f40

08005120 <__retarget_lock_acquire_recursive>:
 8005120:	4770      	bx	lr

08005122 <__retarget_lock_release_recursive>:
 8005122:	4770      	bx	lr

08005124 <memcpy>:
 8005124:	440a      	add	r2, r1
 8005126:	4291      	cmp	r1, r2
 8005128:	f100 33ff 	add.w	r3, r0, #4294967295
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	4770      	bx	lr
 8005130:	b510      	push	{r4, lr}
 8005132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513a:	4291      	cmp	r1, r2
 800513c:	d1f9      	bne.n	8005132 <memcpy+0xe>
 800513e:	bd10      	pop	{r4, pc}

08005140 <_free_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4605      	mov	r5, r0
 8005144:	2900      	cmp	r1, #0
 8005146:	d041      	beq.n	80051cc <_free_r+0x8c>
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f0c      	subs	r4, r1, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfb8      	it	lt
 8005152:	18e4      	addlt	r4, r4, r3
 8005154:	f000 f8e0 	bl	8005318 <__malloc_lock>
 8005158:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <_free_r+0x90>)
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	b933      	cbnz	r3, 800516c <_free_r+0x2c>
 800515e:	6063      	str	r3, [r4, #4]
 8005160:	6014      	str	r4, [r2, #0]
 8005162:	4628      	mov	r0, r5
 8005164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005168:	f000 b8dc 	b.w	8005324 <__malloc_unlock>
 800516c:	42a3      	cmp	r3, r4
 800516e:	d908      	bls.n	8005182 <_free_r+0x42>
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	1821      	adds	r1, r4, r0
 8005174:	428b      	cmp	r3, r1
 8005176:	bf01      	itttt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	1809      	addeq	r1, r1, r0
 800517e:	6021      	streq	r1, [r4, #0]
 8005180:	e7ed      	b.n	800515e <_free_r+0x1e>
 8005182:	461a      	mov	r2, r3
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b10b      	cbz	r3, 800518c <_free_r+0x4c>
 8005188:	42a3      	cmp	r3, r4
 800518a:	d9fa      	bls.n	8005182 <_free_r+0x42>
 800518c:	6811      	ldr	r1, [r2, #0]
 800518e:	1850      	adds	r0, r2, r1
 8005190:	42a0      	cmp	r0, r4
 8005192:	d10b      	bne.n	80051ac <_free_r+0x6c>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	4401      	add	r1, r0
 8005198:	1850      	adds	r0, r2, r1
 800519a:	4283      	cmp	r3, r0
 800519c:	6011      	str	r1, [r2, #0]
 800519e:	d1e0      	bne.n	8005162 <_free_r+0x22>
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	6053      	str	r3, [r2, #4]
 80051a6:	4408      	add	r0, r1
 80051a8:	6010      	str	r0, [r2, #0]
 80051aa:	e7da      	b.n	8005162 <_free_r+0x22>
 80051ac:	d902      	bls.n	80051b4 <_free_r+0x74>
 80051ae:	230c      	movs	r3, #12
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	e7d6      	b.n	8005162 <_free_r+0x22>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	1821      	adds	r1, r4, r0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf04      	itt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	6063      	str	r3, [r4, #4]
 80051c2:	bf04      	itt	eq
 80051c4:	1809      	addeq	r1, r1, r0
 80051c6:	6021      	streq	r1, [r4, #0]
 80051c8:	6054      	str	r4, [r2, #4]
 80051ca:	e7ca      	b.n	8005162 <_free_r+0x22>
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
 80051ce:	bf00      	nop
 80051d0:	20000840 	.word	0x20000840

080051d4 <sbrk_aligned>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005214 <sbrk_aligned+0x40>)
 80051d8:	460c      	mov	r4, r1
 80051da:	6831      	ldr	r1, [r6, #0]
 80051dc:	4605      	mov	r5, r0
 80051de:	b911      	cbnz	r1, 80051e6 <sbrk_aligned+0x12>
 80051e0:	f000 fba6 	bl	8005930 <_sbrk_r>
 80051e4:	6030      	str	r0, [r6, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fba1 	bl	8005930 <_sbrk_r>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d103      	bne.n	80051fa <sbrk_aligned+0x26>
 80051f2:	f04f 34ff 	mov.w	r4, #4294967295
 80051f6:	4620      	mov	r0, r4
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d0f8      	beq.n	80051f6 <sbrk_aligned+0x22>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fb92 	bl	8005930 <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d1f2      	bne.n	80051f6 <sbrk_aligned+0x22>
 8005210:	e7ef      	b.n	80051f2 <sbrk_aligned+0x1e>
 8005212:	bf00      	nop
 8005214:	2000083c 	.word	0x2000083c

08005218 <_malloc_r>:
 8005218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800521c:	1ccd      	adds	r5, r1, #3
 800521e:	f025 0503 	bic.w	r5, r5, #3
 8005222:	3508      	adds	r5, #8
 8005224:	2d0c      	cmp	r5, #12
 8005226:	bf38      	it	cc
 8005228:	250c      	movcc	r5, #12
 800522a:	2d00      	cmp	r5, #0
 800522c:	4606      	mov	r6, r0
 800522e:	db01      	blt.n	8005234 <_malloc_r+0x1c>
 8005230:	42a9      	cmp	r1, r5
 8005232:	d904      	bls.n	800523e <_malloc_r+0x26>
 8005234:	230c      	movs	r3, #12
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	2000      	movs	r0, #0
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005314 <_malloc_r+0xfc>
 8005242:	f000 f869 	bl	8005318 <__malloc_lock>
 8005246:	f8d8 3000 	ldr.w	r3, [r8]
 800524a:	461c      	mov	r4, r3
 800524c:	bb44      	cbnz	r4, 80052a0 <_malloc_r+0x88>
 800524e:	4629      	mov	r1, r5
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff ffbf 	bl	80051d4 <sbrk_aligned>
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	4604      	mov	r4, r0
 800525a:	d158      	bne.n	800530e <_malloc_r+0xf6>
 800525c:	f8d8 4000 	ldr.w	r4, [r8]
 8005260:	4627      	mov	r7, r4
 8005262:	2f00      	cmp	r7, #0
 8005264:	d143      	bne.n	80052ee <_malloc_r+0xd6>
 8005266:	2c00      	cmp	r4, #0
 8005268:	d04b      	beq.n	8005302 <_malloc_r+0xea>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	eb04 0903 	add.w	r9, r4, r3
 8005274:	f000 fb5c 	bl	8005930 <_sbrk_r>
 8005278:	4581      	cmp	r9, r0
 800527a:	d142      	bne.n	8005302 <_malloc_r+0xea>
 800527c:	6821      	ldr	r1, [r4, #0]
 800527e:	1a6d      	subs	r5, r5, r1
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ffa6 	bl	80051d4 <sbrk_aligned>
 8005288:	3001      	adds	r0, #1
 800528a:	d03a      	beq.n	8005302 <_malloc_r+0xea>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	442b      	add	r3, r5
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	f8d8 3000 	ldr.w	r3, [r8]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	bb62      	cbnz	r2, 80052f4 <_malloc_r+0xdc>
 800529a:	f8c8 7000 	str.w	r7, [r8]
 800529e:	e00f      	b.n	80052c0 <_malloc_r+0xa8>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	1b52      	subs	r2, r2, r5
 80052a4:	d420      	bmi.n	80052e8 <_malloc_r+0xd0>
 80052a6:	2a0b      	cmp	r2, #11
 80052a8:	d917      	bls.n	80052da <_malloc_r+0xc2>
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	6059      	strne	r1, [r3, #4]
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	bf08      	it	eq
 80052b8:	f8c8 1000 	streq.w	r1, [r8]
 80052bc:	5162      	str	r2, [r4, r5]
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f82f 	bl	8005324 <__malloc_unlock>
 80052c6:	f104 000b 	add.w	r0, r4, #11
 80052ca:	1d23      	adds	r3, r4, #4
 80052cc:	f020 0007 	bic.w	r0, r0, #7
 80052d0:	1ac2      	subs	r2, r0, r3
 80052d2:	bf1c      	itt	ne
 80052d4:	1a1b      	subne	r3, r3, r0
 80052d6:	50a3      	strne	r3, [r4, r2]
 80052d8:	e7af      	b.n	800523a <_malloc_r+0x22>
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	bf0c      	ite	eq
 80052e0:	f8c8 2000 	streq.w	r2, [r8]
 80052e4:	605a      	strne	r2, [r3, #4]
 80052e6:	e7eb      	b.n	80052c0 <_malloc_r+0xa8>
 80052e8:	4623      	mov	r3, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7ae      	b.n	800524c <_malloc_r+0x34>
 80052ee:	463c      	mov	r4, r7
 80052f0:	687f      	ldr	r7, [r7, #4]
 80052f2:	e7b6      	b.n	8005262 <_malloc_r+0x4a>
 80052f4:	461a      	mov	r2, r3
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d1fb      	bne.n	80052f4 <_malloc_r+0xdc>
 80052fc:	2300      	movs	r3, #0
 80052fe:	6053      	str	r3, [r2, #4]
 8005300:	e7de      	b.n	80052c0 <_malloc_r+0xa8>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	4630      	mov	r0, r6
 8005308:	f000 f80c 	bl	8005324 <__malloc_unlock>
 800530c:	e794      	b.n	8005238 <_malloc_r+0x20>
 800530e:	6005      	str	r5, [r0, #0]
 8005310:	e7d6      	b.n	80052c0 <_malloc_r+0xa8>
 8005312:	bf00      	nop
 8005314:	20000840 	.word	0x20000840

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_lock+0x8>)
 800531a:	f7ff bf01 	b.w	8005120 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20000838 	.word	0x20000838

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	@ (800532c <__malloc_unlock+0x8>)
 8005326:	f7ff befc 	b.w	8005122 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20000838 	.word	0x20000838

08005330 <__ssputs_r>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	688e      	ldr	r6, [r1, #8]
 8005336:	461f      	mov	r7, r3
 8005338:	42be      	cmp	r6, r7
 800533a:	680b      	ldr	r3, [r1, #0]
 800533c:	4682      	mov	sl, r0
 800533e:	460c      	mov	r4, r1
 8005340:	4690      	mov	r8, r2
 8005342:	d82d      	bhi.n	80053a0 <__ssputs_r+0x70>
 8005344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005348:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800534c:	d026      	beq.n	800539c <__ssputs_r+0x6c>
 800534e:	6965      	ldr	r5, [r4, #20]
 8005350:	6909      	ldr	r1, [r1, #16]
 8005352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005356:	eba3 0901 	sub.w	r9, r3, r1
 800535a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800535e:	1c7b      	adds	r3, r7, #1
 8005360:	444b      	add	r3, r9
 8005362:	106d      	asrs	r5, r5, #1
 8005364:	429d      	cmp	r5, r3
 8005366:	bf38      	it	cc
 8005368:	461d      	movcc	r5, r3
 800536a:	0553      	lsls	r3, r2, #21
 800536c:	d527      	bpl.n	80053be <__ssputs_r+0x8e>
 800536e:	4629      	mov	r1, r5
 8005370:	f7ff ff52 	bl	8005218 <_malloc_r>
 8005374:	4606      	mov	r6, r0
 8005376:	b360      	cbz	r0, 80053d2 <__ssputs_r+0xa2>
 8005378:	6921      	ldr	r1, [r4, #16]
 800537a:	464a      	mov	r2, r9
 800537c:	f7ff fed2 	bl	8005124 <memcpy>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538a:	81a3      	strh	r3, [r4, #12]
 800538c:	6126      	str	r6, [r4, #16]
 800538e:	6165      	str	r5, [r4, #20]
 8005390:	444e      	add	r6, r9
 8005392:	eba5 0509 	sub.w	r5, r5, r9
 8005396:	6026      	str	r6, [r4, #0]
 8005398:	60a5      	str	r5, [r4, #8]
 800539a:	463e      	mov	r6, r7
 800539c:	42be      	cmp	r6, r7
 800539e:	d900      	bls.n	80053a2 <__ssputs_r+0x72>
 80053a0:	463e      	mov	r6, r7
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	4632      	mov	r2, r6
 80053a6:	4641      	mov	r1, r8
 80053a8:	f000 faa8 	bl	80058fc <memmove>
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	1b9b      	subs	r3, r3, r6
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	4433      	add	r3, r6
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	2000      	movs	r0, #0
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	462a      	mov	r2, r5
 80053c0:	f000 fac6 	bl	8005950 <_realloc_r>
 80053c4:	4606      	mov	r6, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1e0      	bne.n	800538c <__ssputs_r+0x5c>
 80053ca:	6921      	ldr	r1, [r4, #16]
 80053cc:	4650      	mov	r0, sl
 80053ce:	f7ff feb7 	bl	8005140 <_free_r>
 80053d2:	230c      	movs	r3, #12
 80053d4:	f8ca 3000 	str.w	r3, [sl]
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e7e9      	b.n	80053ba <__ssputs_r+0x8a>
	...

080053e8 <_svfiprintf_r>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	4698      	mov	r8, r3
 80053ee:	898b      	ldrh	r3, [r1, #12]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	b09d      	sub	sp, #116	@ 0x74
 80053f4:	4607      	mov	r7, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	d510      	bpl.n	800541e <_svfiprintf_r+0x36>
 80053fc:	690b      	ldr	r3, [r1, #16]
 80053fe:	b973      	cbnz	r3, 800541e <_svfiprintf_r+0x36>
 8005400:	2140      	movs	r1, #64	@ 0x40
 8005402:	f7ff ff09 	bl	8005218 <_malloc_r>
 8005406:	6028      	str	r0, [r5, #0]
 8005408:	6128      	str	r0, [r5, #16]
 800540a:	b930      	cbnz	r0, 800541a <_svfiprintf_r+0x32>
 800540c:	230c      	movs	r3, #12
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b01d      	add	sp, #116	@ 0x74
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	2340      	movs	r3, #64	@ 0x40
 800541c:	616b      	str	r3, [r5, #20]
 800541e:	2300      	movs	r3, #0
 8005420:	9309      	str	r3, [sp, #36]	@ 0x24
 8005422:	2320      	movs	r3, #32
 8005424:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005428:	f8cd 800c 	str.w	r8, [sp, #12]
 800542c:	2330      	movs	r3, #48	@ 0x30
 800542e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055cc <_svfiprintf_r+0x1e4>
 8005432:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005436:	f04f 0901 	mov.w	r9, #1
 800543a:	4623      	mov	r3, r4
 800543c:	469a      	mov	sl, r3
 800543e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005442:	b10a      	cbz	r2, 8005448 <_svfiprintf_r+0x60>
 8005444:	2a25      	cmp	r2, #37	@ 0x25
 8005446:	d1f9      	bne.n	800543c <_svfiprintf_r+0x54>
 8005448:	ebba 0b04 	subs.w	fp, sl, r4
 800544c:	d00b      	beq.n	8005466 <_svfiprintf_r+0x7e>
 800544e:	465b      	mov	r3, fp
 8005450:	4622      	mov	r2, r4
 8005452:	4629      	mov	r1, r5
 8005454:	4638      	mov	r0, r7
 8005456:	f7ff ff6b 	bl	8005330 <__ssputs_r>
 800545a:	3001      	adds	r0, #1
 800545c:	f000 80a7 	beq.w	80055ae <_svfiprintf_r+0x1c6>
 8005460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005462:	445a      	add	r2, fp
 8005464:	9209      	str	r2, [sp, #36]	@ 0x24
 8005466:	f89a 3000 	ldrb.w	r3, [sl]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 809f 	beq.w	80055ae <_svfiprintf_r+0x1c6>
 8005470:	2300      	movs	r3, #0
 8005472:	f04f 32ff 	mov.w	r2, #4294967295
 8005476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800547a:	f10a 0a01 	add.w	sl, sl, #1
 800547e:	9304      	str	r3, [sp, #16]
 8005480:	9307      	str	r3, [sp, #28]
 8005482:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005486:	931a      	str	r3, [sp, #104]	@ 0x68
 8005488:	4654      	mov	r4, sl
 800548a:	2205      	movs	r2, #5
 800548c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005490:	484e      	ldr	r0, [pc, #312]	@ (80055cc <_svfiprintf_r+0x1e4>)
 8005492:	f7fa fea5 	bl	80001e0 <memchr>
 8005496:	9a04      	ldr	r2, [sp, #16]
 8005498:	b9d8      	cbnz	r0, 80054d2 <_svfiprintf_r+0xea>
 800549a:	06d0      	lsls	r0, r2, #27
 800549c:	bf44      	itt	mi
 800549e:	2320      	movmi	r3, #32
 80054a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054a4:	0711      	lsls	r1, r2, #28
 80054a6:	bf44      	itt	mi
 80054a8:	232b      	movmi	r3, #43	@ 0x2b
 80054aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054ae:	f89a 3000 	ldrb.w	r3, [sl]
 80054b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054b4:	d015      	beq.n	80054e2 <_svfiprintf_r+0xfa>
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	4654      	mov	r4, sl
 80054ba:	2000      	movs	r0, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4621      	mov	r1, r4
 80054c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c6:	3b30      	subs	r3, #48	@ 0x30
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d94b      	bls.n	8005564 <_svfiprintf_r+0x17c>
 80054cc:	b1b0      	cbz	r0, 80054fc <_svfiprintf_r+0x114>
 80054ce:	9207      	str	r2, [sp, #28]
 80054d0:	e014      	b.n	80054fc <_svfiprintf_r+0x114>
 80054d2:	eba0 0308 	sub.w	r3, r0, r8
 80054d6:	fa09 f303 	lsl.w	r3, r9, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	46a2      	mov	sl, r4
 80054e0:	e7d2      	b.n	8005488 <_svfiprintf_r+0xa0>
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	1d19      	adds	r1, r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	9103      	str	r1, [sp, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfbb      	ittet	lt
 80054ee:	425b      	neglt	r3, r3
 80054f0:	f042 0202 	orrlt.w	r2, r2, #2
 80054f4:	9307      	strge	r3, [sp, #28]
 80054f6:	9307      	strlt	r3, [sp, #28]
 80054f8:	bfb8      	it	lt
 80054fa:	9204      	strlt	r2, [sp, #16]
 80054fc:	7823      	ldrb	r3, [r4, #0]
 80054fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005500:	d10a      	bne.n	8005518 <_svfiprintf_r+0x130>
 8005502:	7863      	ldrb	r3, [r4, #1]
 8005504:	2b2a      	cmp	r3, #42	@ 0x2a
 8005506:	d132      	bne.n	800556e <_svfiprintf_r+0x186>
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	9203      	str	r2, [sp, #12]
 8005510:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005514:	3402      	adds	r4, #2
 8005516:	9305      	str	r3, [sp, #20]
 8005518:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055dc <_svfiprintf_r+0x1f4>
 800551c:	7821      	ldrb	r1, [r4, #0]
 800551e:	2203      	movs	r2, #3
 8005520:	4650      	mov	r0, sl
 8005522:	f7fa fe5d 	bl	80001e0 <memchr>
 8005526:	b138      	cbz	r0, 8005538 <_svfiprintf_r+0x150>
 8005528:	9b04      	ldr	r3, [sp, #16]
 800552a:	eba0 000a 	sub.w	r0, r0, sl
 800552e:	2240      	movs	r2, #64	@ 0x40
 8005530:	4082      	lsls	r2, r0
 8005532:	4313      	orrs	r3, r2
 8005534:	3401      	adds	r4, #1
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	4824      	ldr	r0, [pc, #144]	@ (80055d0 <_svfiprintf_r+0x1e8>)
 800553e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005542:	2206      	movs	r2, #6
 8005544:	f7fa fe4c 	bl	80001e0 <memchr>
 8005548:	2800      	cmp	r0, #0
 800554a:	d036      	beq.n	80055ba <_svfiprintf_r+0x1d2>
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <_svfiprintf_r+0x1ec>)
 800554e:	bb1b      	cbnz	r3, 8005598 <_svfiprintf_r+0x1b0>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	3307      	adds	r3, #7
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800555e:	4433      	add	r3, r6
 8005560:	9309      	str	r3, [sp, #36]	@ 0x24
 8005562:	e76a      	b.n	800543a <_svfiprintf_r+0x52>
 8005564:	fb0c 3202 	mla	r2, ip, r2, r3
 8005568:	460c      	mov	r4, r1
 800556a:	2001      	movs	r0, #1
 800556c:	e7a8      	b.n	80054c0 <_svfiprintf_r+0xd8>
 800556e:	2300      	movs	r3, #0
 8005570:	3401      	adds	r4, #1
 8005572:	9305      	str	r3, [sp, #20]
 8005574:	4619      	mov	r1, r3
 8005576:	f04f 0c0a 	mov.w	ip, #10
 800557a:	4620      	mov	r0, r4
 800557c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005580:	3a30      	subs	r2, #48	@ 0x30
 8005582:	2a09      	cmp	r2, #9
 8005584:	d903      	bls.n	800558e <_svfiprintf_r+0x1a6>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0c6      	beq.n	8005518 <_svfiprintf_r+0x130>
 800558a:	9105      	str	r1, [sp, #20]
 800558c:	e7c4      	b.n	8005518 <_svfiprintf_r+0x130>
 800558e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005592:	4604      	mov	r4, r0
 8005594:	2301      	movs	r3, #1
 8005596:	e7f0      	b.n	800557a <_svfiprintf_r+0x192>
 8005598:	ab03      	add	r3, sp, #12
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	462a      	mov	r2, r5
 800559e:	4b0e      	ldr	r3, [pc, #56]	@ (80055d8 <_svfiprintf_r+0x1f0>)
 80055a0:	a904      	add	r1, sp, #16
 80055a2:	4638      	mov	r0, r7
 80055a4:	f3af 8000 	nop.w
 80055a8:	1c42      	adds	r2, r0, #1
 80055aa:	4606      	mov	r6, r0
 80055ac:	d1d6      	bne.n	800555c <_svfiprintf_r+0x174>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	065b      	lsls	r3, r3, #25
 80055b2:	f53f af2d 	bmi.w	8005410 <_svfiprintf_r+0x28>
 80055b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b8:	e72c      	b.n	8005414 <_svfiprintf_r+0x2c>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <_svfiprintf_r+0x1f0>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4638      	mov	r0, r7
 80055c6:	f000 f879 	bl	80056bc <_printf_i>
 80055ca:	e7ed      	b.n	80055a8 <_svfiprintf_r+0x1c0>
 80055cc:	08005f00 	.word	0x08005f00
 80055d0:	08005f0a 	.word	0x08005f0a
 80055d4:	00000000 	.word	0x00000000
 80055d8:	08005331 	.word	0x08005331
 80055dc:	08005f06 	.word	0x08005f06

080055e0 <_printf_common>:
 80055e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	4616      	mov	r6, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	688a      	ldr	r2, [r1, #8]
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bfb8      	it	lt
 80055f4:	4613      	movlt	r3, r2
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055fc:	4607      	mov	r7, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	b10a      	cbz	r2, 8005606 <_printf_common+0x26>
 8005602:	3301      	adds	r3, #1
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	6833      	ldrmi	r3, [r6, #0]
 800560e:	3302      	addmi	r3, #2
 8005610:	6033      	strmi	r3, [r6, #0]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d106      	bne.n	8005628 <_printf_common+0x48>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	6832      	ldr	r2, [r6, #0]
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	42ab      	cmp	r3, r5
 8005626:	dc26      	bgt.n	8005676 <_printf_common+0x96>
 8005628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	3b00      	subs	r3, #0
 8005630:	bf18      	it	ne
 8005632:	2301      	movne	r3, #1
 8005634:	0692      	lsls	r2, r2, #26
 8005636:	d42b      	bmi.n	8005690 <_printf_common+0xb0>
 8005638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800563c:	4641      	mov	r1, r8
 800563e:	4638      	mov	r0, r7
 8005640:	47c8      	blx	r9
 8005642:	3001      	adds	r0, #1
 8005644:	d01e      	beq.n	8005684 <_printf_common+0xa4>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	f003 0306 	and.w	r3, r3, #6
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf02      	ittt	eq
 8005652:	68e5      	ldreq	r5, [r4, #12]
 8005654:	6833      	ldreq	r3, [r6, #0]
 8005656:	1aed      	subeq	r5, r5, r3
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	2600      	movs	r6, #0
 800566c:	341a      	adds	r4, #26
 800566e:	42b5      	cmp	r5, r6
 8005670:	d11a      	bne.n	80056a8 <_printf_common+0xc8>
 8005672:	2000      	movs	r0, #0
 8005674:	e008      	b.n	8005688 <_printf_common+0xa8>
 8005676:	2301      	movs	r3, #1
 8005678:	4652      	mov	r2, sl
 800567a:	4641      	mov	r1, r8
 800567c:	4638      	mov	r0, r7
 800567e:	47c8      	blx	r9
 8005680:	3001      	adds	r0, #1
 8005682:	d103      	bne.n	800568c <_printf_common+0xac>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	3501      	adds	r5, #1
 800568e:	e7c6      	b.n	800561e <_printf_common+0x3e>
 8005690:	18e1      	adds	r1, r4, r3
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	2030      	movs	r0, #48	@ 0x30
 8005696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800569a:	4422      	add	r2, r4
 800569c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056a4:	3302      	adds	r3, #2
 80056a6:	e7c7      	b.n	8005638 <_printf_common+0x58>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4622      	mov	r2, r4
 80056ac:	4641      	mov	r1, r8
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d0e6      	beq.n	8005684 <_printf_common+0xa4>
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7d9      	b.n	800566e <_printf_common+0x8e>
	...

080056bc <_printf_i>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	7e0f      	ldrb	r7, [r1, #24]
 80056c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c4:	2f78      	cmp	r7, #120	@ 0x78
 80056c6:	4691      	mov	r9, r2
 80056c8:	4680      	mov	r8, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	469a      	mov	sl, r3
 80056ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056d2:	d807      	bhi.n	80056e4 <_printf_i+0x28>
 80056d4:	2f62      	cmp	r7, #98	@ 0x62
 80056d6:	d80a      	bhi.n	80056ee <_printf_i+0x32>
 80056d8:	2f00      	cmp	r7, #0
 80056da:	f000 80d2 	beq.w	8005882 <_printf_i+0x1c6>
 80056de:	2f58      	cmp	r7, #88	@ 0x58
 80056e0:	f000 80b9 	beq.w	8005856 <_printf_i+0x19a>
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056ec:	e03a      	b.n	8005764 <_printf_i+0xa8>
 80056ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056f2:	2b15      	cmp	r3, #21
 80056f4:	d8f6      	bhi.n	80056e4 <_printf_i+0x28>
 80056f6:	a101      	add	r1, pc, #4	@ (adr r1, 80056fc <_printf_i+0x40>)
 80056f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056fc:	08005755 	.word	0x08005755
 8005700:	08005769 	.word	0x08005769
 8005704:	080056e5 	.word	0x080056e5
 8005708:	080056e5 	.word	0x080056e5
 800570c:	080056e5 	.word	0x080056e5
 8005710:	080056e5 	.word	0x080056e5
 8005714:	08005769 	.word	0x08005769
 8005718:	080056e5 	.word	0x080056e5
 800571c:	080056e5 	.word	0x080056e5
 8005720:	080056e5 	.word	0x080056e5
 8005724:	080056e5 	.word	0x080056e5
 8005728:	08005869 	.word	0x08005869
 800572c:	08005793 	.word	0x08005793
 8005730:	08005823 	.word	0x08005823
 8005734:	080056e5 	.word	0x080056e5
 8005738:	080056e5 	.word	0x080056e5
 800573c:	0800588b 	.word	0x0800588b
 8005740:	080056e5 	.word	0x080056e5
 8005744:	08005793 	.word	0x08005793
 8005748:	080056e5 	.word	0x080056e5
 800574c:	080056e5 	.word	0x080056e5
 8005750:	0800582b 	.word	0x0800582b
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6032      	str	r2, [r6, #0]
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005764:	2301      	movs	r3, #1
 8005766:	e09d      	b.n	80058a4 <_printf_i+0x1e8>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	6031      	str	r1, [r6, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	d501      	bpl.n	8005778 <_printf_i+0xbc>
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	e003      	b.n	8005780 <_printf_i+0xc4>
 8005778:	0645      	lsls	r5, r0, #25
 800577a:	d5fb      	bpl.n	8005774 <_printf_i+0xb8>
 800577c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005780:	2d00      	cmp	r5, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xd0>
 8005784:	232d      	movs	r3, #45	@ 0x2d
 8005786:	426d      	negs	r5, r5
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800578c:	4859      	ldr	r0, [pc, #356]	@ (80058f4 <_printf_i+0x238>)
 800578e:	230a      	movs	r3, #10
 8005790:	e011      	b.n	80057b6 <_printf_i+0xfa>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	6833      	ldr	r3, [r6, #0]
 8005796:	0608      	lsls	r0, r1, #24
 8005798:	f853 5b04 	ldr.w	r5, [r3], #4
 800579c:	d402      	bmi.n	80057a4 <_printf_i+0xe8>
 800579e:	0649      	lsls	r1, r1, #25
 80057a0:	bf48      	it	mi
 80057a2:	b2ad      	uxthmi	r5, r5
 80057a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057a6:	4853      	ldr	r0, [pc, #332]	@ (80058f4 <_printf_i+0x238>)
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	bf14      	ite	ne
 80057ac:	230a      	movne	r3, #10
 80057ae:	2308      	moveq	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057b6:	6866      	ldr	r6, [r4, #4]
 80057b8:	60a6      	str	r6, [r4, #8]
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	bfa2      	ittt	ge
 80057be:	6821      	ldrge	r1, [r4, #0]
 80057c0:	f021 0104 	bicge.w	r1, r1, #4
 80057c4:	6021      	strge	r1, [r4, #0]
 80057c6:	b90d      	cbnz	r5, 80057cc <_printf_i+0x110>
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	d04b      	beq.n	8005864 <_printf_i+0x1a8>
 80057cc:	4616      	mov	r6, r2
 80057ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80057d2:	fb03 5711 	mls	r7, r3, r1, r5
 80057d6:	5dc7      	ldrb	r7, [r0, r7]
 80057d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057dc:	462f      	mov	r7, r5
 80057de:	42bb      	cmp	r3, r7
 80057e0:	460d      	mov	r5, r1
 80057e2:	d9f4      	bls.n	80057ce <_printf_i+0x112>
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d10b      	bne.n	8005800 <_printf_i+0x144>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	07df      	lsls	r7, r3, #31
 80057ec:	d508      	bpl.n	8005800 <_printf_i+0x144>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	6861      	ldr	r1, [r4, #4]
 80057f2:	4299      	cmp	r1, r3
 80057f4:	bfde      	ittt	le
 80057f6:	2330      	movle	r3, #48	@ 0x30
 80057f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005800:	1b92      	subs	r2, r2, r6
 8005802:	6122      	str	r2, [r4, #16]
 8005804:	f8cd a000 	str.w	sl, [sp]
 8005808:	464b      	mov	r3, r9
 800580a:	aa03      	add	r2, sp, #12
 800580c:	4621      	mov	r1, r4
 800580e:	4640      	mov	r0, r8
 8005810:	f7ff fee6 	bl	80055e0 <_printf_common>
 8005814:	3001      	adds	r0, #1
 8005816:	d14a      	bne.n	80058ae <_printf_i+0x1f2>
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	b004      	add	sp, #16
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	f043 0320 	orr.w	r3, r3, #32
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	4833      	ldr	r0, [pc, #204]	@ (80058f8 <_printf_i+0x23c>)
 800582c:	2778      	movs	r7, #120	@ 0x78
 800582e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	6831      	ldr	r1, [r6, #0]
 8005836:	061f      	lsls	r7, r3, #24
 8005838:	f851 5b04 	ldr.w	r5, [r1], #4
 800583c:	d402      	bmi.n	8005844 <_printf_i+0x188>
 800583e:	065f      	lsls	r7, r3, #25
 8005840:	bf48      	it	mi
 8005842:	b2ad      	uxthmi	r5, r5
 8005844:	6031      	str	r1, [r6, #0]
 8005846:	07d9      	lsls	r1, r3, #31
 8005848:	bf44      	itt	mi
 800584a:	f043 0320 	orrmi.w	r3, r3, #32
 800584e:	6023      	strmi	r3, [r4, #0]
 8005850:	b11d      	cbz	r5, 800585a <_printf_i+0x19e>
 8005852:	2310      	movs	r3, #16
 8005854:	e7ac      	b.n	80057b0 <_printf_i+0xf4>
 8005856:	4827      	ldr	r0, [pc, #156]	@ (80058f4 <_printf_i+0x238>)
 8005858:	e7e9      	b.n	800582e <_printf_i+0x172>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f023 0320 	bic.w	r3, r3, #32
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	e7f6      	b.n	8005852 <_printf_i+0x196>
 8005864:	4616      	mov	r6, r2
 8005866:	e7bd      	b.n	80057e4 <_printf_i+0x128>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	6825      	ldr	r5, [r4, #0]
 800586c:	6961      	ldr	r1, [r4, #20]
 800586e:	1d18      	adds	r0, r3, #4
 8005870:	6030      	str	r0, [r6, #0]
 8005872:	062e      	lsls	r6, r5, #24
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	d501      	bpl.n	800587c <_printf_i+0x1c0>
 8005878:	6019      	str	r1, [r3, #0]
 800587a:	e002      	b.n	8005882 <_printf_i+0x1c6>
 800587c:	0668      	lsls	r0, r5, #25
 800587e:	d5fb      	bpl.n	8005878 <_printf_i+0x1bc>
 8005880:	8019      	strh	r1, [r3, #0]
 8005882:	2300      	movs	r3, #0
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	4616      	mov	r6, r2
 8005888:	e7bc      	b.n	8005804 <_printf_i+0x148>
 800588a:	6833      	ldr	r3, [r6, #0]
 800588c:	1d1a      	adds	r2, r3, #4
 800588e:	6032      	str	r2, [r6, #0]
 8005890:	681e      	ldr	r6, [r3, #0]
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	2100      	movs	r1, #0
 8005896:	4630      	mov	r0, r6
 8005898:	f7fa fca2 	bl	80001e0 <memchr>
 800589c:	b108      	cbz	r0, 80058a2 <_printf_i+0x1e6>
 800589e:	1b80      	subs	r0, r0, r6
 80058a0:	6060      	str	r0, [r4, #4]
 80058a2:	6863      	ldr	r3, [r4, #4]
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	2300      	movs	r3, #0
 80058a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ac:	e7aa      	b.n	8005804 <_printf_i+0x148>
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	4632      	mov	r2, r6
 80058b2:	4649      	mov	r1, r9
 80058b4:	4640      	mov	r0, r8
 80058b6:	47d0      	blx	sl
 80058b8:	3001      	adds	r0, #1
 80058ba:	d0ad      	beq.n	8005818 <_printf_i+0x15c>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	079b      	lsls	r3, r3, #30
 80058c0:	d413      	bmi.n	80058ea <_printf_i+0x22e>
 80058c2:	68e0      	ldr	r0, [r4, #12]
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	4298      	cmp	r0, r3
 80058c8:	bfb8      	it	lt
 80058ca:	4618      	movlt	r0, r3
 80058cc:	e7a6      	b.n	800581c <_printf_i+0x160>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4632      	mov	r2, r6
 80058d2:	4649      	mov	r1, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	47d0      	blx	sl
 80058d8:	3001      	adds	r0, #1
 80058da:	d09d      	beq.n	8005818 <_printf_i+0x15c>
 80058dc:	3501      	adds	r5, #1
 80058de:	68e3      	ldr	r3, [r4, #12]
 80058e0:	9903      	ldr	r1, [sp, #12]
 80058e2:	1a5b      	subs	r3, r3, r1
 80058e4:	42ab      	cmp	r3, r5
 80058e6:	dcf2      	bgt.n	80058ce <_printf_i+0x212>
 80058e8:	e7eb      	b.n	80058c2 <_printf_i+0x206>
 80058ea:	2500      	movs	r5, #0
 80058ec:	f104 0619 	add.w	r6, r4, #25
 80058f0:	e7f5      	b.n	80058de <_printf_i+0x222>
 80058f2:	bf00      	nop
 80058f4:	08005f11 	.word	0x08005f11
 80058f8:	08005f22 	.word	0x08005f22

080058fc <memmove>:
 80058fc:	4288      	cmp	r0, r1
 80058fe:	b510      	push	{r4, lr}
 8005900:	eb01 0402 	add.w	r4, r1, r2
 8005904:	d902      	bls.n	800590c <memmove+0x10>
 8005906:	4284      	cmp	r4, r0
 8005908:	4623      	mov	r3, r4
 800590a:	d807      	bhi.n	800591c <memmove+0x20>
 800590c:	1e43      	subs	r3, r0, #1
 800590e:	42a1      	cmp	r1, r4
 8005910:	d008      	beq.n	8005924 <memmove+0x28>
 8005912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800591a:	e7f8      	b.n	800590e <memmove+0x12>
 800591c:	4402      	add	r2, r0
 800591e:	4601      	mov	r1, r0
 8005920:	428a      	cmp	r2, r1
 8005922:	d100      	bne.n	8005926 <memmove+0x2a>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800592a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800592e:	e7f7      	b.n	8005920 <memmove+0x24>

08005930 <_sbrk_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	@ (800594c <_sbrk_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7ff fa9c 	bl	8004e78 <_sbrk>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_sbrk_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_sbrk_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000834 	.word	0x20000834

08005950 <_realloc_r>:
 8005950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005954:	4680      	mov	r8, r0
 8005956:	4615      	mov	r5, r2
 8005958:	460c      	mov	r4, r1
 800595a:	b921      	cbnz	r1, 8005966 <_realloc_r+0x16>
 800595c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005960:	4611      	mov	r1, r2
 8005962:	f7ff bc59 	b.w	8005218 <_malloc_r>
 8005966:	b92a      	cbnz	r2, 8005974 <_realloc_r+0x24>
 8005968:	f7ff fbea 	bl	8005140 <_free_r>
 800596c:	2400      	movs	r4, #0
 800596e:	4620      	mov	r0, r4
 8005970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005974:	f000 f81a 	bl	80059ac <_malloc_usable_size_r>
 8005978:	4285      	cmp	r5, r0
 800597a:	4606      	mov	r6, r0
 800597c:	d802      	bhi.n	8005984 <_realloc_r+0x34>
 800597e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005982:	d8f4      	bhi.n	800596e <_realloc_r+0x1e>
 8005984:	4629      	mov	r1, r5
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fc46 	bl	8005218 <_malloc_r>
 800598c:	4607      	mov	r7, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	d0ec      	beq.n	800596c <_realloc_r+0x1c>
 8005992:	42b5      	cmp	r5, r6
 8005994:	462a      	mov	r2, r5
 8005996:	4621      	mov	r1, r4
 8005998:	bf28      	it	cs
 800599a:	4632      	movcs	r2, r6
 800599c:	f7ff fbc2 	bl	8005124 <memcpy>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7ff fbcc 	bl	8005140 <_free_r>
 80059a8:	463c      	mov	r4, r7
 80059aa:	e7e0      	b.n	800596e <_realloc_r+0x1e>

080059ac <_malloc_usable_size_r>:
 80059ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b0:	1f18      	subs	r0, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbc      	itt	lt
 80059b6:	580b      	ldrlt	r3, [r1, r0]
 80059b8:	18c0      	addlt	r0, r0, r3
 80059ba:	4770      	bx	lr
 80059bc:	0000      	movs	r0, r0
	...

080059c0 <ceil>:
 80059c0:	ec51 0b10 	vmov	r0, r1, d0
 80059c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80059d0:	2e13      	cmp	r6, #19
 80059d2:	460c      	mov	r4, r1
 80059d4:	4605      	mov	r5, r0
 80059d6:	4680      	mov	r8, r0
 80059d8:	dc2e      	bgt.n	8005a38 <ceil+0x78>
 80059da:	2e00      	cmp	r6, #0
 80059dc:	da11      	bge.n	8005a02 <ceil+0x42>
 80059de:	a332      	add	r3, pc, #200	@ (adr r3, 8005aa8 <ceil+0xe8>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fc52 	bl	800028c <__adddf3>
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	f7fb f894 	bl	8000b18 <__aeabi_dcmpgt>
 80059f0:	b120      	cbz	r0, 80059fc <ceil+0x3c>
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	db4f      	blt.n	8005a96 <ceil+0xd6>
 80059f6:	4325      	orrs	r5, r4
 80059f8:	d151      	bne.n	8005a9e <ceil+0xde>
 80059fa:	462c      	mov	r4, r5
 80059fc:	4621      	mov	r1, r4
 80059fe:	4628      	mov	r0, r5
 8005a00:	e023      	b.n	8005a4a <ceil+0x8a>
 8005a02:	4f2b      	ldr	r7, [pc, #172]	@ (8005ab0 <ceil+0xf0>)
 8005a04:	4137      	asrs	r7, r6
 8005a06:	ea01 0307 	and.w	r3, r1, r7
 8005a0a:	4303      	orrs	r3, r0
 8005a0c:	d01d      	beq.n	8005a4a <ceil+0x8a>
 8005a0e:	a326      	add	r3, pc, #152	@ (adr r3, 8005aa8 <ceil+0xe8>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fc3a 	bl	800028c <__adddf3>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f7fb f87c 	bl	8000b18 <__aeabi_dcmpgt>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d0eb      	beq.n	80059fc <ceil+0x3c>
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	bfc2      	ittt	gt
 8005a28:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005a2c:	4133      	asrgt	r3, r6
 8005a2e:	18e4      	addgt	r4, r4, r3
 8005a30:	ea24 0407 	bic.w	r4, r4, r7
 8005a34:	2500      	movs	r5, #0
 8005a36:	e7e1      	b.n	80059fc <ceil+0x3c>
 8005a38:	2e33      	cmp	r6, #51	@ 0x33
 8005a3a:	dd0a      	ble.n	8005a52 <ceil+0x92>
 8005a3c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005a40:	d103      	bne.n	8005a4a <ceil+0x8a>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	f7fa fc21 	bl	800028c <__adddf3>
 8005a4a:	ec41 0b10 	vmov	d0, r0, r1
 8005a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a52:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005a56:	f04f 37ff 	mov.w	r7, #4294967295
 8005a5a:	40df      	lsrs	r7, r3
 8005a5c:	4238      	tst	r0, r7
 8005a5e:	d0f4      	beq.n	8005a4a <ceil+0x8a>
 8005a60:	a311      	add	r3, pc, #68	@ (adr r3, 8005aa8 <ceil+0xe8>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fc11 	bl	800028c <__adddf3>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f7fb f853 	bl	8000b18 <__aeabi_dcmpgt>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0c2      	beq.n	80059fc <ceil+0x3c>
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	dd0a      	ble.n	8005a90 <ceil+0xd0>
 8005a7a:	2e14      	cmp	r6, #20
 8005a7c:	d101      	bne.n	8005a82 <ceil+0xc2>
 8005a7e:	3401      	adds	r4, #1
 8005a80:	e006      	b.n	8005a90 <ceil+0xd0>
 8005a82:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005a86:	2301      	movs	r3, #1
 8005a88:	40b3      	lsls	r3, r6
 8005a8a:	441d      	add	r5, r3
 8005a8c:	45a8      	cmp	r8, r5
 8005a8e:	d8f6      	bhi.n	8005a7e <ceil+0xbe>
 8005a90:	ea25 0507 	bic.w	r5, r5, r7
 8005a94:	e7b2      	b.n	80059fc <ceil+0x3c>
 8005a96:	2500      	movs	r5, #0
 8005a98:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005a9c:	e7ae      	b.n	80059fc <ceil+0x3c>
 8005a9e:	4c05      	ldr	r4, [pc, #20]	@ (8005ab4 <ceil+0xf4>)
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	e7ab      	b.n	80059fc <ceil+0x3c>
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	8800759c 	.word	0x8800759c
 8005aac:	7e37e43c 	.word	0x7e37e43c
 8005ab0:	000fffff 	.word	0x000fffff
 8005ab4:	3ff00000 	.word	0x3ff00000

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
