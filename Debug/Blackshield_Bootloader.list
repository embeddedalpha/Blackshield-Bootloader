
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .app_section  00000048  08008000  08008000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  080015d8  080015d8  000025d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080015e8  080015e8  00004048  2**0
                  CONTENTS, READONLY
  5 .ARM          00000000  080015e8  080015e8  00004048  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  080015e8  080015e8  00004048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080015e8  080015e8  000025e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080015ec  080015ec  000025ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000004  20000000  080015f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00004048  2**0
                  CONTENTS
 11 .bss          000000b0  20000004  20000004  00005004  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200000b4  200000b4  00005004  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008e9a  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000119e  00000000  00000000  0000cf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000c7c  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000328  00000000  00000000  0000ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000044e  00000000  00000000  0000f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000e06  00000000  00000000  0000f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000066c0  00000000  00000000  000102ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008fd24  00000000  00000000  0001696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000a6690  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00000860  00000000  00000000  000a66d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000056  00000000  00000000  000a6f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015c0 	.word	0x080015c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080015c0 	.word	0x080015c0

080001c8 <CRC_Init>:

#include "CRC.h"

void CRC_Init(void)
{
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 80001c8:	4a02      	ldr	r2, [pc, #8]	@ (80001d4 <CRC_Init+0xc>)
 80001ca:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80001cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80001d2:	4770      	bx	lr
 80001d4:	40023800 	.word	0x40023800

080001d8 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 80001d8:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 80001da:	4d37      	ldr	r5, [pc, #220]	@ (80002b8 <DMA1_Stream0_IRQHandler+0xe0>)
 80001dc:	4c37      	ldr	r4, [pc, #220]	@ (80002bc <DMA1_Stream0_IRQHandler+0xe4>)
 80001de:	682b      	ldr	r3, [r5, #0]
 80001e0:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 80001e2:	6823      	ldr	r3, [r4, #0]
 80001e4:	07db      	lsls	r3, r3, #31
 80001e6:	d50b      	bpl.n	8000200 <DMA1_Stream0_IRQHandler+0x28>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80001e8:	4b35      	ldr	r3, [pc, #212]	@ (80002c0 <DMA1_Stream0_IRQHandler+0xe8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	69da      	ldr	r2, [r3, #28]
 80001ee:	0616      	lsls	r6, r2, #24
 80001f0:	d506      	bpl.n	8000200 <DMA1_Stream0_IRQHandler+0x28>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80001f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80001f4:	b123      	cbz	r3, 8000200 <DMA1_Stream0_IRQHandler+0x28>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80001f6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80001f8:	68ab      	ldr	r3, [r5, #8]
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000200:	6823      	ldr	r3, [r4, #0]
 8000202:	075d      	lsls	r5, r3, #29
 8000204:	d50c      	bpl.n	8000220 <DMA1_Stream0_IRQHandler+0x48>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000206:	4b2e      	ldr	r3, [pc, #184]	@ (80002c0 <DMA1_Stream0_IRQHandler+0xe8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	69da      	ldr	r2, [r3, #28]
 800020c:	0790      	lsls	r0, r2, #30
 800020e:	d507      	bpl.n	8000220 <DMA1_Stream0_IRQHandler+0x48>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000212:	b12b      	cbz	r3, 8000220 <DMA1_Stream0_IRQHandler+0x48>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000214:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000216:	4a28      	ldr	r2, [pc, #160]	@ (80002b8 <DMA1_Stream0_IRQHandler+0xe0>)
 8000218:	6893      	ldr	r3, [r2, #8]
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000220:	6823      	ldr	r3, [r4, #0]
 8000222:	0719      	lsls	r1, r3, #28
 8000224:	d50c      	bpl.n	8000240 <DMA1_Stream0_IRQHandler+0x68>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000226:	4b26      	ldr	r3, [pc, #152]	@ (80002c0 <DMA1_Stream0_IRQHandler+0xe8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	69da      	ldr	r2, [r3, #28]
 800022c:	0752      	lsls	r2, r2, #29
 800022e:	d507      	bpl.n	8000240 <DMA1_Stream0_IRQHandler+0x68>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000232:	b12b      	cbz	r3, 8000240 <DMA1_Stream0_IRQHandler+0x68>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000234:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000236:	4a20      	ldr	r2, [pc, #128]	@ (80002b8 <DMA1_Stream0_IRQHandler+0xe0>)
 8000238:	6893      	ldr	r3, [r2, #8]
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000240:	6823      	ldr	r3, [r4, #0]
 8000242:	06db      	lsls	r3, r3, #27
 8000244:	d518      	bpl.n	8000278 <DMA1_Stream0_IRQHandler+0xa0>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000246:	4d1e      	ldr	r5, [pc, #120]	@ (80002c0 <DMA1_Stream0_IRQHandler+0xe8>)
 8000248:	682b      	ldr	r3, [r5, #0]
 800024a:	69da      	ldr	r2, [r3, #28]
 800024c:	0716      	lsls	r6, r2, #28
 800024e:	d513      	bpl.n	8000278 <DMA1_Stream0_IRQHandler+0xa0>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000252:	b18b      	cbz	r3, 8000278 <DMA1_Stream0_IRQHandler+0xa0>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000254:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000256:	4a18      	ldr	r2, [pc, #96]	@ (80002b8 <DMA1_Stream0_IRQHandler+0xe0>)
 8000258:	6893      	ldr	r3, [r2, #8]
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000260:	682b      	ldr	r3, [r5, #0]
 8000262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000264:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000268:	d106      	bne.n	8000278 <DMA1_Stream0_IRQHandler+0xa0>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	6812      	ldr	r2, [r2, #0]
 800026e:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000270:	bf4c      	ite	mi
 8000272:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000274:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000276:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000278:	6823      	ldr	r3, [r4, #0]
 800027a:	0698      	lsls	r0, r3, #26
 800027c:	d51a      	bpl.n	80002b4 <DMA1_Stream0_IRQHandler+0xdc>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800027e:	4c10      	ldr	r4, [pc, #64]	@ (80002c0 <DMA1_Stream0_IRQHandler+0xe8>)
 8000280:	6823      	ldr	r3, [r4, #0]
 8000282:	69da      	ldr	r2, [r3, #28]
 8000284:	06d1      	lsls	r1, r2, #27
 8000286:	d515      	bpl.n	80002b4 <DMA1_Stream0_IRQHandler+0xdc>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800028a:	b19b      	cbz	r3, 80002b4 <DMA1_Stream0_IRQHandler+0xdc>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800028c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <DMA1_Stream0_IRQHandler+0xe0>)
 8000290:	6893      	ldr	r3, [r2, #8]
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000298:	6823      	ldr	r3, [r4, #0]
 800029a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800029c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80002a0:	d108      	bne.n	80002b4 <DMA1_Stream0_IRQHandler+0xdc>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	6812      	ldr	r2, [r2, #0]
 80002a6:	0352      	lsls	r2, r2, #13
				}
			}
		}

	}
}
 80002a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80002ac:	bf4c      	ite	mi
 80002ae:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80002b0:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80002b2:	4718      	bx	r3
}
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	bf00      	nop
 80002b8:	40026000 	.word	0x40026000
 80002bc:	20000024 	.word	0x20000024
 80002c0:	20000064 	.word	0x20000064

080002c4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 80002c6:	4d37      	ldr	r5, [pc, #220]	@ (80003a4 <DMA1_Stream1_IRQHandler+0xe0>)
 80002c8:	4c37      	ldr	r4, [pc, #220]	@ (80003a8 <DMA1_Stream1_IRQHandler+0xe4>)
 80002ca:	682b      	ldr	r3, [r5, #0]
 80002cc:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80002ce:	6823      	ldr	r3, [r4, #0]
 80002d0:	065b      	lsls	r3, r3, #25
 80002d2:	d50b      	bpl.n	80002ec <DMA1_Stream1_IRQHandler+0x28>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80002d4:	4b35      	ldr	r3, [pc, #212]	@ (80003ac <DMA1_Stream1_IRQHandler+0xe8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	69da      	ldr	r2, [r3, #28]
 80002da:	0616      	lsls	r6, r2, #24
 80002dc:	d506      	bpl.n	80002ec <DMA1_Stream1_IRQHandler+0x28>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80002de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80002e0:	b123      	cbz	r3, 80002ec <DMA1_Stream1_IRQHandler+0x28>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80002e2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80002e4:	68ab      	ldr	r3, [r5, #8]
 80002e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ea:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80002ec:	6823      	ldr	r3, [r4, #0]
 80002ee:	05dd      	lsls	r5, r3, #23
 80002f0:	d50c      	bpl.n	800030c <DMA1_Stream1_IRQHandler+0x48>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80002f2:	4b2e      	ldr	r3, [pc, #184]	@ (80003ac <DMA1_Stream1_IRQHandler+0xe8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	69da      	ldr	r2, [r3, #28]
 80002f8:	0790      	lsls	r0, r2, #30
 80002fa:	d507      	bpl.n	800030c <DMA1_Stream1_IRQHandler+0x48>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80002fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002fe:	b12b      	cbz	r3, 800030c <DMA1_Stream1_IRQHandler+0x48>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000300:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000302:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <DMA1_Stream1_IRQHandler+0xe0>)
 8000304:	6893      	ldr	r3, [r2, #8]
 8000306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800030a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 800030c:	6823      	ldr	r3, [r4, #0]
 800030e:	0599      	lsls	r1, r3, #22
 8000310:	d50c      	bpl.n	800032c <DMA1_Stream1_IRQHandler+0x68>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000312:	4b26      	ldr	r3, [pc, #152]	@ (80003ac <DMA1_Stream1_IRQHandler+0xe8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	69da      	ldr	r2, [r3, #28]
 8000318:	0752      	lsls	r2, r2, #29
 800031a:	d507      	bpl.n	800032c <DMA1_Stream1_IRQHandler+0x68>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800031c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800031e:	b12b      	cbz	r3, 800032c <DMA1_Stream1_IRQHandler+0x68>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000320:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000322:	4a20      	ldr	r2, [pc, #128]	@ (80003a4 <DMA1_Stream1_IRQHandler+0xe0>)
 8000324:	6893      	ldr	r3, [r2, #8]
 8000326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800032a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800032c:	6823      	ldr	r3, [r4, #0]
 800032e:	055b      	lsls	r3, r3, #21
 8000330:	d518      	bpl.n	8000364 <DMA1_Stream1_IRQHandler+0xa0>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000332:	4d1e      	ldr	r5, [pc, #120]	@ (80003ac <DMA1_Stream1_IRQHandler+0xe8>)
 8000334:	682b      	ldr	r3, [r5, #0]
 8000336:	69da      	ldr	r2, [r3, #28]
 8000338:	0716      	lsls	r6, r2, #28
 800033a:	d513      	bpl.n	8000364 <DMA1_Stream1_IRQHandler+0xa0>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800033c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800033e:	b18b      	cbz	r3, 8000364 <DMA1_Stream1_IRQHandler+0xa0>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000340:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000342:	4a18      	ldr	r2, [pc, #96]	@ (80003a4 <DMA1_Stream1_IRQHandler+0xe0>)
 8000344:	6893      	ldr	r3, [r2, #8]
 8000346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800034a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800034c:	682b      	ldr	r3, [r5, #0]
 800034e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000350:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000354:	d106      	bne.n	8000364 <DMA1_Stream1_IRQHandler+0xa0>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800035c:	bf4c      	ite	mi
 800035e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000360:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000362:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000364:	6823      	ldr	r3, [r4, #0]
 8000366:	0518      	lsls	r0, r3, #20
 8000368:	d51a      	bpl.n	80003a0 <DMA1_Stream1_IRQHandler+0xdc>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800036a:	4c10      	ldr	r4, [pc, #64]	@ (80003ac <DMA1_Stream1_IRQHandler+0xe8>)
 800036c:	6823      	ldr	r3, [r4, #0]
 800036e:	69da      	ldr	r2, [r3, #28]
 8000370:	06d1      	lsls	r1, r2, #27
 8000372:	d515      	bpl.n	80003a0 <DMA1_Stream1_IRQHandler+0xdc>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	b19b      	cbz	r3, 80003a0 <DMA1_Stream1_IRQHandler+0xdc>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000378:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <DMA1_Stream1_IRQHandler+0xe0>)
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000382:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000384:	6823      	ldr	r3, [r4, #0]
 8000386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000388:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800038c:	d108      	bne.n	80003a0 <DMA1_Stream1_IRQHandler+0xdc>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8000394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000398:	bf4c      	ite	mi
 800039a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800039c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800039e:	4718      	bx	r3
}
 80003a0:	bd70      	pop	{r4, r5, r6, pc}
 80003a2:	bf00      	nop
 80003a4:	40026000 	.word	0x40026000
 80003a8:	20000024 	.word	0x20000024
 80003ac:	20000060 	.word	0x20000060

080003b0 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80003b0:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 80003b2:	4d37      	ldr	r5, [pc, #220]	@ (8000490 <DMA1_Stream2_IRQHandler+0xe0>)
 80003b4:	4c37      	ldr	r4, [pc, #220]	@ (8000494 <DMA1_Stream2_IRQHandler+0xe4>)
 80003b6:	682b      	ldr	r3, [r5, #0]
 80003b8:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80003ba:	6823      	ldr	r3, [r4, #0]
 80003bc:	03db      	lsls	r3, r3, #15
 80003be:	d50b      	bpl.n	80003d8 <DMA1_Stream2_IRQHandler+0x28>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80003c0:	4b35      	ldr	r3, [pc, #212]	@ (8000498 <DMA1_Stream2_IRQHandler+0xe8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	69da      	ldr	r2, [r3, #28]
 80003c6:	0616      	lsls	r6, r2, #24
 80003c8:	d506      	bpl.n	80003d8 <DMA1_Stream2_IRQHandler+0x28>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80003ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003cc:	b123      	cbz	r3, 80003d8 <DMA1_Stream2_IRQHandler+0x28>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80003ce:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80003d0:	68ab      	ldr	r3, [r5, #8]
 80003d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003d6:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80003d8:	6823      	ldr	r3, [r4, #0]
 80003da:	035d      	lsls	r5, r3, #13
 80003dc:	d50c      	bpl.n	80003f8 <DMA1_Stream2_IRQHandler+0x48>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80003de:	4b2e      	ldr	r3, [pc, #184]	@ (8000498 <DMA1_Stream2_IRQHandler+0xe8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	69da      	ldr	r2, [r3, #28]
 80003e4:	0790      	lsls	r0, r2, #30
 80003e6:	d507      	bpl.n	80003f8 <DMA1_Stream2_IRQHandler+0x48>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80003e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ea:	b12b      	cbz	r3, 80003f8 <DMA1_Stream2_IRQHandler+0x48>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80003ec:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80003ee:	4a28      	ldr	r2, [pc, #160]	@ (8000490 <DMA1_Stream2_IRQHandler+0xe0>)
 80003f0:	6893      	ldr	r3, [r2, #8]
 80003f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003f6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80003f8:	6823      	ldr	r3, [r4, #0]
 80003fa:	0319      	lsls	r1, r3, #12
 80003fc:	d50c      	bpl.n	8000418 <DMA1_Stream2_IRQHandler+0x68>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80003fe:	4b26      	ldr	r3, [pc, #152]	@ (8000498 <DMA1_Stream2_IRQHandler+0xe8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	69da      	ldr	r2, [r3, #28]
 8000404:	0752      	lsls	r2, r2, #29
 8000406:	d507      	bpl.n	8000418 <DMA1_Stream2_IRQHandler+0x68>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800040a:	b12b      	cbz	r3, 8000418 <DMA1_Stream2_IRQHandler+0x68>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800040c:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800040e:	4a20      	ldr	r2, [pc, #128]	@ (8000490 <DMA1_Stream2_IRQHandler+0xe0>)
 8000410:	6893      	ldr	r3, [r2, #8]
 8000412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000416:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000418:	6823      	ldr	r3, [r4, #0]
 800041a:	02db      	lsls	r3, r3, #11
 800041c:	d518      	bpl.n	8000450 <DMA1_Stream2_IRQHandler+0xa0>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800041e:	4d1e      	ldr	r5, [pc, #120]	@ (8000498 <DMA1_Stream2_IRQHandler+0xe8>)
 8000420:	682b      	ldr	r3, [r5, #0]
 8000422:	69da      	ldr	r2, [r3, #28]
 8000424:	0716      	lsls	r6, r2, #28
 8000426:	d513      	bpl.n	8000450 <DMA1_Stream2_IRQHandler+0xa0>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800042a:	b18b      	cbz	r3, 8000450 <DMA1_Stream2_IRQHandler+0xa0>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800042c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <DMA1_Stream2_IRQHandler+0xe0>)
 8000430:	6893      	ldr	r3, [r2, #8]
 8000432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000436:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000438:	682b      	ldr	r3, [r5, #0]
 800043a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800043c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000440:	d106      	bne.n	8000450 <DMA1_Stream2_IRQHandler+0xa0>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000448:	bf4c      	ite	mi
 800044a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800044c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800044e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8000450:	6823      	ldr	r3, [r4, #0]
 8000452:	0298      	lsls	r0, r3, #10
 8000454:	d51a      	bpl.n	800048c <DMA1_Stream2_IRQHandler+0xdc>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000456:	4c10      	ldr	r4, [pc, #64]	@ (8000498 <DMA1_Stream2_IRQHandler+0xe8>)
 8000458:	6823      	ldr	r3, [r4, #0]
 800045a:	69da      	ldr	r2, [r3, #28]
 800045c:	06d1      	lsls	r1, r2, #27
 800045e:	d515      	bpl.n	800048c <DMA1_Stream2_IRQHandler+0xdc>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	b19b      	cbz	r3, 800048c <DMA1_Stream2_IRQHandler+0xdc>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000464:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <DMA1_Stream2_IRQHandler+0xe0>)
 8000468:	6893      	ldr	r3, [r2, #8]
 800046a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800046e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000470:	6823      	ldr	r3, [r4, #0]
 8000472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000474:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000478:	d108      	bne.n	800048c <DMA1_Stream2_IRQHandler+0xdc>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8000480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000484:	bf4c      	ite	mi
 8000486:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000488:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800048a:	4718      	bx	r3
}
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	bf00      	nop
 8000490:	40026000 	.word	0x40026000
 8000494:	20000024 	.word	0x20000024
 8000498:	2000005c 	.word	0x2000005c

0800049c <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800049c:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 800049e:	4d37      	ldr	r5, [pc, #220]	@ (800057c <DMA1_Stream3_IRQHandler+0xe0>)
 80004a0:	4c37      	ldr	r4, [pc, #220]	@ (8000580 <DMA1_Stream3_IRQHandler+0xe4>)
 80004a2:	682b      	ldr	r3, [r5, #0]
 80004a4:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80004a6:	6823      	ldr	r3, [r4, #0]
 80004a8:	025b      	lsls	r3, r3, #9
 80004aa:	d50b      	bpl.n	80004c4 <DMA1_Stream3_IRQHandler+0x28>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <DMA1_Stream3_IRQHandler+0xe8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	69da      	ldr	r2, [r3, #28]
 80004b2:	0616      	lsls	r6, r2, #24
 80004b4:	d506      	bpl.n	80004c4 <DMA1_Stream3_IRQHandler+0x28>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80004b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004b8:	b123      	cbz	r3, 80004c4 <DMA1_Stream3_IRQHandler+0x28>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80004ba:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80004bc:	68ab      	ldr	r3, [r5, #8]
 80004be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004c2:	60ab      	str	r3, [r5, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	01dd      	lsls	r5, r3, #7
 80004c8:	d50c      	bpl.n	80004e4 <DMA1_Stream3_IRQHandler+0x48>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80004ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <DMA1_Stream3_IRQHandler+0xe8>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	0790      	lsls	r0, r2, #30
 80004d2:	d507      	bpl.n	80004e4 <DMA1_Stream3_IRQHandler+0x48>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80004d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d6:	b12b      	cbz	r3, 80004e4 <DMA1_Stream3_IRQHandler+0x48>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80004d8:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80004da:	4a28      	ldr	r2, [pc, #160]	@ (800057c <DMA1_Stream3_IRQHandler+0xe0>)
 80004dc:	6893      	ldr	r3, [r2, #8]
 80004de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e2:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	0199      	lsls	r1, r3, #6
 80004e8:	d50c      	bpl.n	8000504 <DMA1_Stream3_IRQHandler+0x68>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80004ea:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <DMA1_Stream3_IRQHandler+0xe8>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	0752      	lsls	r2, r2, #29
 80004f2:	d507      	bpl.n	8000504 <DMA1_Stream3_IRQHandler+0x68>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80004f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004f6:	b12b      	cbz	r3, 8000504 <DMA1_Stream3_IRQHandler+0x68>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80004f8:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80004fa:	4a20      	ldr	r2, [pc, #128]	@ (800057c <DMA1_Stream3_IRQHandler+0xe0>)
 80004fc:	6893      	ldr	r3, [r2, #8]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000502:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	015b      	lsls	r3, r3, #5
 8000508:	d518      	bpl.n	800053c <DMA1_Stream3_IRQHandler+0xa0>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800050a:	4d1e      	ldr	r5, [pc, #120]	@ (8000584 <DMA1_Stream3_IRQHandler+0xe8>)
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	0716      	lsls	r6, r2, #28
 8000512:	d513      	bpl.n	800053c <DMA1_Stream3_IRQHandler+0xa0>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000516:	b18b      	cbz	r3, 800053c <DMA1_Stream3_IRQHandler+0xa0>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000518:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <DMA1_Stream3_IRQHandler+0xe0>)
 800051c:	6893      	ldr	r3, [r2, #8]
 800051e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000522:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000528:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800052c:	d106      	bne.n	800053c <DMA1_Stream3_IRQHandler+0xa0>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	6812      	ldr	r2, [r2, #0]
 8000532:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000534:	bf4c      	ite	mi
 8000536:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000538:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800053a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0118      	lsls	r0, r3, #4
 8000540:	d51a      	bpl.n	8000578 <DMA1_Stream3_IRQHandler+0xdc>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000542:	4c10      	ldr	r4, [pc, #64]	@ (8000584 <DMA1_Stream3_IRQHandler+0xe8>)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	69da      	ldr	r2, [r3, #28]
 8000548:	06d1      	lsls	r1, r2, #27
 800054a:	d515      	bpl.n	8000578 <DMA1_Stream3_IRQHandler+0xdc>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	b19b      	cbz	r3, 8000578 <DMA1_Stream3_IRQHandler+0xdc>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000550:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <DMA1_Stream3_IRQHandler+0xe0>)
 8000554:	6893      	ldr	r3, [r2, #8]
 8000556:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800055a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800055c:	6823      	ldr	r3, [r4, #0]
 800055e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000560:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000564:	d108      	bne.n	8000578 <DMA1_Stream3_IRQHandler+0xdc>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 800056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000570:	bf4c      	ite	mi
 8000572:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000574:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000576:	4718      	bx	r3
}
 8000578:	bd70      	pop	{r4, r5, r6, pc}
 800057a:	bf00      	nop
 800057c:	40026000 	.word	0x40026000
 8000580:	20000024 	.word	0x20000024
 8000584:	20000058 	.word	0x20000058

08000588 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8000588:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 800058a:	4d2f      	ldr	r5, [pc, #188]	@ (8000648 <DMA1_Stream4_IRQHandler+0xc0>)
 800058c:	4c2f      	ldr	r4, [pc, #188]	@ (800064c <DMA1_Stream4_IRQHandler+0xc4>)
 800058e:	686b      	ldr	r3, [r5, #4]
 8000590:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	07da      	lsls	r2, r3, #31
 8000596:	d508      	bpl.n	80005aa <DMA1_Stream4_IRQHandler+0x22>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000598:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <DMA1_Stream4_IRQHandler+0xc8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800059e:	b123      	cbz	r3, 80005aa <DMA1_Stream4_IRQHandler+0x22>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80005a0:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80005a2:	68ab      	ldr	r3, [r5, #8]
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	075b      	lsls	r3, r3, #29
 80005ae:	d509      	bpl.n	80005c4 <DMA1_Stream4_IRQHandler+0x3c>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <DMA1_Stream4_IRQHandler+0xc8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b6:	b12b      	cbz	r3, 80005c4 <DMA1_Stream4_IRQHandler+0x3c>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80005b8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80005ba:	4a23      	ldr	r2, [pc, #140]	@ (8000648 <DMA1_Stream4_IRQHandler+0xc0>)
 80005bc:	68d3      	ldr	r3, [r2, #12]
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	071e      	lsls	r6, r3, #28
 80005c8:	d509      	bpl.n	80005de <DMA1_Stream4_IRQHandler+0x56>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <DMA1_Stream4_IRQHandler+0xc8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d0:	b12b      	cbz	r3, 80005de <DMA1_Stream4_IRQHandler+0x56>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80005d2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80005d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <DMA1_Stream4_IRQHandler+0xc0>)
 80005d6:	68d3      	ldr	r3, [r2, #12]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	06dd      	lsls	r5, r3, #27
 80005e2:	d515      	bpl.n	8000610 <DMA1_Stream4_IRQHandler+0x88>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80005e4:	4d1a      	ldr	r5, [pc, #104]	@ (8000650 <DMA1_Stream4_IRQHandler+0xc8>)
 80005e6:	682b      	ldr	r3, [r5, #0]
 80005e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ea:	b18b      	cbz	r3, 8000610 <DMA1_Stream4_IRQHandler+0x88>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80005ec:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80005ee:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <DMA1_Stream4_IRQHandler+0xc0>)
 80005f0:	68d3      	ldr	r3, [r2, #12]
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005fc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000600:	d106      	bne.n	8000610 <DMA1_Stream4_IRQHandler+0x88>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000608:	bf4c      	ite	mi
 800060a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800060c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800060e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	0699      	lsls	r1, r3, #26
 8000614:	d517      	bpl.n	8000646 <DMA1_Stream4_IRQHandler+0xbe>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000616:	4c0e      	ldr	r4, [pc, #56]	@ (8000650 <DMA1_Stream4_IRQHandler+0xc8>)
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061c:	b19b      	cbz	r3, 8000646 <DMA1_Stream4_IRQHandler+0xbe>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800061e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <DMA1_Stream4_IRQHandler+0xc0>)
 8000622:	68d3      	ldr	r3, [r2, #12]
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800062e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000632:	d108      	bne.n	8000646 <DMA1_Stream4_IRQHandler+0xbe>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	0352      	lsls	r2, r2, #13
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800063a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800063e:	bf4c      	ite	mi
 8000640:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000642:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000644:	4718      	bx	r3
}
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	40026000 	.word	0x40026000
 800064c:	20000020 	.word	0x20000020
 8000650:	20000054 	.word	0x20000054

08000654 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8000654:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 8000656:	4d2f      	ldr	r5, [pc, #188]	@ (8000714 <DMA1_Stream5_IRQHandler+0xc0>)
 8000658:	4c2f      	ldr	r4, [pc, #188]	@ (8000718 <DMA1_Stream5_IRQHandler+0xc4>)
 800065a:	686b      	ldr	r3, [r5, #4]
 800065c:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	065a      	lsls	r2, r3, #25
 8000662:	d508      	bpl.n	8000676 <DMA1_Stream5_IRQHandler+0x22>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000664:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <DMA1_Stream5_IRQHandler+0xc8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800066a:	b123      	cbz	r3, 8000676 <DMA1_Stream5_IRQHandler+0x22>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800066c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800066e:	68eb      	ldr	r3, [r5, #12]
 8000670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000674:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	d509      	bpl.n	8000690 <DMA1_Stream5_IRQHandler+0x3c>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <DMA1_Stream5_IRQHandler+0xc8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000682:	b12b      	cbz	r3, 8000690 <DMA1_Stream5_IRQHandler+0x3c>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000684:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000686:	4a23      	ldr	r2, [pc, #140]	@ (8000714 <DMA1_Stream5_IRQHandler+0xc0>)
 8000688:	68d3      	ldr	r3, [r2, #12]
 800068a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	059e      	lsls	r6, r3, #22
 8000694:	d509      	bpl.n	80006aa <DMA1_Stream5_IRQHandler+0x56>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <DMA1_Stream5_IRQHandler+0xc8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069c:	b12b      	cbz	r3, 80006aa <DMA1_Stream5_IRQHandler+0x56>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800069e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80006a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <DMA1_Stream5_IRQHandler+0xc0>)
 80006a2:	68d3      	ldr	r3, [r2, #12]
 80006a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	055d      	lsls	r5, r3, #21
 80006ae:	d515      	bpl.n	80006dc <DMA1_Stream5_IRQHandler+0x88>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80006b0:	4d1a      	ldr	r5, [pc, #104]	@ (800071c <DMA1_Stream5_IRQHandler+0xc8>)
 80006b2:	682b      	ldr	r3, [r5, #0]
 80006b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b6:	b18b      	cbz	r3, 80006dc <DMA1_Stream5_IRQHandler+0x88>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80006b8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80006ba:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <DMA1_Stream5_IRQHandler+0xc0>)
 80006bc:	68d3      	ldr	r3, [r2, #12]
 80006be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006c8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80006cc:	d106      	bne.n	80006dc <DMA1_Stream5_IRQHandler+0x88>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80006d4:	bf4c      	ite	mi
 80006d6:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80006d8:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80006da:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	0519      	lsls	r1, r3, #20
 80006e0:	d517      	bpl.n	8000712 <DMA1_Stream5_IRQHandler+0xbe>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80006e2:	4c0e      	ldr	r4, [pc, #56]	@ (800071c <DMA1_Stream5_IRQHandler+0xc8>)
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	b19b      	cbz	r3, 8000712 <DMA1_Stream5_IRQHandler+0xbe>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80006ea:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80006ec:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <DMA1_Stream5_IRQHandler+0xc0>)
 80006ee:	68d3      	ldr	r3, [r2, #12]
 80006f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006f4:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006fa:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80006fe:	d108      	bne.n	8000712 <DMA1_Stream5_IRQHandler+0xbe>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	0352      	lsls	r2, r2, #13
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800070a:	bf4c      	ite	mi
 800070c:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800070e:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000710:	4718      	bx	r3
}
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	40026000 	.word	0x40026000
 8000718:	20000020 	.word	0x20000020
 800071c:	20000050 	.word	0x20000050

08000720 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8000720:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 8000722:	4d2f      	ldr	r5, [pc, #188]	@ (80007e0 <DMA1_Stream6_IRQHandler+0xc0>)
 8000724:	4c2f      	ldr	r4, [pc, #188]	@ (80007e4 <DMA1_Stream6_IRQHandler+0xc4>)
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	03da      	lsls	r2, r3, #15
 800072e:	d508      	bpl.n	8000742 <DMA1_Stream6_IRQHandler+0x22>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000730:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <DMA1_Stream6_IRQHandler+0xc8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000736:	b123      	cbz	r3, 8000742 <DMA1_Stream6_IRQHandler+0x22>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000738:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800073a:	68eb      	ldr	r3, [r5, #12]
 800073c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000740:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	035b      	lsls	r3, r3, #13
 8000746:	d509      	bpl.n	800075c <DMA1_Stream6_IRQHandler+0x3c>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <DMA1_Stream6_IRQHandler+0xc8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	b12b      	cbz	r3, 800075c <DMA1_Stream6_IRQHandler+0x3c>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000750:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000752:	4a23      	ldr	r2, [pc, #140]	@ (80007e0 <DMA1_Stream6_IRQHandler+0xc0>)
 8000754:	68d3      	ldr	r3, [r2, #12]
 8000756:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800075a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	031e      	lsls	r6, r3, #12
 8000760:	d509      	bpl.n	8000776 <DMA1_Stream6_IRQHandler+0x56>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <DMA1_Stream6_IRQHandler+0xc8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000768:	b12b      	cbz	r3, 8000776 <DMA1_Stream6_IRQHandler+0x56>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800076a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800076c:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <DMA1_Stream6_IRQHandler+0xc0>)
 800076e:	68d3      	ldr	r3, [r2, #12]
 8000770:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000774:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	02dd      	lsls	r5, r3, #11
 800077a:	d515      	bpl.n	80007a8 <DMA1_Stream6_IRQHandler+0x88>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800077c:	4d1a      	ldr	r5, [pc, #104]	@ (80007e8 <DMA1_Stream6_IRQHandler+0xc8>)
 800077e:	682b      	ldr	r3, [r5, #0]
 8000780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000782:	b18b      	cbz	r3, 80007a8 <DMA1_Stream6_IRQHandler+0x88>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000784:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000786:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <DMA1_Stream6_IRQHandler+0xc0>)
 8000788:	68d3      	ldr	r3, [r2, #12]
 800078a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800078e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000790:	682b      	ldr	r3, [r5, #0]
 8000792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000794:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000798:	d106      	bne.n	80007a8 <DMA1_Stream6_IRQHandler+0x88>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80007a0:	bf4c      	ite	mi
 80007a2:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80007a4:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80007a6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	0299      	lsls	r1, r3, #10
 80007ac:	d517      	bpl.n	80007de <DMA1_Stream6_IRQHandler+0xbe>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80007ae:	4c0e      	ldr	r4, [pc, #56]	@ (80007e8 <DMA1_Stream6_IRQHandler+0xc8>)
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b4:	b19b      	cbz	r3, 80007de <DMA1_Stream6_IRQHandler+0xbe>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80007b6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80007b8:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <DMA1_Stream6_IRQHandler+0xc0>)
 80007ba:	68d3      	ldr	r3, [r2, #12]
 80007bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c0:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007c6:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80007ca:	d108      	bne.n	80007de <DMA1_Stream6_IRQHandler+0xbe>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	0352      	lsls	r2, r2, #13
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80007d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80007d6:	bf4c      	ite	mi
 80007d8:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80007da:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80007dc:	4718      	bx	r3
}
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	40026000 	.word	0x40026000
 80007e4:	20000020 	.word	0x20000020
 80007e8:	2000004c 	.word	0x2000004c

080007ec <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 80007ee:	4d2f      	ldr	r5, [pc, #188]	@ (80008ac <DMA1_Stream7_IRQHandler+0xc0>)
 80007f0:	4c2f      	ldr	r4, [pc, #188]	@ (80008b0 <DMA1_Stream7_IRQHandler+0xc4>)
 80007f2:	686b      	ldr	r3, [r5, #4]
 80007f4:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	025a      	lsls	r2, r3, #9
 80007fa:	d508      	bpl.n	800080e <DMA1_Stream7_IRQHandler+0x22>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <DMA1_Stream7_IRQHandler+0xc8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000802:	b123      	cbz	r3, 800080e <DMA1_Stream7_IRQHandler+0x22>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000804:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000806:	68eb      	ldr	r3, [r5, #12]
 8000808:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800080c:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	d509      	bpl.n	8000828 <DMA1_Stream7_IRQHandler+0x3c>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <DMA1_Stream7_IRQHandler+0xc8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	b12b      	cbz	r3, 8000828 <DMA1_Stream7_IRQHandler+0x3c>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800081c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800081e:	4a23      	ldr	r2, [pc, #140]	@ (80008ac <DMA1_Stream7_IRQHandler+0xc0>)
 8000820:	68d3      	ldr	r3, [r2, #12]
 8000822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000826:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	019e      	lsls	r6, r3, #6
 800082c:	d509      	bpl.n	8000842 <DMA1_Stream7_IRQHandler+0x56>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <DMA1_Stream7_IRQHandler+0xc8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000834:	b12b      	cbz	r3, 8000842 <DMA1_Stream7_IRQHandler+0x56>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000836:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000838:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <DMA1_Stream7_IRQHandler+0xc0>)
 800083a:	68d3      	ldr	r3, [r2, #12]
 800083c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000840:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	015d      	lsls	r5, r3, #5
 8000846:	d515      	bpl.n	8000874 <DMA1_Stream7_IRQHandler+0x88>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000848:	4d1a      	ldr	r5, [pc, #104]	@ (80008b4 <DMA1_Stream7_IRQHandler+0xc8>)
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084e:	b18b      	cbz	r3, 8000874 <DMA1_Stream7_IRQHandler+0x88>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000850:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <DMA1_Stream7_IRQHandler+0xc0>)
 8000854:	68d3      	ldr	r3, [r2, #12]
 8000856:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800085a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000860:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000864:	d106      	bne.n	8000874 <DMA1_Stream7_IRQHandler+0x88>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800086c:	bf4c      	ite	mi
 800086e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000870:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000872:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	0119      	lsls	r1, r3, #4
 8000878:	d517      	bpl.n	80008aa <DMA1_Stream7_IRQHandler+0xbe>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800087a:	4c0e      	ldr	r4, [pc, #56]	@ (80008b4 <DMA1_Stream7_IRQHandler+0xc8>)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	b19b      	cbz	r3, 80008aa <DMA1_Stream7_IRQHandler+0xbe>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000882:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000884:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <DMA1_Stream7_IRQHandler+0xc0>)
 8000886:	68d3      	ldr	r3, [r2, #12]
 8000888:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800088c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000892:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000896:	d108      	bne.n	80008aa <DMA1_Stream7_IRQHandler+0xbe>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	0352      	lsls	r2, r2, #13
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800089e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80008a2:	bf4c      	ite	mi
 80008a4:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80008a6:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80008a8:	4718      	bx	r3
}
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	40026000 	.word	0x40026000
 80008b0:	20000020 	.word	0x20000020
 80008b4:	20000048 	.word	0x20000048

080008b8 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 80008ba:	4d37      	ldr	r5, [pc, #220]	@ (8000998 <DMA2_Stream0_IRQHandler+0xe0>)
 80008bc:	4c37      	ldr	r4, [pc, #220]	@ (800099c <DMA2_Stream0_IRQHandler+0xe4>)
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	07db      	lsls	r3, r3, #31
 80008c6:	d50b      	bpl.n	80008e0 <DMA2_Stream0_IRQHandler+0x28>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80008c8:	4b35      	ldr	r3, [pc, #212]	@ (80009a0 <DMA2_Stream0_IRQHandler+0xe8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	69da      	ldr	r2, [r3, #28]
 80008ce:	0616      	lsls	r6, r2, #24
 80008d0:	d506      	bpl.n	80008e0 <DMA2_Stream0_IRQHandler+0x28>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80008d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008d4:	b123      	cbz	r3, 80008e0 <DMA2_Stream0_IRQHandler+0x28>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80008d6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80008d8:	68ab      	ldr	r3, [r5, #8]
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	60ab      	str	r3, [r5, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	075d      	lsls	r5, r3, #29
 80008e4:	d50c      	bpl.n	8000900 <DMA2_Stream0_IRQHandler+0x48>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <DMA2_Stream0_IRQHandler+0xe8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	69da      	ldr	r2, [r3, #28]
 80008ec:	0790      	lsls	r0, r2, #30
 80008ee:	d507      	bpl.n	8000900 <DMA2_Stream0_IRQHandler+0x48>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	b12b      	cbz	r3, 8000900 <DMA2_Stream0_IRQHandler+0x48>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80008f4:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80008f6:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <DMA2_Stream0_IRQHandler+0xe0>)
 80008f8:	6893      	ldr	r3, [r2, #8]
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	0719      	lsls	r1, r3, #28
 8000904:	d50c      	bpl.n	8000920 <DMA2_Stream0_IRQHandler+0x68>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <DMA2_Stream0_IRQHandler+0xe8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	0752      	lsls	r2, r2, #29
 800090e:	d507      	bpl.n	8000920 <DMA2_Stream0_IRQHandler+0x68>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	b12b      	cbz	r3, 8000920 <DMA2_Stream0_IRQHandler+0x68>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000914:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000916:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <DMA2_Stream0_IRQHandler+0xe0>)
 8000918:	6893      	ldr	r3, [r2, #8]
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	06db      	lsls	r3, r3, #27
 8000924:	d518      	bpl.n	8000958 <DMA2_Stream0_IRQHandler+0xa0>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000926:	4d1e      	ldr	r5, [pc, #120]	@ (80009a0 <DMA2_Stream0_IRQHandler+0xe8>)
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	0716      	lsls	r6, r2, #28
 800092e:	d513      	bpl.n	8000958 <DMA2_Stream0_IRQHandler+0xa0>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	b18b      	cbz	r3, 8000958 <DMA2_Stream0_IRQHandler+0xa0>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000934:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000936:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <DMA2_Stream0_IRQHandler+0xe0>)
 8000938:	6893      	ldr	r3, [r2, #8]
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000944:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000948:	d106      	bne.n	8000958 <DMA2_Stream0_IRQHandler+0xa0>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	0355      	lsls	r5, r2, #13
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000950:	bf4c      	ite	mi
 8000952:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000954:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000956:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	0698      	lsls	r0, r3, #26
 800095c:	d51a      	bpl.n	8000994 <DMA2_Stream0_IRQHandler+0xdc>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800095e:	4c10      	ldr	r4, [pc, #64]	@ (80009a0 <DMA2_Stream0_IRQHandler+0xe8>)
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	06d1      	lsls	r1, r2, #27
 8000966:	d515      	bpl.n	8000994 <DMA2_Stream0_IRQHandler+0xdc>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	b19b      	cbz	r3, 8000994 <DMA2_Stream0_IRQHandler+0xdc>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800096c:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <DMA2_Stream0_IRQHandler+0xe0>)
 8000970:	6893      	ldr	r3, [r2, #8]
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000980:	d108      	bne.n	8000994 <DMA2_Stream0_IRQHandler+0xdc>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	0352      	lsls	r2, r2, #13
				}
			}
		}

	}
}
 8000988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800098c:	bf4c      	ite	mi
 800098e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000990:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000992:	4718      	bx	r3
}
 8000994:	bd70      	pop	{r4, r5, r6, pc}
 8000996:	bf00      	nop
 8000998:	40026400 	.word	0x40026400
 800099c:	20000024 	.word	0x20000024
 80009a0:	20000044 	.word	0x20000044

080009a4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80009a4:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 80009a6:	4d2f      	ldr	r5, [pc, #188]	@ (8000a64 <DMA2_Stream1_IRQHandler+0xc0>)
 80009a8:	4c2f      	ldr	r4, [pc, #188]	@ (8000a68 <DMA2_Stream1_IRQHandler+0xc4>)
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	065a      	lsls	r2, r3, #25
 80009b2:	d508      	bpl.n	80009c6 <DMA2_Stream1_IRQHandler+0x22>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <DMA2_Stream1_IRQHandler+0xc8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ba:	b123      	cbz	r3, 80009c6 <DMA2_Stream1_IRQHandler+0x22>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80009bc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80009be:	68ab      	ldr	r3, [r5, #8]
 80009c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c4:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	d509      	bpl.n	80009e0 <DMA2_Stream1_IRQHandler+0x3c>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <DMA2_Stream1_IRQHandler+0xc8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	b12b      	cbz	r3, 80009e0 <DMA2_Stream1_IRQHandler+0x3c>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80009d4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80009d6:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <DMA2_Stream1_IRQHandler+0xc0>)
 80009d8:	6893      	ldr	r3, [r2, #8]
 80009da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009de:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	059e      	lsls	r6, r3, #22
 80009e4:	d509      	bpl.n	80009fa <DMA2_Stream1_IRQHandler+0x56>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <DMA2_Stream1_IRQHandler+0xc8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ec:	b12b      	cbz	r3, 80009fa <DMA2_Stream1_IRQHandler+0x56>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80009ee:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80009f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <DMA2_Stream1_IRQHandler+0xc0>)
 80009f2:	6893      	ldr	r3, [r2, #8]
 80009f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80009fa:	6823      	ldr	r3, [r4, #0]
 80009fc:	055d      	lsls	r5, r3, #21
 80009fe:	d515      	bpl.n	8000a2c <DMA2_Stream1_IRQHandler+0x88>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000a00:	4d1a      	ldr	r5, [pc, #104]	@ (8000a6c <DMA2_Stream1_IRQHandler+0xc8>)
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a06:	b18b      	cbz	r3, 8000a2c <DMA2_Stream1_IRQHandler+0x88>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000a08:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000a0a:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <DMA2_Stream1_IRQHandler+0xc0>)
 8000a0c:	6893      	ldr	r3, [r2, #8]
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a12:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a18:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000a1c:	d106      	bne.n	8000a2c <DMA2_Stream1_IRQHandler+0x88>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000a24:	bf4c      	ite	mi
 8000a26:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000a28:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000a2a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	0519      	lsls	r1, r3, #20
 8000a30:	d517      	bpl.n	8000a62 <DMA2_Stream1_IRQHandler+0xbe>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000a32:	4c0e      	ldr	r4, [pc, #56]	@ (8000a6c <DMA2_Stream1_IRQHandler+0xc8>)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	b19b      	cbz	r3, 8000a62 <DMA2_Stream1_IRQHandler+0xbe>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000a3a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <DMA2_Stream1_IRQHandler+0xc0>)
 8000a3e:	6893      	ldr	r3, [r2, #8]
 8000a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a44:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a4a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000a4e:	d108      	bne.n	8000a62 <DMA2_Stream1_IRQHandler+0xbe>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	0352      	lsls	r2, r2, #13
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000a5a:	bf4c      	ite	mi
 8000a5c:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000a5e:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000a60:	4718      	bx	r3
}
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	40026400 	.word	0x40026400
 8000a68:	20000024 	.word	0x20000024
 8000a6c:	20000040 	.word	0x20000040

08000a70 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 8000a72:	4d2f      	ldr	r5, [pc, #188]	@ (8000b30 <DMA2_Stream2_IRQHandler+0xc0>)
 8000a74:	4c2f      	ldr	r4, [pc, #188]	@ (8000b34 <DMA2_Stream2_IRQHandler+0xc4>)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	03da      	lsls	r2, r3, #15
 8000a7e:	d508      	bpl.n	8000a92 <DMA2_Stream2_IRQHandler+0x22>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <DMA2_Stream2_IRQHandler+0xc8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a86:	b123      	cbz	r3, 8000a92 <DMA2_Stream2_IRQHandler+0x22>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000a88:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000a8a:	68ab      	ldr	r3, [r5, #8]
 8000a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a90:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	035b      	lsls	r3, r3, #13
 8000a96:	d509      	bpl.n	8000aac <DMA2_Stream2_IRQHandler+0x3c>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <DMA2_Stream2_IRQHandler+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	b12b      	cbz	r3, 8000aac <DMA2_Stream2_IRQHandler+0x3c>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000aa0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000aa2:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <DMA2_Stream2_IRQHandler+0xc0>)
 8000aa4:	6893      	ldr	r3, [r2, #8]
 8000aa6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aaa:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	031e      	lsls	r6, r3, #12
 8000ab0:	d509      	bpl.n	8000ac6 <DMA2_Stream2_IRQHandler+0x56>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <DMA2_Stream2_IRQHandler+0xc8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab8:	b12b      	cbz	r3, 8000ac6 <DMA2_Stream2_IRQHandler+0x56>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000aba:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000abc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <DMA2_Stream2_IRQHandler+0xc0>)
 8000abe:	6893      	ldr	r3, [r2, #8]
 8000ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ac4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	02dd      	lsls	r5, r3, #11
 8000aca:	d515      	bpl.n	8000af8 <DMA2_Stream2_IRQHandler+0x88>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000acc:	4d1a      	ldr	r5, [pc, #104]	@ (8000b38 <DMA2_Stream2_IRQHandler+0xc8>)
 8000ace:	682b      	ldr	r3, [r5, #0]
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad2:	b18b      	cbz	r3, 8000af8 <DMA2_Stream2_IRQHandler+0x88>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ad4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <DMA2_Stream2_IRQHandler+0xc0>)
 8000ad8:	6893      	ldr	r3, [r2, #8]
 8000ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ade:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ae4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000ae8:	d106      	bne.n	8000af8 <DMA2_Stream2_IRQHandler+0x88>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000af0:	bf4c      	ite	mi
 8000af2:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000af4:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000af6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	0299      	lsls	r1, r3, #10
 8000afc:	d517      	bpl.n	8000b2e <DMA2_Stream2_IRQHandler+0xbe>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000afe:	4c0e      	ldr	r4, [pc, #56]	@ (8000b38 <DMA2_Stream2_IRQHandler+0xc8>)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	b19b      	cbz	r3, 8000b2e <DMA2_Stream2_IRQHandler+0xbe>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000b06:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000b08:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <DMA2_Stream2_IRQHandler+0xc0>)
 8000b0a:	6893      	ldr	r3, [r2, #8]
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b10:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b16:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000b1a:	d108      	bne.n	8000b2e <DMA2_Stream2_IRQHandler+0xbe>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	0352      	lsls	r2, r2, #13
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000b26:	bf4c      	ite	mi
 8000b28:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b2a:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000b2c:	4718      	bx	r3
}
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	40026400 	.word	0x40026400
 8000b34:	20000024 	.word	0x20000024
 8000b38:	2000003c 	.word	0x2000003c

08000b3c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8000b3c:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 8000b3e:	4d37      	ldr	r5, [pc, #220]	@ (8000c1c <DMA2_Stream3_IRQHandler+0xe0>)
 8000b40:	4c37      	ldr	r4, [pc, #220]	@ (8000c20 <DMA2_Stream3_IRQHandler+0xe4>)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	025b      	lsls	r3, r3, #9
 8000b4a:	d50b      	bpl.n	8000b64 <DMA2_Stream3_IRQHandler+0x28>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000b4c:	4b35      	ldr	r3, [pc, #212]	@ (8000c24 <DMA2_Stream3_IRQHandler+0xe8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	0616      	lsls	r6, r2, #24
 8000b54:	d506      	bpl.n	8000b64 <DMA2_Stream3_IRQHandler+0x28>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b58:	b123      	cbz	r3, 8000b64 <DMA2_Stream3_IRQHandler+0x28>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b5a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000b5c:	68ab      	ldr	r3, [r5, #8]
 8000b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b62:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	01dd      	lsls	r5, r3, #7
 8000b68:	d50c      	bpl.n	8000b84 <DMA2_Stream3_IRQHandler+0x48>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <DMA2_Stream3_IRQHandler+0xe8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	0790      	lsls	r0, r2, #30
 8000b72:	d507      	bpl.n	8000b84 <DMA2_Stream3_IRQHandler+0x48>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	b12b      	cbz	r3, 8000b84 <DMA2_Stream3_IRQHandler+0x48>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000b78:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000b7a:	4a28      	ldr	r2, [pc, #160]	@ (8000c1c <DMA2_Stream3_IRQHandler+0xe0>)
 8000b7c:	6893      	ldr	r3, [r2, #8]
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b82:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	0199      	lsls	r1, r3, #6
 8000b88:	d50c      	bpl.n	8000ba4 <DMA2_Stream3_IRQHandler+0x68>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000b8a:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <DMA2_Stream3_IRQHandler+0xe8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	0752      	lsls	r2, r2, #29
 8000b92:	d507      	bpl.n	8000ba4 <DMA2_Stream3_IRQHandler+0x68>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	b12b      	cbz	r3, 8000ba4 <DMA2_Stream3_IRQHandler+0x68>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000b98:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000b9a:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <DMA2_Stream3_IRQHandler+0xe0>)
 8000b9c:	6893      	ldr	r3, [r2, #8]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	d518      	bpl.n	8000bdc <DMA2_Stream3_IRQHandler+0xa0>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000baa:	4d1e      	ldr	r5, [pc, #120]	@ (8000c24 <DMA2_Stream3_IRQHandler+0xe8>)
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	69da      	ldr	r2, [r3, #28]
 8000bb0:	0716      	lsls	r6, r2, #28
 8000bb2:	d513      	bpl.n	8000bdc <DMA2_Stream3_IRQHandler+0xa0>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb6:	b18b      	cbz	r3, 8000bdc <DMA2_Stream3_IRQHandler+0xa0>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000bb8:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000bba:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <DMA2_Stream3_IRQHandler+0xe0>)
 8000bbc:	6893      	ldr	r3, [r2, #8]
 8000bbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bc2:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000bc4:	682b      	ldr	r3, [r5, #0]
 8000bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bc8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000bcc:	d106      	bne.n	8000bdc <DMA2_Stream3_IRQHandler+0xa0>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	0355      	lsls	r5, r2, #13
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000bd4:	bf4c      	ite	mi
 8000bd6:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000bd8:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000bda:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	0118      	lsls	r0, r3, #4
 8000be0:	d51a      	bpl.n	8000c18 <DMA2_Stream3_IRQHandler+0xdc>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000be2:	4c10      	ldr	r4, [pc, #64]	@ (8000c24 <DMA2_Stream3_IRQHandler+0xe8>)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	69da      	ldr	r2, [r3, #28]
 8000be8:	06d1      	lsls	r1, r2, #27
 8000bea:	d515      	bpl.n	8000c18 <DMA2_Stream3_IRQHandler+0xdc>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	b19b      	cbz	r3, 8000c18 <DMA2_Stream3_IRQHandler+0xdc>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000bf0:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <DMA2_Stream3_IRQHandler+0xe0>)
 8000bf4:	6893      	ldr	r3, [r2, #8]
 8000bf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bfa:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c00:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000c04:	d108      	bne.n	8000c18 <DMA2_Stream3_IRQHandler+0xdc>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8000c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c10:	bf4c      	ite	mi
 8000c12:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c14:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000c16:	4718      	bx	r3
}
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40026400 	.word	0x40026400
 8000c20:	20000024 	.word	0x20000024
 8000c24:	20000038 	.word	0x20000038

08000c28 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 8000c2a:	4d2f      	ldr	r5, [pc, #188]	@ (8000ce8 <DMA2_Stream4_IRQHandler+0xc0>)
 8000c2c:	4c2f      	ldr	r4, [pc, #188]	@ (8000cec <DMA2_Stream4_IRQHandler+0xc4>)
 8000c2e:	686b      	ldr	r3, [r5, #4]
 8000c30:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	07da      	lsls	r2, r3, #31
 8000c36:	d508      	bpl.n	8000c4a <DMA2_Stream4_IRQHandler+0x22>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000c38:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <DMA2_Stream4_IRQHandler+0xc8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c3e:	b123      	cbz	r3, 8000c4a <DMA2_Stream4_IRQHandler+0x22>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000c40:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8000c42:	68ab      	ldr	r3, [r5, #8]
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	075b      	lsls	r3, r3, #29
 8000c4e:	d509      	bpl.n	8000c64 <DMA2_Stream4_IRQHandler+0x3c>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000c50:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <DMA2_Stream4_IRQHandler+0xc8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	b12b      	cbz	r3, 8000c64 <DMA2_Stream4_IRQHandler+0x3c>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000c58:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000c5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <DMA2_Stream4_IRQHandler+0xc0>)
 8000c5c:	68d3      	ldr	r3, [r2, #12]
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	071e      	lsls	r6, r3, #28
 8000c68:	d509      	bpl.n	8000c7e <DMA2_Stream4_IRQHandler+0x56>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <DMA2_Stream4_IRQHandler+0xc8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c70:	b12b      	cbz	r3, 8000c7e <DMA2_Stream4_IRQHandler+0x56>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000c72:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8000c74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <DMA2_Stream4_IRQHandler+0xc0>)
 8000c76:	68d3      	ldr	r3, [r2, #12]
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	06dd      	lsls	r5, r3, #27
 8000c82:	d515      	bpl.n	8000cb0 <DMA2_Stream4_IRQHandler+0x88>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000c84:	4d1a      	ldr	r5, [pc, #104]	@ (8000cf0 <DMA2_Stream4_IRQHandler+0xc8>)
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c8a:	b18b      	cbz	r3, 8000cb0 <DMA2_Stream4_IRQHandler+0x88>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c8c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <DMA2_Stream4_IRQHandler+0xc0>)
 8000c90:	68d3      	ldr	r3, [r2, #12]
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c9c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000ca0:	d106      	bne.n	8000cb0 <DMA2_Stream4_IRQHandler+0x88>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ca8:	bf4c      	ite	mi
 8000caa:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000cac:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000cae:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	0699      	lsls	r1, r3, #26
 8000cb4:	d517      	bpl.n	8000ce6 <DMA2_Stream4_IRQHandler+0xbe>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000cb6:	4c0e      	ldr	r4, [pc, #56]	@ (8000cf0 <DMA2_Stream4_IRQHandler+0xc8>)
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	b19b      	cbz	r3, 8000ce6 <DMA2_Stream4_IRQHandler+0xbe>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000cbe:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000cc0:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <DMA2_Stream4_IRQHandler+0xc0>)
 8000cc2:	68d3      	ldr	r3, [r2, #12]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cce:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000cd2:	d108      	bne.n	8000ce6 <DMA2_Stream4_IRQHandler+0xbe>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	0352      	lsls	r2, r2, #13
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000cde:	bf4c      	ite	mi
 8000ce0:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ce2:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000ce4:	4718      	bx	r3
}
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
 8000ce8:	40026400 	.word	0x40026400
 8000cec:	20000020 	.word	0x20000020
 8000cf0:	20000034 	.word	0x20000034

08000cf4 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8000cf4:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 8000cf6:	4d2f      	ldr	r5, [pc, #188]	@ (8000db4 <DMA2_Stream5_IRQHandler+0xc0>)
 8000cf8:	4c2f      	ldr	r4, [pc, #188]	@ (8000db8 <DMA2_Stream5_IRQHandler+0xc4>)
 8000cfa:	686b      	ldr	r3, [r5, #4]
 8000cfc:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	065a      	lsls	r2, r3, #25
 8000d02:	d508      	bpl.n	8000d16 <DMA2_Stream5_IRQHandler+0x22>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000d04:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <DMA2_Stream5_IRQHandler+0xc8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d0a:	b123      	cbz	r3, 8000d16 <DMA2_Stream5_IRQHandler+0x22>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000d0c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000d0e:	68eb      	ldr	r3, [r5, #12]
 8000d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d14:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	d509      	bpl.n	8000d30 <DMA2_Stream5_IRQHandler+0x3c>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <DMA2_Stream5_IRQHandler+0xc8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	b12b      	cbz	r3, 8000d30 <DMA2_Stream5_IRQHandler+0x3c>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000d24:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000d26:	4a23      	ldr	r2, [pc, #140]	@ (8000db4 <DMA2_Stream5_IRQHandler+0xc0>)
 8000d28:	68d3      	ldr	r3, [r2, #12]
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	059e      	lsls	r6, r3, #22
 8000d34:	d509      	bpl.n	8000d4a <DMA2_Stream5_IRQHandler+0x56>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <DMA2_Stream5_IRQHandler+0xc8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3c:	b12b      	cbz	r3, 8000d4a <DMA2_Stream5_IRQHandler+0x56>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d3e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000d40:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <DMA2_Stream5_IRQHandler+0xc0>)
 8000d42:	68d3      	ldr	r3, [r2, #12]
 8000d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d48:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	055d      	lsls	r5, r3, #21
 8000d4e:	d515      	bpl.n	8000d7c <DMA2_Stream5_IRQHandler+0x88>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d50:	4d1a      	ldr	r5, [pc, #104]	@ (8000dbc <DMA2_Stream5_IRQHandler+0xc8>)
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d56:	b18b      	cbz	r3, 8000d7c <DMA2_Stream5_IRQHandler+0x88>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d58:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000d5a:	4a16      	ldr	r2, [pc, #88]	@ (8000db4 <DMA2_Stream5_IRQHandler+0xc0>)
 8000d5c:	68d3      	ldr	r3, [r2, #12]
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d62:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d68:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000d6c:	d106      	bne.n	8000d7c <DMA2_Stream5_IRQHandler+0x88>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	6812      	ldr	r2, [r2, #0]
 8000d72:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d74:	bf4c      	ite	mi
 8000d76:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d78:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000d7a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	0519      	lsls	r1, r3, #20
 8000d80:	d517      	bpl.n	8000db2 <DMA2_Stream5_IRQHandler+0xbe>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000d82:	4c0e      	ldr	r4, [pc, #56]	@ (8000dbc <DMA2_Stream5_IRQHandler+0xc8>)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	b19b      	cbz	r3, 8000db2 <DMA2_Stream5_IRQHandler+0xbe>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000d8a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000d8c:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <DMA2_Stream5_IRQHandler+0xc0>)
 8000d8e:	68d3      	ldr	r3, [r2, #12]
 8000d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d94:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d9a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000d9e:	d108      	bne.n	8000db2 <DMA2_Stream5_IRQHandler+0xbe>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	0352      	lsls	r2, r2, #13
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000daa:	bf4c      	ite	mi
 8000dac:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000dae:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000db0:	4718      	bx	r3
}
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	40026400 	.word	0x40026400
 8000db8:	20000020 	.word	0x20000020
 8000dbc:	20000030 	.word	0x20000030

08000dc0 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 8000dc2:	4d2f      	ldr	r5, [pc, #188]	@ (8000e80 <DMA2_Stream6_IRQHandler+0xc0>)
 8000dc4:	4c2f      	ldr	r4, [pc, #188]	@ (8000e84 <DMA2_Stream6_IRQHandler+0xc4>)
 8000dc6:	686b      	ldr	r3, [r5, #4]
 8000dc8:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	03da      	lsls	r2, r3, #15
 8000dce:	d508      	bpl.n	8000de2 <DMA2_Stream6_IRQHandler+0x22>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <DMA2_Stream6_IRQHandler+0xc8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd6:	b123      	cbz	r3, 8000de2 <DMA2_Stream6_IRQHandler+0x22>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000dd8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000dda:	68eb      	ldr	r3, [r5, #12]
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de0:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	035b      	lsls	r3, r3, #13
 8000de6:	d509      	bpl.n	8000dfc <DMA2_Stream6_IRQHandler+0x3c>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <DMA2_Stream6_IRQHandler+0xc8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	b12b      	cbz	r3, 8000dfc <DMA2_Stream6_IRQHandler+0x3c>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000df0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000df2:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <DMA2_Stream6_IRQHandler+0xc0>)
 8000df4:	68d3      	ldr	r3, [r2, #12]
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfa:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	031e      	lsls	r6, r3, #12
 8000e00:	d509      	bpl.n	8000e16 <DMA2_Stream6_IRQHandler+0x56>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <DMA2_Stream6_IRQHandler+0xc8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e08:	b12b      	cbz	r3, 8000e16 <DMA2_Stream6_IRQHandler+0x56>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e0a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <DMA2_Stream6_IRQHandler+0xc0>)
 8000e0e:	68d3      	ldr	r3, [r2, #12]
 8000e10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e14:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	02dd      	lsls	r5, r3, #11
 8000e1a:	d515      	bpl.n	8000e48 <DMA2_Stream6_IRQHandler+0x88>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e1c:	4d1a      	ldr	r5, [pc, #104]	@ (8000e88 <DMA2_Stream6_IRQHandler+0xc8>)
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	b18b      	cbz	r3, 8000e48 <DMA2_Stream6_IRQHandler+0x88>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e24:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000e26:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <DMA2_Stream6_IRQHandler+0xc0>)
 8000e28:	68d3      	ldr	r3, [r2, #12]
 8000e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e2e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e34:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000e38:	d106      	bne.n	8000e48 <DMA2_Stream6_IRQHandler+0x88>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000e40:	bf4c      	ite	mi
 8000e42:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000e44:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000e46:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	0299      	lsls	r1, r3, #10
 8000e4c:	d517      	bpl.n	8000e7e <DMA2_Stream6_IRQHandler+0xbe>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000e4e:	4c0e      	ldr	r4, [pc, #56]	@ (8000e88 <DMA2_Stream6_IRQHandler+0xc8>)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	b19b      	cbz	r3, 8000e7e <DMA2_Stream6_IRQHandler+0xbe>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000e56:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000e58:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <DMA2_Stream6_IRQHandler+0xc0>)
 8000e5a:	68d3      	ldr	r3, [r2, #12]
 8000e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e60:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e66:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000e6a:	d108      	bne.n	8000e7e <DMA2_Stream6_IRQHandler+0xbe>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	0352      	lsls	r2, r2, #13
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000e76:	bf4c      	ite	mi
 8000e78:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000e7a:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000e7c:	4718      	bx	r3
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	40026400 	.word	0x40026400
 8000e84:	20000020 	.word	0x20000020
 8000e88:	2000002c 	.word	0x2000002c

08000e8c <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 8000e8e:	4d2f      	ldr	r5, [pc, #188]	@ (8000f4c <DMA2_Stream7_IRQHandler+0xc0>)
 8000e90:	4c2f      	ldr	r4, [pc, #188]	@ (8000f50 <DMA2_Stream7_IRQHandler+0xc4>)
 8000e92:	686b      	ldr	r3, [r5, #4]
 8000e94:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	025a      	lsls	r2, r3, #9
 8000e9a:	d508      	bpl.n	8000eae <DMA2_Stream7_IRQHandler+0x22>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <DMA2_Stream7_IRQHandler+0xc8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea2:	b123      	cbz	r3, 8000eae <DMA2_Stream7_IRQHandler+0x22>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000ea4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000ea6:	68eb      	ldr	r3, [r5, #12]
 8000ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eac:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	d509      	bpl.n	8000ec8 <DMA2_Stream7_IRQHandler+0x3c>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <DMA2_Stream7_IRQHandler+0xc8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	b12b      	cbz	r3, 8000ec8 <DMA2_Stream7_IRQHandler+0x3c>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ebc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <DMA2_Stream7_IRQHandler+0xc0>)
 8000ec0:	68d3      	ldr	r3, [r2, #12]
 8000ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	019e      	lsls	r6, r3, #6
 8000ecc:	d509      	bpl.n	8000ee2 <DMA2_Stream7_IRQHandler+0x56>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <DMA2_Stream7_IRQHandler+0xc8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed4:	b12b      	cbz	r3, 8000ee2 <DMA2_Stream7_IRQHandler+0x56>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000ed6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <DMA2_Stream7_IRQHandler+0xc0>)
 8000eda:	68d3      	ldr	r3, [r2, #12]
 8000edc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	015d      	lsls	r5, r3, #5
 8000ee6:	d515      	bpl.n	8000f14 <DMA2_Stream7_IRQHandler+0x88>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000ee8:	4d1a      	ldr	r5, [pc, #104]	@ (8000f54 <DMA2_Stream7_IRQHandler+0xc8>)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eee:	b18b      	cbz	r3, 8000f14 <DMA2_Stream7_IRQHandler+0x88>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ef0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000ef2:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <DMA2_Stream7_IRQHandler+0xc0>)
 8000ef4:	68d3      	ldr	r3, [r2, #12]
 8000ef6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000efa:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f00:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000f04:	d106      	bne.n	8000f14 <DMA2_Stream7_IRQHandler+0x88>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f0c:	bf4c      	ite	mi
 8000f0e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f10:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000f12:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	0119      	lsls	r1, r3, #4
 8000f18:	d517      	bpl.n	8000f4a <DMA2_Stream7_IRQHandler+0xbe>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f1a:	4c0e      	ldr	r4, [pc, #56]	@ (8000f54 <DMA2_Stream7_IRQHandler+0xc8>)
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	b19b      	cbz	r3, 8000f4a <DMA2_Stream7_IRQHandler+0xbe>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000f22:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000f24:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <DMA2_Stream7_IRQHandler+0xc0>)
 8000f26:	68d3      	ldr	r3, [r2, #12]
 8000f28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f2c:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f32:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000f36:	d108      	bne.n	8000f4a <DMA2_Stream7_IRQHandler+0xbe>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	0352      	lsls	r2, r2, #13
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f42:	bf4c      	ite	mi
 8000f44:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f46:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000f48:	4718      	bx	r3
}
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	40026400 	.word	0x40026400
 8000f50:	20000020 	.word	0x20000020
 8000f54:	20000028 	.word	0x20000028

08000f58 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8000f58:	b508      	push	{r3, lr}
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <EXTI0_IRQHandler+0x18>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b103      	cbz	r3, 8000f62 <EXTI0_IRQHandler+0xa>
 8000f60:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <EXTI0_IRQHandler+0x1c>)
 8000f64:	6953      	ldr	r3, [r2, #20]
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6153      	str	r3, [r2, #20]
}
 8000f6c:	bd08      	pop	{r3, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000068 	.word	0x20000068
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8000f78:	b508      	push	{r3, lr}
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <EXTI1_IRQHandler+0x18>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	b103      	cbz	r3, 8000f82 <EXTI1_IRQHandler+0xa>
 8000f80:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <EXTI1_IRQHandler+0x1c>)
 8000f84:	6953      	ldr	r3, [r2, #20]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6153      	str	r3, [r2, #20]
}
 8000f8c:	bd08      	pop	{r3, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000068 	.word	0x20000068
 8000f94:	40013c00 	.word	0x40013c00

08000f98 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8000f98:	b508      	push	{r3, lr}
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <EXTI2_IRQHandler+0x18>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	b103      	cbz	r3, 8000fa2 <EXTI2_IRQHandler+0xa>
 8000fa0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <EXTI2_IRQHandler+0x1c>)
 8000fa4:	6953      	ldr	r3, [r2, #20]
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6153      	str	r3, [r2, #20]
}
 8000fac:	bd08      	pop	{r3, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000068 	.word	0x20000068
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8000fb8:	b508      	push	{r3, lr}
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <EXTI3_IRQHandler+0x18>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	b103      	cbz	r3, 8000fc2 <EXTI3_IRQHandler+0xa>
 8000fc0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <EXTI3_IRQHandler+0x1c>)
 8000fc4:	6953      	ldr	r3, [r2, #20]
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6153      	str	r3, [r2, #20]
}
 8000fcc:	bd08      	pop	{r3, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000068 	.word	0x20000068
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8000fd8:	b508      	push	{r3, lr}
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <EXTI4_IRQHandler+0x18>)
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	b103      	cbz	r3, 8000fe2 <EXTI4_IRQHandler+0xa>
 8000fe0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <EXTI4_IRQHandler+0x1c>)
 8000fe4:	6953      	ldr	r3, [r2, #20]
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6153      	str	r3, [r2, #20]
}
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000068 	.word	0x20000068
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8000ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 5; i <= 9; ++i) {
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8000ffc:	4e0a      	ldr	r6, [pc, #40]	@ (8001028 <EXTI9_5_IRQHandler+0x30>)
 8000ffe:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 800102c <EXTI9_5_IRQHandler+0x34>
    for (int i = 5; i <= 9; ++i) {
 8001002:	2405      	movs	r4, #5
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001004:	2701      	movs	r7, #1
 8001006:	6973      	ldr	r3, [r6, #20]
 8001008:	fa07 f504 	lsl.w	r5, r7, r4
 800100c:	422b      	tst	r3, r5
 800100e:	d006      	beq.n	800101e <EXTI9_5_IRQHandler+0x26>
 8001010:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001014:	b11b      	cbz	r3, 800101e <EXTI9_5_IRQHandler+0x26>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001016:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001018:	6973      	ldr	r3, [r6, #20]
 800101a:	431d      	orrs	r5, r3
 800101c:	6175      	str	r5, [r6, #20]
    for (int i = 5; i <= 9; ++i) {
 800101e:	3401      	adds	r4, #1
 8001020:	2c0a      	cmp	r4, #10
 8001022:	d1f0      	bne.n	8001006 <EXTI9_5_IRQHandler+0xe>
        }
    }
}
 8001024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001028:	40013c00 	.word	0x40013c00
 800102c:	20000068 	.word	0x20000068

08001030 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 10; i <= 15; ++i) {
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001034:	4e0a      	ldr	r6, [pc, #40]	@ (8001060 <EXTI15_10_IRQHandler+0x30>)
 8001036:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 8001064 <EXTI15_10_IRQHandler+0x34>
    for (int i = 10; i <= 15; ++i) {
 800103a:	240a      	movs	r4, #10
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 800103c:	2701      	movs	r7, #1
 800103e:	6973      	ldr	r3, [r6, #20]
 8001040:	fa07 f504 	lsl.w	r5, r7, r4
 8001044:	422b      	tst	r3, r5
 8001046:	d006      	beq.n	8001056 <EXTI15_10_IRQHandler+0x26>
 8001048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800104c:	b11b      	cbz	r3, 8001056 <EXTI15_10_IRQHandler+0x26>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 800104e:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001050:	6973      	ldr	r3, [r6, #20]
 8001052:	431d      	orrs	r5, r3
 8001054:	6175      	str	r5, [r6, #20]
    for (int i = 10; i <= 15; ++i) {
 8001056:	3401      	adds	r4, #1
 8001058:	2c10      	cmp	r4, #16
 800105a:	d1f0      	bne.n	800103e <EXTI15_10_IRQHandler+0xe>
        }
    }
}
 800105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001060:	40013c00 	.word	0x40013c00
 8001064:	20000068 	.word	0x20000068

08001068 <GPIO_Clock_Enable>:
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
    switch ((uint32_t)PORT) {
 8001068:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <GPIO_Clock_Enable+0x88>)
 800106a:	4298      	cmp	r0, r3
 800106c:	d030      	beq.n	80010d0 <GPIO_Clock_Enable+0x68>
 800106e:	d80e      	bhi.n	800108e <GPIO_Clock_Enable+0x26>
 8001070:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001074:	4298      	cmp	r0, r3
 8001076:	d021      	beq.n	80010bc <GPIO_Clock_Enable+0x54>
 8001078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800107c:	4298      	cmp	r0, r3
 800107e:	d022      	beq.n	80010c6 <GPIO_Clock_Enable+0x5e>
 8001080:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001084:	4298      	cmp	r0, r3
 8001086:	d012      	beq.n	80010ae <GPIO_Clock_Enable+0x46>
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	4770      	bx	lr
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <GPIO_Clock_Enable+0x8c>)
 8001090:	4298      	cmp	r0, r3
 8001092:	d022      	beq.n	80010da <GPIO_Clock_Enable+0x72>
 8001094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001098:	4298      	cmp	r0, r3
 800109a:	d023      	beq.n	80010e4 <GPIO_Clock_Enable+0x7c>
 800109c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
 80010a0:	4298      	cmp	r0, r3
 80010a2:	d1f1      	bne.n	8001088 <GPIO_Clock_Enable+0x20>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010a6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	e003      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010b0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
        default: return GPIO_INVALID_PORT;
    }
    return GPIO_SUCCESS;
 80010b8:	2000      	movs	r0, #0
}
 80010ba:	4770      	bx	lr
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 80010bc:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010be:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	e7f7      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 80010c6:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010c8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	e7f2      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010d2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	e7ed      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 80010da:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010dc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	e7e8      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <GPIO_Clock_Enable+0x90>)
 80010e6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ec:	e7e3      	b.n	80010b6 <GPIO_Clock_Enable+0x4e>
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40023800 	.word	0x40023800

080010fc <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 80010fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001100:	4604      	mov	r4, r0
 8001102:	461d      	mov	r5, r3
 8001104:	4617      	mov	r7, r2
 8001106:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800110a:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 800110e:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8001112:	f7ff ffa9 	bl	8001068 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8001116:	f8d4 e000 	ldr.w	lr, [r4]
 800111a:	004b      	lsls	r3, r1, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	ea6f 0c02 	mvn.w	ip, r2
 8001124:	ea2e 0202 	bic.w	r2, lr, r2
 8001128:	6022      	str	r2, [r4, #0]
    Port->MODER |= mode << PIN_POS(pin);
 800112a:	f8d4 e000 	ldr.w	lr, [r4]
 800112e:	fa07 f203 	lsl.w	r2, r7, r3
 8001132:	ea42 020e 	orr.w	r2, r2, lr
 8001136:	6022      	str	r2, [r4, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	f04f 0e01 	mov.w	lr, #1
 800113e:	fa0e fe01 	lsl.w	lr, lr, r1
 8001142:	ea22 020e 	bic.w	r2, r2, lr
 8001146:	6062      	str	r2, [r4, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8001148:	2d02      	cmp	r5, #2
        Port->OTYPER |= output_type << pin;
 800114a:	bf1f      	itttt	ne
 800114c:	f8d4 e004 	ldrne.w	lr, [r4, #4]
 8001150:	fa05 f201 	lslne.w	r2, r5, r1
 8001154:	ea42 020e 	orrne.w	r2, r2, lr
 8001158:	6062      	strne	r2, [r4, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 800115a:	68a2      	ldr	r2, [r4, #8]
 800115c:	ea0c 0202 	and.w	r2, ip, r2
 8001160:	60a2      	str	r2, [r4, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8001162:	f1b9 0f04 	cmp.w	r9, #4
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8001166:	bf1f      	itttt	ne
 8001168:	68a2      	ldrne	r2, [r4, #8]
 800116a:	fa09 f503 	lslne.w	r5, r9, r3
 800116e:	4315      	orrne	r5, r2
 8001170:	60a5      	strne	r5, [r4, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8001172:	68e2      	ldr	r2, [r4, #12]
 8001174:	ea0c 0202 	and.w	r2, ip, r2
    if (pull != GPIO_Configuration.Pull.None) {
 8001178:	f1b8 0f04 	cmp.w	r8, #4
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 800117c:	60e2      	str	r2, [r4, #12]
        Port->PUPDR |= pull << PIN_POS(pin);
 800117e:	bf1f      	itttt	ne
 8001180:	68e2      	ldrne	r2, [r4, #12]
 8001182:	fa08 f303 	lslne.w	r3, r8, r3
 8001186:	4313      	orrne	r3, r2
 8001188:	60e3      	strne	r3, [r4, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 800118a:	2f02      	cmp	r7, #2
    Port->MODER &= ~(3 << PIN_POS(pin));
 800118c:	b208      	sxth	r0, r1
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 800118e:	d10e      	bne.n	80011ae <GPIO_Pin_Init+0xb2>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8001190:	2907      	cmp	r1, #7
 8001192:	f04f 020f 	mov.w	r2, #15
 8001196:	d80d      	bhi.n	80011b4 <GPIO_Pin_Init+0xb8>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8001198:	6a21      	ldr	r1, [r4, #32]
 800119a:	0083      	lsls	r3, r0, #2
 800119c:	409a      	lsls	r2, r3
 800119e:	ea21 0202 	bic.w	r2, r1, r2
 80011a2:	6222      	str	r2, [r4, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 80011a4:	6a22      	ldr	r2, [r4, #32]
 80011a6:	fa06 f303 	lsl.w	r3, r6, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	6223      	str	r3, [r4, #32]
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
        }
    }

    return GPIO_SUCCESS;
}
 80011ae:	2000      	movs	r0, #0
 80011b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 80011b4:	3908      	subs	r1, #8
 80011b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80011b8:	0089      	lsls	r1, r1, #2
 80011ba:	408a      	lsls	r2, r1
 80011bc:	ea23 0302 	bic.w	r3, r3, r2
 80011c0:	6263      	str	r3, [r4, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 80011c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80011c4:	408e      	lsls	r6, r1
 80011c6:	431e      	orrs	r6, r3
 80011c8:	6266      	str	r6, [r4, #36]	@ 0x24
 80011ca:	e7f0      	b.n	80011ae <GPIO_Pin_Init+0xb2>

080011cc <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80011cc:	b538      	push	{r3, r4, r5, lr}
	USART_SR = UART4 -> SR;
 80011ce:	4d33      	ldr	r5, [pc, #204]	@ (800129c <UART4_IRQHandler+0xd0>)
 80011d0:	4c33      	ldr	r4, [pc, #204]	@ (80012a0 <UART4_IRQHandler+0xd4>)
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8023      	strh	r3, [r4, #0]
	if(USART_SR & USART_SR_CTS)
 80011d8:	8823      	ldrh	r3, [r4, #0]
 80011da:	059a      	lsls	r2, r3, #22
 80011dc:	d509      	bpl.n	80011f2 <UART4_IRQHandler+0x26>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e6:	b123      	cbz	r3, 80011f2 <UART4_IRQHandler+0x26>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80011e8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011f0:	602b      	str	r3, [r5, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80011f2:	8823      	ldrh	r3, [r4, #0]
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	d50a      	bpl.n	800120e <UART4_IRQHandler+0x42>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80011f8:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	b12b      	cbz	r3, 800120e <UART4_IRQHandler+0x42>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8001202:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8001204:	4a25      	ldr	r2, [pc, #148]	@ (800129c <UART4_IRQHandler+0xd0>)
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800120c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 800120e:	8823      	ldrh	r3, [r4, #0]
 8001210:	061d      	lsls	r5, r3, #24
 8001212:	d50a      	bpl.n	800122a <UART4_IRQHandler+0x5e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8001214:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800121c:	b12b      	cbz	r3, 800122a <UART4_IRQHandler+0x5e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800121e:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8001220:	4a1e      	ldr	r2, [pc, #120]	@ (800129c <UART4_IRQHandler+0xd0>)
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001228:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 800122a:	8823      	ldrh	r3, [r4, #0]
 800122c:	0658      	lsls	r0, r3, #25
 800122e:	d50a      	bpl.n	8001246 <UART4_IRQHandler+0x7a>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001238:	b12b      	cbz	r3, 8001246 <UART4_IRQHandler+0x7a>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800123a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <UART4_IRQHandler+0xd0>)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001244:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8001246:	8823      	ldrh	r3, [r4, #0]
 8001248:	0699      	lsls	r1, r3, #26
 800124a:	d50a      	bpl.n	8001262 <UART4_IRQHandler+0x96>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001254:	b12b      	cbz	r3, 8001262 <UART4_IRQHandler+0x96>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8001256:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8001258:	4a10      	ldr	r2, [pc, #64]	@ (800129c <UART4_IRQHandler+0xd0>)
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0320 	bic.w	r3, r3, #32
 8001260:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8001262:	8823      	ldrh	r3, [r4, #0]
 8001264:	06da      	lsls	r2, r3, #27
 8001266:	d50a      	bpl.n	800127e <UART4_IRQHandler+0xb2>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001270:	b12b      	cbz	r3, 800127e <UART4_IRQHandler+0xb2>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8001272:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8001274:	4a09      	ldr	r2, [pc, #36]	@ (800129c <UART4_IRQHandler+0xd0>)
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f023 0310 	bic.w	r3, r3, #16
 800127c:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 800127e:	8823      	ldrh	r3, [r4, #0]
 8001280:	07db      	lsls	r3, r3, #31
 8001282:	d50a      	bpl.n	800129a <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <UART4_IRQHandler+0xd8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800128c:	b12b      	cbz	r3, 800129a <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 800128e:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8001290:	4a02      	ldr	r2, [pc, #8]	@ (800129c <UART4_IRQHandler+0xd0>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]
		}
	}

}
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	40004c00 	.word	0x40004c00
 80012a0:	200000a8 	.word	0x200000a8
 80012a4:	200000ac 	.word	0x200000ac

080012a8 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80012a8:	b538      	push	{r3, r4, r5, lr}
	USART_SR = USART1 -> SR;
 80012aa:	4c30      	ldr	r4, [pc, #192]	@ (800136c <USART1_IRQHandler+0xc4>)
 80012ac:	4d30      	ldr	r5, [pc, #192]	@ (8001370 <USART1_IRQHandler+0xc8>)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	802b      	strh	r3, [r5, #0]
	if(USART_SR & USART_SR_CTS)
 80012b4:	882b      	ldrh	r3, [r5, #0]
 80012b6:	0599      	lsls	r1, r3, #22
 80012b8:	d509      	bpl.n	80012ce <USART1_IRQHandler+0x26>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <USART1_IRQHandler+0xcc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012c2:	b123      	cbz	r3, 80012ce <USART1_IRQHandler+0x26>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80012c4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012cc:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80012ce:	882b      	ldrh	r3, [r5, #0]
 80012d0:	05da      	lsls	r2, r3, #23
 80012d2:	d509      	bpl.n	80012e8 <USART1_IRQHandler+0x40>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <USART1_IRQHandler+0xcc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	b123      	cbz	r3, 80012e8 <USART1_IRQHandler+0x40>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80012de:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e6:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 80012e8:	882b      	ldrh	r3, [r5, #0]
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	d509      	bpl.n	8001302 <USART1_IRQHandler+0x5a>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <USART1_IRQHandler+0xcc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80012f6:	b123      	cbz	r3, 8001302 <USART1_IRQHandler+0x5a>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80012f8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001300:	6023      	str	r3, [r4, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8001302:	882b      	ldrh	r3, [r5, #0]
 8001304:	0658      	lsls	r0, r3, #25
 8001306:	d509      	bpl.n	800131c <USART1_IRQHandler+0x74>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <USART1_IRQHandler+0xcc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001310:	b123      	cbz	r3, 800131c <USART1_IRQHandler+0x74>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8001312:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800131a:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 800131c:	882b      	ldrh	r3, [r5, #0]
 800131e:	0699      	lsls	r1, r3, #26
 8001320:	d509      	bpl.n	8001336 <USART1_IRQHandler+0x8e>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <USART1_IRQHandler+0xcc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800132a:	b123      	cbz	r3, 8001336 <USART1_IRQHandler+0x8e>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 800132c:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f023 0320 	bic.w	r3, r3, #32
 8001334:	6023      	str	r3, [r4, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8001336:	882b      	ldrh	r3, [r5, #0]
 8001338:	06da      	lsls	r2, r3, #27
 800133a:	d509      	bpl.n	8001350 <USART1_IRQHandler+0xa8>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <USART1_IRQHandler+0xcc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001344:	b123      	cbz	r3, 8001350 <USART1_IRQHandler+0xa8>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8001346:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	f023 0310 	bic.w	r3, r3, #16
 800134e:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8001350:	882b      	ldrh	r3, [r5, #0]
 8001352:	07db      	lsls	r3, r3, #31
 8001354:	d509      	bpl.n	800136a <USART1_IRQHandler+0xc2>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <USART1_IRQHandler+0xcc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800135e:	b123      	cbz	r3, 800136a <USART1_IRQHandler+0xc2>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8001360:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6023      	str	r3, [r4, #0]
		}
	}

}
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	40011000 	.word	0x40011000
 8001370:	200000a8 	.word	0x200000a8
 8001374:	200000b0 	.word	0x200000b0

08001378 <Delay_ms.constprop.0.isra.0>:
}

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
	unsigned long x =0x29040 * (ms);
	SysTick->LOAD =  x ;
 8001378:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800137c:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <Delay_ms.constprop.0.isra.0+0x1c>)
 800137e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
	SysTick->CTRL |= 1;
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	611a      	str	r2, [r3, #16]
	while((SysTick->CTRL & 0x00010000) == 0);
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	03d2      	lsls	r2, r2, #15
 8001390:	d5fc      	bpl.n	800138c <Delay_ms.constprop.0.isra.0+0x14>
	return (0UL);                                                     /* Function successful */
}
 8001392:	4770      	bx	lr
 8001394:	00029040 	.word	0x00029040

08001398 <main>:
void Reboot_MCU_Func(void);
void Erase_Firmware_Func(void);
/*==============================================================================================*/

int main(void)
{
 8001398:	b530      	push	{r4, r5, lr}
 800139a:	b085      	sub	sp, #20
	SystemInit();
 800139c:	f000 f882 	bl	80014a4 <SystemInit>
	RCC->PLLCFGR = 0x00000000;
 80013a0:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <main+0xf4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013ac:	601a      	str	r2, [r3, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	0390      	lsls	r0, r2, #14
 80013b2:	d5fc      	bpl.n	80013ae <main+0x16>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80013b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80013b6:	4936      	ldr	r1, [pc, #216]	@ (8001490 <main+0xf8>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80013b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013bc:	641a      	str	r2, [r3, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80013be:	680a      	ldr	r2, [r1, #0]
 80013c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80013c4:	600a      	str	r2, [r1, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80013c6:	f501 31e6 	add.w	r1, r1, #117760	@ 0x1cc00
 80013ca:	680a      	ldr	r2, [r1, #0]
 80013cc:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80013d0:	f042 0205 	orr.w	r2, r2, #5
 80013d4:	600a      	str	r2, [r1, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <main+0xfc>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80013e4:	605a      	str	r2, [r3, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 80013f0:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013f8:	609a      	str	r2, [r3, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001400:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <main+0xf4>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	0191      	lsls	r1, r2, #6
 8001408:	d5fc      	bpl.n	8001404 <main+0x6c>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	f042 0202 	orr.w	r2, r2, #2
 8001410:	609a      	str	r2, [r3, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	0712      	lsls	r2, r2, #28
 8001416:	d5fc      	bpl.n	8001412 <main+0x7a>
	SystemCoreClockUpdate();
 8001418:	f000 f84e 	bl	80014b8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <main+0x100>)
 800141e:	22a8      	movs	r2, #168	@ 0xa8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d20a      	bcs.n	8001444 <main+0xac>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <main+0x104>)
 8001438:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	2300      	movs	r3, #0
 800143e:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001440:	2307      	movs	r3, #7
 8001442:	6113      	str	r3, [r2, #16]
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001444:	4a11      	ldr	r2, [pc, #68]	@ (800148c <main+0xf4>)
	MCU_Clock_Setup();
	Delay_Config();
	CRC_Init();

	GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8001446:	4d16      	ldr	r5, [pc, #88]	@ (80014a0 <main+0x108>)
 8001448:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800144a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144e:	6453      	str	r3, [r2, #68]	@ 0x44
	SysTick->CTRL = 0;
 8001450:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001454:	2400      	movs	r4, #0
	SysTick->LOAD = 0x00FFFFFF;
 8001456:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
	SysTick->CTRL = 0;
 800145a:	611c      	str	r4, [r3, #16]
	SysTick->LOAD = 0x00FFFFFF;
 800145c:	615a      	str	r2, [r3, #20]
	SysTick->CTRL = 5;
 800145e:	2205      	movs	r2, #5
	SysTick->VAL = 0;
 8001460:	619c      	str	r4, [r3, #24]
	SysTick->CTRL = 5;
 8001462:	611a      	str	r2, [r3, #16]
	CRC_Init();
 8001464:	f7fe feb0 	bl	80001c8 <CRC_Init>
	GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8001468:	2304      	movs	r3, #4
 800146a:	e9cd 3300 	strd	r3, r3, [sp]
 800146e:	9402      	str	r4, [sp, #8]
 8001470:	2302      	movs	r3, #2
 8001472:	4622      	mov	r2, r4
 8001474:	4621      	mov	r1, r4
 8001476:	4628      	mov	r0, r5
 8001478:	f7ff fe40 	bl	80010fc <GPIO_Pin_Init>

	if((GPIOC -> IDR & GPIO_IDR_ID0) == true)
 800147c:	692b      	ldr	r3, [r5, #16]
 800147e:	07db      	lsls	r3, r3, #31
 8001480:	d401      	bmi.n	8001486 <main+0xee>
//		Bootloader();
	}
	else
	{
//		Application();
		Blink_App();
 8001482:	f006 fdbd 	bl	8008000 <Blink_App>
//	while(1)
//	{
//
//	}

}
 8001486:	4620      	mov	r0, r4
 8001488:	b005      	add	sp, #20
 800148a:	bd30      	pop	{r4, r5, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000
 8001494:	07005408 	.word	0x07005408
 8001498:	20000000 	.word	0x20000000
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	40020800 	.word	0x40020800

080014a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4a03      	ldr	r2, [pc, #12]	@ (80014b4 <SystemInit+0x10>)
 80014a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80014aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <SystemCoreClockUpdate+0x58>)
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80014c0:	2a04      	cmp	r2, #4
 80014c2:	d021      	beq.n	8001508 <SystemCoreClockUpdate+0x50>
 80014c4:	2a08      	cmp	r2, #8
 80014c6:	d121      	bne.n	800150c <SystemCoreClockUpdate+0x54>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014c8:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ca:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014cc:	685b      	ldr	r3, [r3, #4]
      if (pllsource != 0)
 80014ce:	0249      	lsls	r1, r1, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014d0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80014d4:	bf4c      	ite	mi
 80014d6:	490f      	ldrmi	r1, [pc, #60]	@ (8001514 <SystemCoreClockUpdate+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014d8:	490f      	ldrpl	r1, [pc, #60]	@ (8001518 <SystemCoreClockUpdate+0x60>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014de:	fbb1 f2f2 	udiv	r2, r1, r2
 80014e2:	4353      	muls	r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SystemCoreClockUpdate+0x58>)
 80014e6:	6852      	ldr	r2, [r2, #4]
 80014e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80014ec:	3201      	adds	r2, #1
 80014ee:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80014f0:	fbb3 f3f2 	udiv	r3, r3, r2
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <SystemCoreClockUpdate+0x58>)
 80014f6:	4909      	ldr	r1, [pc, #36]	@ (800151c <SystemCoreClockUpdate+0x64>)
 80014f8:	6892      	ldr	r2, [r2, #8]
 80014fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80014fe:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001500:	40d3      	lsrs	r3, r2
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <SystemCoreClockUpdate+0x68>)
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	4770      	bx	lr
  switch (tmp)
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <SystemCoreClockUpdate+0x5c>)
 800150a:	e7f3      	b.n	80014f4 <SystemCoreClockUpdate+0x3c>
 800150c:	4b02      	ldr	r3, [pc, #8]	@ (8001518 <SystemCoreClockUpdate+0x60>)
 800150e:	e7f1      	b.n	80014f4 <SystemCoreClockUpdate+0x3c>
 8001510:	40023800 	.word	0x40023800
 8001514:	007a1200 	.word	0x007a1200
 8001518:	00f42400 	.word	0x00f42400
 800151c:	080015d8 	.word	0x080015d8
 8001520:	20000000 	.word	0x20000000

08001524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001524:	480d      	ldr	r0, [pc, #52]	@ (800155c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001528:	f7ff ffbc 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001552:	f000 f811 	bl	8001578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff ff1f 	bl	8001398 <main>

0800155a <LoopForever>:

LoopForever:
  b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   r0, =_estack
 800155c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001568:	080015f0 	.word	0x080015f0
  ldr r2, =_sbss
 800156c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001570:	200000b4 	.word	0x200000b4

08001574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <__libc_init_array>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4d0d      	ldr	r5, [pc, #52]	@ (80015b0 <__libc_init_array+0x38>)
 800157c:	4c0d      	ldr	r4, [pc, #52]	@ (80015b4 <__libc_init_array+0x3c>)
 800157e:	1b64      	subs	r4, r4, r5
 8001580:	10a4      	asrs	r4, r4, #2
 8001582:	2600      	movs	r6, #0
 8001584:	42a6      	cmp	r6, r4
 8001586:	d109      	bne.n	800159c <__libc_init_array+0x24>
 8001588:	4d0b      	ldr	r5, [pc, #44]	@ (80015b8 <__libc_init_array+0x40>)
 800158a:	4c0c      	ldr	r4, [pc, #48]	@ (80015bc <__libc_init_array+0x44>)
 800158c:	f000 f818 	bl	80015c0 <_init>
 8001590:	1b64      	subs	r4, r4, r5
 8001592:	10a4      	asrs	r4, r4, #2
 8001594:	2600      	movs	r6, #0
 8001596:	42a6      	cmp	r6, r4
 8001598:	d105      	bne.n	80015a6 <__libc_init_array+0x2e>
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a0:	4798      	blx	r3
 80015a2:	3601      	adds	r6, #1
 80015a4:	e7ee      	b.n	8001584 <__libc_init_array+0xc>
 80015a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015aa:	4798      	blx	r3
 80015ac:	3601      	adds	r6, #1
 80015ae:	e7f2      	b.n	8001596 <__libc_init_array+0x1e>
 80015b0:	080015e8 	.word	0x080015e8
 80015b4:	080015e8 	.word	0x080015e8
 80015b8:	080015e8 	.word	0x080015e8
 80015bc:	080015ec 	.word	0x080015ec

080015c0 <_init>:
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	bf00      	nop
 80015c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c6:	bc08      	pop	{r3}
 80015c8:	469e      	mov	lr, r3
 80015ca:	4770      	bx	lr

080015cc <_fini>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr

Disassembly of section .app_section:

08008000 <Blink_App>:
{
 8008000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8008002:	2204      	movs	r2, #4
 8008004:	2300      	movs	r3, #0
 8008006:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	9200      	str	r2, [sp, #0]
 800800e:	210c      	movs	r1, #12
 8008010:	480c      	ldr	r0, [pc, #48]	@ (8008044 <Blink_App+0x44>)
 8008012:	2201      	movs	r2, #1
 8008014:	f7f9 f872 	bl	80010fc <GPIO_Pin_Init>
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
	Port -> ODR |= 1 << pin;
 8008018:	490a      	ldr	r1, [pc, #40]	@ (8008044 <Blink_App+0x44>)
 800801a:	694b      	ldr	r3, [r1, #20]
 800801c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008020:	614b      	str	r3, [r1, #20]
 8008022:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
	s = s * 1000;
	for (; s>0; s--)
	{
		Delay_ms(1);
 8008026:	f7f9 f9a7 	bl	8001378 <Delay_ms.constprop.0.isra.0>
	for (; s>0; s--)
 800802a:	3801      	subs	r0, #1
 800802c:	d1fb      	bne.n	8008026 <Blink_App+0x26>
	Port -> ODR &= ~(1 << pin);
 800802e:	694b      	ldr	r3, [r1, #20]
 8008030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008034:	614b      	str	r3, [r1, #20]
 8008036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		Delay_ms(1);
 800803a:	f7f9 f99d 	bl	8001378 <Delay_ms.constprop.0.isra.0>
	for (; s>0; s--)
 800803e:	3801      	subs	r0, #1
 8008040:	d1fb      	bne.n	800803a <Blink_App+0x3a>
 8008042:	e7ea      	b.n	800801a <Blink_App+0x1a>
 8008044:	40020c00 	.word	0x40020c00
