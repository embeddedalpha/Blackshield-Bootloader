
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .app_section  00000000  08008000  08008000  00008004  2**0
                  CONTENTS
  3 .rodata       00000458  08005bd0  08005bd0  00006bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006028  08006028  00008004  2**0
                  CONTENTS, READONLY
  5 .ARM          00000000  08006028  08006028  00008004  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  08006028  08006028  00008004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000004  20000000  08006030  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00008004  2**0
                  CONTENTS
 11 .bss          000007f4  20000004  20000004  00008004  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007f8  200007f8  00008004  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00008004  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009861  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000114f  00000000  00000000  00011895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003d0  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002e1  00000000  00000000  00012db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000010eb  00000000  00000000  00013099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006ef4  00000000  00000000  00014184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008fe3e  00000000  00000000  0001b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000aaeb6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001028  00000000  00000000  000aaefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  000abf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bb8 	.word	0x08005bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08005bb8 	.word	0x08005bb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <CRC_Init>:


#include "CRC.h"

void CRC_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <CRC_Init+0x1c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <CRC_Init+0x1c>)
 8000b7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b7e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <CRC_Reset>:

void CRC_Reset(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	CRC->CR |= CRC_CR_RESET;
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <CRC_Reset+0x1c>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <CRC_Reset+0x1c>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6093      	str	r3, [r2, #8]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023000 	.word	0x40023000

08000bb0 <CRC_Compute_8Bit_Block>:
	CRC->DR = (uint32_t)(word);
	return (CRC->DR);
}

uint32_t CRC_Compute_8Bit_Block(volatile uint8_t *wordBlock, size_t length)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	uint8_t temp=0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	72fb      	strb	r3, [r7, #11]
	CRC_Reset();
 8000bbe:	f7ff ffe7 	bl	8000b90 <CRC_Reset>
	for(uint32_t i = 0; i < length; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e00a      	b.n	8000bde <CRC_Compute_8Bit_Block+0x2e>
	{
		temp = wordBlock[i];
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	72fb      	strb	r3, [r7, #11]
		CRC -> DR = 0x00000000 | (temp);
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <CRC_Compute_8Bit_Block+0x44>)
 8000bd4:	7afb      	ldrb	r3, [r7, #11]
 8000bd6:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 0; i < length; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3f0      	bcc.n	8000bc8 <CRC_Compute_8Bit_Block+0x18>

	}
	return (CRC -> DR);
 8000be6:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <CRC_Compute_8Bit_Block+0x44>)
 8000be8:	681b      	ldr	r3, [r3, #0]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023000 	.word	0x40023000

08000bf8 <CRC_Compute_Flash_Data>:
	return (CRC -> DR)&0xFFFFffff;
}


uint32_t CRC_Compute_Flash_Data(volatile uint32_t Flash_Address, size_t length)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
//
//	    // Wait for transfer complete
//	    while (!(DMA2->LISR & DMA_LISR_TCIF0));
//	    DMA2->LIFCR |= DMA_LIFCR_CTCIF0;

	DMA_Memory_To_Memory_Transfer(Flash_Address, 32, 1, &CRC->DR, 32, 0, length);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	9302      	str	r3, [sp, #8]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	2320      	movs	r3, #32
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <CRC_Compute_Flash_Data+0x38>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	f001 ff89 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>

	    uint32_t crc_value = CRC->DR;
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <CRC_Compute_Flash_Data+0x38>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]

	    return crc_value;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023000 	.word	0x40023000

08000c34 <Custom_Console_IRQ>:
volatile uint8_t Custom_TRX_Buffer[Custom_RX_Buffer_Length]; // Buffer for received and transmitted data

// USART configuration structure
USART_Config Custom_Comm;

void Custom_Console_IRQ(void){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	if (custom_rx_get_flag == 1) { // Check if reception is active
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <Custom_Console_IRQ+0x78>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d130      	bne.n	8000ca2 <Custom_Console_IRQ+0x6e>
		(void)UART4->SR; // Read the status register to clear flags
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <Custom_Console_IRQ+0x7c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
		(void)UART4->DR; // Read the data register to clear flags
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <Custom_Console_IRQ+0x7c>)
 8000c46:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop

		__disable_irq(); // Disable interrupts to safely update DMA configurations

		// Disable DMA stream
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

		// Calculate the length of received data
		Custom_RX_Length = Custom_RX_Buffer_Length - Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <Custom_Console_IRQ+0x84>)
 8000c6a:	601a      	str	r2, [r3, #0]

		// Prevent buffer overflow
		if (Custom_RX_Length > Custom_RX_Buffer_Length) {
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <Custom_Console_IRQ+0x84>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c74:	dd03      	ble.n	8000c7e <Custom_Console_IRQ+0x4a>
			Custom_RX_Length = Custom_RX_Buffer_Length;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <Custom_Console_IRQ+0x84>)
 8000c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c7c:	601a      	str	r2, [r3, #0]
		}

		// Reset DMA stream for the next reception
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR = Custom_RX_Buffer_Length;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c86:	605a      	str	r2, [r3, #4]
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <Custom_Console_IRQ+0x80>)
 8000c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c98:	b662      	cpsie	i
}
 8000c9a:	bf00      	nop

		__enable_irq(); // Re-enable interrupts

		custom_rx_flag = 1; // Set the flag indicating data reception is complete
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <Custom_Console_IRQ+0x88>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20000020 	.word	0x20000020
 8000cb0:	40004c00 	.word	0x40004c00
 8000cb4:	2000012c 	.word	0x2000012c
 8000cb8:	20000028 	.word	0x20000028
 8000cbc:	20000024 	.word	0x20000024

08000cc0 <Custom_Comm_Init>:


void Custom_Comm_Init(int32_t baudrate) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	// Reset USART configuration to default values
	USART_Config_Reset(&Custom_Comm);
 8000cc8:	4815      	ldr	r0, [pc, #84]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cca:	f002 fccf 	bl	800366c <USART_Config_Reset>

	// Configure USART parameters
	Custom_Comm.Port = UART4; // Use UART4 for console communication
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <Custom_Comm_Init+0x64>)
 8000cd2:	601a      	str	r2, [r3, #0]
	Custom_Comm.baudrate = baudrate; // Set the baud rate
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cd8:	6053      	str	r3, [r2, #4]
	Custom_Comm.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cde:	721a      	strb	r2, [r3, #8]
	Custom_Comm.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000ce6:	741a      	strb	r2, [r3, #16]
	Custom_Comm.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8000ce8:	220a      	movs	r2, #10
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cec:	725a      	strb	r2, [r3, #9]
	Custom_Comm.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000cee:	220b      	movs	r2, #11
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cf2:	729a      	strb	r2, [r3, #10]
	Custom_Comm.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000cfa:	739a      	strb	r2, [r3, #14]
	Custom_Comm.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000d06:	745a      	strb	r2, [r3, #17]
	Custom_Comm.ISR_Routines.Idle_Line_ISR = Custom_Console_IRQ;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <Custom_Comm_Init+0x68>)
 8000d0c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// Initialize USART
	if (USART_Init(&Custom_Comm) != true) {}
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <Custom_Comm_Init+0x60>)
 8000d12:	f003 fae9 	bl	80042e8 <USART_Init>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000012c 	.word	0x2000012c
 8000d24:	40004c00 	.word	0x40004c00
 8000d28:	08000c35 	.word	0x08000c35

08000d2c <Custom_Comm_Send>:


void Custom_Comm_Send(volatile uint8_t *buffer, size_t buffer_size) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]

	if(buffer_size == 1)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d106      	bne.n	8000d4a <Custom_Comm_Send+0x1e>
	{
		USART_TX_Single_Byte(&Custom_Comm, buffer[0]);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <Custom_Comm_Send+0x34>)
 8000d46:	f004 f963 	bl	8005010 <USART_TX_Single_Byte>
	}

	// Transmit the buffer using DMA
	USART_TX_Buffer(&Custom_Comm, (uint8_t *)&buffer[0], buffer_size);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <Custom_Comm_Send+0x34>)
 8000d54:	f003 ff2a 	bl	8004bac <USART_TX_Buffer>

}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000012c 	.word	0x2000012c

08000d64 <Custom_Comm_Receive>:


uint16_t Custom_Comm_Receive(volatile uint8_t *buffer)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	6078      	str	r0, [r7, #4]
	int result;

	custom_rx_get_flag = 1; // Enable reception
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <Custom_Comm_Receive+0x7c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

	// Start DMA reception
	USART_RX_Buffer(&Custom_Comm, (uint8_t *)Custom_TRX_Buffer, Custom_RX_Buffer_Length, 0);
 8000d72:	2300      	movs	r3, #0
 8000d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d78:	491a      	ldr	r1, [pc, #104]	@ (8000de4 <Custom_Comm_Receive+0x80>)
 8000d7a:	481b      	ldr	r0, [pc, #108]	@ (8000de8 <Custom_Comm_Receive+0x84>)
 8000d7c:	f004 f826 	bl	8004dcc <USART_RX_Buffer>

	// Wait until data reception is complete
	while (custom_rx_flag == 0) {
 8000d80:	bf00      	nop
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <Custom_Comm_Receive+0x88>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0fb      	beq.n	8000d82 <Custom_Comm_Receive+0x1e>
		// Wait loop
	}

	// Check for valid input length
	if (Custom_RX_Length < 2) {
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <Custom_Comm_Receive+0x8c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	dc08      	bgt.n	8000da4 <Custom_Comm_Receive+0x40>
		// Reset flags and return error
		custom_rx_get_flag = 0;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <Custom_Comm_Receive+0x7c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		custom_rx_flag = 0;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <Custom_Comm_Receive+0x88>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
		return -1;
 8000d9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000da2:	e018      	b.n	8000dd6 <Custom_Comm_Receive+0x72>
	}

	result = Custom_RX_Length;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <Custom_Comm_Receive+0x8c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]

	DMA_Memory_To_Memory_Transfer(Custom_TRX_Buffer, 8,1,  buffer, 8, 1, Custom_RX_Length);
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <Custom_Comm_Receive+0x8c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	2308      	movs	r3, #8
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <Custom_Comm_Receive+0x80>)
 8000dc2:	f001 feb5 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>

	custom_rx_get_flag = 0; // Indicates if the reception is active
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <Custom_Comm_Receive+0x7c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	custom_rx_flag = 0;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <Custom_Comm_Receive+0x88>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]


	return result;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	b29b      	uxth	r3, r3


}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000020 	.word	0x20000020
 8000de4:	2000002c 	.word	0x2000002c
 8000de8:	2000012c 	.word	0x2000012c
 8000dec:	20000024 	.word	0x20000024
 8000df0:	20000028 	.word	0x20000028

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	@ (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000e34:	4b60      	ldr	r3, [pc, #384]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a60      	ldr	r2, [pc, #384]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000e3a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000e3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d015      	beq.n	8000e74 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e48:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2280      	movs	r2, #128	@ 0x80
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00e      	beq.n	8000e74 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e56:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e60:	4b57      	ldr	r3, [pc, #348]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e66:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000e68:	4b53      	ldr	r3, [pc, #332]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a52      	ldr	r2, [pc, #328]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000e74:	4b51      	ldr	r3, [pc, #324]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d015      	beq.n	8000eac <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000e80:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00e      	beq.n	8000eac <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d009      	beq.n	8000eac <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e98:	4b49      	ldr	r3, [pc, #292]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000ea0:	4b45      	ldr	r3, [pc, #276]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000eac:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d015      	beq.n	8000ee4 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000eb8:	4b41      	ldr	r3, [pc, #260]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00e      	beq.n	8000ee4 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d009      	beq.n	8000ee4 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000ed8:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4a36      	ldr	r2, [pc, #216]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d02d      	beq.n	8000f4c <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d026      	beq.n	8000f4c <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d021      	beq.n	8000f4c <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f08:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d110      	bne.n	8000f4c <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f40:	4798      	blx	r3
 8000f42:	e003      	b.n	8000f4c <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f44:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f4a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <DMA1_Stream0_IRQHandler+0x18c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d02d      	beq.n	8000fb4 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	2210      	movs	r2, #16
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d026      	beq.n	8000fb4 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <DMA1_Stream0_IRQHandler+0x188>)
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f8a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d110      	bne.n	8000fb4 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fa8:	4798      	blx	r3
				}
			}
		}

	}
}
 8000faa:	e003      	b.n	8000fb4 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <DMA1_Stream0_IRQHandler+0x190>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb2:	4798      	blx	r3
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40026000 	.word	0x40026000
 8000fbc:	20000250 	.word	0x20000250
 8000fc0:	20000210 	.word	0x20000210

08000fc4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000fc8:	4b60      	ldr	r3, [pc, #384]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a60      	ldr	r2, [pc, #384]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 8000fce:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d015      	beq.n	8001008 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00e      	beq.n	8001008 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000fea:	4b5a      	ldr	r3, [pc, #360]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000ff4:	4b57      	ldr	r3, [pc, #348]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000ffc:	4b53      	ldr	r3, [pc, #332]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a52      	ldr	r2, [pc, #328]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8001002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001006:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001008:	4b51      	ldr	r3, [pc, #324]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d015      	beq.n	8001040 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001014:	4b4f      	ldr	r3, [pc, #316]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001022:	4b4c      	ldr	r3, [pc, #304]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800102c:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a44      	ldr	r2, [pc, #272]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001040:	4b43      	ldr	r3, [pc, #268]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001048:	2b00      	cmp	r3, #0
 800104a:	d015      	beq.n	8001078 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	2204      	movs	r2, #4
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800105a:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001064:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800106c:	4b37      	ldr	r3, [pc, #220]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a36      	ldr	r2, [pc, #216]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001078:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d02d      	beq.n	80010e0 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2208      	movs	r2, #8
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d026      	beq.n	80010e0 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001092:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80010a4:	4b29      	ldr	r3, [pc, #164]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a28      	ldr	r2, [pc, #160]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ae:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d110      	bne.n	80010e0 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010be:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010d4:	4798      	blx	r3
 80010d6:	e003      	b.n	80010e0 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010de:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <DMA1_Stream1_IRQHandler+0x18c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2210      	movs	r2, #16
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d026      	beq.n	8001148 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	2b00      	cmp	r3, #0
 8001102:	d021      	beq.n	8001148 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <DMA1_Stream1_IRQHandler+0x188>)
 8001112:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001116:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001122:	4293      	cmp	r3, r2
 8001124:	d110      	bne.n	8001148 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800113e:	e003      	b.n	8001148 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <DMA1_Stream1_IRQHandler+0x190>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001146:	4798      	blx	r3
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40026000 	.word	0x40026000
 8001150:	20000250 	.word	0x20000250
 8001154:	20000214 	.word	0x20000214

08001158 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800115c:	4b64      	ldr	r3, [pc, #400]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a64      	ldr	r2, [pc, #400]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 8001162:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001164:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d015      	beq.n	800119c <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001170:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00e      	beq.n	800119c <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800117e:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001190:	4b57      	ldr	r3, [pc, #348]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a56      	ldr	r2, [pc, #344]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 800119c:	4b55      	ldr	r3, [pc, #340]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d015      	beq.n	80011d4 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80011a8:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80011b6:	4b50      	ldr	r3, [pc, #320]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80011c0:	4b4d      	ldr	r3, [pc, #308]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80011c8:	4b49      	ldr	r3, [pc, #292]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 80011ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80011d4:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01c      	beq.n	800121a <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80011e0:	4b45      	ldr	r3, [pc, #276]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2204      	movs	r2, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	2204      	movs	r2, #4
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00e      	beq.n	800121a <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80011fc:	4b3e      	ldr	r3, [pc, #248]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001206:	4b3c      	ldr	r3, [pc, #240]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120c:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800120e:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4a37      	ldr	r2, [pc, #220]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 8001214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001218:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800121a:	4b36      	ldr	r3, [pc, #216]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d02d      	beq.n	8001282 <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001226:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2208      	movs	r2, #8
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d026      	beq.n	8001282 <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001234:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123a:	2b00      	cmp	r3, #0
 800123c:	d021      	beq.n	8001282 <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800123e:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001244:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 800124c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001250:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001252:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001258:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800125c:	4293      	cmp	r3, r2
 800125e:	d110      	bne.n	8001282 <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001260:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001270:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001276:	4798      	blx	r3
 8001278:	e003      	b.n	8001282 <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001280:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <DMA1_Stream2_IRQHandler+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d02d      	beq.n	80012ea <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2210      	movs	r2, #16
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d026      	beq.n	80012ea <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d021      	beq.n	80012ea <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <DMA1_Stream2_IRQHandler+0x198>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b8:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d110      	bne.n	80012ea <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012de:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80012e0:	e003      	b.n	80012ea <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e8:	4798      	blx	r3
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40026000 	.word	0x40026000
 80012f4:	20000250 	.word	0x20000250
 80012f8:	20000218 	.word	0x20000218

080012fc <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001300:	4b60      	ldr	r3, [pc, #384]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a60      	ldr	r2, [pc, #384]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 8001306:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001308:	4b5f      	ldr	r3, [pc, #380]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d015      	beq.n	8001340 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001314:	4b5d      	ldr	r3, [pc, #372]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2280      	movs	r2, #128	@ 0x80
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00e      	beq.n	8001340 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001322:	4b5a      	ldr	r3, [pc, #360]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800132c:	4b57      	ldr	r3, [pc, #348]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001332:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 800133a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800133e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001340:	4b51      	ldr	r3, [pc, #324]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d015      	beq.n	8001378 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800134c:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00e      	beq.n	8001378 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800135a:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001364:	4b49      	ldr	r3, [pc, #292]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800136c:	4b45      	ldr	r3, [pc, #276]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a44      	ldr	r2, [pc, #272]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001376:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001378:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001384:	4b41      	ldr	r3, [pc, #260]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2204      	movs	r2, #4
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00e      	beq.n	80013b0 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001392:	4b3e      	ldr	r3, [pc, #248]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800139c:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80013a4:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a36      	ldr	r2, [pc, #216]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 80013aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80013b0:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02d      	beq.n	8001418 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80013bc:	4b33      	ldr	r3, [pc, #204]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2208      	movs	r2, #8
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d026      	beq.n	8001418 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80013ca:	4b30      	ldr	r3, [pc, #192]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d021      	beq.n	8001418 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80013d4:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013da:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 80013e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013e6:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d110      	bne.n	8001418 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013f6:	4b25      	ldr	r3, [pc, #148]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140c:	4798      	blx	r3
 800140e:	e003      	b.n	8001418 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001416:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <DMA1_Stream3_IRQHandler+0x18c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02d      	beq.n	8001480 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2210      	movs	r2, #16
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d026      	beq.n	8001480 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <DMA1_Stream3_IRQHandler+0x188>)
 800144a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800144e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800145a:	4293      	cmp	r3, r2
 800145c:	d110      	bne.n	8001480 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001474:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001476:	e003      	b.n	8001480 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <DMA1_Stream3_IRQHandler+0x190>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147e:	4798      	blx	r3
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40026000 	.word	0x40026000
 8001488:	20000250 	.word	0x20000250
 800148c:	2000021c 	.word	0x2000021c

08001490 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001494:	4b4f      	ldr	r3, [pc, #316]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 800149a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800149c:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014a8:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b8:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80014ba:	4b46      	ldr	r3, [pc, #280]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a45      	ldr	r2, [pc, #276]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 80014c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80014c6:	4b44      	ldr	r3, [pc, #272]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00e      	beq.n	80014f0 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80014d2:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80014dc:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80014e4:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001506:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800150e:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d026      	beq.n	8001574 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001526:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152c:	2b00      	cmp	r3, #0
 800152e:	d021      	beq.n	8001574 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001536:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001538:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800154e:	4293      	cmp	r3, r2
 8001550:	d110      	bne.n	8001574 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001568:	4798      	blx	r3
 800156a:	e003      	b.n	8001574 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001572:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <DMA1_Stream4_IRQHandler+0x148>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b00      	cmp	r3, #0
 800157e:	d026      	beq.n	80015ce <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d021      	beq.n	80015ce <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <DMA1_Stream4_IRQHandler+0x144>)
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d110      	bne.n	80015ce <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80015c4:	e003      	b.n	80015ce <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <DMA1_Stream4_IRQHandler+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	4798      	blx	r3
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40026000 	.word	0x40026000
 80015d8:	20000254 	.word	0x20000254
 80015dc:	20000220 	.word	0x20000220

080015e0 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80015e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 80015ea:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80015ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00e      	beq.n	8001616 <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80015f8:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001608:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800160a:	4b46      	ldr	r3, [pc, #280]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001614:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800162c:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a3a      	ldr	r2, [pc, #232]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001640:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800164c:	4b37      	ldr	r3, [pc, #220]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 8001664:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001668:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167c:	2b00      	cmp	r3, #0
 800167e:	d021      	beq.n	80016c4 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001686:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001688:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 800168e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001692:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800169e:	4293      	cmp	r3, r2
 80016a0:	d110      	bne.n	80016c4 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b8:	4798      	blx	r3
 80016ba:	e003      	b.n	80016c4 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <DMA1_Stream5_IRQHandler+0x148>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d026      	beq.n	800171e <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d021      	beq.n	800171e <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001724 <DMA1_Stream5_IRQHandler+0x144>)
 80016e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ec:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d110      	bne.n	800171e <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001712:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001714:	e003      	b.n	800171e <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <DMA1_Stream5_IRQHandler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	4798      	blx	r3
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40026000 	.word	0x40026000
 8001728:	20000254 	.word	0x20000254
 800172c:	20000224 	.word	0x20000224

08001730 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001734:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a4f      	ldr	r2, [pc, #316]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 800173a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800173c:	4b4e      	ldr	r3, [pc, #312]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001748:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001752:	4b4a      	ldr	r3, [pc, #296]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001758:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800175a:	4b46      	ldr	r3, [pc, #280]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a45      	ldr	r2, [pc, #276]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001764:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001766:	4b44      	ldr	r3, [pc, #272]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001772:	4b42      	ldr	r3, [pc, #264]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d009      	beq.n	8001790 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800177c:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001784:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a3a      	ldr	r2, [pc, #232]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 800178a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001790:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800179c:	4b37      	ldr	r3, [pc, #220]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a30      	ldr	r2, [pc, #192]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 80017b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017b8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d026      	beq.n	8001814 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80017c6:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d021      	beq.n	8001814 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80017d8:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a25      	ldr	r2, [pc, #148]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 80017de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017e2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d110      	bne.n	8001814 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001808:	4798      	blx	r3
 800180a:	e003      	b.n	8001814 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001812:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <DMA1_Stream6_IRQHandler+0x148>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d026      	beq.n	800186e <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d021      	beq.n	800186e <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4a0f      	ldr	r2, [pc, #60]	@ (8001874 <DMA1_Stream6_IRQHandler+0x144>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001844:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001848:	4293      	cmp	r3, r2
 800184a:	d110      	bne.n	800186e <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800185c:	4b07      	ldr	r3, [pc, #28]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001862:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001864:	e003      	b.n	800186e <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <DMA1_Stream6_IRQHandler+0x14c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	4798      	blx	r3
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40026000 	.word	0x40026000
 8001878:	20000254 	.word	0x20000254
 800187c:	20000228 	.word	0x20000228

08001880 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001884:	4b4f      	ldr	r3, [pc, #316]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a4f      	ldr	r2, [pc, #316]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 800188a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 800188c:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001898:	4b4c      	ldr	r3, [pc, #304]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018a2:	4b4a      	ldr	r3, [pc, #296]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80018aa:	4b46      	ldr	r3, [pc, #280]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a45      	ldr	r2, [pc, #276]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 80018b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80018b6:	4b44      	ldr	r3, [pc, #272]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00e      	beq.n	80018e0 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80018c2:	4b42      	ldr	r3, [pc, #264]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80018cc:	4b3f      	ldr	r3, [pc, #252]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80018d4:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a3a      	ldr	r2, [pc, #232]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80018ec:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4a30      	ldr	r2, [pc, #192]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 8001904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001908:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d026      	beq.n	8001964 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001926:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001928:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a25      	ldr	r2, [pc, #148]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 800192e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001932:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800193e:	4293      	cmp	r3, r2
 8001940:	d110      	bne.n	8001964 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001958:	4798      	blx	r3
 800195a:	e003      	b.n	8001964 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001964:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <DMA1_Stream7_IRQHandler+0x148>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d026      	beq.n	80019be <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d021      	beq.n	80019be <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <DMA1_Stream7_IRQHandler+0x144>)
 8001988:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800198c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001994:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001998:	4293      	cmp	r3, r2
 800199a:	d110      	bne.n	80019be <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b2:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80019b4:	e003      	b.n	80019be <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <DMA1_Stream7_IRQHandler+0x14c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40026000 	.word	0x40026000
 80019c8:	20000254 	.word	0x20000254
 80019cc:	2000022c 	.word	0x2000022c

080019d0 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 80019d4:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a60      	ldr	r2, [pc, #384]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 80019da:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 80019dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80019e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00e      	beq.n	8001a14 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80019f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a00:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a06:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001a14:	4b51      	ldr	r3, [pc, #324]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a20:	4b4f      	ldr	r3, [pc, #316]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00e      	beq.n	8001a4c <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a38:	4b49      	ldr	r3, [pc, #292]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001a40:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a44      	ldr	r2, [pc, #272]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001a4c:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d015      	beq.n	8001a84 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001a58:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00e      	beq.n	8001a84 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001a66:	4b3e      	ldr	r3, [pc, #248]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001a70:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001a78:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a36      	ldr	r2, [pc, #216]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001a84:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02d      	beq.n	8001aec <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2208      	movs	r2, #8
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d026      	beq.n	8001aec <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001a9e:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d021      	beq.n	8001aec <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aae:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001abc:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d110      	bne.n	8001aec <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ada:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae0:	4798      	blx	r3
 8001ae2:	e003      	b.n	8001aec <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aea:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <DMA2_Stream0_IRQHandler+0x18c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02d      	beq.n	8001b54 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2210      	movs	r2, #16
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d026      	beq.n	8001b54 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <DMA2_Stream0_IRQHandler+0x188>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d110      	bne.n	8001b54 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b48:	4798      	blx	r3
				}
			}
		}

	}
}
 8001b4a:	e003      	b.n	8001b54 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <DMA2_Stream0_IRQHandler+0x190>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b52:	4798      	blx	r3
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40026400 	.word	0x40026400
 8001b5c:	20000250 	.word	0x20000250
 8001b60:	20000230 	.word	0x20000230

08001b64 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001b68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001b6e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001b70:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00e      	beq.n	8001b9a <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001b86:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001b8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b98:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00e      	beq.n	8001bc4 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001ba6:	4b42      	ldr	r3, [pc, #264]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001bd0:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001bda:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4a30      	ldr	r2, [pc, #192]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001be8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bec:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001bee:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d026      	beq.n	8001c48 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d021      	beq.n	8001c48 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d110      	bne.n	8001c48 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3c:	4798      	blx	r3
 8001c3e:	e003      	b.n	8001c48 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <DMA2_Stream1_IRQHandler+0x148>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d026      	beq.n	8001ca2 <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d021      	beq.n	8001ca2 <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c64:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <DMA2_Stream1_IRQHandler+0x144>)
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c70:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d110      	bne.n	8001ca2 <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c96:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001c98:	e003      	b.n	8001ca2 <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	4798      	blx	r3
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40026400 	.word	0x40026400
 8001cac:	20000250 	.word	0x20000250
 8001cb0:	20000234 	.word	0x20000234

08001cb4 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001cbe:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cdc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001cde:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a45      	ldr	r2, [pc, #276]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001cea:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00e      	beq.n	8001d14 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001cf6:	4b42      	ldr	r3, [pc, #264]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d00:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001d08:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d12:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d2a:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4a30      	ldr	r2, [pc, #192]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d3c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d026      	beq.n	8001d98 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d021      	beq.n	8001d98 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001d5c:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d66:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d110      	bne.n	8001d98 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8c:	4798      	blx	r3
 8001d8e:	e003      	b.n	8001d98 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d96:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x148>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d026      	beq.n	8001df2 <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001da4:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d021      	beq.n	8001df2 <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <DMA2_Stream2_IRQHandler+0x144>)
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d110      	bne.n	8001df2 <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de6:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001de8:	e003      	b.n	8001df2 <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <DMA2_Stream2_IRQHandler+0x14c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	4798      	blx	r3
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40026400 	.word	0x40026400
 8001dfc:	20000250 	.word	0x20000250
 8001e00:	20000238 	.word	0x20000238

08001e04 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e08:	4b60      	ldr	r3, [pc, #384]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a60      	ldr	r2, [pc, #384]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e0e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001e10:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001e1c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001e34:	4b57      	ldr	r3, [pc, #348]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001e3c:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001e42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e46:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001e48:	4b51      	ldr	r3, [pc, #324]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d015      	beq.n	8001e80 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001e54:	4b4f      	ldr	r3, [pc, #316]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00e      	beq.n	8001e80 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001e62:	4b4c      	ldr	r3, [pc, #304]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001e6c:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001e74:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a44      	ldr	r2, [pc, #272]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001e80:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001e8c:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00e      	beq.n	8001eb8 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a36      	ldr	r2, [pc, #216]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001eb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001eb8:	4b35      	ldr	r3, [pc, #212]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d02d      	beq.n	8001f20 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001ec4:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d026      	beq.n	8001f20 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001ed2:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d021      	beq.n	8001f20 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a28      	ldr	r2, [pc, #160]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001eea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001eee:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ef0:	4b28      	ldr	r3, [pc, #160]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d110      	bne.n	8001f20 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001efe:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f0e:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f14:	4798      	blx	r3
 8001f16:	e003      	b.n	8001f20 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1e:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <DMA2_Stream3_IRQHandler+0x18c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d02d      	beq.n	8001f88 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2210      	movs	r2, #16
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d026      	beq.n	8001f88 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <DMA2_Stream3_IRQHandler+0x188>)
 8001f52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f56:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d110      	bne.n	8001f88 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001f7e:	e003      	b.n	8001f88 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <DMA2_Stream3_IRQHandler+0x190>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	4798      	blx	r3
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40026400 	.word	0x40026400
 8001f90:	20000250 	.word	0x20000250
 8001f94:	2000023c 	.word	0x2000023c

08001f98 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 8001fa2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001fba:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a45      	ldr	r2, [pc, #276]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8001fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fcc:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001fce:	4b44      	ldr	r3, [pc, #272]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00e      	beq.n	8001ff8 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001fda:	4b42      	ldr	r3, [pc, #264]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001fec:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001ff8:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800200e:	4b35      	ldr	r3, [pc, #212]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002016:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8002022:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d026      	beq.n	800207c <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002034:	2b00      	cmp	r3, #0
 8002036:	d021      	beq.n	800207c <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002040:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a25      	ldr	r2, [pc, #148]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800204c:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002052:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002056:	4293      	cmp	r3, r2
 8002058:	d110      	bne.n	800207c <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002070:	4798      	blx	r3
 8002072:	e003      	b.n	800207c <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 800207c:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <DMA2_Stream4_IRQHandler+0x148>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d026      	beq.n	80020d6 <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002088:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d021      	beq.n	80020d6 <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002098:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <DMA2_Stream4_IRQHandler+0x144>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d110      	bne.n	80020d6 <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ca:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80020cc:	e003      	b.n	80020d6 <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020ce:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <DMA2_Stream4_IRQHandler+0x14c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	4798      	blx	r3
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40026400 	.word	0x40026400
 80020e0:	20000254 	.word	0x20000254
 80020e4:	20000240 	.word	0x20000240

080020e8 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80020ec:	4b4f      	ldr	r3, [pc, #316]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 80020f2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80020f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002100:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800210a:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002112:	4b46      	ldr	r3, [pc, #280]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a45      	ldr	r2, [pc, #276]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800211c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00e      	beq.n	8002148 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002134:	4b3f      	ldr	r3, [pc, #252]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800213c:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a3a      	ldr	r2, [pc, #232]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002146:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8002148:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800215e:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8002166:	4b31      	ldr	r3, [pc, #196]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4a30      	ldr	r2, [pc, #192]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 800216c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002170:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8002172:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d026      	beq.n	80021cc <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002184:	2b00      	cmp	r3, #0
 8002186:	d021      	beq.n	80021cc <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002190:	4b26      	ldr	r3, [pc, #152]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a25      	ldr	r2, [pc, #148]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800219a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d110      	bne.n	80021cc <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	4798      	blx	r3
 80021c2:	e003      	b.n	80021cc <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80021c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <DMA2_Stream5_IRQHandler+0x148>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d026      	beq.n	8002226 <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d021      	beq.n	8002226 <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <DMA2_Stream5_IRQHandler+0x144>)
 80021f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021f4:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002200:	4293      	cmp	r3, r2
 8002202:	d110      	bne.n	8002226 <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221a:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800221c:	e003      	b.n	8002226 <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <DMA2_Stream5_IRQHandler+0x14c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	4798      	blx	r3
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40026400 	.word	0x40026400
 8002230:	20000254 	.word	0x20000254
 8002234:	20000244 	.word	0x20000244

08002238 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800223c:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 8002242:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8002244:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002250:	4b4c      	ldr	r3, [pc, #304]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800225a:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8002262:	4b46      	ldr	r3, [pc, #280]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a45      	ldr	r2, [pc, #276]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 800226e:	4b44      	ldr	r3, [pc, #272]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00e      	beq.n	8002298 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800227a:	4b42      	ldr	r3, [pc, #264]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002284:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 800228c:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a3a      	ldr	r2, [pc, #232]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 8002292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002296:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8002298:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80022a4:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80022ae:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4a30      	ldr	r2, [pc, #192]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 80022bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022c0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80022c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d026      	beq.n	800231c <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80022ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d021      	beq.n	800231c <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80022d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022de:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80022e0:	4b26      	ldr	r3, [pc, #152]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a25      	ldr	r2, [pc, #148]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ea:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80022ec:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d110      	bne.n	800231c <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800230a:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	4798      	blx	r3
 8002312:	e003      	b.n	800231c <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <DMA2_Stream6_IRQHandler+0x148>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d026      	beq.n	8002376 <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002328:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d021      	beq.n	8002376 <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <DMA2_Stream6_IRQHandler+0x144>)
 8002340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002344:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002346:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002350:	4293      	cmp	r3, r2
 8002352:	d110      	bne.n	8002376 <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002364:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236a:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800236c:	e003      	b.n	8002376 <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <DMA2_Stream6_IRQHandler+0x14c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002374:	4798      	blx	r3
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40026400 	.word	0x40026400
 8002380:	20000254 	.word	0x20000254
 8002384:	20000248 	.word	0x20000248

08002388 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800238c:	4b4f      	ldr	r3, [pc, #316]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a4f      	ldr	r2, [pc, #316]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 8002392:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8002394:	4b4e      	ldr	r3, [pc, #312]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80023a0:	4b4c      	ldr	r3, [pc, #304]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80023aa:	4b4a      	ldr	r3, [pc, #296]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80023b2:	4b46      	ldr	r3, [pc, #280]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4a45      	ldr	r2, [pc, #276]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023bc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80023be:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80023ca:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80023d4:	4b3f      	ldr	r3, [pc, #252]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80023dc:	4b3b      	ldr	r3, [pc, #236]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a3a      	ldr	r2, [pc, #232]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80023f4:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80023fe:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002406:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a30      	ldr	r2, [pc, #192]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 800240c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002410:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8002412:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d026      	beq.n	800246c <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002424:	2b00      	cmp	r3, #0
 8002426:	d021      	beq.n	800246c <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002428:	4b2a      	ldr	r3, [pc, #168]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002430:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a25      	ldr	r2, [pc, #148]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 8002436:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800243a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800243c:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002446:	4293      	cmp	r3, r2
 8002448:	d110      	bne.n	800246c <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800245a:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002460:	4798      	blx	r3
 8002462:	e003      	b.n	800246c <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <DMA2_Stream7_IRQHandler+0x148>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d026      	beq.n	80024c6 <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002478:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d021      	beq.n	80024c6 <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002488:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a0f      	ldr	r2, [pc, #60]	@ (80024cc <DMA2_Stream7_IRQHandler+0x144>)
 8002490:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002494:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002496:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d110      	bne.n	80024c6 <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80024bc:	e003      	b.n	80024c6 <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <DMA2_Stream7_IRQHandler+0x14c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	4798      	blx	r3
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40026400 	.word	0x40026400
 80024d0:	20000254 	.word	0x20000254
 80024d4:	2000024c 	.word	0x2000024c

080024d8 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <DMA_Clock_Enable+0x40>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d105      	bne.n	80024f6 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <DMA_Clock_Enable+0x44>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a0b      	ldr	r2, [pc, #44]	@ (800251c <DMA_Clock_Enable+0x44>)
 80024f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <DMA_Clock_Enable+0x48>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d105      	bne.n	800250c <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <DMA_Clock_Enable+0x44>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4a05      	ldr	r2, [pc, #20]	@ (800251c <DMA_Clock_Enable+0x44>)
 8002506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800250a:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40026000 	.word	0x40026000
 800251c:	40023800 	.word	0x40023800
 8002520:	40026400 	.word	0x40026400

08002524 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffd3 	bl	80024d8 <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8002550:	bf00      	nop
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f8      	bne.n	8002552 <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7a1b      	ldrb	r3, [r3, #8]
 800256a:	065a      	lsls	r2, r3, #25
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2200      	movs	r2, #0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	f000 8110 	beq.w	800280c <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2210      	movs	r2, #16
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f042 0210 	orr.w	r2, r2, #16
 8002624:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2208      	movs	r2, #8
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f042 0208 	orr.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2204      	movs	r2, #4
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f042 0202 	orr.w	r2, r2, #2
 8002678:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a80      	ldr	r2, [pc, #512]	@ (8002880 <DMA_Init+0x35c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d15f      	bne.n	8002744 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a7e      	ldr	r2, [pc, #504]	@ (8002884 <DMA_Init+0x360>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d106      	bne.n	800269c <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 800268e:	4a7e      	ldr	r2, [pc, #504]	@ (8002888 <DMA_Init+0x364>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002694:	200b      	movs	r0, #11
 8002696:	f7fe fbad 	bl	8000df4 <__NVIC_EnableIRQ>
 800269a:	e0b7      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a7a      	ldr	r2, [pc, #488]	@ (800288c <DMA_Init+0x368>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d106      	bne.n	80026b4 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 80026a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002890 <DMA_Init+0x36c>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026ac:	200c      	movs	r0, #12
 80026ae:	f7fe fba1 	bl	8000df4 <__NVIC_EnableIRQ>
 80026b2:	e0ab      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a76      	ldr	r2, [pc, #472]	@ (8002894 <DMA_Init+0x370>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d106      	bne.n	80026cc <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 80026be:	4a76      	ldr	r2, [pc, #472]	@ (8002898 <DMA_Init+0x374>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026c4:	200d      	movs	r0, #13
 80026c6:	f7fe fb95 	bl	8000df4 <__NVIC_EnableIRQ>
 80026ca:	e09f      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a72      	ldr	r2, [pc, #456]	@ (800289c <DMA_Init+0x378>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d106      	bne.n	80026e4 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <DMA_Init+0x37c>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026dc:	200e      	movs	r0, #14
 80026de:	f7fe fb89 	bl	8000df4 <__NVIC_EnableIRQ>
 80026e2:	e093      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <DMA_Init+0x380>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d106      	bne.n	80026fc <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 80026ee:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <DMA_Init+0x384>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026f4:	200f      	movs	r0, #15
 80026f6:	f7fe fb7d 	bl	8000df4 <__NVIC_EnableIRQ>
 80026fa:	e087      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a6a      	ldr	r2, [pc, #424]	@ (80028ac <DMA_Init+0x388>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d106      	bne.n	8002714 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 8002706:	4a6a      	ldr	r2, [pc, #424]	@ (80028b0 <DMA_Init+0x38c>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800270c:	2010      	movs	r0, #16
 800270e:	f7fe fb71 	bl	8000df4 <__NVIC_EnableIRQ>
 8002712:	e07b      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a66      	ldr	r2, [pc, #408]	@ (80028b4 <DMA_Init+0x390>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d106      	bne.n	800272c <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 800271e:	4a66      	ldr	r2, [pc, #408]	@ (80028b8 <DMA_Init+0x394>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002724:	2011      	movs	r0, #17
 8002726:	f7fe fb65 	bl	8000df4 <__NVIC_EnableIRQ>
 800272a:	e06f      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a62      	ldr	r2, [pc, #392]	@ (80028bc <DMA_Init+0x398>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d16a      	bne.n	800280c <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 8002736:	4a62      	ldr	r2, [pc, #392]	@ (80028c0 <DMA_Init+0x39c>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800273c:	202f      	movs	r0, #47	@ 0x2f
 800273e:	f7fe fb59 	bl	8000df4 <__NVIC_EnableIRQ>
 8002742:	e063      	b.n	800280c <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5e      	ldr	r2, [pc, #376]	@ (80028c4 <DMA_Init+0x3a0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d15e      	bne.n	800280c <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <DMA_Init+0x3a4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d106      	bne.n	8002766 <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 8002758:	4a5c      	ldr	r2, [pc, #368]	@ (80028cc <DMA_Init+0x3a8>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800275e:	2038      	movs	r0, #56	@ 0x38
 8002760:	f7fe fb48 	bl	8000df4 <__NVIC_EnableIRQ>
 8002764:	e052      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a59      	ldr	r2, [pc, #356]	@ (80028d0 <DMA_Init+0x3ac>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 8002770:	4a58      	ldr	r2, [pc, #352]	@ (80028d4 <DMA_Init+0x3b0>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002776:	2039      	movs	r0, #57	@ 0x39
 8002778:	f7fe fb3c 	bl	8000df4 <__NVIC_EnableIRQ>
 800277c:	e046      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a55      	ldr	r2, [pc, #340]	@ (80028d8 <DMA_Init+0x3b4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d106      	bne.n	8002796 <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 8002788:	4a54      	ldr	r2, [pc, #336]	@ (80028dc <DMA_Init+0x3b8>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800278e:	203a      	movs	r0, #58	@ 0x3a
 8002790:	f7fe fb30 	bl	8000df4 <__NVIC_EnableIRQ>
 8002794:	e03a      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a51      	ldr	r2, [pc, #324]	@ (80028e0 <DMA_Init+0x3bc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d106      	bne.n	80027ae <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 80027a0:	4a50      	ldr	r2, [pc, #320]	@ (80028e4 <DMA_Init+0x3c0>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80027a6:	203b      	movs	r0, #59	@ 0x3b
 80027a8:	f7fe fb24 	bl	8000df4 <__NVIC_EnableIRQ>
 80027ac:	e02e      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <DMA_Init+0x3c4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d106      	bne.n	80027c6 <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 80027b8:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <DMA_Init+0x3c8>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80027be:	203c      	movs	r0, #60	@ 0x3c
 80027c0:	f7fe fb18 	bl	8000df4 <__NVIC_EnableIRQ>
 80027c4:	e022      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a49      	ldr	r2, [pc, #292]	@ (80028f0 <DMA_Init+0x3cc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d106      	bne.n	80027de <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 80027d0:	4a48      	ldr	r2, [pc, #288]	@ (80028f4 <DMA_Init+0x3d0>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80027d6:	2044      	movs	r0, #68	@ 0x44
 80027d8:	f7fe fb0c 	bl	8000df4 <__NVIC_EnableIRQ>
 80027dc:	e016      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a45      	ldr	r2, [pc, #276]	@ (80028f8 <DMA_Init+0x3d4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d106      	bne.n	80027f6 <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 80027e8:	4a44      	ldr	r2, [pc, #272]	@ (80028fc <DMA_Init+0x3d8>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80027ee:	2045      	movs	r0, #69	@ 0x45
 80027f0:	f7fe fb00 	bl	8000df4 <__NVIC_EnableIRQ>
 80027f4:	e00a      	b.n	800280c <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a41      	ldr	r2, [pc, #260]	@ (8002900 <DMA_Init+0x3dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d105      	bne.n	800280c <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 8002800:	4a40      	ldr	r2, [pc, #256]	@ (8002904 <DMA_Init+0x3e0>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002806:	2046      	movs	r0, #70	@ 0x46
 8002808:	f7fe faf4 	bl	8000df4 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8c1b      	ldrh	r3, [r3, #32]
 8002816:	4619      	mov	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800282a:	4619      	mov	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e010      	b.n	8002874 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2200      	movs	r2, #0
 8002858:	4293      	cmp	r3, r2
 800285a:	d108      	bne.n	800286e <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e002      	b.n	8002874 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e000      	b.n	8002876 <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40026000 	.word	0x40026000
 8002884:	40026010 	.word	0x40026010
 8002888:	20000210 	.word	0x20000210
 800288c:	40026028 	.word	0x40026028
 8002890:	20000214 	.word	0x20000214
 8002894:	40026040 	.word	0x40026040
 8002898:	20000218 	.word	0x20000218
 800289c:	40026058 	.word	0x40026058
 80028a0:	2000021c 	.word	0x2000021c
 80028a4:	40026070 	.word	0x40026070
 80028a8:	20000220 	.word	0x20000220
 80028ac:	40026088 	.word	0x40026088
 80028b0:	20000224 	.word	0x20000224
 80028b4:	400260a0 	.word	0x400260a0
 80028b8:	20000228 	.word	0x20000228
 80028bc:	400260b8 	.word	0x400260b8
 80028c0:	2000022c 	.word	0x2000022c
 80028c4:	40026400 	.word	0x40026400
 80028c8:	40026410 	.word	0x40026410
 80028cc:	20000230 	.word	0x20000230
 80028d0:	40026428 	.word	0x40026428
 80028d4:	20000234 	.word	0x20000234
 80028d8:	40026440 	.word	0x40026440
 80028dc:	20000238 	.word	0x20000238
 80028e0:	40026458 	.word	0x40026458
 80028e4:	2000023c 	.word	0x2000023c
 80028e8:	40026470 	.word	0x40026470
 80028ec:	20000240 	.word	0x20000240
 80028f0:	40026488 	.word	0x40026488
 80028f4:	20000244 	.word	0x20000244
 80028f8:	400264a0 	.word	0x400264a0
 80028fc:	20000248 	.word	0x20000248
 8002900:	400264b8 	.word	0x400264b8
 8002904:	2000024c 	.word	0x2000024c

08002908 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2200      	movs	r2, #0
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e00d      	b.n	8002958 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002944:	4293      	cmp	r3, r2
 8002946:	d107      	bne.n	8002958 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002956:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8002966:	601a      	str	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029ae:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	613b      	str	r3, [r7, #16]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4a43      	ldr	r2, [pc, #268]	@ (8002aec <DMA_Set_Trigger+0x124>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <DMA_Set_Trigger+0x24>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4a42      	ldr	r2, [pc, #264]	@ (8002af0 <DMA_Set_Trigger+0x128>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d178      	bne.n	8002ade <DMA_Set_Trigger+0x116>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4a41      	ldr	r2, [pc, #260]	@ (8002af4 <DMA_Set_Trigger+0x12c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d918      	bls.n	8002a26 <DMA_Set_Trigger+0x5e>
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4a40      	ldr	r2, [pc, #256]	@ (8002af8 <DMA_Set_Trigger+0x130>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d814      	bhi.n	8002a26 <DMA_Set_Trigger+0x5e>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <DMA_Set_Trigger+0x134>)
 8002a00:	4413      	add	r3, r2
 8002a02:	10db      	asrs	r3, r3, #3
 8002a04:	4a3e      	ldr	r2, [pc, #248]	@ (8002b00 <DMA_Set_Trigger+0x138>)
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <DMA_Set_Trigger+0x13c>)
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	213f      	movs	r1, #63	@ 0x3f
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e055      	b.n	8002ad2 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4a37      	ldr	r2, [pc, #220]	@ (8002b08 <DMA_Set_Trigger+0x140>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d918      	bls.n	8002a60 <DMA_Set_Trigger+0x98>
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <DMA_Set_Trigger+0x144>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d814      	bhi.n	8002a60 <DMA_Set_Trigger+0x98>
		{
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <DMA_Set_Trigger+0x148>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	10db      	asrs	r3, r3, #3
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <DMA_Set_Trigger+0x138>)
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b33      	ldr	r3, [pc, #204]	@ (8002b14 <DMA_Set_Trigger+0x14c>)
 8002a48:	5c9b      	ldrb	r3, [r3, r2]
 8002a4a:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	213f      	movs	r1, #63	@ 0x3f
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	e038      	b.n	8002ad2 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <DMA_Set_Trigger+0x150>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d918      	bls.n	8002a9a <DMA_Set_Trigger+0xd2>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <DMA_Set_Trigger+0x154>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d814      	bhi.n	8002a9a <DMA_Set_Trigger+0xd2>
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <DMA_Set_Trigger+0x158>)
 8002a74:	4413      	add	r3, r2
 8002a76:	10db      	asrs	r3, r3, #3
 8002a78:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <DMA_Set_Trigger+0x138>)
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <DMA_Set_Trigger+0x13c>)
 8002a82:	5c9b      	ldrb	r3, [r3, r2]
 8002a84:	60fb      	str	r3, [r7, #12]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	213f      	movs	r1, #63	@ 0x3f
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	431a      	orrs	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	e01b      	b.n	8002ad2 <DMA_Set_Trigger+0x10a>
		}
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	@ (8002b24 <DMA_Set_Trigger+0x15c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d917      	bls.n	8002ad2 <DMA_Set_Trigger+0x10a>
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	@ (8002b28 <DMA_Set_Trigger+0x160>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d813      	bhi.n	8002ad2 <DMA_Set_Trigger+0x10a>
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <DMA_Set_Trigger+0x164>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	10db      	asrs	r3, r3, #3
 8002ab2:	4a13      	ldr	r2, [pc, #76]	@ (8002b00 <DMA_Set_Trigger+0x138>)
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <DMA_Set_Trigger+0x14c>)
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	60fb      	str	r3, [r7, #12]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	213f      	movs	r1, #63	@ 0x3f
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	60da      	str	r2, [r3, #12]
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	601a      	str	r2, [r3, #0]
	}
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40026000 	.word	0x40026000
 8002af0:	40026400 	.word	0x40026400
 8002af4:	4002600f 	.word	0x4002600f
 8002af8:	40026058 	.word	0x40026058
 8002afc:	bffd9ff0 	.word	0xbffd9ff0
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	08005bd0 	.word	0x08005bd0
 8002b08:	4002606f 	.word	0x4002606f
 8002b0c:	400260b8 	.word	0x400260b8
 8002b10:	bffd9f90 	.word	0xbffd9f90
 8002b14:	08005bd4 	.word	0x08005bd4
 8002b18:	4002640f 	.word	0x4002640f
 8002b1c:	40026458 	.word	0x40026458
 8002b20:	bffd9bf0 	.word	0xbffd9bf0
 8002b24:	4002646f 	.word	0x4002646f
 8002b28:	400264b8 	.word	0x400264b8
 8002b2c:	bffd9b90 	.word	0xbffd9b90

08002b30 <DMA_Memory_To_Memory_Transfer>:

void DMA_Memory_To_Memory_Transfer(volatile void *source,
		uint8_t source_data_size, bool source_increment,
		volatile void *destination, uint8_t dest_data_size,
		bool destination_increment, uint16_t length)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	72fb      	strb	r3, [r7, #11]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	72bb      	strb	r3, [r7, #10]
	// Enable DMA2 clock
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002b42:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb8 <DMA_Memory_To_Memory_Transfer+0x188>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb8 <DMA_Memory_To_Memory_Transfer+0x188>)
 8002b48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30

	// Clear the channel selection and set the transfer direction to memory-to-memory
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b54:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8002b58:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 8002b5a:	4b58      	ldr	r3, [pc, #352]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	4a56      	ldr	r2, [pc, #344]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6013      	str	r3, [r2, #0]

	// Set the transfer complete interrupt and priority level
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8002b66:	4b55      	ldr	r3, [pc, #340]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a54      	ldr	r2, [pc, #336]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b6c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6013      	str	r3, [r2, #0]

	// Set the peripheral data size based on the source data size
	if(source_data_size == 32)
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d106      	bne.n	8002b8a <DMA_Memory_To_Memory_Transfer+0x5a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b82:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e015      	b.n	8002bb6 <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else if(source_data_size == 16)
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d10c      	bne.n	8002baa <DMA_Memory_To_Memory_Transfer+0x7a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8002b90:	4b4a      	ldr	r3, [pc, #296]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a49      	ldr	r2, [pc, #292]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b9a:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8002b9c:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a46      	ldr	r2, [pc, #280]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e005      	b.n	8002bb6 <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8002baa:	4b44      	ldr	r3, [pc, #272]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a43      	ldr	r2, [pc, #268]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bb0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002bb4:	6013      	str	r3, [r2, #0]
	}

	// Set the memory data size based on the destination data size
	if(dest_data_size == 32)
 8002bb6:	7e3b      	ldrb	r3, [r7, #24]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d106      	bne.n	8002bca <DMA_Memory_To_Memory_Transfer+0x9a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bc2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e015      	b.n	8002bf6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else if(dest_data_size == 16)
 8002bca:	7e3b      	ldrb	r3, [r7, #24]
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d10c      	bne.n	8002bea <DMA_Memory_To_Memory_Transfer+0xba>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a39      	ldr	r2, [pc, #228]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bda:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8002bdc:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a36      	ldr	r2, [pc, #216]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e005      	b.n	8002bf6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8002bea:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a33      	ldr	r2, [pc, #204]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bf0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002bf4:	6013      	str	r3, [r2, #0]
	}

	// Configure source address increment mode
	if(source_increment)
 8002bf6:	7abb      	ldrb	r3, [r7, #10]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e005      	b.n	8002c16 <DMA_Memory_To_Memory_Transfer+0xe6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c14:	6013      	str	r3, [r2, #0]
	}

	// Configure destination address increment mode
	if(destination_increment)
 8002c16:	7f3b      	ldrb	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <DMA_Memory_To_Memory_Transfer+0xfa>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8002c1c:	4b27      	ldr	r3, [pc, #156]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a26      	ldr	r2, [pc, #152]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e005      	b.n	8002c36 <DMA_Memory_To_Memory_Transfer+0x106>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a23      	ldr	r2, [pc, #140]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c34:	6013      	str	r3, [r2, #0]
	}

	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8002c36:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6153      	str	r3, [r2, #20]

	// Set the peripheral address (source)
	DMA2_Stream0->PAR = (uint32_t)(source);
 8002c42:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6093      	str	r3, [r2, #8]

	// Set the memory address (destination)
	DMA2_Stream0->M0AR = (uint32_t)(destination);
 8002c48:	4a1c      	ldr	r2, [pc, #112]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60d3      	str	r3, [r2, #12]

	// Set the number of data items to transfer
	DMA2_Stream0->NDTR = (uint16_t)length;
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c50:	8c3b      	ldrh	r3, [r7, #32]
 8002c52:	6053      	str	r3, [r2, #4]

	// Enable the DMA stream
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

	// Wait for the transfer to complete
	while((DMA2->LISR & (DMA_LISR_TCIF0_Msk)) == 0) {}
 8002c60:	bf00      	nop
 8002c62:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f9      	beq.n	8002c62 <DMA_Memory_To_Memory_Transfer+0x132>

	// Clear the transfer complete flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <DMA_Memory_To_Memory_Transfer+0x190>)
 8002c74:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002c78:	6093      	str	r3, [r2, #8]

	// Disable the DMA stream

	DMA2_Stream0->CR = 0;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
	DMA2_Stream0->FCR = 0;
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
	DMA2_Stream0->M0AR = 0;
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = 0;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR= 0;
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->PAR = 0;
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a06      	ldr	r2, [pc, #24]	@ (8002cbc <DMA_Memory_To_Memory_Transfer+0x18c>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40026410 	.word	0x40026410
 8002cc0:	40026400 	.word	0x40026400

08002cc4 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <EXTI0_IRQHandler+0x24>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <EXTI0_IRQHandler+0x12>
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <EXTI0_IRQHandler+0x24>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <EXTI0_IRQHandler+0x28>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <EXTI0_IRQHandler+0x28>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6153      	str	r3, [r2, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000258 	.word	0x20000258
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <EXTI1_IRQHandler+0x24>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <EXTI1_IRQHandler+0x12>
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <EXTI1_IRQHandler+0x24>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <EXTI1_IRQHandler+0x28>)
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <EXTI1_IRQHandler+0x28>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6153      	str	r3, [r2, #20]
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000258 	.word	0x20000258
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <EXTI2_IRQHandler+0x24>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <EXTI2_IRQHandler+0x12>
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <EXTI2_IRQHandler+0x24>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <EXTI2_IRQHandler+0x28>)
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <EXTI2_IRQHandler+0x28>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6153      	str	r3, [r2, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000258 	.word	0x20000258
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002d4c:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <EXTI3_IRQHandler+0x24>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <EXTI3_IRQHandler+0x12>
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <EXTI3_IRQHandler+0x24>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002d5a:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <EXTI3_IRQHandler+0x28>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <EXTI3_IRQHandler+0x28>)
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6153      	str	r3, [r2, #20]
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000258 	.word	0x20000258
 8002d70:	40013c00 	.word	0x40013c00

08002d74 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002d78:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <EXTI4_IRQHandler+0x24>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <EXTI4_IRQHandler+0x12>
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <EXTI4_IRQHandler+0x24>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <EXTI4_IRQHandler+0x28>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <EXTI4_IRQHandler+0x28>)
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	6153      	str	r3, [r2, #20]
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000258 	.word	0x20000258
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002da6:	2305      	movs	r3, #5
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	e020      	b.n	8002dee <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <EXTI9_5_IRQHandler+0x60>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2101      	movs	r1, #1
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d014      	beq.n	8002de8 <EXTI9_5_IRQHandler+0x48>
 8002dbe:	4a11      	ldr	r2, [pc, #68]	@ (8002e04 <EXTI9_5_IRQHandler+0x64>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002dca:	4a0e      	ldr	r2, [pc, #56]	@ (8002e04 <EXTI9_5_IRQHandler+0x64>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <EXTI9_5_IRQHandler+0x60>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4a07      	ldr	r2, [pc, #28]	@ (8002e00 <EXTI9_5_IRQHandler+0x60>)
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3301      	adds	r3, #1
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	dddb      	ble.n	8002dac <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40013c00 	.word	0x40013c00
 8002e04:	20000258 	.word	0x20000258

08002e08 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002e0e:	230a      	movs	r3, #10
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	e020      	b.n	8002e56 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <EXTI15_10_IRQHandler+0x60>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d014      	beq.n	8002e50 <EXTI15_10_IRQHandler+0x48>
 8002e26:	4a11      	ldr	r2, [pc, #68]	@ (8002e6c <EXTI15_10_IRQHandler+0x64>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00e      	beq.n	8002e50 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002e32:	4a0e      	ldr	r2, [pc, #56]	@ (8002e6c <EXTI15_10_IRQHandler+0x64>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <EXTI15_10_IRQHandler+0x60>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2101      	movs	r1, #1
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4a07      	ldr	r2, [pc, #28]	@ (8002e68 <EXTI15_10_IRQHandler+0x60>)
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	dddb      	ble.n	8002e14 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40013c00 	.word	0x40013c00
 8002e6c:	20000258 	.word	0x20000258

08002e70 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <GPIO_Clock_Enable+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04b      	beq.n	8002f18 <GPIO_Clock_Enable+0xa8>
 8002e80:	4a2e      	ldr	r2, [pc, #184]	@ (8002f3c <GPIO_Clock_Enable+0xcc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d84f      	bhi.n	8002f26 <GPIO_Clock_Enable+0xb6>
 8002e86:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <GPIO_Clock_Enable+0xd0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03e      	beq.n	8002f0a <GPIO_Clock_Enable+0x9a>
 8002e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f40 <GPIO_Clock_Enable+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d849      	bhi.n	8002f26 <GPIO_Clock_Enable+0xb6>
 8002e92:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <GPIO_Clock_Enable+0xd4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d031      	beq.n	8002efc <GPIO_Clock_Enable+0x8c>
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <GPIO_Clock_Enable+0xd4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d843      	bhi.n	8002f26 <GPIO_Clock_Enable+0xb6>
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <GPIO_Clock_Enable+0xd8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d024      	beq.n	8002eee <GPIO_Clock_Enable+0x7e>
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <GPIO_Clock_Enable+0xd8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d83d      	bhi.n	8002f26 <GPIO_Clock_Enable+0xb6>
 8002eaa:	4a28      	ldr	r2, [pc, #160]	@ (8002f4c <GPIO_Clock_Enable+0xdc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d017      	beq.n	8002ee0 <GPIO_Clock_Enable+0x70>
 8002eb0:	4a26      	ldr	r2, [pc, #152]	@ (8002f4c <GPIO_Clock_Enable+0xdc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d837      	bhi.n	8002f26 <GPIO_Clock_Enable+0xb6>
 8002eb6:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <GPIO_Clock_Enable+0xe0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <GPIO_Clock_Enable+0x54>
 8002ebc:	4a25      	ldr	r2, [pc, #148]	@ (8002f54 <GPIO_Clock_Enable+0xe4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <GPIO_Clock_Enable+0x62>
 8002ec2:	e030      	b.n	8002f26 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002ec4:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	4a23      	ldr	r2, [pc, #140]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed0:	e02c      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a20      	ldr	r2, [pc, #128]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	e025      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eec:	e01e      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	e017      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f08:	e010      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f16:	e009      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f58 <GPIO_Clock_Enable+0xe8>)
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f24:	e002      	b.n	8002f2c <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	e000      	b.n	8002f2e <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021c00 	.word	0x40021c00
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40023800 	.word	0x40023800

08002f5c <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	70fb      	strb	r3, [r7, #3]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	70bb      	strb	r3, [r7, #2]
 8002f72:	4613      	mov	r3, r2
 8002f74:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff7a 	bl	8002e70 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	0052      	lsls	r2, r2, #1
 8002f84:	2103      	movs	r1, #3
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	43d2      	mvns	r2, r2
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78b9      	ldrb	r1, [r7, #2]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	0052      	lsls	r2, r2, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	43d2      	mvns	r2, r2
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002fba:	2202      	movs	r2, #2
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d008      	beq.n	8002fd4 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	7879      	ldrb	r1, [r7, #1]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	0052      	lsls	r2, r2, #1
 8002fdc:	2103      	movs	r1, #3
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	43d2      	mvns	r2, r2
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002fea:	2204      	movs	r2, #4
 8002fec:	7c3b      	ldrb	r3, [r7, #16]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	7c39      	ldrb	r1, [r7, #16]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	0052      	lsls	r2, r2, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	0052      	lsls	r2, r2, #1
 800300e:	2103      	movs	r1, #3
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	43d2      	mvns	r2, r2
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 800301c:	2204      	movs	r2, #4
 800301e:	7d3b      	ldrb	r3, [r7, #20]
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	7d39      	ldrb	r1, [r7, #20]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	0052      	lsls	r2, r2, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8003038:	2202      	movs	r2, #2
 800303a:	78bb      	ldrb	r3, [r7, #2]
 800303c:	4293      	cmp	r3, r2
 800303e:	d12f      	bne.n	80030a0 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	2b07      	cmp	r3, #7
 8003044:	d815      	bhi.n	8003072 <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	210f      	movs	r1, #15
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	43d2      	mvns	r2, r2
 8003056:	401a      	ands	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	7e39      	ldrb	r1, [r7, #24]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	621a      	str	r2, [r3, #32]
 8003070:	e016      	b.n	80030a0 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	3a08      	subs	r2, #8
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	210f      	movs	r1, #15
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	43d2      	mvns	r2, r2
 8003084:	401a      	ands	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	7e39      	ldrb	r1, [r7, #24]
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	3a08      	subs	r2, #8
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <__NVIC_EnableIRQ>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	@ (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	@ (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	@ (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <SystemAPB1_Clock_Speed>:


void BSP_Init(void);

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <SystemAPB1_Clock_Speed+0x24>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a07      	ldr	r2, [pc, #28]	@ (8003164 <SystemAPB1_Clock_Speed+0x28>)
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	0a92      	lsrs	r2, r2, #10
 800314a:	f002 0207 	and.w	r2, r2, #7
 800314e:	4906      	ldr	r1, [pc, #24]	@ (8003168 <SystemAPB1_Clock_Speed+0x2c>)
 8003150:	5c8a      	ldrb	r2, [r1, r2]
 8003152:	40d3      	lsrs	r3, r2
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	40023800 	.word	0x40023800
 8003168:	08006020 	.word	0x08006020

0800316c <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003170:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <SystemAPB2_Clock_Speed+0x24>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <SystemAPB2_Clock_Speed+0x28>)
 8003176:	6892      	ldr	r2, [r2, #8]
 8003178:	0b52      	lsrs	r2, r2, #13
 800317a:	f002 0207 	and.w	r2, r2, #7
 800317e:	4906      	ldr	r1, [pc, #24]	@ (8003198 <SystemAPB2_Clock_Speed+0x2c>)
 8003180:	5c8a      	ldrb	r2, [r1, r2]
 8003182:	40d3      	lsrs	r3, r2
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000
 8003194:	40023800 	.word	0x40023800
 8003198:	08006020 	.word	0x08006020

0800319c <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 80031aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ae:	f7fd fc89 	bl	8000ac4 <__aeabi_d2lz>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd f993 	bl	80004e4 <__aeabi_l2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d2:	f7fc fffd 	bl	80001d0 <__aeabi_dsub>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <USART1_TX_ISR>:
volatile bool U5RX_Complete = 0;

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	U1TX_Complete = 1;
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <USART1_TX_ISR+0x14>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	200006d2 	.word	0x200006d2

08003200 <USART1_RX_ISR>:

void USART1_RX_ISR() {
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
	U1RX_Complete = 1;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <USART1_RX_ISR+0x14>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	200006d3 	.word	0x200006d3

08003218 <USART2_TX_ISR>:

void USART2_TX_ISR() {
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
	U2TX_Complete = 1;
 800321c:	4b03      	ldr	r3, [pc, #12]	@ (800322c <USART2_TX_ISR+0x14>)
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	200006d4 	.word	0x200006d4

08003230 <USART2_RX_ISR>:

void USART2_RX_ISR() {
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	U2RX_Complete = 1;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <USART2_RX_ISR+0x14>)
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	200006d5 	.word	0x200006d5

08003248 <USART3_TX_ISR>:

void USART3_TX_ISR() {
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	U3TX_Complete = 1;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <USART3_TX_ISR+0x14>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	200006d6 	.word	0x200006d6

08003260 <USART3_RX_ISR>:

void USART3_RX_ISR() {
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
	U3RX_Complete = 1;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <USART3_RX_ISR+0x14>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	200006d7 	.word	0x200006d7

08003278 <USART4_TX_ISR>:

void USART4_TX_ISR() {
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	U4TX_Complete = 1;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <USART4_TX_ISR+0x14>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	200006d8 	.word	0x200006d8

08003290 <USART4_RX_ISR>:

void USART4_RX_ISR() {
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
	U4RX_Complete = 1;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <USART4_RX_ISR+0x14>)
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	200006d9 	.word	0x200006d9

080032a8 <USART5_TX_ISR>:

void USART5_TX_ISR() {
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
	U5TX_Complete = 1;
 80032ac:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <USART5_TX_ISR+0x14>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	200006da 	.word	0x200006da

080032c0 <USART5_RX_ISR>:

void USART5_RX_ISR() {
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
	U5RX_Complete = 1;
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <USART5_RX_ISR+0x14>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	200006db 	.word	0x200006db

080032d8 <USART6_TX_ISR>:

void USART6_TX_ISR() {
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
	U6TX_Complete = 1;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <USART6_TX_ISR+0x14>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	200006dc 	.word	0x200006dc

080032f0 <USART6_RX_ISR>:

void USART6_RX_ISR() {
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
	U6RX_Complete = 1;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <USART6_RX_ISR+0x14>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	200006dd 	.word	0x200006dd

08003308 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 800330c:	4b57      	ldr	r3, [pc, #348]	@ (800346c <UART4_IRQHandler+0x164>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b57      	ldr	r3, [pc, #348]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003314:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003316:	4b56      	ldr	r3, [pc, #344]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <UART4_IRQHandler+0x3e>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8003324:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART4_IRQHandler+0x3e>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 8003330:	4b50      	ldr	r3, [pc, #320]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003338:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800333a:	4b4c      	ldr	r3, [pc, #304]	@ (800346c <UART4_IRQHandler+0x164>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <UART4_IRQHandler+0x164>)
 8003340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003344:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8003346:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <UART4_IRQHandler+0x6e>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003354:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART4_IRQHandler+0x6e>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003360:	4b44      	ldr	r3, [pc, #272]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003368:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800336a:	4b40      	ldr	r3, [pc, #256]	@ (800346c <UART4_IRQHandler+0x164>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3f      	ldr	r2, [pc, #252]	@ (800346c <UART4_IRQHandler+0x164>)
 8003370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8003376:	4b3e      	ldr	r3, [pc, #248]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <UART4_IRQHandler+0x9e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003384:	4b3b      	ldr	r3, [pc, #236]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <UART4_IRQHandler+0x9e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003390:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003398:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <UART4_IRQHandler+0x164>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	@ (800346c <UART4_IRQHandler+0x164>)
 80033a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a4:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 80033a6:	4b32      	ldr	r3, [pc, #200]	@ (8003470 <UART4_IRQHandler+0x168>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80033b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <UART4_IRQHandler+0x16c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80033c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003474 <UART4_IRQHandler+0x16c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033c8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80033ca:	4b28      	ldr	r3, [pc, #160]	@ (800346c <UART4_IRQHandler+0x164>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	@ (800346c <UART4_IRQHandler+0x164>)
 80033d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033d4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 80033d6:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <UART4_IRQHandler+0x168>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <UART4_IRQHandler+0xfe>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <UART4_IRQHandler+0x16c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART4_IRQHandler+0xfe>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80033f0:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <UART4_IRQHandler+0x16c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033f8:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80033fa:	4b1c      	ldr	r3, [pc, #112]	@ (800346c <UART4_IRQHandler+0x164>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <UART4_IRQHandler+0x164>)
 8003400:	f023 0320 	bic.w	r3, r3, #32
 8003404:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <UART4_IRQHandler+0x12e>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART4_IRQHandler+0x12e>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003428:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <UART4_IRQHandler+0x164>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0f      	ldr	r2, [pc, #60]	@ (800346c <UART4_IRQHandler+0x164>)
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8003436:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <UART4_IRQHandler+0x168>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d010      	beq.n	8003466 <UART4_IRQHandler+0x15e>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8003444:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART4_IRQHandler+0x15e>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8003450:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <UART4_IRQHandler+0x16c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003458:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <UART4_IRQHandler+0x164>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a03      	ldr	r2, [pc, #12]	@ (800346c <UART4_IRQHandler+0x164>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	6013      	str	r3, [r2, #0]
		}
	}

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40004c00 	.word	0x40004c00
 8003470:	200006d0 	.word	0x200006d0
 8003474:	200006c8 	.word	0x200006c8

08003478 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 800347c:	4b57      	ldr	r3, [pc, #348]	@ (80035dc <USART1_IRQHandler+0x164>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b57      	ldr	r3, [pc, #348]	@ (80035e0 <USART1_IRQHandler+0x168>)
 8003484:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003486:	4b56      	ldr	r3, [pc, #344]	@ (80035e0 <USART1_IRQHandler+0x168>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <USART1_IRQHandler+0x3e>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8003494:	4b53      	ldr	r3, [pc, #332]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <USART1_IRQHandler+0x3e>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80034a0:	4b50      	ldr	r3, [pc, #320]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034a8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80034aa:	4b4c      	ldr	r3, [pc, #304]	@ (80035dc <USART1_IRQHandler+0x164>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a4b      	ldr	r2, [pc, #300]	@ (80035dc <USART1_IRQHandler+0x164>)
 80034b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <USART1_IRQHandler+0x168>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <USART1_IRQHandler+0x6e>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80034c4:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <USART1_IRQHandler+0x6e>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80034d0:	4b44      	ldr	r3, [pc, #272]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80034da:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <USART1_IRQHandler+0x164>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <USART1_IRQHandler+0x164>)
 80034e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 80034e6:	4b3e      	ldr	r3, [pc, #248]	@ (80035e0 <USART1_IRQHandler+0x168>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <USART1_IRQHandler+0x9e>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80034f4:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <USART1_IRQHandler+0x9e>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003500:	4b38      	ldr	r3, [pc, #224]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003508:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800350a:	4b34      	ldr	r3, [pc, #208]	@ (80035dc <USART1_IRQHandler+0x164>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a33      	ldr	r2, [pc, #204]	@ (80035dc <USART1_IRQHandler+0x164>)
 8003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003514:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8003516:	4b32      	ldr	r3, [pc, #200]	@ (80035e0 <USART1_IRQHandler+0x168>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <USART1_IRQHandler+0xce>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003524:	4b2f      	ldr	r3, [pc, #188]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <USART1_IRQHandler+0xce>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003530:	4b2c      	ldr	r3, [pc, #176]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003538:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <USART1_IRQHandler+0x164>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a27      	ldr	r2, [pc, #156]	@ (80035dc <USART1_IRQHandler+0x164>)
 8003540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003544:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8003546:	4b26      	ldr	r3, [pc, #152]	@ (80035e0 <USART1_IRQHandler+0x168>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <USART1_IRQHandler+0xfe>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003554:	4b23      	ldr	r3, [pc, #140]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <USART1_IRQHandler+0xfe>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8003560:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003568:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800356a:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <USART1_IRQHandler+0x164>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <USART1_IRQHandler+0x164>)
 8003570:	f023 0320 	bic.w	r3, r3, #32
 8003574:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8003576:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <USART1_IRQHandler+0x168>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <USART1_IRQHandler+0x12e>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8003584:	4b17      	ldr	r3, [pc, #92]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <USART1_IRQHandler+0x12e>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003598:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <USART1_IRQHandler+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0f      	ldr	r2, [pc, #60]	@ (80035dc <USART1_IRQHandler+0x164>)
 80035a0:	f023 0310 	bic.w	r3, r3, #16
 80035a4:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <USART1_IRQHandler+0x168>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <USART1_IRQHandler+0x15e>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <USART1_IRQHandler+0x15e>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <USART1_IRQHandler+0x16c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035c8:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <USART1_IRQHandler+0x164>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a03      	ldr	r2, [pc, #12]	@ (80035dc <USART1_IRQHandler+0x164>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6013      	str	r3, [r2, #0]
		}
	}

}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40011000 	.word	0x40011000
 80035e0:	200006d0 	.word	0x200006d0
 80035e4:	200006bc 	.word	0x200006bc

080035e8 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <USART_Get_Instance_Number+0x6c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <USART_Get_Instance_Number+0x16>
 80035fa:	2300      	movs	r3, #0
 80035fc:	e024      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <USART_Get_Instance_Number+0x70>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <USART_Get_Instance_Number+0x24>
 8003608:	2301      	movs	r3, #1
 800360a:	e01d      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a12      	ldr	r2, [pc, #72]	@ (800365c <USART_Get_Instance_Number+0x74>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <USART_Get_Instance_Number+0x32>
 8003616:	2302      	movs	r3, #2
 8003618:	e016      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <USART_Get_Instance_Number+0x78>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <USART_Get_Instance_Number+0x40>
 8003624:	2303      	movs	r3, #3
 8003626:	e00f      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <USART_Get_Instance_Number+0x7c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <USART_Get_Instance_Number+0x4e>
 8003632:	2304      	movs	r3, #4
 8003634:	e008      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0b      	ldr	r2, [pc, #44]	@ (8003668 <USART_Get_Instance_Number+0x80>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <USART_Get_Instance_Number+0x5c>
 8003640:	2305      	movs	r3, #5
 8003642:	e001      	b.n	8003648 <USART_Get_Instance_Number+0x60>
	else {return -1;}
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40011000 	.word	0x40011000
 8003658:	40004400 	.word	0x40004400
 800365c:	40004800 	.word	0x40004800
 8003660:	40004c00 	.word	0x40004c00
 8003664:	40005000 	.word	0x40005000
 8003668:	40011400 	.word	0x40011400

0800366c <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8003674:	2200      	movs	r2, #0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 800367a:	2200      	movs	r2, #0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003686:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8003688:	2200      	movs	r2, #0
 800368a:	2300      	movs	r3, #0
 800368c:	4313      	orrs	r3, r2
 800368e:	b2da      	uxtb	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8003694:	2300      	movs	r3, #0
 8003696:	b2da      	uxtb	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	739a      	strb	r2, [r3, #14]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a27      	ldr	r2, [pc, #156]	@ (8003754 <USART_Clock_Enable+0xac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d106      	bne.n	80036c8 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	4a26      	ldr	r2, [pc, #152]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036c6:	e03e      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a23      	ldr	r2, [pc, #140]	@ (800375c <USART_Clock_Enable+0xb4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d106      	bne.n	80036e0 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80036d2:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036de:	e032      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <USART_Clock_Enable+0xb8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d106      	bne.n	80036f8 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80036ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <USART_Clock_Enable+0xb0>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f6:	e026      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <USART_Clock_Enable+0xbc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d106      	bne.n	8003710 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <USART_Clock_Enable+0xb0>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <USART_Clock_Enable+0xb0>)
 8003708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	e01a      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <USART_Clock_Enable+0xc0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d106      	bne.n	8003728 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800371a:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <USART_Clock_Enable+0xb0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4a0e      	ldr	r2, [pc, #56]	@ (8003758 <USART_Clock_Enable+0xb0>)
 8003720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003724:	6413      	str	r3, [r2, #64]	@ 0x40
 8003726:	e00e      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0f      	ldr	r2, [pc, #60]	@ (800376c <USART_Clock_Enable+0xc4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d106      	bne.n	8003740 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <USART_Clock_Enable+0xb0>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <USART_Clock_Enable+0xb0>)
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	6453      	str	r3, [r2, #68]	@ 0x44
 800373e:	e002      	b.n	8003746 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e000      	b.n	8003748 <USART_Clock_Enable+0xa0>
	}
	return 1;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40011000 	.word	0x40011000
 8003758:	40023800 	.word	0x40023800
 800375c:	40004400 	.word	0x40004400
 8003760:	40004800 	.word	0x40004800
 8003764:	40004c00 	.word	0x40004c00
 8003768:	40005000 	.word	0x40005000
 800376c:	40011400 	.word	0x40011400

08003770 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af04      	add	r7, sp, #16
 8003776:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4aa4      	ldr	r2, [pc, #656]	@ (8003a10 <PIN_Setup+0x2a0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f040 8112 	bne.w	80039a8 <PIN_Setup+0x238>
	{
		__usart_1_config__ = config;
 8003784:	4aa3      	ldr	r2, [pc, #652]	@ (8003a14 <PIN_Setup+0x2a4>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]

		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7a1b      	ldrb	r3, [r3, #8]
 800378e:	2201      	movs	r2, #1
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7a1b      	ldrb	r3, [r3, #8]
 8003798:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800379a:	4293      	cmp	r3, r2
 800379c:	d00a      	beq.n	80037b4 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7a1b      	ldrb	r3, [r3, #8]
 80037a2:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d005      	beq.n	80037b4 <PIN_Setup+0x44>
				(config->mode == USART_Configuration.Mode.LIN) )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7a1b      	ldrb	r3, [r3, #8]
 80037ac:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f040 80bf 	bne.w	8003932 <PIN_Setup+0x1c2>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7a5b      	ldrb	r3, [r3, #9]
 80037b8:	2209      	movs	r2, #9
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10f      	bne.n	80037de <PIN_Setup+0x6e>
 80037be:	2009      	movs	r0, #9
 80037c0:	2402      	movs	r4, #2
 80037c2:	2500      	movs	r5, #0
 80037c4:	2302      	movs	r3, #2
 80037c6:	2200      	movs	r2, #0
 80037c8:	2107      	movs	r1, #7
 80037ca:	9102      	str	r1, [sp, #8]
 80037cc:	9201      	str	r2, [sp, #4]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	462b      	mov	r3, r5
 80037d2:	4622      	mov	r2, r4
 80037d4:	4601      	mov	r1, r0
 80037d6:	4890      	ldr	r0, [pc, #576]	@ (8003a18 <PIN_Setup+0x2a8>)
 80037d8:	f7ff fbc0 	bl	8002f5c <GPIO_Pin_Init>
 80037dc:	e013      	b.n	8003806 <PIN_Setup+0x96>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7a5b      	ldrb	r3, [r3, #9]
 80037e2:	2206      	movs	r2, #6
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10e      	bne.n	8003806 <PIN_Setup+0x96>
 80037e8:	2006      	movs	r0, #6
 80037ea:	2402      	movs	r4, #2
 80037ec:	2500      	movs	r5, #0
 80037ee:	2302      	movs	r3, #2
 80037f0:	2200      	movs	r2, #0
 80037f2:	2107      	movs	r1, #7
 80037f4:	9102      	str	r1, [sp, #8]
 80037f6:	9201      	str	r2, [sp, #4]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	462b      	mov	r3, r5
 80037fc:	4622      	mov	r2, r4
 80037fe:	4601      	mov	r1, r0
 8003800:	4886      	ldr	r0, [pc, #536]	@ (8003a1c <PIN_Setup+0x2ac>)
 8003802:	f7ff fbab 	bl	8002f5c <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7a9b      	ldrb	r3, [r3, #10]
 800380a:	220a      	movs	r2, #10
 800380c:	4293      	cmp	r3, r2
 800380e:	d10f      	bne.n	8003830 <PIN_Setup+0xc0>
 8003810:	200a      	movs	r0, #10
 8003812:	2402      	movs	r4, #2
 8003814:	2500      	movs	r5, #0
 8003816:	2302      	movs	r3, #2
 8003818:	2200      	movs	r2, #0
 800381a:	2107      	movs	r1, #7
 800381c:	9102      	str	r1, [sp, #8]
 800381e:	9201      	str	r2, [sp, #4]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	462b      	mov	r3, r5
 8003824:	4622      	mov	r2, r4
 8003826:	4601      	mov	r1, r0
 8003828:	487b      	ldr	r0, [pc, #492]	@ (8003a18 <PIN_Setup+0x2a8>)
 800382a:	f7ff fb97 	bl	8002f5c <GPIO_Pin_Init>
 800382e:	e013      	b.n	8003858 <PIN_Setup+0xe8>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7a9b      	ldrb	r3, [r3, #10]
 8003834:	2207      	movs	r2, #7
 8003836:	4293      	cmp	r3, r2
 8003838:	d10e      	bne.n	8003858 <PIN_Setup+0xe8>
 800383a:	2007      	movs	r0, #7
 800383c:	2402      	movs	r4, #2
 800383e:	2500      	movs	r5, #0
 8003840:	2302      	movs	r3, #2
 8003842:	2200      	movs	r2, #0
 8003844:	2107      	movs	r1, #7
 8003846:	9102      	str	r1, [sp, #8]
 8003848:	9201      	str	r2, [sp, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462b      	mov	r3, r5
 800384e:	4622      	mov	r2, r4
 8003850:	4601      	mov	r1, r0
 8003852:	4872      	ldr	r0, [pc, #456]	@ (8003a1c <PIN_Setup+0x2ac>)
 8003854:	f7ff fb82 	bl	8002f5c <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7a1b      	ldrb	r3, [r3, #8]
 800385c:	2202      	movs	r2, #2
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <PIN_Setup+0x11a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7adb      	ldrb	r3, [r3, #11]
 8003866:	2208      	movs	r2, #8
 8003868:	4293      	cmp	r3, r2
 800386a:	d10e      	bne.n	800388a <PIN_Setup+0x11a>
 800386c:	2008      	movs	r0, #8
 800386e:	2402      	movs	r4, #2
 8003870:	2500      	movs	r5, #0
 8003872:	2302      	movs	r3, #2
 8003874:	2200      	movs	r2, #0
 8003876:	2107      	movs	r1, #7
 8003878:	9102      	str	r1, [sp, #8]
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	462b      	mov	r3, r5
 8003880:	4622      	mov	r2, r4
 8003882:	4601      	mov	r1, r0
 8003884:	4864      	ldr	r0, [pc, #400]	@ (8003a18 <PIN_Setup+0x2a8>)
 8003886:	f7ff fb69 	bl	8002f5c <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7bdb      	ldrb	r3, [r3, #15]
 800388e:	2200      	movs	r2, #0
 8003890:	4293      	cmp	r3, r2
 8003892:	f000 851a 	beq.w	80042ca <PIN_Setup+0xb5a>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7bdb      	ldrb	r3, [r3, #15]
 800389a:	2201      	movs	r2, #1
 800389c:	4293      	cmp	r3, r2
 800389e:	d10e      	bne.n	80038be <PIN_Setup+0x14e>
 80038a0:	200b      	movs	r0, #11
 80038a2:	2402      	movs	r4, #2
 80038a4:	2500      	movs	r5, #0
 80038a6:	2302      	movs	r3, #2
 80038a8:	2200      	movs	r2, #0
 80038aa:	2107      	movs	r1, #7
 80038ac:	9102      	str	r1, [sp, #8]
 80038ae:	9201      	str	r2, [sp, #4]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462b      	mov	r3, r5
 80038b4:	4622      	mov	r2, r4
 80038b6:	4601      	mov	r1, r0
 80038b8:	4857      	ldr	r0, [pc, #348]	@ (8003a18 <PIN_Setup+0x2a8>)
 80038ba:	f7ff fb4f 	bl	8002f5c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7bdb      	ldrb	r3, [r3, #15]
 80038c2:	2202      	movs	r2, #2
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10e      	bne.n	80038e6 <PIN_Setup+0x176>
 80038c8:	200c      	movs	r0, #12
 80038ca:	2402      	movs	r4, #2
 80038cc:	2500      	movs	r5, #0
 80038ce:	2302      	movs	r3, #2
 80038d0:	2200      	movs	r2, #0
 80038d2:	2107      	movs	r1, #7
 80038d4:	9102      	str	r1, [sp, #8]
 80038d6:	9201      	str	r2, [sp, #4]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	462b      	mov	r3, r5
 80038dc:	4622      	mov	r2, r4
 80038de:	4601      	mov	r1, r0
 80038e0:	484d      	ldr	r0, [pc, #308]	@ (8003a18 <PIN_Setup+0x2a8>)
 80038e2:	f7ff fb3b 	bl	8002f5c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7bdb      	ldrb	r3, [r3, #15]
 80038ea:	2203      	movs	r2, #3
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 84ec 	bne.w	80042ca <PIN_Setup+0xb5a>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038f2:	200b      	movs	r0, #11
 80038f4:	2402      	movs	r4, #2
 80038f6:	2500      	movs	r5, #0
 80038f8:	2302      	movs	r3, #2
 80038fa:	2200      	movs	r2, #0
 80038fc:	2107      	movs	r1, #7
 80038fe:	9102      	str	r1, [sp, #8]
 8003900:	9201      	str	r2, [sp, #4]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	462b      	mov	r3, r5
 8003906:	4622      	mov	r2, r4
 8003908:	4601      	mov	r1, r0
 800390a:	4843      	ldr	r0, [pc, #268]	@ (8003a18 <PIN_Setup+0x2a8>)
 800390c:	f7ff fb26 	bl	8002f5c <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003910:	200c      	movs	r0, #12
 8003912:	2402      	movs	r4, #2
 8003914:	2500      	movs	r5, #0
 8003916:	2302      	movs	r3, #2
 8003918:	2200      	movs	r2, #0
 800391a:	2107      	movs	r1, #7
 800391c:	9102      	str	r1, [sp, #8]
 800391e:	9201      	str	r2, [sp, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	462b      	mov	r3, r5
 8003924:	4622      	mov	r2, r4
 8003926:	4601      	mov	r1, r0
 8003928:	483b      	ldr	r0, [pc, #236]	@ (8003a18 <PIN_Setup+0x2a8>)
 800392a:	f7ff fb17 	bl	8002f5c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800392e:	f000 bccc 	b.w	80042ca <PIN_Setup+0xb5a>
				}
			}
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7a1b      	ldrb	r3, [r3, #8]
 8003936:	2206      	movs	r2, #6
 8003938:	4293      	cmp	r3, r2
 800393a:	d00a      	beq.n	8003952 <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7a1b      	ldrb	r3, [r3, #8]
 8003940:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003942:	4293      	cmp	r3, r2
 8003944:	d005      	beq.n	8003952 <PIN_Setup+0x1e2>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7a1b      	ldrb	r3, [r3, #8]
 800394a:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	f040 84c1 	bne.w	80042d4 <PIN_Setup+0xb64>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7a5b      	ldrb	r3, [r3, #9]
 8003956:	2209      	movs	r2, #9
 8003958:	4293      	cmp	r3, r2
 800395a:	d10e      	bne.n	800397a <PIN_Setup+0x20a>
 800395c:	2009      	movs	r0, #9
 800395e:	2402      	movs	r4, #2
 8003960:	2500      	movs	r5, #0
 8003962:	2302      	movs	r3, #2
 8003964:	2200      	movs	r2, #0
 8003966:	2107      	movs	r1, #7
 8003968:	9102      	str	r1, [sp, #8]
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	462b      	mov	r3, r5
 8003970:	4622      	mov	r2, r4
 8003972:	4601      	mov	r1, r0
 8003974:	4828      	ldr	r0, [pc, #160]	@ (8003a18 <PIN_Setup+0x2a8>)
 8003976:	f7ff faf1 	bl	8002f5c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7a1b      	ldrb	r3, [r3, #8]
 800397e:	2207      	movs	r2, #7
 8003980:	4293      	cmp	r3, r2
 8003982:	f040 84a7 	bne.w	80042d4 <PIN_Setup+0xb64>
 8003986:	2008      	movs	r0, #8
 8003988:	2402      	movs	r4, #2
 800398a:	2500      	movs	r5, #0
 800398c:	2302      	movs	r3, #2
 800398e:	2200      	movs	r2, #0
 8003990:	2107      	movs	r1, #7
 8003992:	9102      	str	r1, [sp, #8]
 8003994:	9201      	str	r2, [sp, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	462b      	mov	r3, r5
 800399a:	4622      	mov	r2, r4
 800399c:	4601      	mov	r1, r0
 800399e:	481e      	ldr	r0, [pc, #120]	@ (8003a18 <PIN_Setup+0x2a8>)
 80039a0:	f7ff fadc 	bl	8002f5c <GPIO_Pin_Init>

		}
	}


}
 80039a4:	f000 bc96 	b.w	80042d4 <PIN_Setup+0xb64>
	else if(config->Port == USART2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <PIN_Setup+0x2b0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f040 8182 	bne.w	8003cb8 <PIN_Setup+0x548>
		__usart_2_config__ = config;
 80039b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <PIN_Setup+0x2b4>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7a1b      	ldrb	r3, [r3, #8]
 80039be:	2201      	movs	r2, #1
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7a1b      	ldrb	r3, [r3, #8]
 80039c8:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00a      	beq.n	80039e4 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7a1b      	ldrb	r3, [r3, #8]
 80039d2:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d005      	beq.n	80039e4 <PIN_Setup+0x274>
				(config->mode == USART_Configuration.Mode.LIN) )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7a1b      	ldrb	r3, [r3, #8]
 80039dc:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80039de:	4293      	cmp	r3, r2
 80039e0:	f040 80fc 	bne.w	8003bdc <PIN_Setup+0x46c>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7a5b      	ldrb	r3, [r3, #9]
 80039e8:	2202      	movs	r2, #2
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d11c      	bne.n	8003a28 <PIN_Setup+0x2b8>
 80039ee:	2002      	movs	r0, #2
 80039f0:	2402      	movs	r4, #2
 80039f2:	2500      	movs	r5, #0
 80039f4:	2302      	movs	r3, #2
 80039f6:	2200      	movs	r2, #0
 80039f8:	2107      	movs	r1, #7
 80039fa:	9102      	str	r1, [sp, #8]
 80039fc:	9201      	str	r2, [sp, #4]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	462b      	mov	r3, r5
 8003a02:	4622      	mov	r2, r4
 8003a04:	4601      	mov	r1, r0
 8003a06:	4804      	ldr	r0, [pc, #16]	@ (8003a18 <PIN_Setup+0x2a8>)
 8003a08:	f7ff faa8 	bl	8002f5c <GPIO_Pin_Init>
 8003a0c:	e020      	b.n	8003a50 <PIN_Setup+0x2e0>
 8003a0e:	bf00      	nop
 8003a10:	40011000 	.word	0x40011000
 8003a14:	200006bc 	.word	0x200006bc
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40004400 	.word	0x40004400
 8003a24:	200006c0 	.word	0x200006c0
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7a5b      	ldrb	r3, [r3, #9]
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10e      	bne.n	8003a50 <PIN_Setup+0x2e0>
 8003a32:	2005      	movs	r0, #5
 8003a34:	2402      	movs	r4, #2
 8003a36:	2500      	movs	r5, #0
 8003a38:	2302      	movs	r3, #2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	9102      	str	r1, [sp, #8]
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	462b      	mov	r3, r5
 8003a46:	4622      	mov	r2, r4
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4899      	ldr	r0, [pc, #612]	@ (8003cb0 <PIN_Setup+0x540>)
 8003a4c:	f7ff fa86 	bl	8002f5c <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7a9b      	ldrb	r3, [r3, #10]
 8003a54:	2203      	movs	r2, #3
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10f      	bne.n	8003a7a <PIN_Setup+0x30a>
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	2402      	movs	r4, #2
 8003a5e:	2500      	movs	r5, #0
 8003a60:	2302      	movs	r3, #2
 8003a62:	2200      	movs	r2, #0
 8003a64:	2107      	movs	r1, #7
 8003a66:	9102      	str	r1, [sp, #8]
 8003a68:	9201      	str	r2, [sp, #4]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4601      	mov	r1, r0
 8003a72:	4890      	ldr	r0, [pc, #576]	@ (8003cb4 <PIN_Setup+0x544>)
 8003a74:	f7ff fa72 	bl	8002f5c <GPIO_Pin_Init>
 8003a78:	e013      	b.n	8003aa2 <PIN_Setup+0x332>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7a9b      	ldrb	r3, [r3, #10]
 8003a7e:	2206      	movs	r2, #6
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10e      	bne.n	8003aa2 <PIN_Setup+0x332>
 8003a84:	2006      	movs	r0, #6
 8003a86:	2402      	movs	r4, #2
 8003a88:	2500      	movs	r5, #0
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2107      	movs	r1, #7
 8003a90:	9102      	str	r1, [sp, #8]
 8003a92:	9201      	str	r2, [sp, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	462b      	mov	r3, r5
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4884      	ldr	r0, [pc, #528]	@ (8003cb0 <PIN_Setup+0x540>)
 8003a9e:	f7ff fa5d 	bl	8002f5c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7a1b      	ldrb	r3, [r3, #8]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d128      	bne.n	8003afe <PIN_Setup+0x38e>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7adb      	ldrb	r3, [r3, #11]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10f      	bne.n	8003ad6 <PIN_Setup+0x366>
 8003ab6:	2004      	movs	r0, #4
 8003ab8:	2402      	movs	r4, #2
 8003aba:	2500      	movs	r5, #0
 8003abc:	2302      	movs	r3, #2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	9102      	str	r1, [sp, #8]
 8003ac4:	9201      	str	r2, [sp, #4]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	462b      	mov	r3, r5
 8003aca:	4622      	mov	r2, r4
 8003acc:	4601      	mov	r1, r0
 8003ace:	4879      	ldr	r0, [pc, #484]	@ (8003cb4 <PIN_Setup+0x544>)
 8003ad0:	f7ff fa44 	bl	8002f5c <GPIO_Pin_Init>
 8003ad4:	e013      	b.n	8003afe <PIN_Setup+0x38e>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7adb      	ldrb	r3, [r3, #11]
 8003ada:	2207      	movs	r2, #7
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d10e      	bne.n	8003afe <PIN_Setup+0x38e>
 8003ae0:	2007      	movs	r0, #7
 8003ae2:	2402      	movs	r4, #2
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2107      	movs	r1, #7
 8003aec:	9102      	str	r1, [sp, #8]
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	462b      	mov	r3, r5
 8003af4:	4622      	mov	r2, r4
 8003af6:	4601      	mov	r1, r0
 8003af8:	486e      	ldr	r0, [pc, #440]	@ (8003cb4 <PIN_Setup+0x544>)
 8003afa:	f7ff fa2f 	bl	8002f5c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7bdb      	ldrb	r3, [r3, #15]
 8003b02:	2200      	movs	r2, #0
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d105      	bne.n	8003b14 <PIN_Setup+0x3a4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7bdb      	ldrb	r3, [r3, #15]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	f040 83dd 	bne.w	80042ce <PIN_Setup+0xb5e>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7bdb      	ldrb	r3, [r3, #15]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d128      	bne.n	8003b70 <PIN_Setup+0x400>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7adb      	ldrb	r3, [r3, #11]
 8003b22:	2200      	movs	r2, #0
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10f      	bne.n	8003b48 <PIN_Setup+0x3d8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b28:	2000      	movs	r0, #0
 8003b2a:	2402      	movs	r4, #2
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	2302      	movs	r3, #2
 8003b30:	2200      	movs	r2, #0
 8003b32:	2107      	movs	r1, #7
 8003b34:	9102      	str	r1, [sp, #8]
 8003b36:	9201      	str	r2, [sp, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	4601      	mov	r1, r0
 8003b40:	485c      	ldr	r0, [pc, #368]	@ (8003cb4 <PIN_Setup+0x544>)
 8003b42:	f7ff fa0b 	bl	8002f5c <GPIO_Pin_Init>
 8003b46:	e013      	b.n	8003b70 <PIN_Setup+0x400>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7adb      	ldrb	r3, [r3, #11]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10e      	bne.n	8003b70 <PIN_Setup+0x400>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b52:	2003      	movs	r0, #3
 8003b54:	2402      	movs	r4, #2
 8003b56:	2500      	movs	r5, #0
 8003b58:	2302      	movs	r3, #2
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2107      	movs	r1, #7
 8003b5e:	9102      	str	r1, [sp, #8]
 8003b60:	9201      	str	r2, [sp, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	462b      	mov	r3, r5
 8003b66:	4622      	mov	r2, r4
 8003b68:	4601      	mov	r1, r0
 8003b6a:	4851      	ldr	r0, [pc, #324]	@ (8003cb0 <PIN_Setup+0x540>)
 8003b6c:	f7ff f9f6 	bl	8002f5c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7bdb      	ldrb	r3, [r3, #15]
 8003b74:	2202      	movs	r2, #2
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d005      	beq.n	8003b86 <PIN_Setup+0x416>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7bdb      	ldrb	r3, [r3, #15]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4293      	cmp	r3, r2
 8003b82:	f040 83a4 	bne.w	80042ce <PIN_Setup+0xb5e>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7adb      	ldrb	r3, [r3, #11]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10f      	bne.n	8003bb0 <PIN_Setup+0x440>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b90:	2001      	movs	r0, #1
 8003b92:	2402      	movs	r4, #2
 8003b94:	2500      	movs	r5, #0
 8003b96:	2302      	movs	r3, #2
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2107      	movs	r1, #7
 8003b9c:	9102      	str	r1, [sp, #8]
 8003b9e:	9201      	str	r2, [sp, #4]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	4842      	ldr	r0, [pc, #264]	@ (8003cb4 <PIN_Setup+0x544>)
 8003baa:	f7ff f9d7 	bl	8002f5c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003bae:	e38e      	b.n	80042ce <PIN_Setup+0xb5e>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7adb      	ldrb	r3, [r3, #11]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f040 8389 	bne.w	80042ce <PIN_Setup+0xb5e>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003bbc:	2004      	movs	r0, #4
 8003bbe:	2402      	movs	r4, #2
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2107      	movs	r1, #7
 8003bc8:	9102      	str	r1, [sp, #8]
 8003bca:	9201      	str	r2, [sp, #4]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	462b      	mov	r3, r5
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4836      	ldr	r0, [pc, #216]	@ (8003cb0 <PIN_Setup+0x540>)
 8003bd6:	f7ff f9c1 	bl	8002f5c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003bda:	e378      	b.n	80042ce <PIN_Setup+0xb5e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7a1b      	ldrb	r3, [r3, #8]
 8003be0:	2206      	movs	r2, #6
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00a      	beq.n	8003bfc <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7a1b      	ldrb	r3, [r3, #8]
 8003bea:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d005      	beq.n	8003bfc <PIN_Setup+0x48c>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7a1b      	ldrb	r3, [r3, #8]
 8003bf4:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	f040 836c 	bne.w	80042d4 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7a5b      	ldrb	r3, [r3, #9]
 8003c00:	2202      	movs	r2, #2
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10f      	bne.n	8003c26 <PIN_Setup+0x4b6>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c06:	2002      	movs	r0, #2
 8003c08:	2402      	movs	r4, #2
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2107      	movs	r1, #7
 8003c12:	9102      	str	r1, [sp, #8]
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	462b      	mov	r3, r5
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4601      	mov	r1, r0
 8003c1e:	4825      	ldr	r0, [pc, #148]	@ (8003cb4 <PIN_Setup+0x544>)
 8003c20:	f7ff f99c 	bl	8002f5c <GPIO_Pin_Init>
 8003c24:	e013      	b.n	8003c4e <PIN_Setup+0x4de>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7a5b      	ldrb	r3, [r3, #9]
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10e      	bne.n	8003c4e <PIN_Setup+0x4de>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c30:	2005      	movs	r0, #5
 8003c32:	2402      	movs	r4, #2
 8003c34:	2500      	movs	r5, #0
 8003c36:	2302      	movs	r3, #2
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2107      	movs	r1, #7
 8003c3c:	9102      	str	r1, [sp, #8]
 8003c3e:	9201      	str	r2, [sp, #4]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	462b      	mov	r3, r5
 8003c44:	4622      	mov	r2, r4
 8003c46:	4601      	mov	r1, r0
 8003c48:	4819      	ldr	r0, [pc, #100]	@ (8003cb0 <PIN_Setup+0x540>)
 8003c4a:	f7ff f987 	bl	8002f5c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7a1b      	ldrb	r3, [r3, #8]
 8003c52:	2207      	movs	r2, #7
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f040 833d 	bne.w	80042d4 <PIN_Setup+0xb64>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	7adb      	ldrb	r3, [r3, #11]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10f      	bne.n	8003c84 <PIN_Setup+0x514>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c64:	2004      	movs	r0, #4
 8003c66:	2402      	movs	r4, #2
 8003c68:	2500      	movs	r5, #0
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2107      	movs	r1, #7
 8003c70:	9102      	str	r1, [sp, #8]
 8003c72:	9201      	str	r2, [sp, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	462b      	mov	r3, r5
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	480d      	ldr	r0, [pc, #52]	@ (8003cb4 <PIN_Setup+0x544>)
 8003c7e:	f7ff f96d 	bl	8002f5c <GPIO_Pin_Init>
}
 8003c82:	e327      	b.n	80042d4 <PIN_Setup+0xb64>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7adb      	ldrb	r3, [r3, #11]
 8003c88:	2207      	movs	r2, #7
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	f040 8322 	bne.w	80042d4 <PIN_Setup+0xb64>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c90:	2007      	movs	r0, #7
 8003c92:	2402      	movs	r4, #2
 8003c94:	2500      	movs	r5, #0
 8003c96:	2302      	movs	r3, #2
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2107      	movs	r1, #7
 8003c9c:	9102      	str	r1, [sp, #8]
 8003c9e:	9201      	str	r2, [sp, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <PIN_Setup+0x544>)
 8003caa:	f7ff f957 	bl	8002f5c <GPIO_Pin_Init>
}
 8003cae:	e311      	b.n	80042d4 <PIN_Setup+0xb64>
 8003cb0:	40020c00 	.word	0x40020c00
 8003cb4:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a9a      	ldr	r2, [pc, #616]	@ (8003f28 <PIN_Setup+0x7b8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	f040 81b5 	bne.w	800402e <PIN_Setup+0x8be>
		__usart_3_config__ = config;
 8003cc4:	4a99      	ldr	r2, [pc, #612]	@ (8003f2c <PIN_Setup+0x7bc>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7a1b      	ldrb	r3, [r3, #8]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7a1b      	ldrb	r3, [r3, #8]
 8003cd8:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00a      	beq.n	8003cf4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7a1b      	ldrb	r3, [r3, #8]
 8003ce2:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d005      	beq.n	8003cf4 <PIN_Setup+0x584>
				(config->mode == USART_Configuration.Mode.LIN) )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7a1b      	ldrb	r3, [r3, #8]
 8003cec:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	f040 8124 	bne.w	8003f3c <PIN_Setup+0x7cc>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7a5b      	ldrb	r3, [r3, #9]
 8003cf8:	220b      	movs	r2, #11
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10f      	bne.n	8003d1e <PIN_Setup+0x5ae>
 8003cfe:	200b      	movs	r0, #11
 8003d00:	2402      	movs	r4, #2
 8003d02:	2500      	movs	r5, #0
 8003d04:	2302      	movs	r3, #2
 8003d06:	2200      	movs	r2, #0
 8003d08:	2107      	movs	r1, #7
 8003d0a:	9102      	str	r1, [sp, #8]
 8003d0c:	9201      	str	r2, [sp, #4]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	462b      	mov	r3, r5
 8003d12:	4622      	mov	r2, r4
 8003d14:	4601      	mov	r1, r0
 8003d16:	4886      	ldr	r0, [pc, #536]	@ (8003f30 <PIN_Setup+0x7c0>)
 8003d18:	f7ff f920 	bl	8002f5c <GPIO_Pin_Init>
 8003d1c:	e028      	b.n	8003d70 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7a5b      	ldrb	r3, [r3, #9]
 8003d22:	220a      	movs	r2, #10
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10f      	bne.n	8003d48 <PIN_Setup+0x5d8>
 8003d28:	200a      	movs	r0, #10
 8003d2a:	2402      	movs	r4, #2
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	2302      	movs	r3, #2
 8003d30:	2200      	movs	r2, #0
 8003d32:	2107      	movs	r1, #7
 8003d34:	9102      	str	r1, [sp, #8]
 8003d36:	9201      	str	r2, [sp, #4]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	4601      	mov	r1, r0
 8003d40:	487c      	ldr	r0, [pc, #496]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003d42:	f7ff f90b 	bl	8002f5c <GPIO_Pin_Init>
 8003d46:	e013      	b.n	8003d70 <PIN_Setup+0x600>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7a5b      	ldrb	r3, [r3, #9]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10e      	bne.n	8003d70 <PIN_Setup+0x600>
 8003d52:	2008      	movs	r0, #8
 8003d54:	2402      	movs	r4, #2
 8003d56:	2500      	movs	r5, #0
 8003d58:	2302      	movs	r3, #2
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2107      	movs	r1, #7
 8003d5e:	9102      	str	r1, [sp, #8]
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	462b      	mov	r3, r5
 8003d66:	4622      	mov	r2, r4
 8003d68:	4601      	mov	r1, r0
 8003d6a:	4872      	ldr	r0, [pc, #456]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003d6c:	f7ff f8f6 	bl	8002f5c <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7a9b      	ldrb	r3, [r3, #10]
 8003d74:	220a      	movs	r2, #10
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10f      	bne.n	8003d9a <PIN_Setup+0x62a>
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	2402      	movs	r4, #2
 8003d7e:	2500      	movs	r5, #0
 8003d80:	2302      	movs	r3, #2
 8003d82:	2200      	movs	r2, #0
 8003d84:	2107      	movs	r1, #7
 8003d86:	9102      	str	r1, [sp, #8]
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	4622      	mov	r2, r4
 8003d90:	4601      	mov	r1, r0
 8003d92:	4867      	ldr	r0, [pc, #412]	@ (8003f30 <PIN_Setup+0x7c0>)
 8003d94:	f7ff f8e2 	bl	8002f5c <GPIO_Pin_Init>
 8003d98:	e028      	b.n	8003dec <PIN_Setup+0x67c>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7a9b      	ldrb	r3, [r3, #10]
 8003d9e:	220b      	movs	r2, #11
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10f      	bne.n	8003dc4 <PIN_Setup+0x654>
 8003da4:	200b      	movs	r0, #11
 8003da6:	2402      	movs	r4, #2
 8003da8:	2500      	movs	r5, #0
 8003daa:	2302      	movs	r3, #2
 8003dac:	2200      	movs	r2, #0
 8003dae:	2107      	movs	r1, #7
 8003db0:	9102      	str	r1, [sp, #8]
 8003db2:	9201      	str	r2, [sp, #4]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	462b      	mov	r3, r5
 8003db8:	4622      	mov	r2, r4
 8003dba:	4601      	mov	r1, r0
 8003dbc:	485d      	ldr	r0, [pc, #372]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003dbe:	f7ff f8cd 	bl	8002f5c <GPIO_Pin_Init>
 8003dc2:	e013      	b.n	8003dec <PIN_Setup+0x67c>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7a5b      	ldrb	r3, [r3, #9]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10e      	bne.n	8003dec <PIN_Setup+0x67c>
 8003dce:	2008      	movs	r0, #8
 8003dd0:	2402      	movs	r4, #2
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2107      	movs	r1, #7
 8003dda:	9102      	str	r1, [sp, #8]
 8003ddc:	9201      	str	r2, [sp, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	462b      	mov	r3, r5
 8003de2:	4622      	mov	r2, r4
 8003de4:	4601      	mov	r1, r0
 8003de6:	4853      	ldr	r0, [pc, #332]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003de8:	f7ff f8b8 	bl	8002f5c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7a1b      	ldrb	r3, [r3, #8]
 8003df0:	2202      	movs	r2, #2
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d128      	bne.n	8003e48 <PIN_Setup+0x6d8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7adb      	ldrb	r3, [r3, #11]
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10f      	bne.n	8003e20 <PIN_Setup+0x6b0>
 8003e00:	200c      	movs	r0, #12
 8003e02:	2402      	movs	r4, #2
 8003e04:	2500      	movs	r5, #0
 8003e06:	2302      	movs	r3, #2
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2107      	movs	r1, #7
 8003e0c:	9102      	str	r1, [sp, #8]
 8003e0e:	9201      	str	r2, [sp, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	462b      	mov	r3, r5
 8003e14:	4622      	mov	r2, r4
 8003e16:	4601      	mov	r1, r0
 8003e18:	4846      	ldr	r0, [pc, #280]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003e1a:	f7ff f89f 	bl	8002f5c <GPIO_Pin_Init>
 8003e1e:	e013      	b.n	8003e48 <PIN_Setup+0x6d8>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7adb      	ldrb	r3, [r3, #11]
 8003e24:	220a      	movs	r2, #10
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10e      	bne.n	8003e48 <PIN_Setup+0x6d8>
 8003e2a:	200a      	movs	r0, #10
 8003e2c:	2402      	movs	r4, #2
 8003e2e:	2500      	movs	r5, #0
 8003e30:	2302      	movs	r3, #2
 8003e32:	2200      	movs	r2, #0
 8003e34:	2107      	movs	r1, #7
 8003e36:	9102      	str	r1, [sp, #8]
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	4622      	mov	r2, r4
 8003e40:	4601      	mov	r1, r0
 8003e42:	483d      	ldr	r0, [pc, #244]	@ (8003f38 <PIN_Setup+0x7c8>)
 8003e44:	f7ff f88a 	bl	8002f5c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7bdb      	ldrb	r3, [r3, #15]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f000 823f 	beq.w	80042d2 <PIN_Setup+0xb62>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7bdb      	ldrb	r3, [r3, #15]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <PIN_Setup+0x6f8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7bdb      	ldrb	r3, [r3, #15]
 8003e62:	2203      	movs	r2, #3
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d128      	bne.n	8003eba <PIN_Setup+0x74a>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7adb      	ldrb	r3, [r3, #11]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10f      	bne.n	8003e92 <PIN_Setup+0x722>
 8003e72:	2000      	movs	r0, #0
 8003e74:	2402      	movs	r4, #2
 8003e76:	2500      	movs	r5, #0
 8003e78:	2302      	movs	r3, #2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2107      	movs	r1, #7
 8003e7e:	9102      	str	r1, [sp, #8]
 8003e80:	9201      	str	r2, [sp, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	462b      	mov	r3, r5
 8003e86:	4622      	mov	r2, r4
 8003e88:	4601      	mov	r1, r0
 8003e8a:	482a      	ldr	r0, [pc, #168]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003e8c:	f7ff f866 	bl	8002f5c <GPIO_Pin_Init>
 8003e90:	e013      	b.n	8003eba <PIN_Setup+0x74a>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7adb      	ldrb	r3, [r3, #11]
 8003e96:	2203      	movs	r2, #3
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10e      	bne.n	8003eba <PIN_Setup+0x74a>
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	2402      	movs	r4, #2
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2107      	movs	r1, #7
 8003ea8:	9102      	str	r1, [sp, #8]
 8003eaa:	9201      	str	r2, [sp, #4]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	462b      	mov	r3, r5
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4820      	ldr	r0, [pc, #128]	@ (8003f38 <PIN_Setup+0x7c8>)
 8003eb6:	f7ff f851 	bl	8002f5c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7bdb      	ldrb	r3, [r3, #15]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d005      	beq.n	8003ed0 <PIN_Setup+0x760>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7bdb      	ldrb	r3, [r3, #15]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f040 8201 	bne.w	80042d2 <PIN_Setup+0xb62>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7adb      	ldrb	r3, [r3, #11]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10f      	bne.n	8003efa <PIN_Setup+0x78a>
 8003eda:	2001      	movs	r0, #1
 8003edc:	2402      	movs	r4, #2
 8003ede:	2500      	movs	r5, #0
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2107      	movs	r1, #7
 8003ee6:	9102      	str	r1, [sp, #8]
 8003ee8:	9201      	str	r2, [sp, #4]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	462b      	mov	r3, r5
 8003eee:	4622      	mov	r2, r4
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	4810      	ldr	r0, [pc, #64]	@ (8003f34 <PIN_Setup+0x7c4>)
 8003ef4:	f7ff f832 	bl	8002f5c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003ef8:	e1eb      	b.n	80042d2 <PIN_Setup+0xb62>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7adb      	ldrb	r3, [r3, #11]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f040 81e6 	bne.w	80042d2 <PIN_Setup+0xb62>
 8003f06:	2004      	movs	r0, #4
 8003f08:	2402      	movs	r4, #2
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2107      	movs	r1, #7
 8003f12:	9102      	str	r1, [sp, #8]
 8003f14:	9201      	str	r2, [sp, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	462b      	mov	r3, r5
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	4806      	ldr	r0, [pc, #24]	@ (8003f38 <PIN_Setup+0x7c8>)
 8003f20:	f7ff f81c 	bl	8002f5c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003f24:	e1d5      	b.n	80042d2 <PIN_Setup+0xb62>
 8003f26:	bf00      	nop
 8003f28:	40004800 	.word	0x40004800
 8003f2c:	200006c4 	.word	0x200006c4
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40020400 	.word	0x40020400
 8003f38:	40020c00 	.word	0x40020c00
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7a1b      	ldrb	r3, [r3, #8]
 8003f40:	2206      	movs	r2, #6
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00a      	beq.n	8003f5c <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d005      	beq.n	8003f5c <PIN_Setup+0x7ec>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7a1b      	ldrb	r3, [r3, #8]
 8003f54:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003f56:	4293      	cmp	r3, r2
 8003f58:	f040 81bc 	bne.w	80042d4 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7a5b      	ldrb	r3, [r3, #9]
 8003f60:	220b      	movs	r2, #11
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10f      	bne.n	8003f86 <PIN_Setup+0x816>
 8003f66:	200b      	movs	r0, #11
 8003f68:	2402      	movs	r4, #2
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2107      	movs	r1, #7
 8003f72:	9102      	str	r1, [sp, #8]
 8003f74:	9201      	str	r2, [sp, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	462b      	mov	r3, r5
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	4601      	mov	r1, r0
 8003f7e:	4883      	ldr	r0, [pc, #524]	@ (800418c <PIN_Setup+0xa1c>)
 8003f80:	f7fe ffec 	bl	8002f5c <GPIO_Pin_Init>
 8003f84:	e028      	b.n	8003fd8 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7a5b      	ldrb	r3, [r3, #9]
 8003f8a:	220a      	movs	r2, #10
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10f      	bne.n	8003fb0 <PIN_Setup+0x840>
 8003f90:	200a      	movs	r0, #10
 8003f92:	2402      	movs	r4, #2
 8003f94:	2500      	movs	r5, #0
 8003f96:	2302      	movs	r3, #2
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2107      	movs	r1, #7
 8003f9c:	9102      	str	r1, [sp, #8]
 8003f9e:	9201      	str	r2, [sp, #4]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4879      	ldr	r0, [pc, #484]	@ (8004190 <PIN_Setup+0xa20>)
 8003faa:	f7fe ffd7 	bl	8002f5c <GPIO_Pin_Init>
 8003fae:	e013      	b.n	8003fd8 <PIN_Setup+0x868>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7a5b      	ldrb	r3, [r3, #9]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10e      	bne.n	8003fd8 <PIN_Setup+0x868>
 8003fba:	2008      	movs	r0, #8
 8003fbc:	2402      	movs	r4, #2
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2107      	movs	r1, #7
 8003fc6:	9102      	str	r1, [sp, #8]
 8003fc8:	9201      	str	r2, [sp, #4]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	462b      	mov	r3, r5
 8003fce:	4622      	mov	r2, r4
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	486f      	ldr	r0, [pc, #444]	@ (8004190 <PIN_Setup+0xa20>)
 8003fd4:	f7fe ffc2 	bl	8002f5c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7adb      	ldrb	r3, [r3, #11]
 8003fdc:	220c      	movs	r2, #12
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10f      	bne.n	8004002 <PIN_Setup+0x892>
 8003fe2:	200c      	movs	r0, #12
 8003fe4:	2402      	movs	r4, #2
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	2302      	movs	r3, #2
 8003fea:	2200      	movs	r2, #0
 8003fec:	2107      	movs	r1, #7
 8003fee:	9102      	str	r1, [sp, #8]
 8003ff0:	9201      	str	r2, [sp, #4]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	4865      	ldr	r0, [pc, #404]	@ (8004190 <PIN_Setup+0xa20>)
 8003ffc:	f7fe ffae 	bl	8002f5c <GPIO_Pin_Init>
}
 8004000:	e168      	b.n	80042d4 <PIN_Setup+0xb64>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7adb      	ldrb	r3, [r3, #11]
 8004006:	220a      	movs	r2, #10
 8004008:	4293      	cmp	r3, r2
 800400a:	f040 8163 	bne.w	80042d4 <PIN_Setup+0xb64>
 800400e:	200a      	movs	r0, #10
 8004010:	2402      	movs	r4, #2
 8004012:	2500      	movs	r5, #0
 8004014:	2302      	movs	r3, #2
 8004016:	2200      	movs	r2, #0
 8004018:	2107      	movs	r1, #7
 800401a:	9102      	str	r1, [sp, #8]
 800401c:	9201      	str	r2, [sp, #4]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	462b      	mov	r3, r5
 8004022:	4622      	mov	r2, r4
 8004024:	4601      	mov	r1, r0
 8004026:	485b      	ldr	r0, [pc, #364]	@ (8004194 <PIN_Setup+0xa24>)
 8004028:	f7fe ff98 	bl	8002f5c <GPIO_Pin_Init>
}
 800402c:	e152      	b.n	80042d4 <PIN_Setup+0xb64>
	else if(config -> Port == UART4)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a59      	ldr	r2, [pc, #356]	@ (8004198 <PIN_Setup+0xa28>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d166      	bne.n	8004106 <PIN_Setup+0x996>
		__usart_4_config__ = config;
 8004038:	4a58      	ldr	r2, [pc, #352]	@ (800419c <PIN_Setup+0xa2c>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7a1b      	ldrb	r3, [r3, #8]
 8004042:	2201      	movs	r2, #1
 8004044:	4293      	cmp	r3, r2
 8004046:	d00a      	beq.n	800405e <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7a1b      	ldrb	r3, [r3, #8]
 800404c:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800404e:	4293      	cmp	r3, r2
 8004050:	d005      	beq.n	800405e <PIN_Setup+0x8ee>
				(config->mode == USART_Configuration.Mode.LIN))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7a1b      	ldrb	r3, [r3, #8]
 8004056:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 813b 	bne.w	80042d4 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7a5b      	ldrb	r3, [r3, #9]
 8004062:	2200      	movs	r2, #0
 8004064:	4293      	cmp	r3, r2
 8004066:	d10f      	bne.n	8004088 <PIN_Setup+0x918>
 8004068:	2000      	movs	r0, #0
 800406a:	2402      	movs	r4, #2
 800406c:	2500      	movs	r5, #0
 800406e:	2302      	movs	r3, #2
 8004070:	2200      	movs	r2, #0
 8004072:	2108      	movs	r1, #8
 8004074:	9102      	str	r1, [sp, #8]
 8004076:	9201      	str	r2, [sp, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	462b      	mov	r3, r5
 800407c:	4622      	mov	r2, r4
 800407e:	4601      	mov	r1, r0
 8004080:	4842      	ldr	r0, [pc, #264]	@ (800418c <PIN_Setup+0xa1c>)
 8004082:	f7fe ff6b 	bl	8002f5c <GPIO_Pin_Init>
 8004086:	e013      	b.n	80040b0 <PIN_Setup+0x940>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7a5b      	ldrb	r3, [r3, #9]
 800408c:	220a      	movs	r2, #10
 800408e:	4293      	cmp	r3, r2
 8004090:	d10e      	bne.n	80040b0 <PIN_Setup+0x940>
 8004092:	200a      	movs	r0, #10
 8004094:	2402      	movs	r4, #2
 8004096:	2500      	movs	r5, #0
 8004098:	2302      	movs	r3, #2
 800409a:	2200      	movs	r2, #0
 800409c:	2108      	movs	r1, #8
 800409e:	9102      	str	r1, [sp, #8]
 80040a0:	9201      	str	r2, [sp, #4]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	462b      	mov	r3, r5
 80040a6:	4622      	mov	r2, r4
 80040a8:	4601      	mov	r1, r0
 80040aa:	483d      	ldr	r0, [pc, #244]	@ (80041a0 <PIN_Setup+0xa30>)
 80040ac:	f7fe ff56 	bl	8002f5c <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7a9b      	ldrb	r3, [r3, #10]
 80040b4:	2201      	movs	r2, #1
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10f      	bne.n	80040da <PIN_Setup+0x96a>
 80040ba:	2001      	movs	r0, #1
 80040bc:	2402      	movs	r4, #2
 80040be:	2500      	movs	r5, #0
 80040c0:	2302      	movs	r3, #2
 80040c2:	2200      	movs	r2, #0
 80040c4:	2108      	movs	r1, #8
 80040c6:	9102      	str	r1, [sp, #8]
 80040c8:	9201      	str	r2, [sp, #4]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	462b      	mov	r3, r5
 80040ce:	4622      	mov	r2, r4
 80040d0:	4601      	mov	r1, r0
 80040d2:	482e      	ldr	r0, [pc, #184]	@ (800418c <PIN_Setup+0xa1c>)
 80040d4:	f7fe ff42 	bl	8002f5c <GPIO_Pin_Init>
}
 80040d8:	e0fc      	b.n	80042d4 <PIN_Setup+0xb64>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7a9b      	ldrb	r3, [r3, #10]
 80040de:	220b      	movs	r2, #11
 80040e0:	4293      	cmp	r3, r2
 80040e2:	f040 80f7 	bne.w	80042d4 <PIN_Setup+0xb64>
 80040e6:	200b      	movs	r0, #11
 80040e8:	2402      	movs	r4, #2
 80040ea:	2500      	movs	r5, #0
 80040ec:	2302      	movs	r3, #2
 80040ee:	2200      	movs	r2, #0
 80040f0:	2108      	movs	r1, #8
 80040f2:	9102      	str	r1, [sp, #8]
 80040f4:	9201      	str	r2, [sp, #4]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	462b      	mov	r3, r5
 80040fa:	4622      	mov	r2, r4
 80040fc:	4601      	mov	r1, r0
 80040fe:	4828      	ldr	r0, [pc, #160]	@ (80041a0 <PIN_Setup+0xa30>)
 8004100:	f7fe ff2c 	bl	8002f5c <GPIO_Pin_Init>
}
 8004104:	e0e6      	b.n	80042d4 <PIN_Setup+0xb64>
	else if(config -> Port == UART5)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <PIN_Setup+0xa34>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d14d      	bne.n	80041ac <PIN_Setup+0xa3c>
		__usart_5_config__ = config;
 8004110:	4a25      	ldr	r2, [pc, #148]	@ (80041a8 <PIN_Setup+0xa38>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6013      	str	r3, [r2, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7a1b      	ldrb	r3, [r3, #8]
 800411a:	2201      	movs	r2, #1
 800411c:	4293      	cmp	r3, r2
 800411e:	d00a      	beq.n	8004136 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7a1b      	ldrb	r3, [r3, #8]
 8004124:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8004126:	4293      	cmp	r3, r2
 8004128:	d005      	beq.n	8004136 <PIN_Setup+0x9c6>
				(config->mode == USART_Configuration.Mode.LIN))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7a1b      	ldrb	r3, [r3, #8]
 800412e:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8004130:	4293      	cmp	r3, r2
 8004132:	f040 80cf 	bne.w	80042d4 <PIN_Setup+0xb64>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7a5b      	ldrb	r3, [r3, #9]
 800413a:	2202      	movs	r2, #2
 800413c:	4293      	cmp	r3, r2
 800413e:	d10e      	bne.n	800415e <PIN_Setup+0x9ee>
 8004140:	2002      	movs	r0, #2
 8004142:	2402      	movs	r4, #2
 8004144:	2500      	movs	r5, #0
 8004146:	2302      	movs	r3, #2
 8004148:	2200      	movs	r2, #0
 800414a:	2108      	movs	r1, #8
 800414c:	9102      	str	r1, [sp, #8]
 800414e:	9201      	str	r2, [sp, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	462b      	mov	r3, r5
 8004154:	4622      	mov	r2, r4
 8004156:	4601      	mov	r1, r0
 8004158:	480c      	ldr	r0, [pc, #48]	@ (800418c <PIN_Setup+0xa1c>)
 800415a:	f7fe feff 	bl	8002f5c <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7a9b      	ldrb	r3, [r3, #10]
 8004162:	220c      	movs	r2, #12
 8004164:	4293      	cmp	r3, r2
 8004166:	f040 80b5 	bne.w	80042d4 <PIN_Setup+0xb64>
 800416a:	200c      	movs	r0, #12
 800416c:	2402      	movs	r4, #2
 800416e:	2500      	movs	r5, #0
 8004170:	2302      	movs	r3, #2
 8004172:	2200      	movs	r2, #0
 8004174:	2108      	movs	r1, #8
 8004176:	9102      	str	r1, [sp, #8]
 8004178:	9201      	str	r2, [sp, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	462b      	mov	r3, r5
 800417e:	4622      	mov	r2, r4
 8004180:	4601      	mov	r1, r0
 8004182:	4802      	ldr	r0, [pc, #8]	@ (800418c <PIN_Setup+0xa1c>)
 8004184:	f7fe feea 	bl	8002f5c <GPIO_Pin_Init>
}
 8004188:	e0a4      	b.n	80042d4 <PIN_Setup+0xb64>
 800418a:	bf00      	nop
 800418c:	40020000 	.word	0x40020000
 8004190:	40020400 	.word	0x40020400
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40004c00 	.word	0x40004c00
 800419c:	200006c8 	.word	0x200006c8
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40005000 	.word	0x40005000
 80041a8:	200006cc 	.word	0x200006cc
	else if(config->Port == USART6)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	@ (80042dc <PIN_Setup+0xb6c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	f040 808e 	bne.w	80042d4 <PIN_Setup+0xb64>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7a1b      	ldrb	r3, [r3, #8]
 80041bc:	2201      	movs	r2, #1
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7a1b      	ldrb	r3, [r3, #8]
 80041c6:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7a1b      	ldrb	r3, [r3, #8]
 80041d0:	2204      	movs	r2, #4
				(config->mode == USART_Configuration.Mode.Synchronous) ||
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <PIN_Setup+0xa70>
				(config->mode == USART_Configuration.Mode.LIN) )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	7a1b      	ldrb	r3, [r3, #8]
 80041da:	2205      	movs	r2, #5
				(config->mode == USART_Configuration.Mode.IrDA) ||
 80041dc:	4293      	cmp	r3, r2
 80041de:	d13c      	bne.n	800425a <PIN_Setup+0xaea>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7a5b      	ldrb	r3, [r3, #9]
 80041e4:	2206      	movs	r2, #6
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10e      	bne.n	8004208 <PIN_Setup+0xa98>
 80041ea:	2006      	movs	r0, #6
 80041ec:	2402      	movs	r4, #2
 80041ee:	2500      	movs	r5, #0
 80041f0:	2302      	movs	r3, #2
 80041f2:	2200      	movs	r2, #0
 80041f4:	2108      	movs	r1, #8
 80041f6:	9102      	str	r1, [sp, #8]
 80041f8:	9201      	str	r2, [sp, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	462b      	mov	r3, r5
 80041fe:	4622      	mov	r2, r4
 8004200:	4601      	mov	r1, r0
 8004202:	4837      	ldr	r0, [pc, #220]	@ (80042e0 <PIN_Setup+0xb70>)
 8004204:	f7fe feaa 	bl	8002f5c <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7a9b      	ldrb	r3, [r3, #10]
 800420c:	2207      	movs	r2, #7
 800420e:	4293      	cmp	r3, r2
 8004210:	d10e      	bne.n	8004230 <PIN_Setup+0xac0>
 8004212:	2007      	movs	r0, #7
 8004214:	2402      	movs	r4, #2
 8004216:	2500      	movs	r5, #0
 8004218:	2302      	movs	r3, #2
 800421a:	2200      	movs	r2, #0
 800421c:	2108      	movs	r1, #8
 800421e:	9102      	str	r1, [sp, #8]
 8004220:	9201      	str	r2, [sp, #4]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	462b      	mov	r3, r5
 8004226:	4622      	mov	r2, r4
 8004228:	4601      	mov	r1, r0
 800422a:	482d      	ldr	r0, [pc, #180]	@ (80042e0 <PIN_Setup+0xb70>)
 800422c:	f7fe fe96 	bl	8002f5c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7adb      	ldrb	r3, [r3, #11]
 8004234:	2208      	movs	r2, #8
 8004236:	4293      	cmp	r3, r2
 8004238:	d14c      	bne.n	80042d4 <PIN_Setup+0xb64>
 800423a:	2008      	movs	r0, #8
 800423c:	2402      	movs	r4, #2
 800423e:	2500      	movs	r5, #0
 8004240:	2302      	movs	r3, #2
 8004242:	2200      	movs	r2, #0
 8004244:	2108      	movs	r1, #8
 8004246:	9102      	str	r1, [sp, #8]
 8004248:	9201      	str	r2, [sp, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	462b      	mov	r3, r5
 800424e:	4622      	mov	r2, r4
 8004250:	4601      	mov	r1, r0
 8004252:	4823      	ldr	r0, [pc, #140]	@ (80042e0 <PIN_Setup+0xb70>)
 8004254:	f7fe fe82 	bl	8002f5c <GPIO_Pin_Init>
 8004258:	e03c      	b.n	80042d4 <PIN_Setup+0xb64>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7a1b      	ldrb	r3, [r3, #8]
 800425e:	2206      	movs	r2, #6
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7a1b      	ldrb	r3, [r3, #8]
 8004268:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <PIN_Setup+0xb08>
				(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7a1b      	ldrb	r3, [r3, #8]
 8004272:	2203      	movs	r2, #3
				(config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d12d      	bne.n	80042d4 <PIN_Setup+0xb64>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7a5b      	ldrb	r3, [r3, #9]
 800427c:	2206      	movs	r2, #6
 800427e:	4293      	cmp	r3, r2
 8004280:	d10e      	bne.n	80042a0 <PIN_Setup+0xb30>
 8004282:	2006      	movs	r0, #6
 8004284:	2402      	movs	r4, #2
 8004286:	2500      	movs	r5, #0
 8004288:	2302      	movs	r3, #2
 800428a:	2200      	movs	r2, #0
 800428c:	2108      	movs	r1, #8
 800428e:	9102      	str	r1, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	462b      	mov	r3, r5
 8004296:	4622      	mov	r2, r4
 8004298:	4601      	mov	r1, r0
 800429a:	4812      	ldr	r0, [pc, #72]	@ (80042e4 <PIN_Setup+0xb74>)
 800429c:	f7fe fe5e 	bl	8002f5c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7a1b      	ldrb	r3, [r3, #8]
 80042a4:	2207      	movs	r2, #7
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d114      	bne.n	80042d4 <PIN_Setup+0xb64>
 80042aa:	2008      	movs	r0, #8
 80042ac:	2402      	movs	r4, #2
 80042ae:	2500      	movs	r5, #0
 80042b0:	2302      	movs	r3, #2
 80042b2:	2200      	movs	r2, #0
 80042b4:	2108      	movs	r1, #8
 80042b6:	9102      	str	r1, [sp, #8]
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	462b      	mov	r3, r5
 80042be:	4622      	mov	r2, r4
 80042c0:	4601      	mov	r1, r0
 80042c2:	4808      	ldr	r0, [pc, #32]	@ (80042e4 <PIN_Setup+0xb74>)
 80042c4:	f7fe fe4a 	bl	8002f5c <GPIO_Pin_Init>
}
 80042c8:	e004      	b.n	80042d4 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <PIN_Setup+0xb64>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <PIN_Setup+0xb64>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80042d2:	bf00      	nop
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	40011400 	.word	0x40011400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020000 	.word	0x40020000

080042e8 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b08e      	sub	sp, #56	@ 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff f9d9 	bl	80036a8 <USART_Clock_Enable>
	PIN_Setup(config);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fa3a 	bl	8003770 <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff f973 	bl	80035e8 <USART_Get_Instance_Number>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	4b74      	ldr	r3, [pc, #464]	@ (80044d8 <USART_Init+0x1f0>)
 8004308:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 800430a:	4b73      	ldr	r3, [pc, #460]	@ (80044d8 <USART_Init+0x1f0>)
 800430c:	f993 3000 	ldrsb.w	r3, [r3]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d103      	bne.n	800431e <USART_Init+0x36>
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	f000 bc26 	b.w	8004b6a <USART_Init+0x882>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if((config -> Port == USART1) || (config -> Port == USART6))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6e      	ldr	r2, [pc, #440]	@ (80044dc <USART_Init+0x1f4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <USART_Init+0x4a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6c      	ldr	r2, [pc, #432]	@ (80044e0 <USART_Init+0x1f8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d150      	bne.n	80043d4 <USART_Init+0xec>
	{
		uint32_t freq = SystemAPB2_Clock_Speed();
 8004332:	f7fe ff1b 	bl	800316c <SystemAPB2_Clock_Speed>
 8004336:	4603      	mov	r3, r0
 8004338:	61fb      	str	r3, [r7, #28]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 800433a:	69f8      	ldr	r0, [r7, #28]
 800433c:	f7fc f886 	bl	800044c <__aeabi_ui2d>
 8004340:	4604      	mov	r4, r0
 8004342:	460d      	mov	r5, r1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f87f 	bl	800044c <__aeabi_ui2d>
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	4b64      	ldr	r3, [pc, #400]	@ (80044e4 <USART_Init+0x1fc>)
 8004354:	f7fc f8f4 	bl	8000540 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fc fa18 	bl	8000794 <__aeabi_ddiv>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 800436c:	f107 0208 	add.w	r2, r7, #8
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	ed97 0b08 	vldr	d0, [r7, #32]
 800437c:	f7fe ff0e 	bl	800319c <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 8004380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	4b57      	ldr	r3, [pc, #348]	@ (80044e8 <USART_Init+0x200>)
 800438a:	f7fc f8d9 	bl	8000540 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	ec43 2b17 	vmov	d7, r2, r3
 8004396:	eeb0 0a47 	vmov.f32	s0, s14
 800439a:	eef0 0a67 	vmov.f32	s1, s15
 800439e:	f001 fb8f 	bl	8005ac0 <ceil>
 80043a2:	ec53 2b10 	vmov	r2, r3, d0
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f7fc fb63 	bl	8000a74 <__aeabi_d2iz>
 80043ae:	4603      	mov	r3, r0
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 80043b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80043b6:	eeb0 0a47 	vmov.f32	s0, s14
 80043ba:	eef0 0a67 	vmov.f32	s1, s15
 80043be:	f001 fb7f 	bl	8005ac0 <ceil>
 80043c2:	ec53 2b10 	vmov	r2, r3, d0
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fc fb53 	bl	8000a74 <__aeabi_d2iz>
 80043ce:	4603      	mov	r3, r0
 80043d0:	633b      	str	r3, [r7, #48]	@ 0x30
	{
 80043d2:	e04f      	b.n	8004474 <USART_Init+0x18c>
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
 80043d4:	f7fe feb2 	bl	800313c <SystemAPB1_Clock_Speed>
 80043d8:	4603      	mov	r3, r0
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 80043dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043de:	f7fc f835 	bl	800044c <__aeabi_ui2d>
 80043e2:	4604      	mov	r4, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f82e 	bl	800044c <__aeabi_ui2d>
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <USART_Init+0x200>)
 80043f6:	f7fc f8a3 	bl	8000540 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4620      	mov	r0, r4
 8004400:	4629      	mov	r1, r5
 8004402:	f7fc f9c7 	bl	8000794 <__aeabi_ddiv>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
 800440e:	f107 0208 	add.w	r2, r7, #8
 8004412:	f107 0310 	add.w	r3, r7, #16
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	ed97 0b08 	vldr	d0, [r7, #32]
 800441e:	f7fe febd 	bl	800319c <separateFractionAndIntegral>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 8004422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	4b2f      	ldr	r3, [pc, #188]	@ (80044e8 <USART_Init+0x200>)
 800442c:	f7fc f888 	bl	8000540 <__aeabi_dmul>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	ec43 2b17 	vmov	d7, r2, r3
 8004438:	eeb0 0a47 	vmov.f32	s0, s14
 800443c:	eef0 0a67 	vmov.f32	s1, s15
 8004440:	f001 fb3e 	bl	8005ac0 <ceil>
 8004444:	ec53 2b10 	vmov	r2, r3, d0
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	f7fc fb12 	bl	8000a74 <__aeabi_d2iz>
 8004450:	4603      	mov	r3, r0
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
		mantissa_1 = (int)(ceil(mantissa));
 8004454:	ed97 7b02 	vldr	d7, [r7, #8]
 8004458:	eeb0 0a47 	vmov.f32	s0, s14
 800445c:	eef0 0a67 	vmov.f32	s1, s15
 8004460:	f001 fb2e 	bl	8005ac0 <ceil>
 8004464:	ec53 2b10 	vmov	r2, r3, d0
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	f7fc fb02 	bl	8000a74 <__aeabi_d2iz>
 8004470:	4603      	mov	r3, r0
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30

	}

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	011a      	lsls	r2, r3, #4
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity ;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7c9b      	ldrb	r3, [r3, #18]
 800448c:	4619      	mov	r1, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7b9b      	ldrb	r3, [r3, #14]
 800449a:	461a      	mov	r2, r3
 800449c:	2300      	movs	r3, #0
 800449e:	429a      	cmp	r2, r3
 80044a0:	d124      	bne.n	80044ec <USART_Init+0x204>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 80044b0:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c0:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	6153      	str	r3, [r2, #20]
 80044d6:	e0c8      	b.n	800466a <USART_Init+0x382>
 80044d8:	200006b8 	.word	0x200006b8
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	40400000 	.word	0x40400000
 80044e8:	40300000 	.word	0x40300000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7b9b      	ldrb	r3, [r3, #14]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044f6:	4013      	ands	r3, r2
 80044f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d107      	bne.n	8004510 <USART_Init+0x228>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450e:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7b9b      	ldrb	r3, [r3, #14]
 8004514:	461a      	mov	r2, r3
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	4013      	ands	r3, r2
 800451a:	2280      	movs	r2, #128	@ 0x80
 800451c:	4293      	cmp	r3, r2
 800451e:	d107      	bne.n	8004530 <USART_Init+0x248>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800452e:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7b9b      	ldrb	r3, [r3, #14]
 8004534:	461a      	mov	r2, r3
 8004536:	2340      	movs	r3, #64	@ 0x40
 8004538:	4013      	ands	r3, r2
 800453a:	2240      	movs	r2, #64	@ 0x40
 800453c:	4293      	cmp	r3, r2
 800453e:	d107      	bne.n	8004550 <USART_Init+0x268>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800454e:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7b9b      	ldrb	r3, [r3, #14]
 8004554:	461a      	mov	r2, r3
 8004556:	2320      	movs	r3, #32
 8004558:	4013      	ands	r3, r2
 800455a:	2220      	movs	r2, #32
 800455c:	4293      	cmp	r3, r2
 800455e:	d107      	bne.n	8004570 <USART_Init+0x288>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0220 	orr.w	r2, r2, #32
 800456e:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7b9b      	ldrb	r3, [r3, #14]
 8004574:	461a      	mov	r2, r3
 8004576:	2310      	movs	r3, #16
 8004578:	4013      	ands	r3, r2
 800457a:	2210      	movs	r2, #16
 800457c:	4293      	cmp	r3, r2
 800457e:	d107      	bne.n	8004590 <USART_Init+0x2a8>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0210 	orr.w	r2, r2, #16
 800458e:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7b9b      	ldrb	r3, [r3, #14]
 8004594:	461a      	mov	r2, r3
 8004596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800459a:	4013      	ands	r3, r2
 800459c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d107      	bne.n	80045b4 <USART_Init+0x2cc>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b2:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7b9b      	ldrb	r3, [r3, #14]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045be:	4013      	ands	r3, r2
 80045c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d107      	bne.n	80045d8 <USART_Init+0x2f0>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d6:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7b9b      	ldrb	r3, [r3, #14]
 80045dc:	461a      	mov	r2, r3
 80045de:	2301      	movs	r3, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	2201      	movs	r2, #1
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d107      	bne.n	80045f8 <USART_Init+0x310>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4aa4      	ldr	r2, [pc, #656]	@ (8004890 <USART_Init+0x5a8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d107      	bne.n	8004612 <USART_Init+0x32a>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 8004602:	2100      	movs	r1, #0
 8004604:	2025      	movs	r0, #37	@ 0x25
 8004606:	f7fe fd6f 	bl	80030e8 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 800460a:	2025      	movs	r0, #37	@ 0x25
 800460c:	f7fe fd4e 	bl	80030ac <__NVIC_EnableIRQ>
 8004610:	e02b      	b.n	800466a <USART_Init+0x382>
		}
		else if(config -> Port == USART2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a9f      	ldr	r2, [pc, #636]	@ (8004894 <USART_Init+0x5ac>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <USART_Init+0x33c>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800461c:	2026      	movs	r0, #38	@ 0x26
 800461e:	f7fe fd45 	bl	80030ac <__NVIC_EnableIRQ>
 8004622:	e022      	b.n	800466a <USART_Init+0x382>
		}
		else if(config -> Port == USART3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a9b      	ldr	r2, [pc, #620]	@ (8004898 <USART_Init+0x5b0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d103      	bne.n	8004636 <USART_Init+0x34e>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 800462e:	2027      	movs	r0, #39	@ 0x27
 8004630:	f7fe fd3c 	bl	80030ac <__NVIC_EnableIRQ>
 8004634:	e019      	b.n	800466a <USART_Init+0x382>
		}
		else if(config -> Port == UART4)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a98      	ldr	r2, [pc, #608]	@ (800489c <USART_Init+0x5b4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <USART_Init+0x360>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 8004640:	2034      	movs	r0, #52	@ 0x34
 8004642:	f7fe fd33 	bl	80030ac <__NVIC_EnableIRQ>
 8004646:	e010      	b.n	800466a <USART_Init+0x382>
		}
		else if(config -> Port == UART5)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a94      	ldr	r2, [pc, #592]	@ (80048a0 <USART_Init+0x5b8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d103      	bne.n	800465a <USART_Init+0x372>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 8004652:	2035      	movs	r0, #53	@ 0x35
 8004654:	f7fe fd2a 	bl	80030ac <__NVIC_EnableIRQ>
 8004658:	e007      	b.n	800466a <USART_Init+0x382>
		}
		else if(config -> Port == USART6)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a91      	ldr	r2, [pc, #580]	@ (80048a4 <USART_Init+0x5bc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <USART_Init+0x382>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004664:	2047      	movs	r0, #71	@ 0x47
 8004666:	f7fe fd21 	bl	80030ac <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7c1b      	ldrb	r3, [r3, #16]
 8004674:	4619      	mov	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7c5b      	ldrb	r3, [r3, #17]
 8004682:	2202      	movs	r2, #2
 8004684:	4013      	ands	r3, r2
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2202      	movs	r2, #2
 800468a:	4293      	cmp	r3, r2
 800468c:	f040 811e 	bne.w	80048cc <USART_Init+0x5e4>
	{


		if(config->Port == USART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7e      	ldr	r2, [pc, #504]	@ (8004890 <USART_Init+0x5a8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10e      	bne.n	80046b8 <USART_Init+0x3d0>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 800469a:	4a83      	ldr	r2, [pc, #524]	@ (80048a8 <USART_Init+0x5c0>)
 800469c:	4b83      	ldr	r3, [pc, #524]	@ (80048ac <USART_Init+0x5c4>)
 800469e:	4614      	mov	r4, r2
 80046a0:	33c0      	adds	r3, #192	@ 0xc0
 80046a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80046aa:	2210      	movs	r2, #16
 80046ac:	4b7e      	ldr	r3, [pc, #504]	@ (80048a8 <USART_Init+0x5c0>)
 80046ae:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 80046b0:	4b7d      	ldr	r3, [pc, #500]	@ (80048a8 <USART_Init+0x5c0>)
 80046b2:	4a7f      	ldr	r2, [pc, #508]	@ (80048b0 <USART_Init+0x5c8>)
 80046b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046b6:	e067      	b.n	8004788 <USART_Init+0x4a0>
		}
		else if(config->Port == USART2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a75      	ldr	r2, [pc, #468]	@ (8004894 <USART_Init+0x5ac>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10e      	bne.n	80046e0 <USART_Init+0x3f8>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 80046c2:	4b79      	ldr	r3, [pc, #484]	@ (80048a8 <USART_Init+0x5c0>)
 80046c4:	4a79      	ldr	r2, [pc, #484]	@ (80048ac <USART_Init+0x5c4>)
 80046c6:	3358      	adds	r3, #88	@ 0x58
 80046c8:	32d8      	adds	r2, #216	@ 0xd8
 80046ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80046cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80046d0:	2210      	movs	r2, #16
 80046d2:	4b75      	ldr	r3, [pc, #468]	@ (80048a8 <USART_Init+0x5c0>)
 80046d4:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 80046d6:	4b74      	ldr	r3, [pc, #464]	@ (80048a8 <USART_Init+0x5c0>)
 80046d8:	4a76      	ldr	r2, [pc, #472]	@ (80048b4 <USART_Init+0x5cc>)
 80046da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80046de:	e053      	b.n	8004788 <USART_Init+0x4a0>
		}
		else if(config->Port == USART3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004898 <USART_Init+0x5b0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10f      	bne.n	800470a <USART_Init+0x422>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 80046ea:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <USART_Init+0x5c0>)
 80046ec:	4a6f      	ldr	r2, [pc, #444]	@ (80048ac <USART_Init+0x5c4>)
 80046ee:	33b0      	adds	r3, #176	@ 0xb0
 80046f0:	32f0      	adds	r2, #240	@ 0xf0
 80046f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80046f8:	2210      	movs	r2, #16
 80046fa:	4b6b      	ldr	r3, [pc, #428]	@ (80048a8 <USART_Init+0x5c0>)
 80046fc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 8004700:	4b69      	ldr	r3, [pc, #420]	@ (80048a8 <USART_Init+0x5c0>)
 8004702:	4a6d      	ldr	r2, [pc, #436]	@ (80048b8 <USART_Init+0x5d0>)
 8004704:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8004708:	e03e      	b.n	8004788 <USART_Init+0x4a0>
		}
		else if(config->Port == UART4)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a63      	ldr	r2, [pc, #396]	@ (800489c <USART_Init+0x5b4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d111      	bne.n	8004738 <USART_Init+0x450>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8004714:	4b64      	ldr	r3, [pc, #400]	@ (80048a8 <USART_Init+0x5c0>)
 8004716:	4a65      	ldr	r2, [pc, #404]	@ (80048ac <USART_Init+0x5c4>)
 8004718:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800471c:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8004720:	ca07      	ldmia	r2, {r0, r1, r2}
 8004722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004726:	2210      	movs	r2, #16
 8004728:	4b5f      	ldr	r3, [pc, #380]	@ (80048a8 <USART_Init+0x5c0>)
 800472a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 800472e:	4b5e      	ldr	r3, [pc, #376]	@ (80048a8 <USART_Init+0x5c0>)
 8004730:	4a62      	ldr	r2, [pc, #392]	@ (80048bc <USART_Init+0x5d4>)
 8004732:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004736:	e027      	b.n	8004788 <USART_Init+0x4a0>
		}
		else if(config->Port == UART5)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a58      	ldr	r2, [pc, #352]	@ (80048a0 <USART_Init+0x5b8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d111      	bne.n	8004766 <USART_Init+0x47e>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 8004742:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <USART_Init+0x5c0>)
 8004744:	4a59      	ldr	r2, [pc, #356]	@ (80048ac <USART_Init+0x5c4>)
 8004746:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800474a:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 800474e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004750:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004754:	2210      	movs	r2, #16
 8004756:	4b54      	ldr	r3, [pc, #336]	@ (80048a8 <USART_Init+0x5c0>)
 8004758:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 800475c:	4b52      	ldr	r3, [pc, #328]	@ (80048a8 <USART_Init+0x5c0>)
 800475e:	4a58      	ldr	r2, [pc, #352]	@ (80048c0 <USART_Init+0x5d8>)
 8004760:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8004764:	e010      	b.n	8004788 <USART_Init+0x4a0>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8004766:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <USART_Init+0x5c0>)
 8004768:	4a50      	ldr	r2, [pc, #320]	@ (80048ac <USART_Init+0x5c4>)
 800476a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800476e:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 8004772:	ca07      	ldmia	r2, {r0, r1, r2}
 8004774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004778:	2210      	movs	r2, #16
 800477a:	4b4b      	ldr	r3, [pc, #300]	@ (80048a8 <USART_Init+0x5c0>)
 800477c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 8004780:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <USART_Init+0x5c0>)
 8004782:	4a50      	ldr	r2, [pc, #320]	@ (80048c4 <USART_Init+0x5dc>)
 8004784:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004788:	4b4f      	ldr	r3, [pc, #316]	@ (80048c8 <USART_Init+0x5e0>)
 800478a:	f993 3000 	ldrsb.w	r3, [r3]
 800478e:	4618      	mov	r0, r3
 8004790:	2200      	movs	r2, #0
 8004792:	4945      	ldr	r1, [pc, #276]	@ (80048a8 <USART_Init+0x5c0>)
 8004794:	2358      	movs	r3, #88	@ 0x58
 8004796:	fb00 f303 	mul.w	r3, r0, r3
 800479a:	440b      	add	r3, r1
 800479c:	3318      	adds	r3, #24
 800479e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80047a0:	4b49      	ldr	r3, [pc, #292]	@ (80048c8 <USART_Init+0x5e0>)
 80047a2:	f993 3000 	ldrsb.w	r3, [r3]
 80047a6:	4618      	mov	r0, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	493f      	ldr	r1, [pc, #252]	@ (80048a8 <USART_Init+0x5c0>)
 80047ac:	2358      	movs	r3, #88	@ 0x58
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	440b      	add	r3, r1
 80047b4:	330c      	adds	r3, #12
 80047b6:	601a      	str	r2, [r3, #0]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80047b8:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <USART_Init+0x5e0>)
 80047ba:	f993 3000 	ldrsb.w	r3, [r3]
 80047be:	4618      	mov	r0, r3
 80047c0:	2200      	movs	r2, #0
 80047c2:	4939      	ldr	r1, [pc, #228]	@ (80048a8 <USART_Init+0x5c0>)
 80047c4:	2358      	movs	r3, #88	@ 0x58
 80047c6:	fb00 f303 	mul.w	r3, r0, r3
 80047ca:	440b      	add	r3, r1
 80047cc:	3328      	adds	r3, #40	@ 0x28
 80047ce:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80047d0:	4b3d      	ldr	r3, [pc, #244]	@ (80048c8 <USART_Init+0x5e0>)
 80047d2:	f993 3000 	ldrsb.w	r3, [r3]
 80047d6:	4618      	mov	r0, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	4933      	ldr	r1, [pc, #204]	@ (80048a8 <USART_Init+0x5c0>)
 80047dc:	2358      	movs	r3, #88	@ 0x58
 80047de:	fb00 f303 	mul.w	r3, r0, r3
 80047e2:	440b      	add	r3, r1
 80047e4:	3324      	adds	r3, #36	@ 0x24
 80047e6:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80047e8:	2200      	movs	r2, #0
 80047ea:	4b37      	ldr	r3, [pc, #220]	@ (80048c8 <USART_Init+0x5e0>)
 80047ec:	f993 3000 	ldrsb.w	r3, [r3]
 80047f0:	4618      	mov	r0, r3
 80047f2:	b291      	uxth	r1, r2
 80047f4:	4a2c      	ldr	r2, [pc, #176]	@ (80048a8 <USART_Init+0x5c0>)
 80047f6:	2358      	movs	r3, #88	@ 0x58
 80047f8:	fb00 f303 	mul.w	r3, r0, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3322      	adds	r3, #34	@ 0x22
 8004800:	460a      	mov	r2, r1
 8004802:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004808:	4b2f      	ldr	r3, [pc, #188]	@ (80048c8 <USART_Init+0x5e0>)
 800480a:	f993 3000 	ldrsb.w	r3, [r3]
 800480e:	4618      	mov	r0, r3
 8004810:	b291      	uxth	r1, r2
 8004812:	4a25      	ldr	r2, [pc, #148]	@ (80048a8 <USART_Init+0x5c0>)
 8004814:	2358      	movs	r3, #88	@ 0x58
 8004816:	fb00 f303 	mul.w	r3, r0, r3
 800481a:	4413      	add	r3, r2
 800481c:	3320      	adds	r3, #32
 800481e:	460a      	mov	r2, r1
 8004820:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <USART_Init+0x5e0>)
 8004824:	f993 3000 	ldrsb.w	r3, [r3]
 8004828:	4618      	mov	r0, r3
 800482a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800482e:	491e      	ldr	r1, [pc, #120]	@ (80048a8 <USART_Init+0x5c0>)
 8004830:	2358      	movs	r3, #88	@ 0x58
 8004832:	fb00 f303 	mul.w	r3, r0, r3
 8004836:	440b      	add	r3, r1
 8004838:	3314      	adds	r3, #20
 800483a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 800483c:	4b22      	ldr	r3, [pc, #136]	@ (80048c8 <USART_Init+0x5e0>)
 800483e:	f993 3000 	ldrsb.w	r3, [r3]
 8004842:	4618      	mov	r0, r3
 8004844:	2200      	movs	r2, #0
 8004846:	4918      	ldr	r1, [pc, #96]	@ (80048a8 <USART_Init+0x5c0>)
 8004848:	2358      	movs	r3, #88	@ 0x58
 800484a:	fb00 f303 	mul.w	r3, r0, r3
 800484e:	440b      	add	r3, r1
 8004850:	3310      	adds	r3, #16
 8004852:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8004854:	4b1c      	ldr	r3, [pc, #112]	@ (80048c8 <USART_Init+0x5e0>)
 8004856:	f993 3000 	ldrsb.w	r3, [r3]
 800485a:	4618      	mov	r0, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4912      	ldr	r1, [pc, #72]	@ (80048a8 <USART_Init+0x5c0>)
 8004860:	2258      	movs	r2, #88	@ 0x58
 8004862:	fb00 f202 	mul.w	r2, r0, r2
 8004866:	440a      	add	r2, r1
 8004868:	336c      	adds	r3, #108	@ 0x6c
 800486a:	4611      	mov	r1, r2
 800486c:	2258      	movs	r2, #88	@ 0x58
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f916 	bl	8005aa0 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <USART_Init+0x5e0>)
 8004876:	f993 3000 	ldrsb.w	r3, [r3]
 800487a:	461a      	mov	r2, r3
 800487c:	2358      	movs	r3, #88	@ 0x58
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	4a09      	ldr	r2, [pc, #36]	@ (80048a8 <USART_Init+0x5c0>)
 8004884:	4413      	add	r3, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fe4c 	bl	8002524 <DMA_Init>
 800488c:	e026      	b.n	80048dc <USART_Init+0x5f4>
 800488e:	bf00      	nop
 8004890:	40011000 	.word	0x40011000
 8004894:	40004400 	.word	0x40004400
 8004898:	40004800 	.word	0x40004800
 800489c:	40004c00 	.word	0x40004c00
 80048a0:	40005000 	.word	0x40005000
 80048a4:	40011400 	.word	0x40011400
 80048a8:	20000298 	.word	0x20000298
 80048ac:	08005bd8 	.word	0x08005bd8
 80048b0:	08003201 	.word	0x08003201
 80048b4:	08003231 	.word	0x08003231
 80048b8:	08003261 	.word	0x08003261
 80048bc:	08003291 	.word	0x08003291
 80048c0:	080032c1 	.word	0x080032c1
 80048c4:	080032f1 	.word	0x080032f1
 80048c8:	200006b8 	.word	0x200006b8
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048da:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7c5b      	ldrb	r3, [r3, #17]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2201      	movs	r2, #1
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f040 810b 	bne.w	8004b04 <USART_Init+0x81c>
	{



		if(config->Port == USART1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4aa0      	ldr	r2, [pc, #640]	@ (8004b74 <USART_Init+0x88c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10e      	bne.n	8004916 <USART_Init+0x62e>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 80048f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004b78 <USART_Init+0x890>)
 80048fa:	4ba0      	ldr	r3, [pc, #640]	@ (8004b7c <USART_Init+0x894>)
 80048fc:	4614      	mov	r4, r2
 80048fe:	33cc      	adds	r3, #204	@ 0xcc
 8004900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004908:	2210      	movs	r2, #16
 800490a:	4b9b      	ldr	r3, [pc, #620]	@ (8004b78 <USART_Init+0x890>)
 800490c:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 800490e:	4b9a      	ldr	r3, [pc, #616]	@ (8004b78 <USART_Init+0x890>)
 8004910:	4a9b      	ldr	r2, [pc, #620]	@ (8004b80 <USART_Init+0x898>)
 8004912:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004914:	e067      	b.n	80049e6 <USART_Init+0x6fe>
		}
		else if(config->Port == USART2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a9a      	ldr	r2, [pc, #616]	@ (8004b84 <USART_Init+0x89c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10e      	bne.n	800493e <USART_Init+0x656>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8004920:	4b95      	ldr	r3, [pc, #596]	@ (8004b78 <USART_Init+0x890>)
 8004922:	4a96      	ldr	r2, [pc, #600]	@ (8004b7c <USART_Init+0x894>)
 8004924:	3358      	adds	r3, #88	@ 0x58
 8004926:	32e4      	adds	r2, #228	@ 0xe4
 8004928:	ca07      	ldmia	r2, {r0, r1, r2}
 800492a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800492e:	2210      	movs	r2, #16
 8004930:	4b91      	ldr	r3, [pc, #580]	@ (8004b78 <USART_Init+0x890>)
 8004932:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 8004934:	4b90      	ldr	r3, [pc, #576]	@ (8004b78 <USART_Init+0x890>)
 8004936:	4a94      	ldr	r2, [pc, #592]	@ (8004b88 <USART_Init+0x8a0>)
 8004938:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800493c:	e053      	b.n	80049e6 <USART_Init+0x6fe>
		}
		else if(config->Port == USART3)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a92      	ldr	r2, [pc, #584]	@ (8004b8c <USART_Init+0x8a4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10f      	bne.n	8004968 <USART_Init+0x680>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8004948:	4b8b      	ldr	r3, [pc, #556]	@ (8004b78 <USART_Init+0x890>)
 800494a:	4a8c      	ldr	r2, [pc, #560]	@ (8004b7c <USART_Init+0x894>)
 800494c:	33b0      	adds	r3, #176	@ 0xb0
 800494e:	32fc      	adds	r2, #252	@ 0xfc
 8004950:	ca07      	ldmia	r2, {r0, r1, r2}
 8004952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004956:	2210      	movs	r2, #16
 8004958:	4b87      	ldr	r3, [pc, #540]	@ (8004b78 <USART_Init+0x890>)
 800495a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 800495e:	4b86      	ldr	r3, [pc, #536]	@ (8004b78 <USART_Init+0x890>)
 8004960:	4a8b      	ldr	r2, [pc, #556]	@ (8004b90 <USART_Init+0x8a8>)
 8004962:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8004966:	e03e      	b.n	80049e6 <USART_Init+0x6fe>
		}
		else if(config->Port == UART4)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a89      	ldr	r2, [pc, #548]	@ (8004b94 <USART_Init+0x8ac>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <USART_Init+0x6ae>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8004972:	4b81      	ldr	r3, [pc, #516]	@ (8004b78 <USART_Init+0x890>)
 8004974:	4a81      	ldr	r2, [pc, #516]	@ (8004b7c <USART_Init+0x894>)
 8004976:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800497a:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 800497e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004984:	2210      	movs	r2, #16
 8004986:	4b7c      	ldr	r3, [pc, #496]	@ (8004b78 <USART_Init+0x890>)
 8004988:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 800498c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b78 <USART_Init+0x890>)
 800498e:	4a82      	ldr	r2, [pc, #520]	@ (8004b98 <USART_Init+0x8b0>)
 8004990:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8004994:	e027      	b.n	80049e6 <USART_Init+0x6fe>
		}
		else if(config->Port == UART5)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a80      	ldr	r2, [pc, #512]	@ (8004b9c <USART_Init+0x8b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d111      	bne.n	80049c4 <USART_Init+0x6dc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 80049a0:	4b75      	ldr	r3, [pc, #468]	@ (8004b78 <USART_Init+0x890>)
 80049a2:	4a76      	ldr	r2, [pc, #472]	@ (8004b7c <USART_Init+0x894>)
 80049a4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80049a8:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 80049ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80049ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80049b2:	2210      	movs	r2, #16
 80049b4:	4b70      	ldr	r3, [pc, #448]	@ (8004b78 <USART_Init+0x890>)
 80049b6:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 80049ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <USART_Init+0x890>)
 80049bc:	4a78      	ldr	r2, [pc, #480]	@ (8004ba0 <USART_Init+0x8b8>)
 80049be:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80049c2:	e010      	b.n	80049e6 <USART_Init+0x6fe>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 80049c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b78 <USART_Init+0x890>)
 80049c6:	4a6d      	ldr	r2, [pc, #436]	@ (8004b7c <USART_Init+0x894>)
 80049c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80049cc:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 80049d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80049d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 80049d6:	2210      	movs	r2, #16
 80049d8:	4b67      	ldr	r3, [pc, #412]	@ (8004b78 <USART_Init+0x890>)
 80049da:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 80049de:	4b66      	ldr	r3, [pc, #408]	@ (8004b78 <USART_Init+0x890>)
 80049e0:	4a70      	ldr	r2, [pc, #448]	@ (8004ba4 <USART_Init+0x8bc>)
 80049e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80049e6:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <USART_Init+0x8c0>)
 80049e8:	f993 3000 	ldrsb.w	r3, [r3]
 80049ec:	4618      	mov	r0, r3
 80049ee:	2200      	movs	r2, #0
 80049f0:	4961      	ldr	r1, [pc, #388]	@ (8004b78 <USART_Init+0x890>)
 80049f2:	2358      	movs	r3, #88	@ 0x58
 80049f4:	fb00 f303 	mul.w	r3, r0, r3
 80049f8:	440b      	add	r3, r1
 80049fa:	3318      	adds	r3, #24
 80049fc:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80049fe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a00:	f993 3000 	ldrsb.w	r3, [r3]
 8004a04:	4618      	mov	r0, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	495b      	ldr	r1, [pc, #364]	@ (8004b78 <USART_Init+0x890>)
 8004a0a:	2358      	movs	r3, #88	@ 0x58
 8004a0c:	fb00 f303 	mul.w	r3, r0, r3
 8004a10:	440b      	add	r3, r1
 8004a12:	330c      	adds	r3, #12
 8004a14:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8004a16:	4b64      	ldr	r3, [pc, #400]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a18:	f993 3000 	ldrsb.w	r3, [r3]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	2210      	movs	r2, #16
 8004a20:	4955      	ldr	r1, [pc, #340]	@ (8004b78 <USART_Init+0x890>)
 8004a22:	2358      	movs	r3, #88	@ 0x58
 8004a24:	fb00 f303 	mul.w	r3, r0, r3
 8004a28:	440b      	add	r3, r1
 8004a2a:	331c      	adds	r3, #28
 8004a2c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a30:	f993 3000 	ldrsb.w	r3, [r3]
 8004a34:	4618      	mov	r0, r3
 8004a36:	2200      	movs	r2, #0
 8004a38:	494f      	ldr	r1, [pc, #316]	@ (8004b78 <USART_Init+0x890>)
 8004a3a:	2358      	movs	r3, #88	@ 0x58
 8004a3c:	fb00 f303 	mul.w	r3, r0, r3
 8004a40:	440b      	add	r3, r1
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004a46:	4b58      	ldr	r3, [pc, #352]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a48:	f993 3000 	ldrsb.w	r3, [r3]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4949      	ldr	r1, [pc, #292]	@ (8004b78 <USART_Init+0x890>)
 8004a52:	2358      	movs	r3, #88	@ 0x58
 8004a54:	fb00 f303 	mul.w	r3, r0, r3
 8004a58:	440b      	add	r3, r1
 8004a5a:	3324      	adds	r3, #36	@ 0x24
 8004a5c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4b51      	ldr	r3, [pc, #324]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a62:	f993 3000 	ldrsb.w	r3, [r3]
 8004a66:	4618      	mov	r0, r3
 8004a68:	b291      	uxth	r1, r2
 8004a6a:	4a43      	ldr	r2, [pc, #268]	@ (8004b78 <USART_Init+0x890>)
 8004a6c:	2358      	movs	r3, #88	@ 0x58
 8004a6e:	fb00 f303 	mul.w	r3, r0, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3322      	adds	r3, #34	@ 0x22
 8004a76:	460a      	mov	r2, r1
 8004a78:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004a7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a80:	f993 3000 	ldrsb.w	r3, [r3]
 8004a84:	4618      	mov	r0, r3
 8004a86:	b291      	uxth	r1, r2
 8004a88:	4a3b      	ldr	r2, [pc, #236]	@ (8004b78 <USART_Init+0x890>)
 8004a8a:	2358      	movs	r3, #88	@ 0x58
 8004a8c:	fb00 f303 	mul.w	r3, r0, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3320      	adds	r3, #32
 8004a94:	460a      	mov	r2, r1
 8004a96:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8004a98:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <USART_Init+0x8c0>)
 8004a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004aa4:	4934      	ldr	r1, [pc, #208]	@ (8004b78 <USART_Init+0x890>)
 8004aa6:	2358      	movs	r3, #88	@ 0x58
 8004aa8:	fb00 f303 	mul.w	r3, r0, r3
 8004aac:	440b      	add	r3, r1
 8004aae:	3314      	adds	r3, #20
 8004ab0:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba8 <USART_Init+0x8c0>)
 8004ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	2240      	movs	r2, #64	@ 0x40
 8004abc:	492e      	ldr	r1, [pc, #184]	@ (8004b78 <USART_Init+0x890>)
 8004abe:	2358      	movs	r3, #88	@ 0x58
 8004ac0:	fb00 f303 	mul.w	r3, r0, r3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8004aca:	4b37      	ldr	r3, [pc, #220]	@ (8004ba8 <USART_Init+0x8c0>)
 8004acc:	f993 3000 	ldrsb.w	r3, [r3]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4928      	ldr	r1, [pc, #160]	@ (8004b78 <USART_Init+0x890>)
 8004ad6:	2258      	movs	r2, #88	@ 0x58
 8004ad8:	fb00 f202 	mul.w	r2, r0, r2
 8004adc:	440a      	add	r2, r1
 8004ade:	3314      	adds	r3, #20
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2258      	movs	r2, #88	@ 0x58
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ffdb 	bl	8005aa0 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8004aea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <USART_Init+0x8c0>)
 8004aec:	f993 3000 	ldrsb.w	r3, [r3]
 8004af0:	461a      	mov	r2, r3
 8004af2:	2358      	movs	r3, #88	@ 0x58
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b78 <USART_Init+0x890>)
 8004afa:	4413      	add	r3, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fd11 	bl	8002524 <DMA_Init>
 8004b02:	e007      	b.n	8004b14 <USART_Init+0x82c>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b12:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7a1b      	ldrb	r3, [r3, #8]
 8004b18:	2203      	movs	r2, #3
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d107      	bne.n	8004b2e <USART_Init+0x846>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0208 	orr.w	r2, r2, #8
 8004b2c:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7a1b      	ldrb	r3, [r3, #8]
 8004b32:	2205      	movs	r2, #5
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d107      	bne.n	8004b48 <USART_Init+0x860>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b46:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 020c 	orr.w	r2, r2, #12
 8004b56:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b66:	60da      	str	r2, [r3, #12]

	return 1;
 8004b68:	2301      	movs	r3, #1
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3738      	adds	r7, #56	@ 0x38
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bdb0      	pop	{r4, r5, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40011000 	.word	0x40011000
 8004b78:	200004a8 	.word	0x200004a8
 8004b7c:	08005bd8 	.word	0x08005bd8
 8004b80:	080031e9 	.word	0x080031e9
 8004b84:	40004400 	.word	0x40004400
 8004b88:	08003219 	.word	0x08003219
 8004b8c:	40004800 	.word	0x40004800
 8004b90:	08003249 	.word	0x08003249
 8004b94:	40004c00 	.word	0x40004c00
 8004b98:	08003279 	.word	0x08003279
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	080032a9 	.word	0x080032a9
 8004ba4:	080032d9 	.word	0x080032d9
 8004ba8:	200006b8 	.word	0x200006b8

08004bac <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7fe fd14 	bl	80035e8 <USART_Get_Instance_Number>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b73      	ldr	r3, [pc, #460]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004bc6:	701a      	strb	r2, [r3, #0]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	7c5b      	ldrb	r3, [r3, #17]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	745a      	strb	r2, [r3, #17]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	7c5b      	ldrb	r3, [r3, #17]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80bb 	beq.w	8004d56 <USART_TX_Buffer+0x1aa>
		config -> Port -> SR &= ~USART_SR_TC;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bee:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4967      	ldr	r1, [pc, #412]	@ (8004d98 <USART_TX_Buffer+0x1ec>)
 8004bfc:	2358      	movs	r3, #88	@ 0x58
 8004bfe:	fb00 f303 	mul.w	r3, r0, r3
 8004c02:	440b      	add	r3, r1
 8004c04:	3330      	adds	r3, #48	@ 0x30
 8004c06:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1d1a      	adds	r2, r3, #4
 8004c0e:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004c10:	f993 3000 	ldrsb.w	r3, [r3]
 8004c14:	4618      	mov	r0, r3
 8004c16:	4611      	mov	r1, r2
 8004c18:	4a5f      	ldr	r2, [pc, #380]	@ (8004d98 <USART_TX_Buffer+0x1ec>)
 8004c1a:	2358      	movs	r3, #88	@ 0x58
 8004c1c:	fb00 f303 	mul.w	r3, r0, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	332c      	adds	r3, #44	@ 0x2c
 8004c24:	6019      	str	r1, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004c26:	4b5b      	ldr	r3, [pc, #364]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004c28:	f993 3000 	ldrsb.w	r3, [r3]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004d98 <USART_TX_Buffer+0x1ec>)
 8004c30:	2358      	movs	r3, #88	@ 0x58
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3334      	adds	r3, #52	@ 0x34
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8004c3e:	4b55      	ldr	r3, [pc, #340]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004c40:	f993 3000 	ldrsb.w	r3, [r3]
 8004c44:	461a      	mov	r2, r3
 8004c46:	2358      	movs	r3, #88	@ 0x58
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <USART_TX_Buffer+0x1ec>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fe59 	bl	8002908 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004c56:	4b4f      	ldr	r3, [pc, #316]	@ (8004d94 <USART_TX_Buffer+0x1e8>)
 8004c58:	f993 3000 	ldrsb.w	r3, [r3]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	2358      	movs	r3, #88	@ 0x58
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	4a4c      	ldr	r2, [pc, #304]	@ (8004d98 <USART_TX_Buffer+0x1ec>)
 8004c66:	4413      	add	r3, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fead 	bl	80029c8 <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c7c:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a46      	ldr	r2, [pc, #280]	@ (8004d9c <USART_TX_Buffer+0x1f0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10c      	bne.n	8004ca2 <USART_TX_Buffer+0xf6>
		{
			while(!U1TX_Complete){}
 8004c88:	bf00      	nop
 8004c8a:	4b45      	ldr	r3, [pc, #276]	@ (8004da0 <USART_TX_Buffer+0x1f4>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f7      	bne.n	8004c8a <USART_TX_Buffer+0xde>
			U1TX_Complete = 0;
 8004c9a:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <USART_TX_Buffer+0x1f4>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e072      	b.n	8004d88 <USART_TX_Buffer+0x1dc>

		}
		else if(config->Port == USART2)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8004da4 <USART_TX_Buffer+0x1f8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10c      	bne.n	8004cc6 <USART_TX_Buffer+0x11a>
		{
			while(!U2TX_Complete){}
 8004cac:	bf00      	nop
 8004cae:	4b3e      	ldr	r3, [pc, #248]	@ (8004da8 <USART_TX_Buffer+0x1fc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f7      	bne.n	8004cae <USART_TX_Buffer+0x102>
			U2TX_Complete = 0;
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <USART_TX_Buffer+0x1fc>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e060      	b.n	8004d88 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART3)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <USART_TX_Buffer+0x200>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10c      	bne.n	8004cea <USART_TX_Buffer+0x13e>
		{
			while(!U3TX_Complete){}
 8004cd0:	bf00      	nop
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <USART_TX_Buffer+0x204>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f083 0301 	eor.w	r3, r3, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f7      	bne.n	8004cd2 <USART_TX_Buffer+0x126>
			U3TX_Complete = 0;
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <USART_TX_Buffer+0x204>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e04e      	b.n	8004d88 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART4)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a31      	ldr	r2, [pc, #196]	@ (8004db4 <USART_TX_Buffer+0x208>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <USART_TX_Buffer+0x162>
		{
			while(!U4TX_Complete){}
 8004cf4:	bf00      	nop
 8004cf6:	4b30      	ldr	r3, [pc, #192]	@ (8004db8 <USART_TX_Buffer+0x20c>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f083 0301 	eor.w	r3, r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f7      	bne.n	8004cf6 <USART_TX_Buffer+0x14a>
			U4TX_Complete = 0;
 8004d06:	4b2c      	ldr	r3, [pc, #176]	@ (8004db8 <USART_TX_Buffer+0x20c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e03c      	b.n	8004d88 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == UART5)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <USART_TX_Buffer+0x210>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d10c      	bne.n	8004d32 <USART_TX_Buffer+0x186>
		{
			while(!U5TX_Complete){}
 8004d18:	bf00      	nop
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <USART_TX_Buffer+0x214>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f083 0301 	eor.w	r3, r3, #1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f7      	bne.n	8004d1a <USART_TX_Buffer+0x16e>
			U5TX_Complete = 0;
 8004d2a:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <USART_TX_Buffer+0x214>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	e02a      	b.n	8004d88 <USART_TX_Buffer+0x1dc>
		}
		else if(config->Port == USART6)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a23      	ldr	r2, [pc, #140]	@ (8004dc4 <USART_TX_Buffer+0x218>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d125      	bne.n	8004d88 <USART_TX_Buffer+0x1dc>
		{
			while(!U6TX_Complete){}
 8004d3c:	bf00      	nop
 8004d3e:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <USART_TX_Buffer+0x21c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f7      	bne.n	8004d3e <USART_TX_Buffer+0x192>
			U6TX_Complete = 0;
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <USART_TX_Buffer+0x21c>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e018      	b.n	8004d88 <USART_TX_Buffer+0x1dc>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e011      	b.n	8004d80 <USART_TX_Buffer+0x1d4>
		{
			config->Port->DR = tx_buffer[i];
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004d6a:	bf00      	nop
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f8      	beq.n	8004d6c <USART_TX_Buffer+0x1c0>
		for(int i = 0; i <= length; i++)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	dde9      	ble.n	8004d5c <USART_TX_Buffer+0x1b0>
		}
	}

	return 1;
 8004d88:	2301      	movs	r3, #1

}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200006b8 	.word	0x200006b8
 8004d98:	200004a8 	.word	0x200004a8
 8004d9c:	40011000 	.word	0x40011000
 8004da0:	200006d2 	.word	0x200006d2
 8004da4:	40004400 	.word	0x40004400
 8004da8:	200006d4 	.word	0x200006d4
 8004dac:	40004800 	.word	0x40004800
 8004db0:	200006d6 	.word	0x200006d6
 8004db4:	40004c00 	.word	0x40004c00
 8004db8:	200006d8 	.word	0x200006d8
 8004dbc:	40005000 	.word	0x40005000
 8004dc0:	200006da 	.word	0x200006da
 8004dc4:	40011400 	.word	0x40011400
 8004dc8:	200006dc 	.word	0x200006dc

08004dcc <USART_RX_Buffer>:

int8_t USART_RX_Buffer(USART_Config *config, uint8_t *rx_buffer, uint16_t length, bool circular_buffer_enable)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	460b      	mov	r3, r1
 8004ddc:	80fb      	strh	r3, [r7, #6]
 8004dde:	4613      	mov	r3, r2
 8004de0:	717b      	strb	r3, [r7, #5]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	7c5b      	ldrb	r3, [r3, #17]
 8004de6:	2202      	movs	r2, #2
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	745a      	strb	r2, [r3, #17]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	7c5b      	ldrb	r3, [r3, #17]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80d0 	beq.w	8004f9a <USART_RX_Buffer+0x1ce>
	{
		if(circular_buffer_enable == 1)
 8004dfa:	797b      	ldrb	r3, [r7, #5]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <USART_RX_Buffer+0x4e>
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004e00:	4b75      	ldr	r3, [pc, #468]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e02:	f993 3000 	ldrsb.w	r3, [r3]
 8004e06:	4618      	mov	r0, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4974      	ldr	r1, [pc, #464]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e0c:	2358      	movs	r3, #88	@ 0x58
 8004e0e:	fb00 f303 	mul.w	r3, r0, r3
 8004e12:	440b      	add	r3, r1
 8004e14:	3318      	adds	r3, #24
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e00c      	b.n	8004e34 <USART_RX_Buffer+0x68>
		}
		else
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8004e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e26:	496d      	ldr	r1, [pc, #436]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e28:	2358      	movs	r3, #88	@ 0x58
 8004e2a:	fb00 f303 	mul.w	r3, r0, r3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3318      	adds	r3, #24
 8004e32:	601a      	str	r2, [r3, #0]
		}

		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
 8004e34:	4b68      	ldr	r3, [pc, #416]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e36:	f993 3000 	ldrsb.w	r3, [r3]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	4967      	ldr	r1, [pc, #412]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e40:	2358      	movs	r3, #88	@ 0x58
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	440b      	add	r3, r1
 8004e48:	3330      	adds	r3, #48	@ 0x30
 8004e4a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e54:	f993 3000 	ldrsb.w	r3, [r3]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4a5f      	ldr	r2, [pc, #380]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e5e:	2358      	movs	r3, #88	@ 0x58
 8004e60:	fb00 f303 	mul.w	r3, r0, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	332c      	adds	r3, #44	@ 0x2c
 8004e68:	6019      	str	r1, [r3, #0]
		xUSART_RX[usart_dma_instance_number].buffer_length = length;
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4a5a      	ldr	r2, [pc, #360]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e74:	2358      	movs	r3, #88	@ 0x58
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3334      	adds	r3, #52	@ 0x34
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_RX[usart_dma_instance_number]);
 8004e82:	4b55      	ldr	r3, [pc, #340]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e84:	f993 3000 	ldrsb.w	r3, [r3]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2358      	movs	r3, #88	@ 0x58
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	4a52      	ldr	r2, [pc, #328]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004e92:	4413      	add	r3, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fd fd37 	bl	8002908 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_RX[usart_dma_instance_number]);
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <USART_RX_Buffer+0x20c>)
 8004e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2358      	movs	r3, #88	@ 0x58
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8004fdc <USART_RX_Buffer+0x210>)
 8004eaa:	4413      	add	r3, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fd8b 	bl	80029c8 <DMA_Set_Trigger>
		config -> Port -> CR3 |= USART_CR3_DMAR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec0:	615a      	str	r2, [r3, #20]


		if(config->Port == USART1)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a46      	ldr	r2, [pc, #280]	@ (8004fe0 <USART_RX_Buffer+0x214>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10c      	bne.n	8004ee6 <USART_RX_Buffer+0x11a>
		{
			while(!U1RX_Complete){}
 8004ecc:	bf00      	nop
 8004ece:	4b45      	ldr	r3, [pc, #276]	@ (8004fe4 <USART_RX_Buffer+0x218>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f083 0301 	eor.w	r3, r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f7      	bne.n	8004ece <USART_RX_Buffer+0x102>
			U1RX_Complete = 0;
 8004ede:	4b41      	ldr	r3, [pc, #260]	@ (8004fe4 <USART_RX_Buffer+0x218>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	e073      	b.n	8004fce <USART_RX_Buffer+0x202>

		}
		else if(config->Port == USART2)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe8 <USART_RX_Buffer+0x21c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10c      	bne.n	8004f0a <USART_RX_Buffer+0x13e>
		{
			while(!U2RX_Complete){}
 8004ef0:	bf00      	nop
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <USART_RX_Buffer+0x220>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f7      	bne.n	8004ef2 <USART_RX_Buffer+0x126>
			U2RX_Complete = 0;
 8004f02:	4b3a      	ldr	r3, [pc, #232]	@ (8004fec <USART_RX_Buffer+0x220>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e061      	b.n	8004fce <USART_RX_Buffer+0x202>
		}
		else if(config->Port == USART3)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	@ (8004ff0 <USART_RX_Buffer+0x224>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10c      	bne.n	8004f2e <USART_RX_Buffer+0x162>
		{
			while(!U3RX_Complete){}
 8004f14:	bf00      	nop
 8004f16:	4b37      	ldr	r3, [pc, #220]	@ (8004ff4 <USART_RX_Buffer+0x228>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f083 0301 	eor.w	r3, r3, #1
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f7      	bne.n	8004f16 <USART_RX_Buffer+0x14a>
			U3RX_Complete = 0;
 8004f26:	4b33      	ldr	r3, [pc, #204]	@ (8004ff4 <USART_RX_Buffer+0x228>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e04f      	b.n	8004fce <USART_RX_Buffer+0x202>
		}
		else if(config->Port == UART4)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a31      	ldr	r2, [pc, #196]	@ (8004ff8 <USART_RX_Buffer+0x22c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10c      	bne.n	8004f52 <USART_RX_Buffer+0x186>
		{
			while(!U4RX_Complete){}
 8004f38:	bf00      	nop
 8004f3a:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <USART_RX_Buffer+0x230>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f083 0301 	eor.w	r3, r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f7      	bne.n	8004f3a <USART_RX_Buffer+0x16e>
			U4RX_Complete = 0;
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ffc <USART_RX_Buffer+0x230>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e03d      	b.n	8004fce <USART_RX_Buffer+0x202>
		}
		else if(config->Port == UART5)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2a      	ldr	r2, [pc, #168]	@ (8005000 <USART_RX_Buffer+0x234>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <USART_RX_Buffer+0x1aa>
		{
			while(!U5RX_Complete){}
 8004f5c:	bf00      	nop
 8004f5e:	4b29      	ldr	r3, [pc, #164]	@ (8005004 <USART_RX_Buffer+0x238>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f7      	bne.n	8004f5e <USART_RX_Buffer+0x192>
			U5RX_Complete = 0;
 8004f6e:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <USART_RX_Buffer+0x238>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e02b      	b.n	8004fce <USART_RX_Buffer+0x202>
		}
		else if(config->Port == USART6)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a23      	ldr	r2, [pc, #140]	@ (8005008 <USART_RX_Buffer+0x23c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d126      	bne.n	8004fce <USART_RX_Buffer+0x202>
		{
			while(!U6RX_Complete){}
 8004f80:	bf00      	nop
 8004f82:	4b22      	ldr	r3, [pc, #136]	@ (800500c <USART_RX_Buffer+0x240>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f7      	bne.n	8004f82 <USART_RX_Buffer+0x1b6>
			U6RX_Complete = 0;
 8004f92:	4b1e      	ldr	r3, [pc, #120]	@ (800500c <USART_RX_Buffer+0x240>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e019      	b.n	8004fce <USART_RX_Buffer+0x202>
		}

	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e012      	b.n	8004fc6 <USART_RX_Buffer+0x1fa>
		{
			rx_buffer[i] = config->Port->DR ;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	4413      	add	r3, r2
 8004fac:	b2ca      	uxtb	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]
			while(!(config->Port->SR & USART_SR_RXNE));
 8004fb0:	bf00      	nop
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f8      	beq.n	8004fb2 <USART_RX_Buffer+0x1e6>
		for(int i = 0; i <= length; i++)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	dde8      	ble.n	8004fa0 <USART_RX_Buffer+0x1d4>
		}
	}

	return 1;
 8004fce:	2301      	movs	r3, #1

}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	200006b8 	.word	0x200006b8
 8004fdc:	20000298 	.word	0x20000298
 8004fe0:	40011000 	.word	0x40011000
 8004fe4:	200006d3 	.word	0x200006d3
 8004fe8:	40004400 	.word	0x40004400
 8004fec:	200006d5 	.word	0x200006d5
 8004ff0:	40004800 	.word	0x40004800
 8004ff4:	200006d7 	.word	0x200006d7
 8004ff8:	40004c00 	.word	0x40004c00
 8004ffc:	200006d9 	.word	0x200006d9
 8005000:	40005000 	.word	0x40005000
 8005004:	200006db 	.word	0x200006db
 8005008:	40011400 	.word	0x40011400
 800500c:	200006dd 	.word	0x200006dd

08005010 <USART_TX_Single_Byte>:

void USART_TX_Single_Byte(USART_Config *config, uint8_t data)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
	config->Port->DR = data;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	605a      	str	r2, [r3, #4]
	while(!(config->Port->SR & USART_SR_TXE));
 8005024:	bf00      	nop
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f8      	beq.n	8005026 <USART_TX_Single_Byte+0x16>
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <__NVIC_SetPriority>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db0a      	blt.n	800506e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	490c      	ldr	r1, [pc, #48]	@ (8005090 <__NVIC_SetPriority+0x4c>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	440b      	add	r3, r1
 8005068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800506c:	e00a      	b.n	8005084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4908      	ldr	r1, [pc, #32]	@ (8005094 <__NVIC_SetPriority+0x50>)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3b04      	subs	r3, #4
 800507c:	0112      	lsls	r2, r2, #4
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	440b      	add	r3, r1
 8005082:	761a      	strb	r2, [r3, #24]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800509c:	f3bf 8f4f 	dsb	sy
}
 80050a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <__NVIC_SystemReset+0x24>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80050aa:	4904      	ldr	r1, [pc, #16]	@ (80050bc <__NVIC_SystemReset+0x24>)
 80050ac:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <__NVIC_SystemReset+0x28>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050b2:	f3bf 8f4f 	dsb	sy
}
 80050b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <__NVIC_SystemReset+0x20>
 80050bc:	e000ed00 	.word	0xe000ed00
 80050c0:	05fa0004 	.word	0x05fa0004

080050c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d4:	d301      	bcc.n	80050da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050d6:	2301      	movs	r3, #1
 80050d8:	e00f      	b.n	80050fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <SysTick_Config+0x40>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050e2:	210f      	movs	r1, #15
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295
 80050e8:	f7ff ffac 	bl	8005044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ec:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <SysTick_Config+0x40>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <SysTick_Config+0x40>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000e010 	.word	0xe000e010

08005108 <MCU_Clock_Setup>:
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
	SystemInit();
 800510e:	f000 fbe7 	bl	80058e0 <SystemInit>
	uint8_t pll_m = 8;
 8005112:	2308      	movs	r3, #8
 8005114:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8005116:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800511a:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8005120:	2307      	movs	r3, #7
 8005122:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8005124:	4b3c      	ldr	r3, [pc, #240]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3a      	ldr	r2, [pc, #232]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005134:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8005136:	bf00      	nop
 8005138:	4b37      	ldr	r3, [pc, #220]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f9      	beq.n	8005138 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8005144:	4b34      	ldr	r3, [pc, #208]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	4a33      	ldr	r2, [pc, #204]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800514a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800514e:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8005150:	4b32      	ldr	r3, [pc, #200]	@ (800521c <MCU_Clock_Setup+0x114>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a31      	ldr	r2, [pc, #196]	@ (800521c <MCU_Clock_Setup+0x114>)
 8005156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800515a:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800515c:	4b30      	ldr	r3, [pc, #192]	@ (8005220 <MCU_Clock_Setup+0x118>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <MCU_Clock_Setup+0x118>)
 8005162:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005166:	f043 0305 	orr.w	r3, r3, #5
 800516a:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800516c:	4b2a      	ldr	r3, [pc, #168]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	78ba      	ldrb	r2, [r7, #2]
 8005172:	0611      	lsls	r1, r2, #24
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	0412      	lsls	r2, r2, #16
 8005178:	4311      	orrs	r1, r2
 800517a:	88ba      	ldrh	r2, [r7, #4]
 800517c:	0192      	lsls	r2, r2, #6
 800517e:	4311      	orrs	r1, r2
 8005180:	79fa      	ldrb	r2, [r7, #7]
 8005182:	430a      	orrs	r2, r1
 8005184:	4611      	mov	r1, r2
 8005186:	4a24      	ldr	r2, [pc, #144]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005188:	430b      	orrs	r3, r1
 800518a:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800518c:	4b22      	ldr	r3, [pc, #136]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005192:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005196:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8005198:	4b1f      	ldr	r3, [pc, #124]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800519a:	4a1f      	ldr	r2, [pc, #124]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80051a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051a6:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80051aa:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80051ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a19      	ldr	r2, [pc, #100]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b6:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80051b8:	4b17      	ldr	r3, [pc, #92]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80051c4:	bf00      	nop
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f9      	beq.n	80051c6 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80051d2:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4a10      	ldr	r2, [pc, #64]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80051de:	bf00      	nop
 80051e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <MCU_Clock_Setup+0x110>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d1f9      	bne.n	80051e0 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80051ec:	f000 fb8a 	bl	8005904 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <MCU_Clock_Setup+0x11c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005228 <MCU_Clock_Setup+0x120>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff60 	bl	80050c4 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <MCU_Clock_Setup+0x110>)
 8005206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005208:	4a03      	ldr	r2, [pc, #12]	@ (8005218 <MCU_Clock_Setup+0x110>)
 800520a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800520e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000
 8005220:	40023c00 	.word	0x40023c00
 8005224:	20000000 	.word	0x20000000
 8005228:	18618619 	.word	0x18618619

0800522c <MCU_Clock_DeInit>:
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
	RCC -> CFGR &= ~RCC_CFGR_SW_PLL;
 8005230:	4b12      	ldr	r3, [pc, #72]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4a11      	ldr	r2, [pc, #68]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005236:	f023 0302 	bic.w	r3, r3, #2
 800523a:	6093      	str	r3, [r2, #8]
	while((RCC->CR & RCC_CR_PLLRDY)){}
 800523c:	bf00      	nop
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f9      	bne.n	800523e <MCU_Clock_DeInit+0x12>
	RCC->PLLCFGR = 0x00000000;
 800524a:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <MCU_Clock_DeInit+0x50>)
 800524c:	2200      	movs	r2, #0
 800524e:	605a      	str	r2, [r3, #4]
	RCC -> CFGR = 0x00000000;
 8005250:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
	RCC -> CR &= ~RCC_CR_HSEON;
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <MCU_Clock_DeInit+0x50>)
 800525c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005260:	6013      	str	r3, [r2, #0]
	while((RCC -> CR & RCC_CR_HSERDY)){}
 8005262:	bf00      	nop
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <MCU_Clock_DeInit+0x50>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f9      	bne.n	8005264 <MCU_Clock_DeInit+0x38>
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40023800 	.word	0x40023800

08005280 <Delay_Config>:
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <Delay_Config+0x2c>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800528a:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <Delay_Config+0x2c>)
 800528c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8005290:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <Delay_Config+0x2c>)
 8005294:	2200      	movs	r2, #0
 8005296:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <Delay_Config+0x2c>)
 800529a:	2205      	movs	r2, #5
 800529c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <System_DeInit>:
    va_end(args);
    return result;  // Return the number of successful conversions
}

__STATIC_INLINE void System_DeInit(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
	RCC -> AHB1RSTR = 0xFFFFFFFF;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	@ (80052e8 <System_DeInit+0x38>)
 80052b6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ba:	611a      	str	r2, [r3, #16]
	RCC -> AHB2RSTR = 0xFFFFFFFF;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <System_DeInit+0x38>)
 80052be:	f04f 32ff 	mov.w	r2, #4294967295
 80052c2:	615a      	str	r2, [r3, #20]
	RCC -> AHB3RSTR = 0xFFFFFFFF;
 80052c4:	4b08      	ldr	r3, [pc, #32]	@ (80052e8 <System_DeInit+0x38>)
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	619a      	str	r2, [r3, #24]
	RCC -> APB1RSTR = 0xFFFFFFFF;
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <System_DeInit+0x38>)
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	621a      	str	r2, [r3, #32]
	RCC -> APB2RSTR = 0xFFFFFFFF;
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <System_DeInit+0x38>)
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800

080052ec <Systick_DeInit>:

__STATIC_INLINE void Systick_DeInit(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;//to turn off the systick
 80052f0:	4b06      	ldr	r3, [pc, #24]	@ (800530c <Systick_DeInit+0x20>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <Systick_DeInit+0x20>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <Systick_DeInit+0x20>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000e010 	.word	0xe000e010

08005310 <Validate_And_Execute_Command>:
uint16_t len = 0;
uint32_t CRC_Rec1 = 0, CRC_Rec2 = 0;

/* =========================== Packet Validation =========================== */
bool Validate_And_Execute_Command(uint8_t *buf, uint16_t len)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
    if (len < PACKET_LENGTH_MIN || len > PACKET_LENGTH_MAX) return false;
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	2b09      	cmp	r3, #9
 8005320:	d903      	bls.n	800532a <Validate_And_Execute_Command+0x1a>
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 8005328:	d901      	bls.n	800532e <Validate_And_Execute_Command+0x1e>
 800532a:	2300      	movs	r3, #0
 800532c:	e05e      	b.n	80053ec <Validate_And_Execute_Command+0xdc>

    if (buf[0] != HEADER_1 || buf[1] != HEADER_2 ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2baa      	cmp	r3, #170	@ 0xaa
 8005334:	d112      	bne.n	800535c <Validate_And_Execute_Command+0x4c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3301      	adds	r3, #1
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b55      	cmp	r3, #85	@ 0x55
 800533e:	d10d      	bne.n	800535c <Validate_And_Execute_Command+0x4c>
        buf[len-2] != FOOTER_1 || buf[len-1] != FOOTER_2)
 8005340:	887b      	ldrh	r3, [r7, #2]
 8005342:	3b02      	subs	r3, #2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
    if (buf[0] != HEADER_1 || buf[1] != HEADER_2 ||
 800534a:	2bbb      	cmp	r3, #187	@ 0xbb
 800534c:	d106      	bne.n	800535c <Validate_And_Execute_Command+0x4c>
        buf[len-2] != FOOTER_1 || buf[len-1] != FOOTER_2)
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	3b01      	subs	r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b66      	cmp	r3, #102	@ 0x66
 800535a:	d001      	beq.n	8005360 <Validate_And_Execute_Command+0x50>
        return false;
 800535c:	2300      	movs	r3, #0
 800535e:	e045      	b.n	80053ec <Validate_And_Execute_Command+0xdc>

    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	3b06      	subs	r3, #6
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	061a      	lsls	r2, r3, #24
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	3b05      	subs	r3, #5
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	440b      	add	r3, r1
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	431a      	orrs	r2, r3
                            ((uint32_t)buf[len-4] << 8)  | ((uint32_t)buf[len-3]);
 800537a:	887b      	ldrh	r3, [r7, #2]
 800537c:	3b04      	subs	r3, #4
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	440b      	add	r3, r1
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 8005386:	4313      	orrs	r3, r2
                            ((uint32_t)buf[len-4] << 8)  | ((uint32_t)buf[len-3]);
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	3a03      	subs	r2, #3
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	440a      	add	r2, r1
 8005390:	7812      	ldrb	r2, [r2, #0]
    uint32_t received_crc = ((uint32_t)buf[len-6] << 24) | ((uint32_t)buf[len-5] << 16) |
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

    uint32_t computed_crc = CRC_Compute_8Bit_Block(&buf[2], len - 8);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	887b      	ldrh	r3, [r7, #2]
 800539c:	3b08      	subs	r3, #8
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fb fc05 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 80053a6:	60f8      	str	r0, [r7, #12]

    if (received_crc != computed_crc) return false;
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <Validate_And_Execute_Command+0xa4>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e01b      	b.n	80053ec <Validate_And_Execute_Command+0xdc>

    uint8_t opcode = buf[2];
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	72fb      	strb	r3, [r7, #11]
    for (int i = 0; i < sizeof(command_table)/sizeof(command_table[0]); i++) {
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e011      	b.n	80053e4 <Validate_And_Execute_Command+0xd4>
        if (command_table[i].opcode == opcode) {
 80053c0:	4a0c      	ldr	r2, [pc, #48]	@ (80053f4 <Validate_And_Execute_Command+0xe4>)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80053c8:	7afa      	ldrb	r2, [r7, #11]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d107      	bne.n	80053de <Validate_And_Execute_Command+0xce>
            command_table[i].handler();
 80053ce:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <Validate_And_Execute_Command+0xe4>)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4798      	blx	r3
            return true;
 80053da:	2301      	movs	r3, #1
 80053dc:	e006      	b.n	80053ec <Validate_And_Execute_Command+0xdc>
    for (int i = 0; i < sizeof(command_table)/sizeof(command_table[0]); i++) {
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d9ea      	bls.n	80053c0 <Validate_And_Execute_Command+0xb0>
        }
    }

    return false;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	08005fdc 	.word	0x08005fdc

080053f8 <Bootloader>:
	Req_Request     = 0x01,
	Req_ACK  	= 0x02,
}Request_List;

void Bootloader(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
    Custom_Comm_Init(115200);
 80053fe:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8005402:	f7fb fc5d 	bl	8000cc0 <Custom_Comm_Init>
    SystemState state = STATE_WAIT_CONNECT;
 8005406:	2300      	movs	r3, #0
 8005408:	71fb      	strb	r3, [r7, #7]

    while (1) {
        len = Custom_Comm_Receive((uint8_t *)buffer);
 800540a:	4811      	ldr	r0, [pc, #68]	@ (8005450 <Bootloader+0x58>)
 800540c:	f7fb fcaa 	bl	8000d64 <Custom_Comm_Receive>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <Bootloader+0x5c>)
 8005416:	801a      	strh	r2, [r3, #0]

        switch (state) {
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <Bootloader+0x2c>
 800541e:	2b01      	cmp	r3, #1
 8005420:	d00c      	beq.n	800543c <Bootloader+0x44>
 8005422:	e013      	b.n	800544c <Bootloader+0x54>
            case STATE_WAIT_CONNECT:
                if (Validate_And_Execute_Command((uint8_t *)buffer, len))
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <Bootloader+0x5c>)
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	4809      	ldr	r0, [pc, #36]	@ (8005450 <Bootloader+0x58>)
 800542c:	f7ff ff70 	bl	8005310 <Validate_And_Execute_Command>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <Bootloader+0x52>
                    state = STATE_CONNECTED;
 8005436:	2301      	movs	r3, #1
 8005438:	71fb      	strb	r3, [r7, #7]
                break;
 800543a:	e006      	b.n	800544a <Bootloader+0x52>

            case STATE_CONNECTED:
                Validate_And_Execute_Command((uint8_t *)buffer, len);
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <Bootloader+0x5c>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	4803      	ldr	r0, [pc, #12]	@ (8005450 <Bootloader+0x58>)
 8005444:	f7ff ff64 	bl	8005310 <Validate_And_Execute_Command>
                break;
 8005448:	e000      	b.n	800544c <Bootloader+0x54>
                break;
 800544a:	bf00      	nop
        len = Custom_Comm_Receive((uint8_t *)buffer);
 800544c:	e7dd      	b.n	800540a <Bootloader+0x12>
 800544e:	bf00      	nop
 8005450:	200006e8 	.word	0x200006e8
 8005454:	200007f2 	.word	0x200007f2

08005458 <main>:
    }
}

/* =========================== Application CRC Boot Decision =========================== */
int main(void)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af04      	add	r7, sp, #16
    MCU_Clock_Setup();
 800545e:	f7ff fe53 	bl	8005108 <MCU_Clock_Setup>
    Delay_Config();
 8005462:	f7ff ff0d 	bl	8005280 <Delay_Config>
    CRC_Init();
 8005466:	f7fb fb83 	bl	8000b70 <CRC_Init>

    GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None,
 800546a:	2000      	movs	r0, #0
 800546c:	2402      	movs	r4, #2
                  GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 800546e:	2304      	movs	r3, #4
 8005470:	2204      	movs	r2, #4
 8005472:	2100      	movs	r1, #0
    GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None,
 8005474:	9102      	str	r1, [sp, #8]
 8005476:	9201      	str	r2, [sp, #4]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4623      	mov	r3, r4
 800547c:	4602      	mov	r2, r0
 800547e:	2100      	movs	r1, #0
 8005480:	481a      	ldr	r0, [pc, #104]	@ (80054ec <main+0x94>)
 8005482:	f7fd fd6b 	bl	8002f5c <GPIO_Pin_Init>

    if ((GPIOC->IDR & GPIO_IDR_ID0) != 0) {
 8005486:	4b19      	ldr	r3, [pc, #100]	@ (80054ec <main+0x94>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <main+0x40>
        Bootloader();
 8005492:	f7ff ffb1 	bl	80053f8 <Bootloader>
 8005496:	e027      	b.n	80054e8 <main+0x90>
    } else {
        uint32_t calculated_crc = CRC_Compute_Flash_Data(APP_ADDRESS, APP_SIZE);
 8005498:	2114      	movs	r1, #20
 800549a:	4815      	ldr	r0, [pc, #84]	@ (80054f0 <main+0x98>)
 800549c:	f7fb fbac 	bl	8000bf8 <CRC_Compute_Flash_Data>
 80054a0:	6078      	str	r0, [r7, #4]
        if (calculated_crc == APP_CRC_VALUE) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a13      	ldr	r2, [pc, #76]	@ (80054f4 <main+0x9c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d11e      	bne.n	80054e8 <main+0x90>
            // Jump to App
            System_DeInit();
 80054aa:	f7ff ff01 	bl	80052b0 <System_DeInit>
            MCU_Clock_DeInit();
 80054ae:	f7ff febd 	bl	800522c <MCU_Clock_DeInit>
            Systick_DeInit();
 80054b2:	f7ff ff1b 	bl	80052ec <Systick_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 80054b6:	b672      	cpsid	i
}
 80054b8:	bf00      	nop
            __disable_irq();
            SCB->VTOR = APP_ADDRESS;
 80054ba:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <main+0xa0>)
 80054bc:	4a0c      	ldr	r2, [pc, #48]	@ (80054f0 <main+0x98>)
 80054be:	609a      	str	r2, [r3, #8]
            __set_MSP(*((__IO uint32_t*) APP_ADDRESS));
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <main+0x98>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f383 8808 	msr	MSP, r3
}
 80054cc:	bf00      	nop
            JumpAddress = *(__IO uint32_t*)(APP_ADDRESS + 4);
 80054ce:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <main+0xa4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005500 <main+0xa8>)
 80054d4:	6013      	str	r3, [r2, #0]
            JumpToApplication = (pFunction)JumpAddress;
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <main+0xa8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <main+0xac>)
 80054de:	601a      	str	r2, [r3, #0]
            JumpToApplication();
 80054e0:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <main+0xac>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4798      	blx	r3
        }
    }

    while (1);
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <main+0x90>
 80054ec:	40020800 	.word	0x40020800
 80054f0:	08008000 	.word	0x08008000
 80054f4:	d41f4487 	.word	0xd41f4487
 80054f8:	e000ed00 	.word	0xe000ed00
 80054fc:	08008004 	.word	0x08008004
 8005500:	200006e4 	.word	0x200006e4
 8005504:	200006e0 	.word	0x200006e0

08005508 <Connect_Device_Func>:
}

void Connect_Device_Func(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800550e:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005510:	22aa      	movs	r2, #170	@ 0xaa
 8005512:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005514:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005516:	2255      	movs	r2, #85	@ 0x55
 8005518:	705a      	strb	r2, [r3, #1]
	buffer[2] = Connect_Device;
 800551a:	4b26      	ldr	r3, [pc, #152]	@ (80055b4 <Connect_Device_Func+0xac>)
 800551c:	22a1      	movs	r2, #161	@ 0xa1
 800551e:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 8005520:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005522:	2202      	movs	r2, #2
 8005524:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0x01;
 8005526:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005528:	2201      	movs	r2, #1
 800552a:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0x19;
 800552c:	4b21      	ldr	r3, [pc, #132]	@ (80055b4 <Connect_Device_Func+0xac>)
 800552e:	2219      	movs	r2, #25
 8005530:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x01;
 8005532:	4b20      	ldr	r3, [pc, #128]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005534:	2201      	movs	r2, #1
 8005536:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x01;
 8005538:	4b1e      	ldr	r3, [pc, #120]	@ (80055b4 <Connect_Device_Func+0xac>)
 800553a:	2201      	movs	r2, #1
 800553c:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0x01;
 800553e:	4b1d      	ldr	r3, [pc, #116]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005540:	2201      	movs	r2, #1
 8005542:	721a      	strb	r2, [r3, #8]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005544:	2107      	movs	r1, #7
 8005546:	481c      	ldr	r0, [pc, #112]	@ (80055b8 <Connect_Device_Func+0xb0>)
 8005548:	f7fb fb32 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 800554c:	4603      	mov	r3, r0
 800554e:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <Connect_Device_Func+0xb4>)
 8005550:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005552:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <Connect_Device_Func+0xb4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0e1b      	lsrs	r3, r3, #24
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b16      	ldr	r3, [pc, #88]	@ (80055b4 <Connect_Device_Func+0xac>)
 800555c:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800555e:	4b17      	ldr	r3, [pc, #92]	@ (80055bc <Connect_Device_Func+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005568:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 800556a:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <Connect_Device_Func+0xb4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	b2da      	uxtb	r2, r3
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005574:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005576:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <Connect_Device_Func+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <Connect_Device_Func+0xac>)
 800557e:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 8005580:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005582:	22bb      	movs	r2, #187	@ 0xbb
 8005584:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005588:	2266      	movs	r2, #102	@ 0x66
 800558a:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 800558c:	210e      	movs	r1, #14
 800558e:	4809      	ldr	r0, [pc, #36]	@ (80055b4 <Connect_Device_Func+0xac>)
 8005590:	f7fb fbcc 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	2301      	movs	r3, #1
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	2308      	movs	r3, #8
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <Connect_Device_Func+0xac>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	2108      	movs	r1, #8
 80055a8:	4805      	ldr	r0, [pc, #20]	@ (80055c0 <Connect_Device_Func+0xb8>)
 80055aa:	f7fd fac1 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>

	//	DMA_Memory_To_Memory_Transfer(buffer1, 8,8, (uint8_t *)buffer, 0, 1, 256);
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200006e8 	.word	0x200006e8
 80055b8:	200006ea 	.word	0x200006ea
 80055bc:	200007f4 	.word	0x200007f4
 80055c0:	0800600c 	.word	0x0800600c

080055c4 <Disconnect_Device_Func>:

void Disconnect_Device_Func(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 80055ca:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <Disconnect_Device_Func+0x90>)
 80055cc:	22aa      	movs	r2, #170	@ 0xaa
 80055ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 80055d0:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <Disconnect_Device_Func+0x90>)
 80055d2:	2255      	movs	r2, #85	@ 0x55
 80055d4:	705a      	strb	r2, [r3, #1]
	buffer[2] = Disconnect_Device;
 80055d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005654 <Disconnect_Device_Func+0x90>)
 80055d8:	22a2      	movs	r2, #162	@ 0xa2
 80055da:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <Disconnect_Device_Func+0x90>)
 80055de:	2202      	movs	r2, #2
 80055e0:	70da      	strb	r2, [r3, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80055e2:	2107      	movs	r1, #7
 80055e4:	481c      	ldr	r0, [pc, #112]	@ (8005658 <Disconnect_Device_Func+0x94>)
 80055e6:	f7fb fae3 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <Disconnect_Device_Func+0x98>)
 80055ee:	6013      	str	r3, [r2, #0]
	buffer[4]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80055f0:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <Disconnect_Device_Func+0x98>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	0e1b      	lsrs	r3, r3, #24
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	4b16      	ldr	r3, [pc, #88]	@ (8005654 <Disconnect_Device_Func+0x90>)
 80055fa:	711a      	strb	r2, [r3, #4]
	buffer[5]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80055fc:	4b17      	ldr	r3, [pc, #92]	@ (800565c <Disconnect_Device_Func+0x98>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2da      	uxtb	r2, r3
 8005604:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <Disconnect_Device_Func+0x90>)
 8005606:	715a      	strb	r2, [r3, #5]
	buffer[6]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005608:	4b14      	ldr	r3, [pc, #80]	@ (800565c <Disconnect_Device_Func+0x98>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <Disconnect_Device_Func+0x90>)
 8005612:	719a      	strb	r2, [r3, #6]
	buffer[7] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <Disconnect_Device_Func+0x98>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <Disconnect_Device_Func+0x90>)
 800561c:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0xBB;
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <Disconnect_Device_Func+0x90>)
 8005620:	22bb      	movs	r2, #187	@ 0xbb
 8005622:	721a      	strb	r2, [r3, #8]
	buffer[9] = 0x66;
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <Disconnect_Device_Func+0x90>)
 8005626:	2266      	movs	r2, #102	@ 0x66
 8005628:	725a      	strb	r2, [r3, #9]
	Custom_Comm_Send(buffer, 10);
 800562a:	210a      	movs	r1, #10
 800562c:	4809      	ldr	r0, [pc, #36]	@ (8005654 <Disconnect_Device_Func+0x90>)
 800562e:	f7fb fb7d 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	2301      	movs	r3, #1
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	2308      	movs	r3, #8
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	4b04      	ldr	r3, [pc, #16]	@ (8005654 <Disconnect_Device_Func+0x90>)
 8005642:	2200      	movs	r2, #0
 8005644:	2108      	movs	r1, #8
 8005646:	4806      	ldr	r0, [pc, #24]	@ (8005660 <Disconnect_Device_Func+0x9c>)
 8005648:	f7fd fa72 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>


}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200006e8 	.word	0x200006e8
 8005658:	200006ea 	.word	0x200006ea
 800565c:	200007f4 	.word	0x200007f4
 8005660:	0800600c 	.word	0x0800600c

08005664 <Write_Firmware_Func>:


void Write_Firmware_Func(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af04      	add	r7, sp, #16
	// Write Flash Memory

	buffer[0] = 0xAA;
 800566a:	4b22      	ldr	r3, [pc, #136]	@ (80056f4 <Write_Firmware_Func+0x90>)
 800566c:	22aa      	movs	r2, #170	@ 0xaa
 800566e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005670:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <Write_Firmware_Func+0x90>)
 8005672:	2255      	movs	r2, #85	@ 0x55
 8005674:	705a      	strb	r2, [r3, #1]
	buffer[2] = Write_Firmware;
 8005676:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <Write_Firmware_Func+0x90>)
 8005678:	22a3      	movs	r2, #163	@ 0xa3
 800567a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800567c:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <Write_Firmware_Func+0x90>)
 800567e:	2202      	movs	r2, #2
 8005680:	70da      	strb	r2, [r3, #3]

	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005682:	2107      	movs	r1, #7
 8005684:	481c      	ldr	r0, [pc, #112]	@ (80056f8 <Write_Firmware_Func+0x94>)
 8005686:	f7fb fa93 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 800568a:	4603      	mov	r3, r0
 800568c:	4a1b      	ldr	r2, [pc, #108]	@ (80056fc <Write_Firmware_Func+0x98>)
 800568e:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005690:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <Write_Firmware_Func+0x98>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e1b      	lsrs	r3, r3, #24
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b16      	ldr	r3, [pc, #88]	@ (80056f4 <Write_Firmware_Func+0x90>)
 800569a:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800569c:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <Write_Firmware_Func+0x98>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056a6:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <Write_Firmware_Func+0x98>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4b10      	ldr	r3, [pc, #64]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056b2:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <Write_Firmware_Func+0x98>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056bc:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 80056be:	4b0d      	ldr	r3, [pc, #52]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056c0:	22bb      	movs	r2, #187	@ 0xbb
 80056c2:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056c6:	2266      	movs	r2, #102	@ 0x66
 80056c8:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 80056ca:	210e      	movs	r1, #14
 80056cc:	4809      	ldr	r0, [pc, #36]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056ce:	f7fb fb2d 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80056d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056d6:	9302      	str	r3, [sp, #8]
 80056d8:	2301      	movs	r3, #1
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	2308      	movs	r3, #8
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <Write_Firmware_Func+0x90>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	2108      	movs	r1, #8
 80056e6:	4806      	ldr	r0, [pc, #24]	@ (8005700 <Write_Firmware_Func+0x9c>)
 80056e8:	f7fd fa22 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200006e8 	.word	0x200006e8
 80056f8:	200006ea 	.word	0x200006ea
 80056fc:	200007f4 	.word	0x200007f4
 8005700:	0800600c 	.word	0x0800600c

08005704 <Read_Firmware_Func>:

void Read_Firmware_Func(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 800570a:	4b22      	ldr	r3, [pc, #136]	@ (8005794 <Read_Firmware_Func+0x90>)
 800570c:	22aa      	movs	r2, #170	@ 0xaa
 800570e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005710:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005712:	2255      	movs	r2, #85	@ 0x55
 8005714:	705a      	strb	r2, [r3, #1]
	buffer[2] = Read_Firmware;
 8005716:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005718:	22a4      	movs	r2, #164	@ 0xa4
 800571a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <Read_Firmware_Func+0x90>)
 800571e:	2202      	movs	r2, #2
 8005720:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005722:	2107      	movs	r1, #7
 8005724:	481c      	ldr	r0, [pc, #112]	@ (8005798 <Read_Firmware_Func+0x94>)
 8005726:	f7fb fa43 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 800572a:	4603      	mov	r3, r0
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <Read_Firmware_Func+0x98>)
 800572e:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <Read_Firmware_Func+0x98>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0e1b      	lsrs	r3, r3, #24
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <Read_Firmware_Func+0x90>)
 800573a:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800573c:	4b17      	ldr	r3, [pc, #92]	@ (800579c <Read_Firmware_Func+0x98>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	b2da      	uxtb	r2, r3
 8005744:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005746:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005748:	4b14      	ldr	r3, [pc, #80]	@ (800579c <Read_Firmware_Func+0x98>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005752:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005754:	4b11      	ldr	r3, [pc, #68]	@ (800579c <Read_Firmware_Func+0x98>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <Read_Firmware_Func+0x90>)
 800575c:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005760:	22bb      	movs	r2, #187	@ 0xbb
 8005762:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005766:	2266      	movs	r2, #102	@ 0x66
 8005768:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 800576a:	210e      	movs	r1, #14
 800576c:	4809      	ldr	r0, [pc, #36]	@ (8005794 <Read_Firmware_Func+0x90>)
 800576e:	f7fb fadd 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	2301      	movs	r3, #1
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	2308      	movs	r3, #8
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <Read_Firmware_Func+0x90>)
 8005782:	2200      	movs	r2, #0
 8005784:	2108      	movs	r1, #8
 8005786:	4806      	ldr	r0, [pc, #24]	@ (80057a0 <Read_Firmware_Func+0x9c>)
 8005788:	f7fd f9d2 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200006e8 	.word	0x200006e8
 8005798:	200006ea 	.word	0x200006ea
 800579c:	200007f4 	.word	0x200007f4
 80057a0:	0800600c 	.word	0x0800600c

080057a4 <Erase_Firmware_Func>:

void Erase_Firmware_Func(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af04      	add	r7, sp, #16
	buffer[0] = 0xAA;
 80057aa:	4b22      	ldr	r3, [pc, #136]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057ac:	22aa      	movs	r2, #170	@ 0xaa
 80057ae:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 80057b0:	4b20      	ldr	r3, [pc, #128]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057b2:	2255      	movs	r2, #85	@ 0x55
 80057b4:	705a      	strb	r2, [r3, #1]
	buffer[2] = Erase_Firmware;
 80057b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057b8:	22a5      	movs	r2, #165	@ 0xa5
 80057ba:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057be:	2202      	movs	r2, #2
 80057c0:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80057c2:	2107      	movs	r1, #7
 80057c4:	481c      	ldr	r0, [pc, #112]	@ (8005838 <Erase_Firmware_Func+0x94>)
 80057c6:	f7fb f9f3 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <Erase_Firmware_Func+0x98>)
 80057ce:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80057d0:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <Erase_Firmware_Func+0x98>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0e1b      	lsrs	r3, r3, #24
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057da:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80057dc:	4b17      	ldr	r3, [pc, #92]	@ (800583c <Erase_Firmware_Func+0x98>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057e6:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80057e8:	4b14      	ldr	r3, [pc, #80]	@ (800583c <Erase_Firmware_Func+0x98>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057f2:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80057f4:	4b11      	ldr	r3, [pc, #68]	@ (800583c <Erase_Firmware_Func+0x98>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <Erase_Firmware_Func+0x90>)
 80057fc:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <Erase_Firmware_Func+0x90>)
 8005800:	22bb      	movs	r2, #187	@ 0xbb
 8005802:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <Erase_Firmware_Func+0x90>)
 8005806:	2266      	movs	r2, #102	@ 0x66
 8005808:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 800580a:	210e      	movs	r1, #14
 800580c:	4809      	ldr	r0, [pc, #36]	@ (8005834 <Erase_Firmware_Func+0x90>)
 800580e:	f7fb fa8d 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8005812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005816:	9302      	str	r3, [sp, #8]
 8005818:	2301      	movs	r3, #1
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	2308      	movs	r3, #8
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4b04      	ldr	r3, [pc, #16]	@ (8005834 <Erase_Firmware_Func+0x90>)
 8005822:	2200      	movs	r2, #0
 8005824:	2108      	movs	r1, #8
 8005826:	4806      	ldr	r0, [pc, #24]	@ (8005840 <Erase_Firmware_Func+0x9c>)
 8005828:	f7fd f982 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200006e8 	.word	0x200006e8
 8005838:	200006ea 	.word	0x200006ea
 800583c:	200007f4 	.word	0x200007f4
 8005840:	0800600c 	.word	0x0800600c

08005844 <Reboot_MCU_Func>:

void Reboot_MCU_Func(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af04      	add	r7, sp, #16

	buffer[0] = 0xAA;
 800584a:	4b21      	ldr	r3, [pc, #132]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 800584c:	22aa      	movs	r2, #170	@ 0xaa
 800584e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x55;
 8005850:	4b1f      	ldr	r3, [pc, #124]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 8005852:	2255      	movs	r2, #85	@ 0x55
 8005854:	705a      	strb	r2, [r3, #1]
	buffer[2] = Reboot_MCU;
 8005856:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 8005858:	22a6      	movs	r2, #166	@ 0xa6
 800585a:	709a      	strb	r2, [r3, #2]
	buffer[3] = Req_ACK;
 800585c:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 800585e:	2202      	movs	r2, #2
 8005860:	70da      	strb	r2, [r3, #3]
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8005862:	2107      	movs	r1, #7
 8005864:	481b      	ldr	r0, [pc, #108]	@ (80058d4 <Reboot_MCU_Func+0x90>)
 8005866:	f7fb f9a3 	bl	8000bb0 <CRC_Compute_8Bit_Block>
 800586a:	4603      	mov	r3, r0
 800586c:	4a1a      	ldr	r2, [pc, #104]	@ (80058d8 <Reboot_MCU_Func+0x94>)
 800586e:	6013      	str	r3, [r2, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8005870:	4b19      	ldr	r3, [pc, #100]	@ (80058d8 <Reboot_MCU_Func+0x94>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	0e1b      	lsrs	r3, r3, #24
 8005876:	b2da      	uxtb	r2, r3
 8005878:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 800587a:	725a      	strb	r2, [r3, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800587c:	4b16      	ldr	r3, [pc, #88]	@ (80058d8 <Reboot_MCU_Func+0x94>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 8005886:	729a      	strb	r2, [r3, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8005888:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <Reboot_MCU_Func+0x94>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	b2da      	uxtb	r2, r3
 8005890:	4b0f      	ldr	r3, [pc, #60]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 8005892:	72da      	strb	r2, [r3, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8005894:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <Reboot_MCU_Func+0x94>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 800589c:	731a      	strb	r2, [r3, #12]
	buffer[13] = 0xBB;
 800589e:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 80058a0:	22bb      	movs	r2, #187	@ 0xbb
 80058a2:	735a      	strb	r2, [r3, #13]
	buffer[14] = 0x66;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 80058a6:	2266      	movs	r2, #102	@ 0x66
 80058a8:	739a      	strb	r2, [r3, #14]
	Custom_Comm_Send(buffer, 14);
 80058aa:	210e      	movs	r1, #14
 80058ac:	4808      	ldr	r0, [pc, #32]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 80058ae:	f7fb fa3d 	bl	8000d2c <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80058b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058b6:	9302      	str	r3, [sp, #8]
 80058b8:	2301      	movs	r3, #1
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	2308      	movs	r3, #8
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4b03      	ldr	r3, [pc, #12]	@ (80058d0 <Reboot_MCU_Func+0x8c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	2108      	movs	r1, #8
 80058c6:	4805      	ldr	r0, [pc, #20]	@ (80058dc <Reboot_MCU_Func+0x98>)
 80058c8:	f7fd f932 	bl	8002b30 <DMA_Memory_To_Memory_Transfer>

	NVIC_SystemReset();
 80058cc:	f7ff fbe4 	bl	8005098 <__NVIC_SystemReset>
 80058d0:	200006e8 	.word	0x200006e8
 80058d4:	200006ea 	.word	0x200006ea
 80058d8:	200007f4 	.word	0x200007f4
 80058dc:	0800600c 	.word	0x0800600c

080058e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <SystemInit+0x20>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ea:	4a05      	ldr	r2, [pc, #20]	@ (8005900 <SystemInit+0x20>)
 80058ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	2302      	movs	r3, #2
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	2302      	movs	r3, #2
 800591c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800591e:	4b34      	ldr	r3, [pc, #208]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b08      	cmp	r3, #8
 800592c:	d011      	beq.n	8005952 <SystemCoreClockUpdate+0x4e>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d844      	bhi.n	80059be <SystemCoreClockUpdate+0xba>
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <SystemCoreClockUpdate+0x3e>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d004      	beq.n	800594a <SystemCoreClockUpdate+0x46>
 8005940:	e03d      	b.n	80059be <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005942:	4b2c      	ldr	r3, [pc, #176]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 8005944:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <SystemCoreClockUpdate+0xf4>)
 8005946:	601a      	str	r2, [r3, #0]
      break;
 8005948:	e03d      	b.n	80059c6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800594a:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 800594c:	4a2b      	ldr	r2, [pc, #172]	@ (80059fc <SystemCoreClockUpdate+0xf8>)
 800594e:	601a      	str	r2, [r3, #0]
      break;
 8005950:	e039      	b.n	80059c6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005952:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	0d9b      	lsrs	r3, r3, #22
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800595e:	4b24      	ldr	r3, [pc, #144]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005966:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800596e:	4a23      	ldr	r2, [pc, #140]	@ (80059fc <SystemCoreClockUpdate+0xf8>)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 8005978:	6852      	ldr	r2, [r2, #4]
 800597a:	0992      	lsrs	r2, r2, #6
 800597c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e00b      	b.n	80059a0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <SystemCoreClockUpdate+0xf4>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	4a17      	ldr	r2, [pc, #92]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 8005992:	6852      	ldr	r2, [r2, #4]
 8005994:	0992      	lsrs	r2, r2, #6
 8005996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80059a0:	4b13      	ldr	r3, [pc, #76]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	4a0e      	ldr	r2, [pc, #56]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 80059ba:	6013      	str	r3, [r2, #0]
      break;
 80059bc:	e003      	b.n	80059c6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 80059c0:	4a0d      	ldr	r2, [pc, #52]	@ (80059f8 <SystemCoreClockUpdate+0xf4>)
 80059c2:	601a      	str	r2, [r3, #0]
      break;
 80059c4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80059c6:	4b0a      	ldr	r3, [pc, #40]	@ (80059f0 <SystemCoreClockUpdate+0xec>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a00 <SystemCoreClockUpdate+0xfc>)
 80059d2:	5cd3      	ldrb	r3, [r2, r3]
 80059d4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	4a04      	ldr	r2, [pc, #16]	@ (80059f4 <SystemCoreClockUpdate+0xf0>)
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40023800 	.word	0x40023800
 80059f4:	20000000 	.word	0x20000000
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	007a1200 	.word	0x007a1200
 8005a00:	08006010 	.word	0x08006010

08005a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a04:	480d      	ldr	r0, [pc, #52]	@ (8005a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a08:	f7ff ff6a 	bl	80058e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a0c:	480c      	ldr	r0, [pc, #48]	@ (8005a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a0e:	490d      	ldr	r1, [pc, #52]	@ (8005a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a10:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <LoopForever+0xe>)
  movs r3, #0
 8005a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a14:	e002      	b.n	8005a1c <LoopCopyDataInit>

08005a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a1a:	3304      	adds	r3, #4

08005a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a20:	d3f9      	bcc.n	8005a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a22:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a24:	4c0a      	ldr	r4, [pc, #40]	@ (8005a50 <LoopForever+0x16>)
  movs r3, #0
 8005a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a28:	e001      	b.n	8005a2e <LoopFillZerobss>

08005a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a2c:	3204      	adds	r2, #4

08005a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a30:	d3fb      	bcc.n	8005a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005a32:	f000 f811 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a36:	f7ff fd0f 	bl	8005458 <main>

08005a3a <LoopForever>:

LoopForever:
  b LoopForever
 8005a3a:	e7fe      	b.n	8005a3a <LoopForever>
  ldr   r0, =_estack
 8005a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a44:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8005a48:	08006030 	.word	0x08006030
  ldr r2, =_sbss
 8005a4c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8005a50:	200007f8 	.word	0x200007f8

08005a54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a54:	e7fe      	b.n	8005a54 <ADC_IRQHandler>
	...

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2600      	movs	r6, #0
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4d0b      	ldr	r5, [pc, #44]	@ (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f000 f8a4 	bl	8005bb8 <_init>
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2600      	movs	r6, #0
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	08006028 	.word	0x08006028
 8005a94:	08006028 	.word	0x08006028
 8005a98:	08006028 	.word	0x08006028
 8005a9c:	0800602c 	.word	0x0800602c

08005aa0 <memcpy>:
 8005aa0:	440a      	add	r2, r1
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aa8:	d100      	bne.n	8005aac <memcpy+0xc>
 8005aaa:	4770      	bx	lr
 8005aac:	b510      	push	{r4, lr}
 8005aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	d1f9      	bne.n	8005aae <memcpy+0xe>
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <ceil>:
 8005ac0:	ec51 0b10 	vmov	r0, r1, d0
 8005ac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005ad0:	2e13      	cmp	r6, #19
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	4680      	mov	r8, r0
 8005ad8:	dc2e      	bgt.n	8005b38 <ceil+0x78>
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	da11      	bge.n	8005b02 <ceil+0x42>
 8005ade:	a332      	add	r3, pc, #200	@ (adr r3, 8005ba8 <ceil+0xe8>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa fb76 	bl	80001d4 <__adddf3>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	f7fa ffb8 	bl	8000a60 <__aeabi_dcmpgt>
 8005af0:	b120      	cbz	r0, 8005afc <ceil+0x3c>
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	db4f      	blt.n	8005b96 <ceil+0xd6>
 8005af6:	4325      	orrs	r5, r4
 8005af8:	d151      	bne.n	8005b9e <ceil+0xde>
 8005afa:	462c      	mov	r4, r5
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	e023      	b.n	8005b4a <ceil+0x8a>
 8005b02:	4f2b      	ldr	r7, [pc, #172]	@ (8005bb0 <ceil+0xf0>)
 8005b04:	4137      	asrs	r7, r6
 8005b06:	ea01 0307 	and.w	r3, r1, r7
 8005b0a:	4303      	orrs	r3, r0
 8005b0c:	d01d      	beq.n	8005b4a <ceil+0x8a>
 8005b0e:	a326      	add	r3, pc, #152	@ (adr r3, 8005ba8 <ceil+0xe8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fb5e 	bl	80001d4 <__adddf3>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f7fa ffa0 	bl	8000a60 <__aeabi_dcmpgt>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d0eb      	beq.n	8005afc <ceil+0x3c>
 8005b24:	2c00      	cmp	r4, #0
 8005b26:	bfc2      	ittt	gt
 8005b28:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005b2c:	4133      	asrgt	r3, r6
 8005b2e:	18e4      	addgt	r4, r4, r3
 8005b30:	ea24 0407 	bic.w	r4, r4, r7
 8005b34:	2500      	movs	r5, #0
 8005b36:	e7e1      	b.n	8005afc <ceil+0x3c>
 8005b38:	2e33      	cmp	r6, #51	@ 0x33
 8005b3a:	dd0a      	ble.n	8005b52 <ceil+0x92>
 8005b3c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005b40:	d103      	bne.n	8005b4a <ceil+0x8a>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	f7fa fb45 	bl	80001d4 <__adddf3>
 8005b4a:	ec41 0b10 	vmov	d0, r0, r1
 8005b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b52:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005b56:	f04f 37ff 	mov.w	r7, #4294967295
 8005b5a:	40df      	lsrs	r7, r3
 8005b5c:	4238      	tst	r0, r7
 8005b5e:	d0f4      	beq.n	8005b4a <ceil+0x8a>
 8005b60:	a311      	add	r3, pc, #68	@ (adr r3, 8005ba8 <ceil+0xe8>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fb35 	bl	80001d4 <__adddf3>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f7fa ff77 	bl	8000a60 <__aeabi_dcmpgt>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d0c2      	beq.n	8005afc <ceil+0x3c>
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	dd0a      	ble.n	8005b90 <ceil+0xd0>
 8005b7a:	2e14      	cmp	r6, #20
 8005b7c:	d101      	bne.n	8005b82 <ceil+0xc2>
 8005b7e:	3401      	adds	r4, #1
 8005b80:	e006      	b.n	8005b90 <ceil+0xd0>
 8005b82:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005b86:	2301      	movs	r3, #1
 8005b88:	40b3      	lsls	r3, r6
 8005b8a:	441d      	add	r5, r3
 8005b8c:	45a8      	cmp	r8, r5
 8005b8e:	d8f6      	bhi.n	8005b7e <ceil+0xbe>
 8005b90:	ea25 0507 	bic.w	r5, r5, r7
 8005b94:	e7b2      	b.n	8005afc <ceil+0x3c>
 8005b96:	2500      	movs	r5, #0
 8005b98:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005b9c:	e7ae      	b.n	8005afc <ceil+0x3c>
 8005b9e:	4c05      	ldr	r4, [pc, #20]	@ (8005bb4 <ceil+0xf4>)
 8005ba0:	2500      	movs	r5, #0
 8005ba2:	e7ab      	b.n	8005afc <ceil+0x3c>
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	8800759c 	.word	0x8800759c
 8005bac:	7e37e43c 	.word	0x7e37e43c
 8005bb0:	000fffff 	.word	0x000fffff
 8005bb4:	3ff00000 	.word	0x3ff00000

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
