
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002428  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080025b0  080025b0  000035b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c0  080025c0  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  080025c0  080025c0  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c0  080025c0  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c0  080025c0  000035c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080025c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004004  2**0
                  CONTENTS
 10 .bss          000001b8  20000004  20000004  00004004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00004004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007600  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e9f  00000000  00000000  0000b634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  0000c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ae  00000000  00000000  0000c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000df4  00000000  00000000  0000cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000661e  00000000  00000000  0000d902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008faac  00000000  00000000  00013f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a39cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c8c  00000000  00000000  000a3a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a469c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002598 	.word	0x08002598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002598 	.word	0x08002598

080001c8 <CRC_Init>:


#include "CRC.h"

void CRC_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 80001cc:	4b05      	ldr	r3, [pc, #20]	@ (80001e4 <CRC_Init+0x1c>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a04      	ldr	r2, [pc, #16]	@ (80001e4 <CRC_Init+0x1c>)
 80001d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40023800 	.word	0x40023800

080001e8 <CRC_Reset>:

void CRC_Reset(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
    CRC->CR |= CRC_CR_RESET;
 80001ec:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <CRC_Reset+0x1c>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a04      	ldr	r2, [pc, #16]	@ (8000204 <CRC_Reset+0x1c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6093      	str	r3, [r2, #8]
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023000 	.word	0x40023000

08000208 <CRC_Compute_8Bit_Block>:
    CRC->DR = (word);
    return (CRC->DR);
}

uint32_t CRC_Compute_8Bit_Block(volatile uint8_t *wordBlock, size_t length)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	uint8_t temp=0;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]
	CRC_Reset();
 8000216:	f7ff ffe7 	bl	80001e8 <CRC_Reset>
	for(uint32_t i = 0; i < length; i++)
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e00a      	b.n	8000236 <CRC_Compute_8Bit_Block+0x2e>
	{
		temp = wordBlock[i];
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
		CRC -> DR = 0x00000000 | (temp);
 800022a:	4a08      	ldr	r2, [pc, #32]	@ (800024c <CRC_Compute_8Bit_Block+0x44>)
 800022c:	7afb      	ldrb	r3, [r7, #11]
 800022e:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 0; i < length; i++)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	3301      	adds	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d3f0      	bcc.n	8000220 <CRC_Compute_8Bit_Block+0x18>

	}
	return (CRC -> DR);
 800023e:	4b03      	ldr	r3, [pc, #12]	@ (800024c <CRC_Compute_8Bit_Block+0x44>)
 8000240:	681b      	ldr	r3, [r3, #0]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40023000 	.word	0x40023000

08000250 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000254:	4b60      	ldr	r3, [pc, #384]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a60      	ldr	r2, [pc, #384]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 800025a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 800025c:	4b5f      	ldr	r3, [pc, #380]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d015      	beq.n	8000294 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000268:	4b5d      	ldr	r3, [pc, #372]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	2280      	movs	r2, #128	@ 0x80
 8000270:	4013      	ands	r3, r2
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00e      	beq.n	8000294 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000276:	4b5a      	ldr	r3, [pc, #360]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800027c:	2b00      	cmp	r3, #0
 800027e:	d009      	beq.n	8000294 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000280:	4b57      	ldr	r3, [pc, #348]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000286:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000288:	4b53      	ldr	r3, [pc, #332]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a52      	ldr	r2, [pc, #328]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000294:	4b51      	ldr	r3, [pc, #324]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 0304 	and.w	r3, r3, #4
 800029c:	2b00      	cmp	r3, #0
 800029e:	d015      	beq.n	80002cc <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80002a0:	4b4f      	ldr	r3, [pc, #316]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	2202      	movs	r2, #2
 80002a8:	4013      	ands	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d00e      	beq.n	80002cc <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80002ae:	4b4c      	ldr	r3, [pc, #304]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d009      	beq.n	80002cc <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80002b8:	4b49      	ldr	r3, [pc, #292]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002be:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80002c0:	4b45      	ldr	r3, [pc, #276]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a44      	ldr	r2, [pc, #272]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 80002cc:	4b43      	ldr	r3, [pc, #268]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d015      	beq.n	8000304 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80002d8:	4b41      	ldr	r3, [pc, #260]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	2204      	movs	r2, #4
 80002e0:	4013      	ands	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00e      	beq.n	8000304 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80002e6:	4b3e      	ldr	r3, [pc, #248]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d009      	beq.n	8000304 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80002f0:	4b3b      	ldr	r3, [pc, #236]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002f6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a36      	ldr	r2, [pc, #216]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000304:	4b35      	ldr	r3, [pc, #212]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	2b00      	cmp	r3, #0
 800030e:	d02d      	beq.n	800036c <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000310:	4b33      	ldr	r3, [pc, #204]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	2208      	movs	r2, #8
 8000318:	4013      	ands	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d026      	beq.n	800036c <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800031e:	4b30      	ldr	r3, [pc, #192]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000324:	2b00      	cmp	r3, #0
 8000326:	d021      	beq.n	800036c <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800032e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000330:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a28      	ldr	r2, [pc, #160]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800033c:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000342:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000346:	4293      	cmp	r3, r2
 8000348:	d110      	bne.n	800036c <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800034a:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800035a:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000360:	4798      	blx	r3
 8000362:	e003      	b.n	800036c <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800036a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <DMA1_Stream0_IRQHandler+0x18c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	2b00      	cmp	r3, #0
 8000376:	d02d      	beq.n	80003d4 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000378:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	2210      	movs	r2, #16
 8000380:	4013      	ands	r3, r2
 8000382:	2b00      	cmp	r3, #0
 8000384:	d026      	beq.n	80003d4 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038c:	2b00      	cmp	r3, #0
 800038e:	d021      	beq.n	80003d4 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x188>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d110      	bne.n	80003d4 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d004      	beq.n	80003cc <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80003c8:	4798      	blx	r3
				}
			}
		}

	}
}
 80003ca:	e003      	b.n	80003d4 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x190>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80003d2:	4798      	blx	r3
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40026000 	.word	0x40026000
 80003dc:	20000060 	.word	0x20000060
 80003e0:	20000020 	.word	0x20000020

080003e4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80003e8:	4b60      	ldr	r3, [pc, #384]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a60      	ldr	r2, [pc, #384]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 80003ee:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80003f0:	4b5f      	ldr	r3, [pc, #380]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d015      	beq.n	8000428 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80003fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	2280      	movs	r2, #128	@ 0x80
 8000404:	4013      	ands	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00e      	beq.n	8000428 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800040a:	4b5a      	ldr	r3, [pc, #360]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000410:	2b00      	cmp	r3, #0
 8000412:	d009      	beq.n	8000428 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000414:	4b57      	ldr	r3, [pc, #348]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800041a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800041c:	4b53      	ldr	r3, [pc, #332]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a52      	ldr	r2, [pc, #328]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 8000422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000426:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000428:	4b51      	ldr	r3, [pc, #324]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000430:	2b00      	cmp	r3, #0
 8000432:	d015      	beq.n	8000460 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000434:	4b4f      	ldr	r3, [pc, #316]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	2202      	movs	r2, #2
 800043c:	4013      	ands	r3, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d00e      	beq.n	8000460 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000442:	4b4c      	ldr	r3, [pc, #304]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000448:	2b00      	cmp	r3, #0
 800044a:	d009      	beq.n	8000460 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800044c:	4b49      	ldr	r3, [pc, #292]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000454:	4b45      	ldr	r3, [pc, #276]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a44      	ldr	r2, [pc, #272]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800045e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000460:	4b43      	ldr	r3, [pc, #268]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000468:	2b00      	cmp	r3, #0
 800046a:	d015      	beq.n	8000498 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800046c:	4b41      	ldr	r3, [pc, #260]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	2204      	movs	r2, #4
 8000474:	4013      	ands	r3, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00e      	beq.n	8000498 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800047a:	4b3e      	ldr	r3, [pc, #248]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000484:	4b3b      	ldr	r3, [pc, #236]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800048a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800048c:	4b37      	ldr	r3, [pc, #220]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a36      	ldr	r2, [pc, #216]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000496:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000498:	4b35      	ldr	r3, [pc, #212]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d02d      	beq.n	8000500 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80004a4:	4b33      	ldr	r3, [pc, #204]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	2208      	movs	r2, #8
 80004ac:	4013      	ands	r3, r2
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d026      	beq.n	8000500 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80004b2:	4b30      	ldr	r3, [pc, #192]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d021      	beq.n	8000500 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80004bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80004c4:	4b29      	ldr	r3, [pc, #164]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a28      	ldr	r2, [pc, #160]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 80004ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ce:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004da:	4293      	cmp	r3, r2
 80004dc:	d110      	bne.n	8000500 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80004de:	4b25      	ldr	r3, [pc, #148]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d004      	beq.n	80004f8 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80004ee:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80004f4:	4798      	blx	r3
 80004f6:	e003      	b.n	8000500 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80004f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004fe:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <DMA1_Stream1_IRQHandler+0x18c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000508:	2b00      	cmp	r3, #0
 800050a:	d02d      	beq.n	8000568 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	2210      	movs	r2, #16
 8000514:	4013      	ands	r3, r2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d026      	beq.n	8000568 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000520:	2b00      	cmp	r3, #0
 8000522:	d021      	beq.n	8000568 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <DMA1_Stream1_IRQHandler+0x188>)
 8000532:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000536:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800053e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000542:	4293      	cmp	r3, r2
 8000544:	d110      	bne.n	8000568 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d004      	beq.n	8000560 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800055c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800055e:	e003      	b.n	8000568 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <DMA1_Stream1_IRQHandler+0x190>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000566:	4798      	blx	r3
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40026000 	.word	0x40026000
 8000570:	20000060 	.word	0x20000060
 8000574:	20000024 	.word	0x20000024

08000578 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800057c:	4b64      	ldr	r3, [pc, #400]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a64      	ldr	r2, [pc, #400]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 8000582:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000584:	4b63      	ldr	r3, [pc, #396]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d015      	beq.n	80005bc <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	2280      	movs	r2, #128	@ 0x80
 8000598:	4013      	ands	r3, r2
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00e      	beq.n	80005bc <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800059e:	4b5e      	ldr	r3, [pc, #376]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d009      	beq.n	80005bc <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80005a8:	4b5b      	ldr	r3, [pc, #364]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80005b0:	4b57      	ldr	r3, [pc, #348]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4a56      	ldr	r2, [pc, #344]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80005b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005ba:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80005bc:	4b55      	ldr	r3, [pc, #340]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d015      	beq.n	80005f4 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80005c8:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	2202      	movs	r2, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00e      	beq.n	80005f4 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80005d6:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d009      	beq.n	80005f4 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80005e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80005e8:	4b49      	ldr	r3, [pc, #292]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a48      	ldr	r2, [pc, #288]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80005ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80005f4:	4b47      	ldr	r3, [pc, #284]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d01c      	beq.n	800063a <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000600:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	2204      	movs	r2, #4
 8000608:	4013      	ands	r3, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	d015      	beq.n	800063a <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800060e:	4b42      	ldr	r3, [pc, #264]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	2204      	movs	r2, #4
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00e      	beq.n	800063a <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800061c:	4b3e      	ldr	r3, [pc, #248]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000622:	2b00      	cmp	r3, #0
 8000624:	d009      	beq.n	800063a <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000626:	4b3c      	ldr	r3, [pc, #240]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062c:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 8000634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000638:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800063a:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02d      	beq.n	80006a2 <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000646:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	2208      	movs	r2, #8
 800064e:	4013      	ands	r3, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d026      	beq.n	80006a2 <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000654:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800065a:	2b00      	cmp	r3, #0
 800065c:	d021      	beq.n	80006a2 <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800065e:	4b2e      	ldr	r3, [pc, #184]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000664:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000666:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	4a29      	ldr	r2, [pc, #164]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000678:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800067c:	4293      	cmp	r3, r2
 800067e:	d110      	bne.n	80006a2 <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000696:	4798      	blx	r3
 8000698:	e003      	b.n	80006a2 <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006a0:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <DMA1_Stream2_IRQHandler+0x19c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d02d      	beq.n	800070a <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	2210      	movs	r2, #16
 80006b6:	4013      	ands	r3, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d026      	beq.n	800070a <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d021      	beq.n	800070a <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <DMA1_Stream2_IRQHandler+0x198>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d8:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d110      	bne.n	800070a <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d004      	beq.n	8000702 <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80006fe:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8000700:	e003      	b.n	800070a <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <DMA1_Stream2_IRQHandler+0x1a0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000708:	4798      	blx	r3
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40026000 	.word	0x40026000
 8000714:	20000060 	.word	0x20000060
 8000718:	20000028 	.word	0x20000028

0800071c <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000720:	4b60      	ldr	r3, [pc, #384]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a60      	ldr	r2, [pc, #384]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 8000726:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000728:	4b5f      	ldr	r3, [pc, #380]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000730:	2b00      	cmp	r3, #0
 8000732:	d015      	beq.n	8000760 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000734:	4b5d      	ldr	r3, [pc, #372]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	4013      	ands	r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00e      	beq.n	8000760 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000742:	4b5a      	ldr	r3, [pc, #360]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000748:	2b00      	cmp	r3, #0
 800074a:	d009      	beq.n	8000760 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800074c:	4b57      	ldr	r3, [pc, #348]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000752:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000754:	4b53      	ldr	r3, [pc, #332]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	4a52      	ldr	r2, [pc, #328]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 800075a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800075e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8000760:	4b51      	ldr	r3, [pc, #324]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d015      	beq.n	8000798 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800076c:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	2202      	movs	r2, #2
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00e      	beq.n	8000798 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800077a:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	2b00      	cmp	r3, #0
 8000782:	d009      	beq.n	8000798 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000784:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800078c:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4a44      	ldr	r2, [pc, #272]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 8000792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000796:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8000798:	4b43      	ldr	r3, [pc, #268]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d015      	beq.n	80007d0 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80007a4:	4b41      	ldr	r3, [pc, #260]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	2204      	movs	r2, #4
 80007ac:	4013      	ands	r3, r2
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00e      	beq.n	80007d0 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80007b2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d009      	beq.n	80007d0 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80007bc:	4b3b      	ldr	r3, [pc, #236]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80007c4:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4a36      	ldr	r2, [pc, #216]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ce:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80007d0:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d02d      	beq.n	8000838 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80007dc:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	2208      	movs	r2, #8
 80007e4:	4013      	ands	r3, r2
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d026      	beq.n	8000838 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d021      	beq.n	8000838 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80007f4:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007fa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a28      	ldr	r2, [pc, #160]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 8000802:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000806:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800080e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000812:	4293      	cmp	r3, r2
 8000814:	d110      	bne.n	8000838 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800082c:	4798      	blx	r3
 800082e:	e003      	b.n	8000838 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000836:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <DMA1_Stream3_IRQHandler+0x18c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d02d      	beq.n	80008a0 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	2210      	movs	r2, #16
 800084c:	4013      	ands	r3, r2
 800084e:	2b00      	cmp	r3, #0
 8000850:	d026      	beq.n	80008a0 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	2b00      	cmp	r3, #0
 800085a:	d021      	beq.n	80008a0 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <DMA1_Stream3_IRQHandler+0x188>)
 800086a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800086e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000876:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800087a:	4293      	cmp	r3, r2
 800087c:	d110      	bne.n	80008a0 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000894:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8000896:	e003      	b.n	80008a0 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <DMA1_Stream3_IRQHandler+0x190>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800089e:	4798      	blx	r3
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40026000 	.word	0x40026000
 80008a8:	20000060 	.word	0x20000060
 80008ac:	2000002c 	.word	0x2000002c

080008b0 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80008b4:	4b4f      	ldr	r3, [pc, #316]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a4f      	ldr	r2, [pc, #316]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 80008ba:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80008bc:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00e      	beq.n	80008e6 <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80008c8:	4b4c      	ldr	r3, [pc, #304]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d009      	beq.n	80008e6 <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80008d2:	4b4a      	ldr	r3, [pc, #296]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008d8:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80008da:	4b46      	ldr	r3, [pc, #280]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a45      	ldr	r2, [pc, #276]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e4:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80008e6:	4b44      	ldr	r3, [pc, #272]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00e      	beq.n	8000910 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80008f2:	4b42      	ldr	r3, [pc, #264]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d009      	beq.n	8000910 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80008fc:	4b3f      	ldr	r3, [pc, #252]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000904:	4b3b      	ldr	r3, [pc, #236]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a3a      	ldr	r2, [pc, #232]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8000910:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00e      	beq.n	800093a <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	2b00      	cmp	r3, #0
 8000924:	d009      	beq.n	800093a <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000926:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800092e:	4b31      	ldr	r3, [pc, #196]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	4a30      	ldr	r2, [pc, #192]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800093a:	4b2f      	ldr	r3, [pc, #188]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	2b00      	cmp	r3, #0
 8000944:	d026      	beq.n	8000994 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000946:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094c:	2b00      	cmp	r3, #0
 800094e:	d021      	beq.n	8000994 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000958:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a25      	ldr	r2, [pc, #148]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800096a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800096e:	4293      	cmp	r3, r2
 8000970:	d110      	bne.n	8000994 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d004      	beq.n	800098c <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000988:	4798      	blx	r3
 800098a:	e003      	b.n	8000994 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000992:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <DMA1_Stream4_IRQHandler+0x148>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	2b00      	cmp	r3, #0
 800099e:	d026      	beq.n	80009ee <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d021      	beq.n	80009ee <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <DMA1_Stream4_IRQHandler+0x144>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d110      	bne.n	80009ee <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009e2:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80009e4:	e003      	b.n	80009ee <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <DMA1_Stream4_IRQHandler+0x14c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40026000 	.word	0x40026000
 80009f8:	20000064 	.word	0x20000064
 80009fc:	20000030 	.word	0x20000030

08000a00 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000a04:	4b4f      	ldr	r3, [pc, #316]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000a0a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00e      	beq.n	8000a36 <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000a18:	4b4c      	ldr	r3, [pc, #304]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d009      	beq.n	8000a36 <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000a22:	4b4a      	ldr	r3, [pc, #296]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a28:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000a2a:	4b46      	ldr	r3, [pc, #280]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	4a45      	ldr	r2, [pc, #276]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a34:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8000a36:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00e      	beq.n	8000a60 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000a42:	4b42      	ldr	r3, [pc, #264]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4a3a      	ldr	r2, [pc, #232]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000a60:	4b39      	ldr	r3, [pc, #228]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00e      	beq.n	8000a8a <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000a6c:	4b37      	ldr	r3, [pc, #220]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d009      	beq.n	8000a8a <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000a76:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000a7e:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4a30      	ldr	r2, [pc, #192]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000a84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a88:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d026      	beq.n	8000ae4 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a25      	ldr	r2, [pc, #148]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d110      	bne.n	8000ae4 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ad8:	4798      	blx	r3
 8000ada:	e003      	b.n	8000ae4 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ae2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <DMA1_Stream5_IRQHandler+0x148>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d026      	beq.n	8000b3e <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d021      	beq.n	8000b3e <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <DMA1_Stream5_IRQHandler+0x144>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b0c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d110      	bne.n	8000b3e <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b32:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000b34:	e003      	b.n	8000b3e <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <DMA1_Stream5_IRQHandler+0x14c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40026000 	.word	0x40026000
 8000b48:	20000064 	.word	0x20000064
 8000b4c:	20000034 	.word	0x20000034

08000b50 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000b54:	4b4f      	ldr	r3, [pc, #316]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a4f      	ldr	r2, [pc, #316]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000b5a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00e      	beq.n	8000b86 <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b68:	4b4c      	ldr	r3, [pc, #304]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d009      	beq.n	8000b86 <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b72:	4b4a      	ldr	r3, [pc, #296]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b78:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000b7a:	4b46      	ldr	r3, [pc, #280]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	4a45      	ldr	r2, [pc, #276]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b84:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00e      	beq.n	8000bb0 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d009      	beq.n	8000bb0 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000baa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bae:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000bb0:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00e      	beq.n	8000bda <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d009      	beq.n	8000bda <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bcc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000bce:	4b31      	ldr	r3, [pc, #196]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	4a30      	ldr	r2, [pc, #192]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000bd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bd8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d026      	beq.n	8000c34 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000be6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d021      	beq.n	8000c34 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a25      	ldr	r2, [pc, #148]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c02:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d110      	bne.n	8000c34 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c28:	4798      	blx	r3
 8000c2a:	e003      	b.n	8000c34 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c32:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x148>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d026      	beq.n	8000c8e <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d021      	beq.n	8000c8e <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <DMA1_Stream6_IRQHandler+0x144>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d110      	bne.n	8000c8e <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c82:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000c84:	e003      	b.n	8000c8e <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <DMA1_Stream6_IRQHandler+0x14c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40026000 	.word	0x40026000
 8000c98:	20000064 	.word	0x20000064
 8000c9c:	20000038 	.word	0x20000038

08000ca0 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000caa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000cac:	4b4e      	ldr	r3, [pc, #312]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00e      	beq.n	8000cd6 <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d009      	beq.n	8000cd6 <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cc8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000cca:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	4a45      	ldr	r2, [pc, #276]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cd4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000cd6:	4b44      	ldr	r3, [pc, #272]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00e      	beq.n	8000d00 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000ce2:	4b42      	ldr	r3, [pc, #264]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d009      	beq.n	8000d00 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000cec:	4b3f      	ldr	r3, [pc, #252]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cfe:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000d00:	4b39      	ldr	r3, [pc, #228]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00e      	beq.n	8000d2a <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d009      	beq.n	8000d2a <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d16:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000d1e:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a30      	ldr	r2, [pc, #192]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d28:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d026      	beq.n	8000d84 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d36:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d46:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000d4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d52:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d110      	bne.n	8000d84 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d62:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d78:	4798      	blx	r3
 8000d7a:	e003      	b.n	8000d84 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d82:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <DMA1_Stream7_IRQHandler+0x148>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d026      	beq.n	8000dde <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d021      	beq.n	8000dde <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <DMA1_Stream7_IRQHandler+0x144>)
 8000da8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dac:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d110      	bne.n	8000dde <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd2:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000dd4:	e003      	b.n	8000dde <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <DMA1_Stream7_IRQHandler+0x14c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ddc:	4798      	blx	r3
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40026000 	.word	0x40026000
 8000de8:	20000064 	.word	0x20000064
 8000dec:	2000003c 	.word	0x2000003c

08000df0 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000df4:	4b60      	ldr	r3, [pc, #384]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a60      	ldr	r2, [pc, #384]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000dfa:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d015      	beq.n	8000e34 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e08:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00e      	beq.n	8000e34 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e16:	4b5a      	ldr	r3, [pc, #360]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d009      	beq.n	8000e34 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e20:	4b57      	ldr	r3, [pc, #348]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e26:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000e28:	4b53      	ldr	r3, [pc, #332]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a52      	ldr	r2, [pc, #328]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000e34:	4b51      	ldr	r3, [pc, #324]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d015      	beq.n	8000e6c <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000e40:	4b4f      	ldr	r3, [pc, #316]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00e      	beq.n	8000e6c <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e58:	4b49      	ldr	r3, [pc, #292]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000e60:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4a44      	ldr	r2, [pc, #272]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000e6c:	4b43      	ldr	r3, [pc, #268]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d015      	beq.n	8000ea4 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000e78:	4b41      	ldr	r3, [pc, #260]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00e      	beq.n	8000ea4 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e86:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d009      	beq.n	8000ea4 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000e98:	4b37      	ldr	r3, [pc, #220]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a36      	ldr	r2, [pc, #216]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02d      	beq.n	8000f0c <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d026      	beq.n	8000f0c <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000ebe:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d021      	beq.n	8000f0c <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ece:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000ed0:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d110      	bne.n	8000f0c <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000eea:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f00:	4798      	blx	r3
 8000f02:	e003      	b.n	8000f0c <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0a:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <DMA2_Stream0_IRQHandler+0x18c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d02d      	beq.n	8000f74 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	2210      	movs	r2, #16
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d026      	beq.n	8000f74 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d021      	beq.n	8000f74 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <DMA2_Stream0_IRQHandler+0x188>)
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f4a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d110      	bne.n	8000f74 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d004      	beq.n	8000f6c <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f68:	4798      	blx	r3
				}
			}
		}

	}
}
 8000f6a:	e003      	b.n	8000f74 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <DMA2_Stream0_IRQHandler+0x190>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f72:	4798      	blx	r3
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40026400 	.word	0x40026400
 8000f7c:	20000060 	.word	0x20000060
 8000f80:	20000040 	.word	0x20000040

08000f84 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000f88:	4b4f      	ldr	r3, [pc, #316]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 8000f8e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000f90:	4b4e      	ldr	r3, [pc, #312]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fac:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000fae:	4b46      	ldr	r3, [pc, #280]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4a45      	ldr	r2, [pc, #276]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000fba:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00e      	beq.n	8000fe4 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000fc6:	4b42      	ldr	r3, [pc, #264]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d009      	beq.n	8000fe4 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000fe4:	4b39      	ldr	r3, [pc, #228]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d009      	beq.n	800100e <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000ffa:	4b35      	ldr	r3, [pc, #212]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4a30      	ldr	r2, [pc, #192]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8001008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800100c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800100e:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001016:	2b00      	cmp	r3, #0
 8001018:	d026      	beq.n	8001068 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800101a:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001020:	2b00      	cmp	r3, #0
 8001022:	d021      	beq.n	8001068 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001024:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a25      	ldr	r2, [pc, #148]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001036:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001038:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001042:	4293      	cmp	r3, r2
 8001044:	d110      	bne.n	8001068 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001046:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800105c:	4798      	blx	r3
 800105e:	e003      	b.n	8001068 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001066:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <DMA2_Stream1_IRQHandler+0x148>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001070:	2b00      	cmp	r3, #0
 8001072:	d026      	beq.n	80010c2 <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001074:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d021      	beq.n	80010c2 <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <DMA2_Stream1_IRQHandler+0x144>)
 800108c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001090:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001098:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800109c:	4293      	cmp	r3, r2
 800109e:	d110      	bne.n	80010c2 <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010b6:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80010b8:	e003      	b.n	80010c2 <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <DMA2_Stream1_IRQHandler+0x14c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c0:	4798      	blx	r3
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40026400 	.word	0x40026400
 80010cc:	20000060 	.word	0x20000060
 80010d0:	20000044 	.word	0x20000044

080010d4 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 80010d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 80010de:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80010e0:	4b4e      	ldr	r3, [pc, #312]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80010ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010fc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80010fe:	4b46      	ldr	r3, [pc, #280]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4a45      	ldr	r2, [pc, #276]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 800110a:	4b44      	ldr	r3, [pc, #272]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001116:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d009      	beq.n	8001134 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001120:	4b3f      	ldr	r3, [pc, #252]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001128:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a3a      	ldr	r2, [pc, #232]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 800112e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001132:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001134:	4b39      	ldr	r3, [pc, #228]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00e      	beq.n	800115e <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001140:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800114a:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001150:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4a30      	ldr	r2, [pc, #192]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 8001158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800115c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d026      	beq.n	80011b8 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001170:	2b00      	cmp	r3, #0
 8001172:	d021      	beq.n	80011b8 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800117c:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 8001182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001186:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001192:	4293      	cmp	r3, r2
 8001194:	d110      	bne.n	80011b8 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ac:	4798      	blx	r3
 80011ae:	e003      	b.n	80011b8 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <DMA2_Stream2_IRQHandler+0x148>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d026      	beq.n	8001212 <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d021      	beq.n	8001212 <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <DMA2_Stream2_IRQHandler+0x144>)
 80011dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e0:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d110      	bne.n	8001212 <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001206:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001208:	e003      	b.n	8001212 <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <DMA2_Stream2_IRQHandler+0x14c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001210:	4798      	blx	r3
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40026400 	.word	0x40026400
 800121c:	20000060 	.word	0x20000060
 8001220:	20000048 	.word	0x20000048

08001224 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001228:	4b60      	ldr	r3, [pc, #384]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a60      	ldr	r2, [pc, #384]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 800122e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001230:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d015      	beq.n	8001268 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800123c:	4b5d      	ldr	r3, [pc, #372]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00e      	beq.n	8001268 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800124a:	4b5a      	ldr	r3, [pc, #360]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001254:	4b57      	ldr	r3, [pc, #348]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 8001262:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001266:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001268:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d015      	beq.n	80012a0 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001274:	4b4f      	ldr	r3, [pc, #316]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00e      	beq.n	80012a0 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001282:	4b4c      	ldr	r3, [pc, #304]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d009      	beq.n	80012a0 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800128c:	4b49      	ldr	r3, [pc, #292]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001294:	4b45      	ldr	r3, [pc, #276]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a44      	ldr	r2, [pc, #272]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800129e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80012a0:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d015      	beq.n	80012d8 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80012ac:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00e      	beq.n	80012d8 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80012ba:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80012c4:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80012cc:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a36      	ldr	r2, [pc, #216]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80012d8:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02d      	beq.n	8001340 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80012e4:	4b33      	ldr	r3, [pc, #204]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2208      	movs	r2, #8
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d026      	beq.n	8001340 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d021      	beq.n	8001340 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 800130a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800130e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001310:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001316:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800131a:	4293      	cmp	r3, r2
 800131c:	d110      	bne.n	8001340 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001334:	4798      	blx	r3
 8001336:	e003      	b.n	8001340 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133e:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <DMA2_Stream3_IRQHandler+0x18c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d02d      	beq.n	80013a8 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2210      	movs	r2, #16
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d026      	beq.n	80013a8 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d021      	beq.n	80013a8 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <DMA2_Stream3_IRQHandler+0x188>)
 8001372:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001376:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001382:	4293      	cmp	r3, r2
 8001384:	d110      	bne.n	80013a8 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800139e:	e003      	b.n	80013a8 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <DMA2_Stream3_IRQHandler+0x190>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a6:	4798      	blx	r3
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40026400 	.word	0x40026400
 80013b0:	20000060 	.word	0x20000060
 80013b4:	2000004c 	.word	0x2000004c

080013b8 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80013bc:	4b4f      	ldr	r3, [pc, #316]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 80013c2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80013c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00e      	beq.n	80013ee <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80013d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80013da:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4a45      	ldr	r2, [pc, #276]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ec:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80013ee:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00e      	beq.n	8001418 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80013fa:	4b42      	ldr	r3, [pc, #264]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001404:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800140c:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a3a      	ldr	r2, [pc, #232]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001418:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001424:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800142e:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a30      	ldr	r2, [pc, #192]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001442:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d026      	beq.n	800149c <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800144e:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001454:	2b00      	cmp	r3, #0
 8001456:	d021      	beq.n	800149c <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001458:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a25      	ldr	r2, [pc, #148]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001472:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001476:	4293      	cmp	r3, r2
 8001478:	d110      	bne.n	800149c <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001490:	4798      	blx	r3
 8001492:	e003      	b.n	800149c <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <DMA2_Stream4_IRQHandler+0x148>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d026      	beq.n	80014f6 <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d021      	beq.n	80014f6 <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <DMA2_Stream4_IRQHandler+0x144>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d110      	bne.n	80014f6 <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ea:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80014ec:	e003      	b.n	80014f6 <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <DMA2_Stream4_IRQHandler+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	4798      	blx	r3
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40026400 	.word	0x40026400
 8001500:	20000064 	.word	0x20000064
 8001504:	20000050 	.word	0x20000050

08001508 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800150c:	4b4f      	ldr	r3, [pc, #316]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 8001512:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001514:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001520:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800152a:	4b4a      	ldr	r3, [pc, #296]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001530:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	4a45      	ldr	r2, [pc, #276]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800153c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800153e:	4b44      	ldr	r3, [pc, #272]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00e      	beq.n	8001568 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800154a:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001554:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800155c:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001566:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001568:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001574:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001584:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001586:	4b31      	ldr	r3, [pc, #196]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4a30      	ldr	r2, [pc, #192]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 800158c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001590:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001592:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d026      	beq.n	80015ec <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800159e:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ae:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a25      	ldr	r2, [pc, #148]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ba:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015bc:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d110      	bne.n	80015ec <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e0:	4798      	blx	r3
 80015e2:	e003      	b.n	80015ec <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <DMA2_Stream5_IRQHandler+0x148>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d026      	beq.n	8001646 <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d021      	beq.n	8001646 <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a0f      	ldr	r2, [pc, #60]	@ (800164c <DMA2_Stream5_IRQHandler+0x144>)
 8001610:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001614:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001620:	4293      	cmp	r3, r2
 8001622:	d110      	bne.n	8001646 <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163a:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800163c:	e003      	b.n	8001646 <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <DMA2_Stream5_IRQHandler+0x14c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	4798      	blx	r3
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40026400 	.word	0x40026400
 8001650:	20000064 	.word	0x20000064
 8001654:	20000054 	.word	0x20000054

08001658 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800165c:	4b4f      	ldr	r3, [pc, #316]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a4f      	ldr	r2, [pc, #316]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 8001662:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001664:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00e      	beq.n	800168e <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001670:	4b4c      	ldr	r3, [pc, #304]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800167a:	4b4a      	ldr	r3, [pc, #296]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a45      	ldr	r2, [pc, #276]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 800168e:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00e      	beq.n	80016b8 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800169a:	4b42      	ldr	r3, [pc, #264]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016a4:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80016ac:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 80016b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80016b8:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00e      	beq.n	80016e2 <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016c4:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016ce:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80016d6:	4b31      	ldr	r3, [pc, #196]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4a30      	ldr	r2, [pc, #192]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 80016dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016e0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d026      	beq.n	800173c <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d021      	beq.n	800173c <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fe:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a25      	ldr	r2, [pc, #148]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 8001706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800170a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001712:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001716:	4293      	cmp	r3, r2
 8001718:	d110      	bne.n	800173c <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800172a:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001730:	4798      	blx	r3
 8001732:	e003      	b.n	800173c <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800173c:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x148>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d026      	beq.n	8001796 <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	2b00      	cmp	r3, #0
 8001750:	d021      	beq.n	8001796 <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <DMA2_Stream6_IRQHandler+0x144>)
 8001760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001764:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001770:	4293      	cmp	r3, r2
 8001772:	d110      	bne.n	8001796 <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800178a:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800178c:	e003      	b.n	8001796 <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001794:	4798      	blx	r3
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40026400 	.word	0x40026400
 80017a0:	20000064 	.word	0x20000064
 80017a4:	20000058 	.word	0x20000058

080017a8 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 80017b2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80017b4:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80017c0:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80017ca:	4b4a      	ldr	r3, [pc, #296]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	4a45      	ldr	r2, [pc, #276]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80017d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017dc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80017de:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00e      	beq.n	8001808 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017f4:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80017fc:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a3a      	ldr	r2, [pc, #232]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001806:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001808:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00e      	beq.n	8001832 <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001814:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800181e:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a30      	ldr	r2, [pc, #192]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 800182c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001830:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d026      	beq.n	800188c <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800183e:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 8001856:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800185a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001862:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001866:	4293      	cmp	r3, r2
 8001868:	d110      	bne.n	800188c <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001880:	4798      	blx	r3
 8001882:	e003      	b.n	800188c <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <DMA2_Stream7_IRQHandler+0x148>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d026      	beq.n	80018e6 <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d021      	beq.n	80018e6 <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <DMA2_Stream7_IRQHandler+0x144>)
 80018b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018b4:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d110      	bne.n	80018e6 <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018da:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018dc:	e003      	b.n	80018e6 <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <DMA2_Stream7_IRQHandler+0x14c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e4:	4798      	blx	r3
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40026400 	.word	0x40026400
 80018f0:	20000064 	.word	0x20000064
 80018f4:	2000005c 	.word	0x2000005c

080018f8 <DMA_Memory_To_Memory_Transfer>:
 */
void DMA_Memory_To_Memory_Transfer(volatile void *source,
		uint8_t source_data_size, bool source_increment,
		volatile void *destination, uint8_t dest_data_size,
		bool destination_increment, uint16_t length)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	72fb      	strb	r3, [r7, #11]
 8001906:	4613      	mov	r3, r2
 8001908:	72bb      	strb	r3, [r7, #10]
	// Enable DMA2 clock
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800190a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <DMA_Memory_To_Memory_Transfer+0x188>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <DMA_Memory_To_Memory_Transfer+0x188>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30

	// Clear the channel selection and set the transfer direction to memory-to-memory
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800191c:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8001920:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 8001922:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2180      	movs	r1, #128	@ 0x80
 8001928:	4a56      	ldr	r2, [pc, #344]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800192a:	430b      	orrs	r3, r1
 800192c:	6013      	str	r3, [r2, #0]

	// Set the transfer complete interrupt and priority level
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 800192e:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a54      	ldr	r2, [pc, #336]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001934:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6013      	str	r3, [r2, #0]

	// Set the peripheral data size based on the source data size
	if(source_data_size == 32)
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2b20      	cmp	r3, #32
 8001942:	d106      	bne.n	8001952 <DMA_Memory_To_Memory_Transfer+0x5a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 8001944:	4b4f      	ldr	r3, [pc, #316]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a4e      	ldr	r2, [pc, #312]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800194a:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e015      	b.n	800197e <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else if(source_data_size == 16)
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d10c      	bne.n	8001972 <DMA_Memory_To_Memory_Transfer+0x7a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8001958:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a49      	ldr	r2, [pc, #292]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800195e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001962:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001964:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a46      	ldr	r2, [pc, #280]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800196a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e005      	b.n	800197e <DMA_Memory_To_Memory_Transfer+0x86>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8001972:	4b44      	ldr	r3, [pc, #272]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a43      	ldr	r2, [pc, #268]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001978:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800197c:	6013      	str	r3, [r2, #0]
	}

	// Set the memory data size based on the destination data size
	if(dest_data_size == 32)
 800197e:	7e3b      	ldrb	r3, [r7, #24]
 8001980:	2b20      	cmp	r3, #32
 8001982:	d106      	bne.n	8001992 <DMA_Memory_To_Memory_Transfer+0x9a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8001984:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3e      	ldr	r2, [pc, #248]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800198a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e015      	b.n	80019be <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else if(dest_data_size == 16)
 8001992:	7e3b      	ldrb	r3, [r7, #24]
 8001994:	2b10      	cmp	r3, #16
 8001996:	d10c      	bne.n	80019b2 <DMA_Memory_To_Memory_Transfer+0xba>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8001998:	4b3a      	ldr	r3, [pc, #232]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a39      	ldr	r2, [pc, #228]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 800199e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a2:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 80019a4:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e005      	b.n	80019be <DMA_Memory_To_Memory_Transfer+0xc6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a33      	ldr	r2, [pc, #204]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019b8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80019bc:	6013      	str	r3, [r2, #0]
	}

	// Configure source address increment mode
	if(source_increment)
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 80019c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e005      	b.n	80019de <DMA_Memory_To_Memory_Transfer+0xe6>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 80019d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80019dc:	6013      	str	r3, [r2, #0]
	}

	// Configure destination address increment mode
	if(destination_increment)
 80019de:	7f3b      	ldrb	r3, [r7, #28]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <DMA_Memory_To_Memory_Transfer+0xfa>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e005      	b.n	80019fe <DMA_Memory_To_Memory_Transfer+0x106>
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a23      	ldr	r2, [pc, #140]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 80019f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019fc:	6013      	str	r3, [r2, #0]
	}

	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a20      	ldr	r2, [pc, #128]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6153      	str	r3, [r2, #20]

	// Set the peripheral address (source)
	DMA2_Stream0->PAR = (uint32_t)(source);
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6093      	str	r3, [r2, #8]

	// Set the memory address (destination)
	DMA2_Stream0->M0AR = (uint32_t)(destination);
 8001a10:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60d3      	str	r3, [r2, #12]

	// Set the number of data items to transfer
	DMA2_Stream0->NDTR = (uint16_t)length;
 8001a16:	4a1b      	ldr	r2, [pc, #108]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a18:	8c3b      	ldrh	r3, [r7, #32]
 8001a1a:	6053      	str	r3, [r2, #4]

	// Enable the DMA stream
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

	// Wait for the transfer to complete
	while((DMA2->LISR & (DMA_LISR_TCIF0_Msk)) == 0) {}
 8001a28:	bf00      	nop
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <DMA_Memory_To_Memory_Transfer+0x190>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f9      	beq.n	8001a2a <DMA_Memory_To_Memory_Transfer+0x132>

	// Clear the transfer complete flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <DMA_Memory_To_Memory_Transfer+0x190>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <DMA_Memory_To_Memory_Transfer+0x190>)
 8001a3c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001a40:	6093      	str	r3, [r2, #8]

	// Disable the DMA stream

	DMA2_Stream0->CR = 0;
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
	DMA2_Stream0->FCR = 0;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
	DMA2_Stream0->M0AR = 0;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = 0;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR= 0;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->PAR = 0;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <DMA_Memory_To_Memory_Transfer+0x18c>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40026410 	.word	0x40026410
 8001a88:	40026400 	.word	0x40026400

08001a8c <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <EXTI0_IRQHandler+0x24>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <EXTI0_IRQHandler+0x12>
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <EXTI0_IRQHandler+0x24>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <EXTI0_IRQHandler+0x28>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <EXTI0_IRQHandler+0x28>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6153      	str	r3, [r2, #20]
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000068 	.word	0x20000068
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <EXTI1_IRQHandler+0x24>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <EXTI1_IRQHandler+0x12>
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <EXTI1_IRQHandler+0x24>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <EXTI1_IRQHandler+0x28>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <EXTI1_IRQHandler+0x28>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6153      	str	r3, [r2, #20]
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000068 	.word	0x20000068
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <EXTI2_IRQHandler+0x24>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <EXTI2_IRQHandler+0x12>
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <EXTI2_IRQHandler+0x24>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <EXTI2_IRQHandler+0x28>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <EXTI2_IRQHandler+0x28>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6153      	str	r3, [r2, #20]
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000068 	.word	0x20000068
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <EXTI3_IRQHandler+0x24>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <EXTI3_IRQHandler+0x12>
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <EXTI3_IRQHandler+0x24>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <EXTI3_IRQHandler+0x28>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <EXTI3_IRQHandler+0x28>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6153      	str	r3, [r2, #20]
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000068 	.word	0x20000068
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <EXTI4_IRQHandler+0x24>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <EXTI4_IRQHandler+0x12>
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <EXTI4_IRQHandler+0x24>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <EXTI4_IRQHandler+0x28>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <EXTI4_IRQHandler+0x28>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6153      	str	r3, [r2, #20]
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000068 	.word	0x20000068
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8001b6e:	2305      	movs	r3, #5
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e020      	b.n	8001bb6 <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <EXTI9_5_IRQHandler+0x60>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d014      	beq.n	8001bb0 <EXTI9_5_IRQHandler+0x48>
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <EXTI9_5_IRQHandler+0x64>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <EXTI9_5_IRQHandler+0x64>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <EXTI9_5_IRQHandler+0x60>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <EXTI9_5_IRQHandler+0x60>)
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	dddb      	ble.n	8001b74 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40013c00 	.word	0x40013c00
 8001bcc:	20000068 	.word	0x20000068

08001bd0 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	e020      	b.n	8001c1e <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <EXTI15_10_IRQHandler+0x60>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2101      	movs	r1, #1
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d014      	beq.n	8001c18 <EXTI15_10_IRQHandler+0x48>
 8001bee:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <EXTI15_10_IRQHandler+0x64>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <EXTI15_10_IRQHandler+0x64>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <EXTI15_10_IRQHandler+0x60>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4611      	mov	r1, r2
 8001c12:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <EXTI15_10_IRQHandler+0x60>)
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	dddb      	ble.n	8001bdc <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40013c00 	.word	0x40013c00
 8001c34:	20000068 	.word	0x20000068

08001c38 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <GPIO_Clock_Enable+0xcc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04b      	beq.n	8001ce0 <GPIO_Clock_Enable+0xa8>
 8001c48:	4a2e      	ldr	r2, [pc, #184]	@ (8001d04 <GPIO_Clock_Enable+0xcc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d84f      	bhi.n	8001cee <GPIO_Clock_Enable+0xb6>
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <GPIO_Clock_Enable+0xd0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d03e      	beq.n	8001cd2 <GPIO_Clock_Enable+0x9a>
 8001c54:	4a2c      	ldr	r2, [pc, #176]	@ (8001d08 <GPIO_Clock_Enable+0xd0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d849      	bhi.n	8001cee <GPIO_Clock_Enable+0xb6>
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <GPIO_Clock_Enable+0xd4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d031      	beq.n	8001cc4 <GPIO_Clock_Enable+0x8c>
 8001c60:	4a2a      	ldr	r2, [pc, #168]	@ (8001d0c <GPIO_Clock_Enable+0xd4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d843      	bhi.n	8001cee <GPIO_Clock_Enable+0xb6>
 8001c66:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <GPIO_Clock_Enable+0xd8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d024      	beq.n	8001cb6 <GPIO_Clock_Enable+0x7e>
 8001c6c:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <GPIO_Clock_Enable+0xd8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d83d      	bhi.n	8001cee <GPIO_Clock_Enable+0xb6>
 8001c72:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <GPIO_Clock_Enable+0xdc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d017      	beq.n	8001ca8 <GPIO_Clock_Enable+0x70>
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <GPIO_Clock_Enable+0xdc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d837      	bhi.n	8001cee <GPIO_Clock_Enable+0xb6>
 8001c7e:	4a26      	ldr	r2, [pc, #152]	@ (8001d18 <GPIO_Clock_Enable+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <GPIO_Clock_Enable+0x54>
 8001c84:	4a25      	ldr	r2, [pc, #148]	@ (8001d1c <GPIO_Clock_Enable+0xe4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <GPIO_Clock_Enable+0x62>
 8001c8a:	e030      	b.n	8001cee <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c98:	e02c      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a20      	ldr	r2, [pc, #128]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	e025      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb4:	e01e      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	e017      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd0:	e010      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	e009      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d20 <GPIO_Clock_Enable+0xe8>)
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cec:	e002      	b.n	8001cf4 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e000      	b.n	8001cf6 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40023800 	.word	0x40023800

08001d24 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70bb      	strb	r3, [r7, #2]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ff7a 	bl	8001c38 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	0052      	lsls	r2, r2, #1
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	43d2      	mvns	r2, r2
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	78b9      	ldrb	r1, [r7, #2]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	0052      	lsls	r2, r2, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	43d2      	mvns	r2, r2
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8001d82:	2202      	movs	r2, #2
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d008      	beq.n	8001d9c <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	7879      	ldrb	r1, [r7, #1]
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	43d2      	mvns	r2, r2
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8001db2:	2204      	movs	r2, #4
 8001db4:	7c3b      	ldrb	r3, [r7, #16]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	7c39      	ldrb	r1, [r7, #16]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	0052      	lsls	r2, r2, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	0052      	lsls	r2, r2, #1
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	43d2      	mvns	r2, r2
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8001de4:	2204      	movs	r2, #4
 8001de6:	7d3b      	ldrb	r3, [r7, #20]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	7d39      	ldrb	r1, [r7, #20]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	0052      	lsls	r2, r2, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8001e00:	2202      	movs	r2, #2
 8001e02:	78bb      	ldrb	r3, [r7, #2]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d12f      	bne.n	8001e68 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	d815      	bhi.n	8001e3a <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	210f      	movs	r1, #15
 8001e18:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1c:	43d2      	mvns	r2, r2
 8001e1e:	401a      	ands	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	7e39      	ldrb	r1, [r7, #24]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	e016      	b.n	8001e68 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	3a08      	subs	r2, #8
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	210f      	movs	r1, #15
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	43d2      	mvns	r2, r2
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	7e39      	ldrb	r1, [r7, #24]
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	3a08      	subs	r2, #8
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 8001e78:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b57      	ldr	r3, [pc, #348]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001e80:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8001e82:	4b56      	ldr	r3, [pc, #344]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <UART4_IRQHandler+0x3e>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <UART4_IRQHandler+0x3e>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 8001e9c:	4b50      	ldr	r3, [pc, #320]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ea4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eb0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d010      	beq.n	8001ee2 <UART4_IRQHandler+0x6e>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8001ec0:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <UART4_IRQHandler+0x6e>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8001ecc:	4b44      	ldr	r3, [pc, #272]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8001ed6:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <UART4_IRQHandler+0x9e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <UART4_IRQHandler+0x9e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8001efc:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001f04:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f10:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001f34:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8001f36:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f40:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <UART4_IRQHandler+0xfe>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <UART4_IRQHandler+0xfe>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001f64:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f6c:	f023 0320 	bic.w	r3, r3, #32
 8001f70:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <UART4_IRQHandler+0x12e>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <UART4_IRQHandler+0x12e>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f94:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001f9c:	f023 0310 	bic.w	r3, r3, #16
 8001fa0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <UART4_IRQHandler+0x168>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <UART4_IRQHandler+0x15e>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <UART4_IRQHandler+0x15e>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <UART4_IRQHandler+0x16c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001fc4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a03      	ldr	r2, [pc, #12]	@ (8001fd8 <UART4_IRQHandler+0x164>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004c00 	.word	0x40004c00
 8001fdc:	200000b0 	.word	0x200000b0
 8001fe0:	200000ac 	.word	0x200000ac

08001fe4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8001fe8:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <USART1_IRQHandler+0x164>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b57      	ldr	r3, [pc, #348]	@ (800214c <USART1_IRQHandler+0x168>)
 8001ff0:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8001ff2:	4b56      	ldr	r3, [pc, #344]	@ (800214c <USART1_IRQHandler+0x168>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <USART1_IRQHandler+0x3e>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <USART1_IRQHandler+0x16c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <USART1_IRQHandler+0x3e>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <USART1_IRQHandler+0x16c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002014:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8002016:	4b4c      	ldr	r3, [pc, #304]	@ (8002148 <USART1_IRQHandler+0x164>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a4b      	ldr	r2, [pc, #300]	@ (8002148 <USART1_IRQHandler+0x164>)
 800201c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002020:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 8002022:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <USART1_IRQHandler+0x168>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <USART1_IRQHandler+0x6e>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8002030:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <USART1_IRQHandler+0x16c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <USART1_IRQHandler+0x6e>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 800203c:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <USART1_IRQHandler+0x16c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8002046:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <USART1_IRQHandler+0x164>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <USART1_IRQHandler+0x164>)
 800204c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002050:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 8002052:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <USART1_IRQHandler+0x168>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d010      	beq.n	8002082 <USART1_IRQHandler+0x9e>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <USART1_IRQHandler+0x16c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <USART1_IRQHandler+0x9e>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800206c:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <USART1_IRQHandler+0x16c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002074:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <USART1_IRQHandler+0x164>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a33      	ldr	r2, [pc, #204]	@ (8002148 <USART1_IRQHandler+0x164>)
 800207c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002080:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8002082:	4b32      	ldr	r3, [pc, #200]	@ (800214c <USART1_IRQHandler+0x168>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <USART1_IRQHandler+0xce>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8002090:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <USART1_IRQHandler+0x16c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <USART1_IRQHandler+0xce>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800209c:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <USART1_IRQHandler+0x16c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80020a4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80020a6:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <USART1_IRQHandler+0x164>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <USART1_IRQHandler+0x164>)
 80020ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020b0:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <USART1_IRQHandler+0x168>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <USART1_IRQHandler+0xfe>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <USART1_IRQHandler+0x16c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <USART1_IRQHandler+0xfe>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80020cc:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <USART1_IRQHandler+0x16c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80020d4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <USART1_IRQHandler+0x164>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <USART1_IRQHandler+0x164>)
 80020dc:	f023 0320 	bic.w	r3, r3, #32
 80020e0:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <USART1_IRQHandler+0x168>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <USART1_IRQHandler+0x12e>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 80020f0:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <USART1_IRQHandler+0x16c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <USART1_IRQHandler+0x12e>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <USART1_IRQHandler+0x16c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002104:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <USART1_IRQHandler+0x164>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <USART1_IRQHandler+0x164>)
 800210c:	f023 0310 	bic.w	r3, r3, #16
 8002110:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <USART1_IRQHandler+0x168>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d010      	beq.n	8002142 <USART1_IRQHandler+0x15e>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <USART1_IRQHandler+0x16c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <USART1_IRQHandler+0x15e>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <USART1_IRQHandler+0x16c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002134:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8002136:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <USART1_IRQHandler+0x164>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <USART1_IRQHandler+0x164>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]
		}
	}

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40011000 	.word	0x40011000
 800214c:	200000b0 	.word	0x200000b0
 8002150:	200000a8 	.word	0x200000a8

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	@ (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	@ (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ffc2 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 80021f2:	f000 f8f1 	bl	80023d8 <SystemInit>

	uint8_t pll_m = 8;
 80021f6:	2308      	movs	r3, #8
 80021f8:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80021fa:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80021fe:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8002204:	2307      	movs	r3, #7
 8002206:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8002208:	4b3c      	ldr	r3, [pc, #240]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800220a:	2200      	movs	r2, #0
 800220c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3a      	ldr	r2, [pc, #232]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800221a:	bf00      	nop
 800221c:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f9      	beq.n	800221c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002228:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	4a33      	ldr	r2, [pc, #204]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002234:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <MCU_Clock_Setup+0x114>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <MCU_Clock_Setup+0x114>)
 800223a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002240:	4b30      	ldr	r3, [pc, #192]	@ (8002304 <MCU_Clock_Setup+0x118>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <MCU_Clock_Setup+0x118>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800224a:	f043 0305 	orr.w	r3, r3, #5
 800224e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002250:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	78ba      	ldrb	r2, [r7, #2]
 8002256:	0611      	lsls	r1, r2, #24
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	4311      	orrs	r1, r2
 800225e:	88ba      	ldrh	r2, [r7, #4]
 8002260:	0192      	lsls	r2, r2, #6
 8002262:	4311      	orrs	r1, r2
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	430a      	orrs	r2, r1
 8002268:	4611      	mov	r1, r2
 800226a:	4a24      	ldr	r2, [pc, #144]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800226c:	430b      	orrs	r3, r1
 800226e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002270:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002276:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800227a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800227e:	4a1f      	ldr	r2, [pc, #124]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002284:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a1c      	ldr	r2, [pc, #112]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800228a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800228e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <MCU_Clock_Setup+0x110>)
 8002296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <MCU_Clock_Setup+0x110>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80022a8:	bf00      	nop
 80022aa:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f9      	beq.n	80022aa <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80022c2:	bf00      	nop
 80022c4:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d1f9      	bne.n	80022c4 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80022d0:	f000 f894 	bl	80023fc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <MCU_Clock_Setup+0x11c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <MCU_Clock_Setup+0x120>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff60 	bl	80021a8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	4a03      	ldr	r2, [pc, #12]	@ (80022fc <MCU_Clock_Setup+0x110>)
 80022ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	40007000 	.word	0x40007000
 8002304:	40023c00 	.word	0x40023c00
 8002308:	20000000 	.word	0x20000000
 800230c:	18618619 	.word	0x18618619

08002310 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <Delay_Config+0x2c>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <Delay_Config+0x2c>)
 800231c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002320:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <Delay_Config+0x2c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <Delay_Config+0x2c>)
 800232a:	2205      	movs	r2, #5
 800232c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <main>:
void Reboot_MCU_Func(void);
void Erase_Firmware_Func(void);
/*==============================================================================================*/

int main(void)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b091      	sub	sp, #68	@ 0x44
 8002344:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8002346:	f7ff ff51 	bl	80021ec <MCU_Clock_Setup>
	Delay_Config();
 800234a:	f7ff ffe1 	bl	8002310 <Delay_Config>
	CRC_Init();
 800234e:	f7fd ff3b 	bl	80001c8 <CRC_Init>

	GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8002352:	2000      	movs	r0, #0
 8002354:	2402      	movs	r4, #2
 8002356:	2304      	movs	r3, #4
 8002358:	2204      	movs	r2, #4
 800235a:	2100      	movs	r1, #0
 800235c:	9102      	str	r1, [sp, #8]
 800235e:	9201      	str	r2, [sp, #4]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4623      	mov	r3, r4
 8002364:	4602      	mov	r2, r0
 8002366:	2100      	movs	r1, #0
 8002368:	4816      	ldr	r0, [pc, #88]	@ (80023c4 <main+0x84>)
 800236a:	f7ff fcdb 	bl	8001d24 <GPIO_Pin_Init>

	uint32_t data[10];


	for(int i = 0; i < 8; i++)
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002372:	e009      	b.n	8002388 <main+0x48>
	{
		buffer[i] = i;
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	b2d9      	uxtb	r1, r3
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <main+0x88>)
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	3301      	adds	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	2b07      	cmp	r3, #7
 800238c:	ddf2      	ble.n	8002374 <main+0x34>
	}

	CRC_Rec1= CRC_Compute_8Bit_Block(buffer, 8);
 800238e:	2108      	movs	r1, #8
 8002390:	480d      	ldr	r0, [pc, #52]	@ (80023c8 <main+0x88>)
 8002392:	f7fd ff39 	bl	8000208 <CRC_Compute_8Bit_Block>
 8002396:	4603      	mov	r3, r0
 8002398:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <main+0x8c>)
 800239a:	6013      	str	r3, [r2, #0]


	CRC_Reset();
 800239c:	f7fd ff24 	bl	80001e8 <CRC_Reset>

//	DMA_Memory_To_Memory_Transfer((uint32_t*)buffer, 8, 32, &CRC->DR, 1, 0, 2);

	DMA_Memory_To_Memory_Transfer((uint32_t*)buffer, 8,1, &CRC->DR, 32, 0, 2);
 80023a0:	2302      	movs	r3, #2
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2320      	movs	r3, #32
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <main+0x90>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	2108      	movs	r1, #8
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <main+0x88>)
 80023b4:	f7ff faa0 	bl	80018f8 <DMA_Memory_To_Memory_Transfer>

	CRC_Rec2 = CRC -> DR;
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <main+0x90>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <main+0x94>)
 80023be:	6013      	str	r3, [r2, #0]
//	else
//	{
//		Application();
//	}

	while(1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <main+0x80>
 80023c4:	40020800 	.word	0x40020800
 80023c8:	200000b4 	.word	0x200000b4
 80023cc:	200001b4 	.word	0x200001b4
 80023d0:	40023000 	.word	0x40023000
 80023d4:	200001b8 	.word	0x200001b8

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	2302      	movs	r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	2302      	movs	r3, #2
 8002414:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002416:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b08      	cmp	r3, #8
 8002424:	d011      	beq.n	800244a <SystemCoreClockUpdate+0x4e>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d844      	bhi.n	80024b6 <SystemCoreClockUpdate+0xba>
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <SystemCoreClockUpdate+0x3e>
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d004      	beq.n	8002442 <SystemCoreClockUpdate+0x46>
 8002438:	e03d      	b.n	80024b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800243a:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 800243c:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <SystemCoreClockUpdate+0xf4>)
 800243e:	601a      	str	r2, [r3, #0]
      break;
 8002440:	e03d      	b.n	80024be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 8002444:	4a2b      	ldr	r2, [pc, #172]	@ (80024f4 <SystemCoreClockUpdate+0xf8>)
 8002446:	601a      	str	r2, [r3, #0]
      break;
 8002448:	e039      	b.n	80024be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800244a:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0d9b      	lsrs	r3, r3, #22
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800245e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002466:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <SystemCoreClockUpdate+0xf8>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 8002470:	6852      	ldr	r2, [r2, #4]
 8002472:	0992      	lsrs	r2, r2, #6
 8002474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00b      	b.n	8002498 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002480:	4a1b      	ldr	r2, [pc, #108]	@ (80024f0 <SystemCoreClockUpdate+0xf4>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	4a17      	ldr	r2, [pc, #92]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 800248a:	6852      	ldr	r2, [r2, #4]
 800248c:	0992      	lsrs	r2, r2, #6
 800248e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	4a0e      	ldr	r2, [pc, #56]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 80024b2:	6013      	str	r3, [r2, #0]
      break;
 80024b4:	e003      	b.n	80024be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <SystemCoreClockUpdate+0xf4>)
 80024ba:	601a      	str	r2, [r3, #0]
      break;
 80024bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <SystemCoreClockUpdate+0xec>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <SystemCoreClockUpdate+0xfc>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <SystemCoreClockUpdate+0xf0>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40023800 	.word	0x40023800
 80024ec:	20000000 	.word	0x20000000
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	080025b0 	.word	0x080025b0

080024fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024fc:	480d      	ldr	r0, [pc, #52]	@ (8002534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002500:	f7ff ff6a 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <LoopForever+0x6>)
  ldr r1, =_edata
 8002506:	490d      	ldr	r1, [pc, #52]	@ (800253c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <LoopForever+0xe>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800251c:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <LoopForever+0x16>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800252a:	f000 f811 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252e:	f7ff ff07 	bl	8002340 <main>

08002532 <LoopForever>:

LoopForever:
  b LoopForever
 8002532:	e7fe      	b.n	8002532 <LoopForever>
  ldr   r0, =_estack
 8002534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800253c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002540:	080025c8 	.word	0x080025c8
  ldr r2, =_sbss
 8002544:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002548:	200001bc 	.word	0x200001bc

0800254c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC_IRQHandler>
	...

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4d0d      	ldr	r5, [pc, #52]	@ (8002588 <__libc_init_array+0x38>)
 8002554:	4c0d      	ldr	r4, [pc, #52]	@ (800258c <__libc_init_array+0x3c>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	2600      	movs	r6, #0
 800255c:	42a6      	cmp	r6, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	4d0b      	ldr	r5, [pc, #44]	@ (8002590 <__libc_init_array+0x40>)
 8002562:	4c0c      	ldr	r4, [pc, #48]	@ (8002594 <__libc_init_array+0x44>)
 8002564:	f000 f818 	bl	8002598 <_init>
 8002568:	1b64      	subs	r4, r4, r5
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	2600      	movs	r6, #0
 800256e:	42a6      	cmp	r6, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	f855 3b04 	ldr.w	r3, [r5], #4
 8002578:	4798      	blx	r3
 800257a:	3601      	adds	r6, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002582:	4798      	blx	r3
 8002584:	3601      	adds	r6, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	080025c0 	.word	0x080025c0
 800258c:	080025c0 	.word	0x080025c0
 8002590:	080025c0 	.word	0x080025c0
 8002594:	080025c4 	.word	0x080025c4

08002598 <_init>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr

080025a4 <_fini>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr
