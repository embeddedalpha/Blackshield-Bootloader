
Blackshield_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003548  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .app_section  00000048  08008000  08008000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000420  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003af0  08003af0  00006048  2**0
                  CONTENTS
  5 .ARM          00000000  08003af0  08003af0  00006048  2**0
                  CONTENTS
  6 .preinit_array 00000000  08003af0  08003af0  00006048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003af0  08003af0  00004af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08003af4  08003af4  00004af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000004  20000000  08003af8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00006048  2**0
                  CONTENTS
 11 .bss          000007ec  20000004  20000004  00007004  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007f0  200007f0  00007004  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000acef  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001428  00000000  00000000  00010d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000b9c  00000000  00000000  0001218f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000358  00000000  00000000  00012d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000046c  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000109a  00000000  00000000  000134f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00006dbe  00000000  00000000  0001458e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008fc76  00000000  00000000  0001b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000aafc2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00000b98  00000000  00000000  000ab008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000056  00000000  00000000  000abba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036b8 	.word	0x080036b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080036b8 	.word	0x080036b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <CRC_Init>:

#include "CRC.h"

void CRC_Init(void)
{
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000b70:	4a02      	ldr	r2, [pc, #8]	@ (8000b7c <CRC_Init+0xc>)
 8000b72:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800

08000b80 <CRC_Reset>:

void CRC_Reset(void)
{
    CRC->CR |= CRC_CR_RESET;
 8000b80:	4a02      	ldr	r2, [pc, #8]	@ (8000b8c <CRC_Reset+0xc>)
 8000b82:	6893      	ldr	r3, [r2, #8]
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6093      	str	r3, [r2, #8]
}
 8000b8a:	4770      	bx	lr
 8000b8c:	40023000 	.word	0x40023000

08000b90 <CRC_Compute_8Bit_Block>:
    CRC->DR = (word);
    return (CRC->DR);
}

uint32_t CRC_Compute_8Bit_Block(volatile uint8_t *wordBlock, size_t length)
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4c06      	ldr	r4, [pc, #24]	@ (8000bac <CRC_Compute_8Bit_Block+0x1c>)
	uint8_t temp=0;
	CRC_Reset();
 8000b94:	f7ff fff4 	bl	8000b80 <CRC_Reset>
	for(uint32_t i = 0; i < length; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d101      	bne.n	8000ba2 <CRC_Compute_8Bit_Block+0x12>
	{
		temp = wordBlock[i];
		CRC -> DR = 0x00000000 | (temp);

	}
	return (CRC -> DR);
 8000b9e:	6820      	ldr	r0, [r4, #0]
}
 8000ba0:	bd10      	pop	{r4, pc}
		temp = wordBlock[i];
 8000ba2:	5cc2      	ldrb	r2, [r0, r3]
 8000ba4:	b2d2      	uxtb	r2, r2
		CRC -> DR = 0x00000000 | (temp);
 8000ba6:	6022      	str	r2, [r4, #0]
	for(uint32_t i = 0; i < length; i++)
 8000ba8:	3301      	adds	r3, #1
 8000baa:	e7f6      	b.n	8000b9a <CRC_Compute_8Bit_Block+0xa>
 8000bac:	40023000 	.word	0x40023000

08000bb0 <Custom_Console_IRQ>:

// USART configuration structure
USART_Config Custom_Comm;

void Custom_Console_IRQ(void){
	if (custom_rx_get_flag == 1) { // Check if reception is active
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <Custom_Console_IRQ+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d11e      	bne.n	8000bf6 <Custom_Console_IRQ+0x46>
		(void)UART4->SR; // Read the status register to clear flags
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <Custom_Console_IRQ+0x4c>)
 8000bba:	681a      	ldr	r2, [r3, #0]
		(void)UART4->DR; // Read the data register to clear flags
 8000bbc:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbe:	b672      	cpsid	i

		__disable_irq(); // Disable interrupts to safely update DMA configurations

		// Disable DMA stream
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <Custom_Console_IRQ+0x50>)
 8000bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f022 0201 	bic.w	r2, r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

		// Calculate the length of received data
		Custom_RX_Length = Custom_RX_Buffer_Length - Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000bcc:	6859      	ldr	r1, [r3, #4]
 8000bce:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <Custom_Console_IRQ+0x54>)
 8000bd0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8000bd4:	6011      	str	r1, [r2, #0]

		// Prevent buffer overflow
		if (Custom_RX_Length > Custom_RX_Buffer_Length) {
 8000bd6:	6811      	ldr	r1, [r2, #0]
 8000bd8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8000bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
			Custom_RX_Length = Custom_RX_Buffer_Length;
 8000be0:	bfc8      	it	gt
 8000be2:	6011      	strgt	r1, [r2, #0]
		}

		// Reset DMA stream for the next reception
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->NDTR = Custom_RX_Buffer_Length;
 8000be4:	6059      	str	r1, [r3, #4]
		Custom_Comm.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	f042 0201 	orr.w	r2, r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bee:	b662      	cpsie	i

		__enable_irq(); // Re-enable interrupts

		custom_rx_flag = 1; // Set the flag indicating data reception is complete
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <Custom_Console_IRQ+0x58>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
	}
}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000020c 	.word	0x2000020c
 8000bfc:	40004c00 	.word	0x40004c00
 8000c00:	20000020 	.word	0x20000020
 8000c04:	20000204 	.word	0x20000204
 8000c08:	20000208 	.word	0x20000208

08000c0c <Custom_Comm_Init>:


void Custom_Comm_Init(int32_t baudrate) {
 8000c0c:	b538      	push	{r3, r4, r5, lr}
	// Reset USART configuration to default values
	USART_Config_Reset(&Custom_Comm);
 8000c0e:	4c0d      	ldr	r4, [pc, #52]	@ (8000c44 <Custom_Comm_Init+0x38>)
void Custom_Comm_Init(int32_t baudrate) {
 8000c10:	4605      	mov	r5, r0
	USART_Config_Reset(&Custom_Comm);
 8000c12:	4620      	mov	r0, r4
 8000c14:	f001 fbd6 	bl	80023c4 <USART_Config_Reset>

	// Configure USART parameters
	Custom_Comm.Port = UART4; // Use UART4 for console communication
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <Custom_Comm_Init+0x3c>)
	Custom_Comm.baudrate = baudrate; // Set the baud rate
 8000c1a:	e9c4 3500 	strd	r3, r5, [r4]
	Custom_Comm.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 8000c1e:	f640 2301 	movw	r3, #2561	@ 0xa01
 8000c22:	8123      	strh	r3, [r4, #8]
	Custom_Comm.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
	Custom_Comm.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
	Custom_Comm.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 8000c24:	230b      	movs	r3, #11
 8000c26:	72a3      	strb	r3, [r4, #10]
	Custom_Comm.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 8000c28:	2310      	movs	r3, #16
 8000c2a:	73a3      	strb	r3, [r4, #14]
	Custom_Comm.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8000c2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c30:	8223      	strh	r3, [r4, #16]
	Custom_Comm.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
	Custom_Comm.ISR_Routines.Idle_Line_ISR = Custom_Console_IRQ;
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <Custom_Comm_Init+0x40>)
 8000c34:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	// Initialize USART
	if (USART_Init(&Custom_Comm) != true) {}
 8000c38:	4620      	mov	r0, r4
}
 8000c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (USART_Init(&Custom_Comm) != true) {}
 8000c3e:	f001 bc13 	b.w	8002468 <USART_Init>
 8000c42:	bf00      	nop
 8000c44:	20000020 	.word	0x20000020
 8000c48:	40004c00 	.word	0x40004c00
 8000c4c:	08000bb1 	.word	0x08000bb1

08000c50 <Custom_Comm_Send>:


void Custom_Comm_Send(volatile uint8_t *buffer, size_t buffer_size) {

	if(buffer_size == 1)
 8000c50:	2901      	cmp	r1, #1
void Custom_Comm_Send(volatile uint8_t *buffer, size_t buffer_size) {
 8000c52:	b538      	push	{r3, r4, r5, lr}
 8000c54:	4604      	mov	r4, r0
 8000c56:	460d      	mov	r5, r1
	if(buffer_size == 1)
 8000c58:	d103      	bne.n	8000c62 <Custom_Comm_Send+0x12>
	{
		USART_TX_Single_Byte(&Custom_Comm, buffer[0]);
 8000c5a:	7801      	ldrb	r1, [r0, #0]
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <Custom_Comm_Send+0x20>)
 8000c5e:	f002 f9c9 	bl	8002ff4 <USART_TX_Single_Byte>
	}

	// Transmit the buffer using DMA
	USART_TX_Buffer(&Custom_Comm, (uint8_t *)&buffer[0], buffer_size);
 8000c62:	b2aa      	uxth	r2, r5
 8000c64:	4621      	mov	r1, r4
 8000c66:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <Custom_Comm_Send+0x20>)

}
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_TX_Buffer(&Custom_Comm, (uint8_t *)&buffer[0], buffer_size);
 8000c6c:	f002 b8d8 	b.w	8002e20 <USART_TX_Buffer>
 8000c70:	20000020 	.word	0x20000020

08000c74 <Custom_Comm_Receive>:


uint16_t Custom_Comm_Receive(volatile uint8_t *buffer)
{
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
	int result;

	custom_rx_get_flag = 1; // Enable reception
 8000c76:	4e16      	ldr	r6, [pc, #88]	@ (8000cd0 <Custom_Comm_Receive+0x5c>)

	// Start DMA reception
	USART_RX_Buffer(&Custom_Comm, (uint8_t *)Custom_TRX_Buffer, Custom_RX_Buffer_Length, 0);
 8000c78:	4916      	ldr	r1, [pc, #88]	@ (8000cd4 <Custom_Comm_Receive+0x60>)

	// Wait until data reception is complete
	while (custom_rx_flag == 0) {
 8000c7a:	4d17      	ldr	r5, [pc, #92]	@ (8000cd8 <Custom_Comm_Receive+0x64>)
	custom_rx_get_flag = 1; // Enable reception
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	6033      	str	r3, [r6, #0]
{
 8000c80:	b085      	sub	sp, #20
 8000c82:	4607      	mov	r7, r0
	USART_RX_Buffer(&Custom_Comm, (uint8_t *)Custom_TRX_Buffer, Custom_RX_Buffer_Length, 0);
 8000c84:	2300      	movs	r3, #0
 8000c86:	4815      	ldr	r0, [pc, #84]	@ (8000cdc <Custom_Comm_Receive+0x68>)
 8000c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c8c:	f002 f93c 	bl	8002f08 <USART_RX_Buffer>
	while (custom_rx_flag == 0) {
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0fc      	beq.n	8000c90 <Custom_Comm_Receive+0x1c>
		// Wait loop
	}

	// Check for valid input length
	if (Custom_RX_Length < 2) {
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <Custom_Comm_Receive+0x6c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	2a01      	cmp	r2, #1
 8000c9c:	dc06      	bgt.n	8000cac <Custom_Comm_Receive+0x38>
		// Reset flags and return error
		custom_rx_get_flag = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	6033      	str	r3, [r6, #0]
		custom_rx_flag = 0;
		return -1;
 8000ca2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
		custom_rx_flag = 0;
 8000ca6:	602b      	str	r3, [r5, #0]


	return result;


}
 8000ca8:	b005      	add	sp, #20
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = Custom_RX_Length;
 8000cac:	681c      	ldr	r4, [r3, #0]
	DMA_Memory_To_Memory_Transfer(Custom_TRX_Buffer, 8,1,  buffer, 8, 1, Custom_RX_Length);
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <Custom_Comm_Receive+0x60>)
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	e9cd 1200 	strd	r1, r2, [sp]
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	f001 f888 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
	custom_rx_get_flag = 0; // Indicates if the reception is active
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6033      	str	r3, [r6, #0]
	return result;
 8000cc8:	b2a0      	uxth	r0, r4
	custom_rx_flag = 0;
 8000cca:	602b      	str	r3, [r5, #0]
	return result;
 8000ccc:	e7ec      	b.n	8000ca8 <Custom_Comm_Receive+0x34>
 8000cce:	bf00      	nop
 8000cd0:	2000020c 	.word	0x2000020c
 8000cd4:	20000104 	.word	0x20000104
 8000cd8:	20000208 	.word	0x20000208
 8000cdc:	20000020 	.word	0x20000020
 8000ce0:	20000204 	.word	0x20000204

08000ce4 <__NVIC_EnableIRQ.part.0>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_EnableIRQ.part.0+0x14>)
 8000ce6:	0941      	lsrs	r1, r0, #5
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f000 001f 	and.w	r0, r0, #31
 8000cee:	4083      	lsls	r3, r0
 8000cf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 8000cfe:	4d37      	ldr	r5, [pc, #220]	@ (8000ddc <DMA1_Stream0_IRQHandler+0xe0>)
 8000d00:	4c37      	ldr	r4, [pc, #220]	@ (8000de0 <DMA1_Stream0_IRQHandler+0xe4>)
 8000d02:	682b      	ldr	r3, [r5, #0]
 8000d04:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	07db      	lsls	r3, r3, #31
 8000d0a:	d50b      	bpl.n	8000d24 <DMA1_Stream0_IRQHandler+0x28>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000d0c:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <DMA1_Stream0_IRQHandler+0xe8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	69da      	ldr	r2, [r3, #28]
 8000d12:	0616      	lsls	r6, r2, #24
 8000d14:	d506      	bpl.n	8000d24 <DMA1_Stream0_IRQHandler+0x28>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d18:	b123      	cbz	r3, 8000d24 <DMA1_Stream0_IRQHandler+0x28>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000d1a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d1c:	68ab      	ldr	r3, [r5, #8]
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	075d      	lsls	r5, r3, #29
 8000d28:	d50c      	bpl.n	8000d44 <DMA1_Stream0_IRQHandler+0x48>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <DMA1_Stream0_IRQHandler+0xe8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69da      	ldr	r2, [r3, #28]
 8000d30:	0790      	lsls	r0, r2, #30
 8000d32:	d507      	bpl.n	8000d44 <DMA1_Stream0_IRQHandler+0x48>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	b12b      	cbz	r3, 8000d44 <DMA1_Stream0_IRQHandler+0x48>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000d38:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d3a:	4a28      	ldr	r2, [pc, #160]	@ (8000ddc <DMA1_Stream0_IRQHandler+0xe0>)
 8000d3c:	6893      	ldr	r3, [r2, #8]
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	0719      	lsls	r1, r3, #28
 8000d48:	d50c      	bpl.n	8000d64 <DMA1_Stream0_IRQHandler+0x68>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <DMA1_Stream0_IRQHandler+0xe8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	d507      	bpl.n	8000d64 <DMA1_Stream0_IRQHandler+0x68>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	b12b      	cbz	r3, 8000d64 <DMA1_Stream0_IRQHandler+0x68>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d58:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d5a:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <DMA1_Stream0_IRQHandler+0xe0>)
 8000d5c:	6893      	ldr	r3, [r2, #8]
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	06db      	lsls	r3, r3, #27
 8000d68:	d518      	bpl.n	8000d9c <DMA1_Stream0_IRQHandler+0xa0>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000d6a:	4d1e      	ldr	r5, [pc, #120]	@ (8000de4 <DMA1_Stream0_IRQHandler+0xe8>)
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	0716      	lsls	r6, r2, #28
 8000d72:	d513      	bpl.n	8000d9c <DMA1_Stream0_IRQHandler+0xa0>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d76:	b18b      	cbz	r3, 8000d9c <DMA1_Stream0_IRQHandler+0xa0>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d78:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d7a:	4a18      	ldr	r2, [pc, #96]	@ (8000ddc <DMA1_Stream0_IRQHandler+0xe0>)
 8000d7c:	6893      	ldr	r3, [r2, #8]
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d88:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000d8c:	d106      	bne.n	8000d9c <DMA1_Stream0_IRQHandler+0xa0>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d94:	bf4c      	ite	mi
 8000d96:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d98:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000d9a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	0698      	lsls	r0, r3, #26
 8000da0:	d51a      	bpl.n	8000dd8 <DMA1_Stream0_IRQHandler+0xdc>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000da2:	4c10      	ldr	r4, [pc, #64]	@ (8000de4 <DMA1_Stream0_IRQHandler+0xe8>)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	06d1      	lsls	r1, r2, #27
 8000daa:	d515      	bpl.n	8000dd8 <DMA1_Stream0_IRQHandler+0xdc>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	b19b      	cbz	r3, 8000dd8 <DMA1_Stream0_IRQHandler+0xdc>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000db0:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <DMA1_Stream0_IRQHandler+0xe0>)
 8000db4:	6893      	ldr	r3, [r2, #8]
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000dc4:	d108      	bne.n	8000dd8 <DMA1_Stream0_IRQHandler+0xdc>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	0352      	lsls	r2, r2, #13
				}
			}
		}

	}
}
 8000dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000dd0:	bf4c      	ite	mi
 8000dd2:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000dd4:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000dd6:	4718      	bx	r3
}
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	bf00      	nop
 8000ddc:	40026000 	.word	0x40026000
 8000de0:	20000214 	.word	0x20000214
 8000de4:	20000254 	.word	0x20000254

08000de8 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 8000dea:	4d37      	ldr	r5, [pc, #220]	@ (8000ec8 <DMA1_Stream1_IRQHandler+0xe0>)
 8000dec:	4c37      	ldr	r4, [pc, #220]	@ (8000ecc <DMA1_Stream1_IRQHandler+0xe4>)
 8000dee:	682b      	ldr	r3, [r5, #0]
 8000df0:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	065b      	lsls	r3, r3, #25
 8000df6:	d50b      	bpl.n	8000e10 <DMA1_Stream1_IRQHandler+0x28>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000df8:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <DMA1_Stream1_IRQHandler+0xe8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	69da      	ldr	r2, [r3, #28]
 8000dfe:	0616      	lsls	r6, r2, #24
 8000e00:	d506      	bpl.n	8000e10 <DMA1_Stream1_IRQHandler+0x28>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e04:	b123      	cbz	r3, 8000e10 <DMA1_Stream1_IRQHandler+0x28>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e06:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e08:	68ab      	ldr	r3, [r5, #8]
 8000e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0e:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	05dd      	lsls	r5, r3, #23
 8000e14:	d50c      	bpl.n	8000e30 <DMA1_Stream1_IRQHandler+0x48>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000e16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <DMA1_Stream1_IRQHandler+0xe8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	69da      	ldr	r2, [r3, #28]
 8000e1c:	0790      	lsls	r0, r2, #30
 8000e1e:	d507      	bpl.n	8000e30 <DMA1_Stream1_IRQHandler+0x48>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	b12b      	cbz	r3, 8000e30 <DMA1_Stream1_IRQHandler+0x48>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e24:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <DMA1_Stream1_IRQHandler+0xe0>)
 8000e28:	6893      	ldr	r3, [r2, #8]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	0599      	lsls	r1, r3, #22
 8000e34:	d50c      	bpl.n	8000e50 <DMA1_Stream1_IRQHandler+0x68>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <DMA1_Stream1_IRQHandler+0xe8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	0752      	lsls	r2, r2, #29
 8000e3e:	d507      	bpl.n	8000e50 <DMA1_Stream1_IRQHandler+0x68>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	b12b      	cbz	r3, 8000e50 <DMA1_Stream1_IRQHandler+0x68>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e44:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000e46:	4a20      	ldr	r2, [pc, #128]	@ (8000ec8 <DMA1_Stream1_IRQHandler+0xe0>)
 8000e48:	6893      	ldr	r3, [r2, #8]
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	055b      	lsls	r3, r3, #21
 8000e54:	d518      	bpl.n	8000e88 <DMA1_Stream1_IRQHandler+0xa0>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000e56:	4d1e      	ldr	r5, [pc, #120]	@ (8000ed0 <DMA1_Stream1_IRQHandler+0xe8>)
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	0716      	lsls	r6, r2, #28
 8000e5e:	d513      	bpl.n	8000e88 <DMA1_Stream1_IRQHandler+0xa0>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e62:	b18b      	cbz	r3, 8000e88 <DMA1_Stream1_IRQHandler+0xa0>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e64:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <DMA1_Stream1_IRQHandler+0xe0>)
 8000e68:	6893      	ldr	r3, [r2, #8]
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e74:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000e78:	d106      	bne.n	8000e88 <DMA1_Stream1_IRQHandler+0xa0>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000e80:	bf4c      	ite	mi
 8000e82:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000e84:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000e86:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	0518      	lsls	r0, r3, #20
 8000e8c:	d51a      	bpl.n	8000ec4 <DMA1_Stream1_IRQHandler+0xdc>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000e8e:	4c10      	ldr	r4, [pc, #64]	@ (8000ed0 <DMA1_Stream1_IRQHandler+0xe8>)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	06d1      	lsls	r1, r2, #27
 8000e96:	d515      	bpl.n	8000ec4 <DMA1_Stream1_IRQHandler+0xdc>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	b19b      	cbz	r3, 8000ec4 <DMA1_Stream1_IRQHandler+0xdc>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000e9c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <DMA1_Stream1_IRQHandler+0xe0>)
 8000ea0:	6893      	ldr	r3, [r2, #8]
 8000ea2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ea6:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eac:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000eb0:	d108      	bne.n	8000ec4 <DMA1_Stream1_IRQHandler+0xdc>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8000eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ebc:	bf4c      	ite	mi
 8000ebe:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ec0:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000ec2:	4718      	bx	r3
}
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40026000 	.word	0x40026000
 8000ecc:	20000214 	.word	0x20000214
 8000ed0:	20000250 	.word	0x20000250

08000ed4 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 8000ed6:	4d37      	ldr	r5, [pc, #220]	@ (8000fb4 <DMA1_Stream2_IRQHandler+0xe0>)
 8000ed8:	4c37      	ldr	r4, [pc, #220]	@ (8000fb8 <DMA1_Stream2_IRQHandler+0xe4>)
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	03db      	lsls	r3, r3, #15
 8000ee2:	d50b      	bpl.n	8000efc <DMA1_Stream2_IRQHandler+0x28>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <DMA1_Stream2_IRQHandler+0xe8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	0616      	lsls	r6, r2, #24
 8000eec:	d506      	bpl.n	8000efc <DMA1_Stream2_IRQHandler+0x28>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef0:	b123      	cbz	r3, 8000efc <DMA1_Stream2_IRQHandler+0x28>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000ef2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000ef4:	68ab      	ldr	r3, [r5, #8]
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efa:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	035d      	lsls	r5, r3, #13
 8000f00:	d50c      	bpl.n	8000f1c <DMA1_Stream2_IRQHandler+0x48>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <DMA1_Stream2_IRQHandler+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	0790      	lsls	r0, r2, #30
 8000f0a:	d507      	bpl.n	8000f1c <DMA1_Stream2_IRQHandler+0x48>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	b12b      	cbz	r3, 8000f1c <DMA1_Stream2_IRQHandler+0x48>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f10:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000f12:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <DMA1_Stream2_IRQHandler+0xe0>)
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f1a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	0319      	lsls	r1, r3, #12
 8000f20:	d50c      	bpl.n	8000f3c <DMA1_Stream2_IRQHandler+0x68>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <DMA1_Stream2_IRQHandler+0xe8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	0752      	lsls	r2, r2, #29
 8000f2a:	d507      	bpl.n	8000f3c <DMA1_Stream2_IRQHandler+0x68>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	b12b      	cbz	r3, 8000f3c <DMA1_Stream2_IRQHandler+0x68>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000f30:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000f32:	4a20      	ldr	r2, [pc, #128]	@ (8000fb4 <DMA1_Stream2_IRQHandler+0xe0>)
 8000f34:	6893      	ldr	r3, [r2, #8]
 8000f36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f3a:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	02db      	lsls	r3, r3, #11
 8000f40:	d518      	bpl.n	8000f74 <DMA1_Stream2_IRQHandler+0xa0>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000f42:	4d1e      	ldr	r5, [pc, #120]	@ (8000fbc <DMA1_Stream2_IRQHandler+0xe8>)
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	69da      	ldr	r2, [r3, #28]
 8000f48:	0716      	lsls	r6, r2, #28
 8000f4a:	d513      	bpl.n	8000f74 <DMA1_Stream2_IRQHandler+0xa0>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4e:	b18b      	cbz	r3, 8000f74 <DMA1_Stream2_IRQHandler+0xa0>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f50:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <DMA1_Stream2_IRQHandler+0xe0>)
 8000f54:	6893      	ldr	r3, [r2, #8]
 8000f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f60:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000f64:	d106      	bne.n	8000f74 <DMA1_Stream2_IRQHandler+0xa0>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f6c:	bf4c      	ite	mi
 8000f6e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f70:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000f72:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	0298      	lsls	r0, r3, #10
 8000f78:	d51a      	bpl.n	8000fb0 <DMA1_Stream2_IRQHandler+0xdc>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000f7a:	4c10      	ldr	r4, [pc, #64]	@ (8000fbc <DMA1_Stream2_IRQHandler+0xe8>)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	69da      	ldr	r2, [r3, #28]
 8000f80:	06d1      	lsls	r1, r2, #27
 8000f82:	d515      	bpl.n	8000fb0 <DMA1_Stream2_IRQHandler+0xdc>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	b19b      	cbz	r3, 8000fb0 <DMA1_Stream2_IRQHandler+0xdc>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000f88:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <DMA1_Stream2_IRQHandler+0xe0>)
 8000f8c:	6893      	ldr	r3, [r2, #8]
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f92:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f98:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8000f9c:	d108      	bne.n	8000fb0 <DMA1_Stream2_IRQHandler+0xdc>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8000fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000fa8:	bf4c      	ite	mi
 8000faa:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000fac:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8000fae:	4718      	bx	r3
}
 8000fb0:	bd70      	pop	{r4, r5, r6, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40026000 	.word	0x40026000
 8000fb8:	20000214 	.word	0x20000214
 8000fbc:	2000024c 	.word	0x2000024c

08000fc0 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8000fc0:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA1 -> LISR;
 8000fc2:	4d37      	ldr	r5, [pc, #220]	@ (80010a0 <DMA1_Stream3_IRQHandler+0xe0>)
 8000fc4:	4c37      	ldr	r4, [pc, #220]	@ (80010a4 <DMA1_Stream3_IRQHandler+0xe4>)
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	d50b      	bpl.n	8000fe8 <DMA1_Stream3_IRQHandler+0x28>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000fd0:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <DMA1_Stream3_IRQHandler+0xe8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	69da      	ldr	r2, [r3, #28]
 8000fd6:	0616      	lsls	r6, r2, #24
 8000fd8:	d506      	bpl.n	8000fe8 <DMA1_Stream3_IRQHandler+0x28>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fdc:	b123      	cbz	r3, 8000fe8 <DMA1_Stream3_IRQHandler+0x28>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000fde:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000fe0:	68ab      	ldr	r3, [r5, #8]
 8000fe2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe6:	60ab      	str	r3, [r5, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	01dd      	lsls	r5, r3, #7
 8000fec:	d50c      	bpl.n	8001008 <DMA1_Stream3_IRQHandler+0x48>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000fee:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <DMA1_Stream3_IRQHandler+0xe8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	0790      	lsls	r0, r2, #30
 8000ff6:	d507      	bpl.n	8001008 <DMA1_Stream3_IRQHandler+0x48>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	b12b      	cbz	r3, 8001008 <DMA1_Stream3_IRQHandler+0x48>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ffc:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000ffe:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <DMA1_Stream3_IRQHandler+0xe0>)
 8001000:	6893      	ldr	r3, [r2, #8]
 8001002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001006:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	0199      	lsls	r1, r3, #6
 800100c:	d50c      	bpl.n	8001028 <DMA1_Stream3_IRQHandler+0x68>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <DMA1_Stream3_IRQHandler+0xe8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	0752      	lsls	r2, r2, #29
 8001016:	d507      	bpl.n	8001028 <DMA1_Stream3_IRQHandler+0x68>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	b12b      	cbz	r3, 8001028 <DMA1_Stream3_IRQHandler+0x68>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800101c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800101e:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <DMA1_Stream3_IRQHandler+0xe0>)
 8001020:	6893      	ldr	r3, [r2, #8]
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001026:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	d518      	bpl.n	8001060 <DMA1_Stream3_IRQHandler+0xa0>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800102e:	4d1e      	ldr	r5, [pc, #120]	@ (80010a8 <DMA1_Stream3_IRQHandler+0xe8>)
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	0716      	lsls	r6, r2, #28
 8001036:	d513      	bpl.n	8001060 <DMA1_Stream3_IRQHandler+0xa0>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103a:	b18b      	cbz	r3, 8001060 <DMA1_Stream3_IRQHandler+0xa0>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800103c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800103e:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <DMA1_Stream3_IRQHandler+0xe0>)
 8001040:	6893      	ldr	r3, [r2, #8]
 8001042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001046:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800104c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001050:	d106      	bne.n	8001060 <DMA1_Stream3_IRQHandler+0xa0>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	0355      	lsls	r5, r2, #13
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001058:	bf4c      	ite	mi
 800105a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800105c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800105e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	0118      	lsls	r0, r3, #4
 8001064:	d51a      	bpl.n	800109c <DMA1_Stream3_IRQHandler+0xdc>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001066:	4c10      	ldr	r4, [pc, #64]	@ (80010a8 <DMA1_Stream3_IRQHandler+0xe8>)
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	69da      	ldr	r2, [r3, #28]
 800106c:	06d1      	lsls	r1, r2, #27
 800106e:	d515      	bpl.n	800109c <DMA1_Stream3_IRQHandler+0xdc>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	b19b      	cbz	r3, 800109c <DMA1_Stream3_IRQHandler+0xdc>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001074:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <DMA1_Stream3_IRQHandler+0xe0>)
 8001078:	6893      	ldr	r3, [r2, #8]
 800107a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800107e:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001084:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001088:	d108      	bne.n	800109c <DMA1_Stream3_IRQHandler+0xdc>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8001090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001094:	bf4c      	ite	mi
 8001096:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001098:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800109a:	4718      	bx	r3
}
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	bf00      	nop
 80010a0:	40026000 	.word	0x40026000
 80010a4:	20000214 	.word	0x20000214
 80010a8:	20000248 	.word	0x20000248

080010ac <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 80010ae:	4d2f      	ldr	r5, [pc, #188]	@ (800116c <DMA1_Stream4_IRQHandler+0xc0>)
 80010b0:	4c2f      	ldr	r4, [pc, #188]	@ (8001170 <DMA1_Stream4_IRQHandler+0xc4>)
 80010b2:	686b      	ldr	r3, [r5, #4]
 80010b4:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	07da      	lsls	r2, r3, #31
 80010ba:	d508      	bpl.n	80010ce <DMA1_Stream4_IRQHandler+0x22>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <DMA1_Stream4_IRQHandler+0xc8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c2:	b123      	cbz	r3, 80010ce <DMA1_Stream4_IRQHandler+0x22>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010c4:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80010c6:	68ab      	ldr	r3, [r5, #8]
 80010c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010cc:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	075b      	lsls	r3, r3, #29
 80010d2:	d509      	bpl.n	80010e8 <DMA1_Stream4_IRQHandler+0x3c>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80010d4:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <DMA1_Stream4_IRQHandler+0xc8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	b12b      	cbz	r3, 80010e8 <DMA1_Stream4_IRQHandler+0x3c>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80010dc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <DMA1_Stream4_IRQHandler+0xc0>)
 80010e0:	68d3      	ldr	r3, [r2, #12]
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	071e      	lsls	r6, r3, #28
 80010ec:	d509      	bpl.n	8001102 <DMA1_Stream4_IRQHandler+0x56>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <DMA1_Stream4_IRQHandler+0xc8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f4:	b12b      	cbz	r3, 8001102 <DMA1_Stream4_IRQHandler+0x56>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80010f6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80010f8:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <DMA1_Stream4_IRQHandler+0xc0>)
 80010fa:	68d3      	ldr	r3, [r2, #12]
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	06dd      	lsls	r5, r3, #27
 8001106:	d515      	bpl.n	8001134 <DMA1_Stream4_IRQHandler+0x88>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001108:	4d1a      	ldr	r5, [pc, #104]	@ (8001174 <DMA1_Stream4_IRQHandler+0xc8>)
 800110a:	682b      	ldr	r3, [r5, #0]
 800110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110e:	b18b      	cbz	r3, 8001134 <DMA1_Stream4_IRQHandler+0x88>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001110:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001112:	4a16      	ldr	r2, [pc, #88]	@ (800116c <DMA1_Stream4_IRQHandler+0xc0>)
 8001114:	68d3      	ldr	r3, [r2, #12]
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001120:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001124:	d106      	bne.n	8001134 <DMA1_Stream4_IRQHandler+0x88>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800112c:	bf4c      	ite	mi
 800112e:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001130:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001132:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	0699      	lsls	r1, r3, #26
 8001138:	d517      	bpl.n	800116a <DMA1_Stream4_IRQHandler+0xbe>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800113a:	4c0e      	ldr	r4, [pc, #56]	@ (8001174 <DMA1_Stream4_IRQHandler+0xc8>)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	b19b      	cbz	r3, 800116a <DMA1_Stream4_IRQHandler+0xbe>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001142:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001144:	4a09      	ldr	r2, [pc, #36]	@ (800116c <DMA1_Stream4_IRQHandler+0xc0>)
 8001146:	68d3      	ldr	r3, [r2, #12]
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001152:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001156:	d108      	bne.n	800116a <DMA1_Stream4_IRQHandler+0xbe>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	0352      	lsls	r2, r2, #13
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800115e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001162:	bf4c      	ite	mi
 8001164:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001166:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001168:	4718      	bx	r3
}
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	40026000 	.word	0x40026000
 8001170:	20000210 	.word	0x20000210
 8001174:	20000244 	.word	0x20000244

08001178 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001178:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 800117a:	4d2f      	ldr	r5, [pc, #188]	@ (8001238 <DMA1_Stream5_IRQHandler+0xc0>)
 800117c:	4c2f      	ldr	r4, [pc, #188]	@ (800123c <DMA1_Stream5_IRQHandler+0xc4>)
 800117e:	686b      	ldr	r3, [r5, #4]
 8001180:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	065a      	lsls	r2, r3, #25
 8001186:	d508      	bpl.n	800119a <DMA1_Stream5_IRQHandler+0x22>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <DMA1_Stream5_IRQHandler+0xc8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118e:	b123      	cbz	r3, 800119a <DMA1_Stream5_IRQHandler+0x22>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001190:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001192:	68eb      	ldr	r3, [r5, #12]
 8001194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001198:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	d509      	bpl.n	80011b4 <DMA1_Stream5_IRQHandler+0x3c>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <DMA1_Stream5_IRQHandler+0xc8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	b12b      	cbz	r3, 80011b4 <DMA1_Stream5_IRQHandler+0x3c>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80011a8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <DMA1_Stream5_IRQHandler+0xc0>)
 80011ac:	68d3      	ldr	r3, [r2, #12]
 80011ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	059e      	lsls	r6, r3, #22
 80011b8:	d509      	bpl.n	80011ce <DMA1_Stream5_IRQHandler+0x56>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <DMA1_Stream5_IRQHandler+0xc8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c0:	b12b      	cbz	r3, 80011ce <DMA1_Stream5_IRQHandler+0x56>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80011c2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80011c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <DMA1_Stream5_IRQHandler+0xc0>)
 80011c6:	68d3      	ldr	r3, [r2, #12]
 80011c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011cc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	055d      	lsls	r5, r3, #21
 80011d2:	d515      	bpl.n	8001200 <DMA1_Stream5_IRQHandler+0x88>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80011d4:	4d1a      	ldr	r5, [pc, #104]	@ (8001240 <DMA1_Stream5_IRQHandler+0xc8>)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	b18b      	cbz	r3, 8001200 <DMA1_Stream5_IRQHandler+0x88>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80011dc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80011de:	4a16      	ldr	r2, [pc, #88]	@ (8001238 <DMA1_Stream5_IRQHandler+0xc0>)
 80011e0:	68d3      	ldr	r3, [r2, #12]
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e6:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011ec:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80011f0:	d106      	bne.n	8001200 <DMA1_Stream5_IRQHandler+0x88>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011f8:	bf4c      	ite	mi
 80011fa:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011fc:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80011fe:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	0519      	lsls	r1, r3, #20
 8001204:	d517      	bpl.n	8001236 <DMA1_Stream5_IRQHandler+0xbe>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001206:	4c0e      	ldr	r4, [pc, #56]	@ (8001240 <DMA1_Stream5_IRQHandler+0xc8>)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	b19b      	cbz	r3, 8001236 <DMA1_Stream5_IRQHandler+0xbe>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800120e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001210:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <DMA1_Stream5_IRQHandler+0xc0>)
 8001212:	68d3      	ldr	r3, [r2, #12]
 8001214:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001218:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800121e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001222:	d108      	bne.n	8001236 <DMA1_Stream5_IRQHandler+0xbe>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	0352      	lsls	r2, r2, #13
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800122a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800122e:	bf4c      	ite	mi
 8001230:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001232:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001234:	4718      	bx	r3
}
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	40026000 	.word	0x40026000
 800123c:	20000210 	.word	0x20000210
 8001240:	20000240 	.word	0x20000240

08001244 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001244:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 8001246:	4d2f      	ldr	r5, [pc, #188]	@ (8001304 <DMA1_Stream6_IRQHandler+0xc0>)
 8001248:	4c2f      	ldr	r4, [pc, #188]	@ (8001308 <DMA1_Stream6_IRQHandler+0xc4>)
 800124a:	686b      	ldr	r3, [r5, #4]
 800124c:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	03da      	lsls	r2, r3, #15
 8001252:	d508      	bpl.n	8001266 <DMA1_Stream6_IRQHandler+0x22>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <DMA1_Stream6_IRQHandler+0xc8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	b123      	cbz	r3, 8001266 <DMA1_Stream6_IRQHandler+0x22>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800125c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800125e:	68eb      	ldr	r3, [r5, #12]
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	035b      	lsls	r3, r3, #13
 800126a:	d509      	bpl.n	8001280 <DMA1_Stream6_IRQHandler+0x3c>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <DMA1_Stream6_IRQHandler+0xc8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	b12b      	cbz	r3, 8001280 <DMA1_Stream6_IRQHandler+0x3c>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001274:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <DMA1_Stream6_IRQHandler+0xc0>)
 8001278:	68d3      	ldr	r3, [r2, #12]
 800127a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	031e      	lsls	r6, r3, #12
 8001284:	d509      	bpl.n	800129a <DMA1_Stream6_IRQHandler+0x56>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <DMA1_Stream6_IRQHandler+0xc8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128c:	b12b      	cbz	r3, 800129a <DMA1_Stream6_IRQHandler+0x56>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800128e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001290:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <DMA1_Stream6_IRQHandler+0xc0>)
 8001292:	68d3      	ldr	r3, [r2, #12]
 8001294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001298:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	02dd      	lsls	r5, r3, #11
 800129e:	d515      	bpl.n	80012cc <DMA1_Stream6_IRQHandler+0x88>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80012a0:	4d1a      	ldr	r5, [pc, #104]	@ (800130c <DMA1_Stream6_IRQHandler+0xc8>)
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a6:	b18b      	cbz	r3, 80012cc <DMA1_Stream6_IRQHandler+0x88>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012a8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <DMA1_Stream6_IRQHandler+0xc0>)
 80012ac:	68d3      	ldr	r3, [r2, #12]
 80012ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012b2:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012b8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80012bc:	d106      	bne.n	80012cc <DMA1_Stream6_IRQHandler+0x88>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012c4:	bf4c      	ite	mi
 80012c6:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012c8:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80012ca:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	0299      	lsls	r1, r3, #10
 80012d0:	d517      	bpl.n	8001302 <DMA1_Stream6_IRQHandler+0xbe>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012d2:	4c0e      	ldr	r4, [pc, #56]	@ (800130c <DMA1_Stream6_IRQHandler+0xc8>)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	b19b      	cbz	r3, 8001302 <DMA1_Stream6_IRQHandler+0xbe>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80012da:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80012dc:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <DMA1_Stream6_IRQHandler+0xc0>)
 80012de:	68d3      	ldr	r3, [r2, #12]
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012ea:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80012ee:	d108      	bne.n	8001302 <DMA1_Stream6_IRQHandler+0xbe>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	0352      	lsls	r2, r2, #13
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80012f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012fa:	bf4c      	ite	mi
 80012fc:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012fe:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001300:	4718      	bx	r3
}
 8001302:	bd70      	pop	{r4, r5, r6, pc}
 8001304:	40026000 	.word	0x40026000
 8001308:	20000210 	.word	0x20000210
 800130c:	2000023c 	.word	0x2000023c

08001310 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8001310:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA1 -> HISR;
 8001312:	4d2f      	ldr	r5, [pc, #188]	@ (80013d0 <DMA1_Stream7_IRQHandler+0xc0>)
 8001314:	4c2f      	ldr	r4, [pc, #188]	@ (80013d4 <DMA1_Stream7_IRQHandler+0xc4>)
 8001316:	686b      	ldr	r3, [r5, #4]
 8001318:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	025a      	lsls	r2, r3, #9
 800131e:	d508      	bpl.n	8001332 <DMA1_Stream7_IRQHandler+0x22>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <DMA1_Stream7_IRQHandler+0xc8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001326:	b123      	cbz	r3, 8001332 <DMA1_Stream7_IRQHandler+0x22>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001328:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800132a:	68eb      	ldr	r3, [r5, #12]
 800132c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001330:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	01db      	lsls	r3, r3, #7
 8001336:	d509      	bpl.n	800134c <DMA1_Stream7_IRQHandler+0x3c>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001338:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <DMA1_Stream7_IRQHandler+0xc8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	b12b      	cbz	r3, 800134c <DMA1_Stream7_IRQHandler+0x3c>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001340:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001342:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <DMA1_Stream7_IRQHandler+0xc0>)
 8001344:	68d3      	ldr	r3, [r2, #12]
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800134a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	019e      	lsls	r6, r3, #6
 8001350:	d509      	bpl.n	8001366 <DMA1_Stream7_IRQHandler+0x56>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <DMA1_Stream7_IRQHandler+0xc8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	b12b      	cbz	r3, 8001366 <DMA1_Stream7_IRQHandler+0x56>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800135a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <DMA1_Stream7_IRQHandler+0xc0>)
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001364:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	015d      	lsls	r5, r3, #5
 800136a:	d515      	bpl.n	8001398 <DMA1_Stream7_IRQHandler+0x88>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800136c:	4d1a      	ldr	r5, [pc, #104]	@ (80013d8 <DMA1_Stream7_IRQHandler+0xc8>)
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001372:	b18b      	cbz	r3, 8001398 <DMA1_Stream7_IRQHandler+0x88>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001374:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <DMA1_Stream7_IRQHandler+0xc0>)
 8001378:	68d3      	ldr	r3, [r2, #12]
 800137a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800137e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001384:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001388:	d106      	bne.n	8001398 <DMA1_Stream7_IRQHandler+0x88>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	0350      	lsls	r0, r2, #13
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001390:	bf4c      	ite	mi
 8001392:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001394:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001396:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	0119      	lsls	r1, r3, #4
 800139c:	d517      	bpl.n	80013ce <DMA1_Stream7_IRQHandler+0xbe>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800139e:	4c0e      	ldr	r4, [pc, #56]	@ (80013d8 <DMA1_Stream7_IRQHandler+0xc8>)
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a4:	b19b      	cbz	r3, 80013ce <DMA1_Stream7_IRQHandler+0xbe>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80013a6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80013a8:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <DMA1_Stream7_IRQHandler+0xc0>)
 80013aa:	68d3      	ldr	r3, [r2, #12]
 80013ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013b0:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013b6:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80013ba:	d108      	bne.n	80013ce <DMA1_Stream7_IRQHandler+0xbe>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	0352      	lsls	r2, r2, #13
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80013c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80013c6:	bf4c      	ite	mi
 80013c8:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80013ca:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80013cc:	4718      	bx	r3
}
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	40026000 	.word	0x40026000
 80013d4:	20000210 	.word	0x20000210
 80013d8:	20000238 	.word	0x20000238

080013dc <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80013dc:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 80013de:	4d37      	ldr	r5, [pc, #220]	@ (80014bc <DMA2_Stream0_IRQHandler+0xe0>)
 80013e0:	4c37      	ldr	r4, [pc, #220]	@ (80014c0 <DMA2_Stream0_IRQHandler+0xe4>)
 80013e2:	682b      	ldr	r3, [r5, #0]
 80013e4:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	07db      	lsls	r3, r3, #31
 80013ea:	d50b      	bpl.n	8001404 <DMA2_Stream0_IRQHandler+0x28>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <DMA2_Stream0_IRQHandler+0xe8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69da      	ldr	r2, [r3, #28]
 80013f2:	0616      	lsls	r6, r2, #24
 80013f4:	d506      	bpl.n	8001404 <DMA2_Stream0_IRQHandler+0x28>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	b123      	cbz	r3, 8001404 <DMA2_Stream0_IRQHandler+0x28>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80013fa:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80013fc:	68ab      	ldr	r3, [r5, #8]
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	60ab      	str	r3, [r5, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	075d      	lsls	r5, r3, #29
 8001408:	d50c      	bpl.n	8001424 <DMA2_Stream0_IRQHandler+0x48>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <DMA2_Stream0_IRQHandler+0xe8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	0790      	lsls	r0, r2, #30
 8001412:	d507      	bpl.n	8001424 <DMA2_Stream0_IRQHandler+0x48>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	b12b      	cbz	r3, 8001424 <DMA2_Stream0_IRQHandler+0x48>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001418:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <DMA2_Stream0_IRQHandler+0xe0>)
 800141c:	6893      	ldr	r3, [r2, #8]
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	0719      	lsls	r1, r3, #28
 8001428:	d50c      	bpl.n	8001444 <DMA2_Stream0_IRQHandler+0x68>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <DMA2_Stream0_IRQHandler+0xe8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	0752      	lsls	r2, r2, #29
 8001432:	d507      	bpl.n	8001444 <DMA2_Stream0_IRQHandler+0x68>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	b12b      	cbz	r3, 8001444 <DMA2_Stream0_IRQHandler+0x68>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001438:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800143a:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <DMA2_Stream0_IRQHandler+0xe0>)
 800143c:	6893      	ldr	r3, [r2, #8]
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	06db      	lsls	r3, r3, #27
 8001448:	d518      	bpl.n	800147c <DMA2_Stream0_IRQHandler+0xa0>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800144a:	4d1e      	ldr	r5, [pc, #120]	@ (80014c4 <DMA2_Stream0_IRQHandler+0xe8>)
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	0716      	lsls	r6, r2, #28
 8001452:	d513      	bpl.n	800147c <DMA2_Stream0_IRQHandler+0xa0>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001456:	b18b      	cbz	r3, 800147c <DMA2_Stream0_IRQHandler+0xa0>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001458:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 800145a:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <DMA2_Stream0_IRQHandler+0xe0>)
 800145c:	6893      	ldr	r3, [r2, #8]
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001468:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800146c:	d106      	bne.n	800147c <DMA2_Stream0_IRQHandler+0xa0>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	0355      	lsls	r5, r2, #13
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001474:	bf4c      	ite	mi
 8001476:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001478:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800147a:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	0698      	lsls	r0, r3, #26
 8001480:	d51a      	bpl.n	80014b8 <DMA2_Stream0_IRQHandler+0xdc>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001482:	4c10      	ldr	r4, [pc, #64]	@ (80014c4 <DMA2_Stream0_IRQHandler+0xe8>)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	06d1      	lsls	r1, r2, #27
 800148a:	d515      	bpl.n	80014b8 <DMA2_Stream0_IRQHandler+0xdc>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	b19b      	cbz	r3, 80014b8 <DMA2_Stream0_IRQHandler+0xdc>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001490:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <DMA2_Stream0_IRQHandler+0xe0>)
 8001494:	6893      	ldr	r3, [r2, #8]
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014a0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80014a4:	d108      	bne.n	80014b8 <DMA2_Stream0_IRQHandler+0xdc>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	0352      	lsls	r2, r2, #13
				}
			}
		}

	}
}
 80014ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014b0:	bf4c      	ite	mi
 80014b2:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014b4:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80014b6:	4718      	bx	r3
}
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	bf00      	nop
 80014bc:	40026400 	.word	0x40026400
 80014c0:	20000214 	.word	0x20000214
 80014c4:	20000234 	.word	0x20000234

080014c8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 80014ca:	4d2f      	ldr	r5, [pc, #188]	@ (8001588 <DMA2_Stream1_IRQHandler+0xc0>)
 80014cc:	4c2f      	ldr	r4, [pc, #188]	@ (800158c <DMA2_Stream1_IRQHandler+0xc4>)
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	065a      	lsls	r2, r3, #25
 80014d6:	d508      	bpl.n	80014ea <DMA2_Stream1_IRQHandler+0x22>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <DMA2_Stream1_IRQHandler+0xc8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014de:	b123      	cbz	r3, 80014ea <DMA2_Stream1_IRQHandler+0x22>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014e0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80014e2:	68ab      	ldr	r3, [r5, #8]
 80014e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e8:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	d509      	bpl.n	8001504 <DMA2_Stream1_IRQHandler+0x3c>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <DMA2_Stream1_IRQHandler+0xc8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	b12b      	cbz	r3, 8001504 <DMA2_Stream1_IRQHandler+0x3c>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80014f8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <DMA2_Stream1_IRQHandler+0xc0>)
 80014fc:	6893      	ldr	r3, [r2, #8]
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	059e      	lsls	r6, r3, #22
 8001508:	d509      	bpl.n	800151e <DMA2_Stream1_IRQHandler+0x56>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <DMA2_Stream1_IRQHandler+0xc8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	b12b      	cbz	r3, 800151e <DMA2_Stream1_IRQHandler+0x56>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001512:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001514:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <DMA2_Stream1_IRQHandler+0xc0>)
 8001516:	6893      	ldr	r3, [r2, #8]
 8001518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	055d      	lsls	r5, r3, #21
 8001522:	d515      	bpl.n	8001550 <DMA2_Stream1_IRQHandler+0x88>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001524:	4d1a      	ldr	r5, [pc, #104]	@ (8001590 <DMA2_Stream1_IRQHandler+0xc8>)
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	b18b      	cbz	r3, 8001550 <DMA2_Stream1_IRQHandler+0x88>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800152c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <DMA2_Stream1_IRQHandler+0xc0>)
 8001530:	6893      	ldr	r3, [r2, #8]
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800153c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001540:	d106      	bne.n	8001550 <DMA2_Stream1_IRQHandler+0x88>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001548:	bf4c      	ite	mi
 800154a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800154c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800154e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	0519      	lsls	r1, r3, #20
 8001554:	d517      	bpl.n	8001586 <DMA2_Stream1_IRQHandler+0xbe>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001556:	4c0e      	ldr	r4, [pc, #56]	@ (8001590 <DMA2_Stream1_IRQHandler+0xc8>)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	b19b      	cbz	r3, 8001586 <DMA2_Stream1_IRQHandler+0xbe>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800155e:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001560:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <DMA2_Stream1_IRQHandler+0xc0>)
 8001562:	6893      	ldr	r3, [r2, #8]
 8001564:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001568:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800156e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001572:	d108      	bne.n	8001586 <DMA2_Stream1_IRQHandler+0xbe>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	0352      	lsls	r2, r2, #13
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800157a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800157e:	bf4c      	ite	mi
 8001580:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001582:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001584:	4718      	bx	r3
}
 8001586:	bd70      	pop	{r4, r5, r6, pc}
 8001588:	40026400 	.word	0x40026400
 800158c:	20000214 	.word	0x20000214
 8001590:	20000230 	.word	0x20000230

08001594 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001594:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 8001596:	4d2f      	ldr	r5, [pc, #188]	@ (8001654 <DMA2_Stream2_IRQHandler+0xc0>)
 8001598:	4c2f      	ldr	r4, [pc, #188]	@ (8001658 <DMA2_Stream2_IRQHandler+0xc4>)
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	03da      	lsls	r2, r3, #15
 80015a2:	d508      	bpl.n	80015b6 <DMA2_Stream2_IRQHandler+0x22>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <DMA2_Stream2_IRQHandler+0xc8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	b123      	cbz	r3, 80015b6 <DMA2_Stream2_IRQHandler+0x22>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80015ac:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80015ae:	68ab      	ldr	r3, [r5, #8]
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b4:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	d509      	bpl.n	80015d0 <DMA2_Stream2_IRQHandler+0x3c>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <DMA2_Stream2_IRQHandler+0xc8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	b12b      	cbz	r3, 80015d0 <DMA2_Stream2_IRQHandler+0x3c>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80015c4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80015c6:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <DMA2_Stream2_IRQHandler+0xc0>)
 80015c8:	6893      	ldr	r3, [r2, #8]
 80015ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ce:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	031e      	lsls	r6, r3, #12
 80015d4:	d509      	bpl.n	80015ea <DMA2_Stream2_IRQHandler+0x56>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80015d6:	4b21      	ldr	r3, [pc, #132]	@ (800165c <DMA2_Stream2_IRQHandler+0xc8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	b12b      	cbz	r3, 80015ea <DMA2_Stream2_IRQHandler+0x56>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80015de:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <DMA2_Stream2_IRQHandler+0xc0>)
 80015e2:	6893      	ldr	r3, [r2, #8]
 80015e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015e8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	02dd      	lsls	r5, r3, #11
 80015ee:	d515      	bpl.n	800161c <DMA2_Stream2_IRQHandler+0x88>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015f0:	4d1a      	ldr	r5, [pc, #104]	@ (800165c <DMA2_Stream2_IRQHandler+0xc8>)
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	b18b      	cbz	r3, 800161c <DMA2_Stream2_IRQHandler+0x88>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015f8:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80015fa:	4a16      	ldr	r2, [pc, #88]	@ (8001654 <DMA2_Stream2_IRQHandler+0xc0>)
 80015fc:	6893      	ldr	r3, [r2, #8]
 80015fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001602:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001608:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800160c:	d106      	bne.n	800161c <DMA2_Stream2_IRQHandler+0x88>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001614:	bf4c      	ite	mi
 8001616:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001618:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800161a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	0299      	lsls	r1, r3, #10
 8001620:	d517      	bpl.n	8001652 <DMA2_Stream2_IRQHandler+0xbe>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001622:	4c0e      	ldr	r4, [pc, #56]	@ (800165c <DMA2_Stream2_IRQHandler+0xc8>)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	b19b      	cbz	r3, 8001652 <DMA2_Stream2_IRQHandler+0xbe>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800162a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800162c:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <DMA2_Stream2_IRQHandler+0xc0>)
 800162e:	6893      	ldr	r3, [r2, #8]
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001634:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800163a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800163e:	d108      	bne.n	8001652 <DMA2_Stream2_IRQHandler+0xbe>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	0352      	lsls	r2, r2, #13
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800164a:	bf4c      	ite	mi
 800164c:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800164e:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001650:	4718      	bx	r3
}
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	40026400 	.word	0x40026400
 8001658:	20000214 	.word	0x20000214
 800165c:	2000022c 	.word	0x2000022c

08001660 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001660:	b570      	push	{r4, r5, r6, lr}
	DMA_LISR = DMA2 -> LISR;
 8001662:	4d37      	ldr	r5, [pc, #220]	@ (8001740 <DMA2_Stream3_IRQHandler+0xe0>)
 8001664:	4c37      	ldr	r4, [pc, #220]	@ (8001744 <DMA2_Stream3_IRQHandler+0xe4>)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	6023      	str	r3, [r4, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	025b      	lsls	r3, r3, #9
 800166e:	d50b      	bpl.n	8001688 <DMA2_Stream3_IRQHandler+0x28>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <DMA2_Stream3_IRQHandler+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	0616      	lsls	r6, r2, #24
 8001678:	d506      	bpl.n	8001688 <DMA2_Stream3_IRQHandler+0x28>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800167a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167c:	b123      	cbz	r3, 8001688 <DMA2_Stream3_IRQHandler+0x28>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800167e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001680:	68ab      	ldr	r3, [r5, #8]
 8001682:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001686:	60ab      	str	r3, [r5, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	01dd      	lsls	r5, r3, #7
 800168c:	d50c      	bpl.n	80016a8 <DMA2_Stream3_IRQHandler+0x48>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800168e:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <DMA2_Stream3_IRQHandler+0xe8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	0790      	lsls	r0, r2, #30
 8001696:	d507      	bpl.n	80016a8 <DMA2_Stream3_IRQHandler+0x48>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	b12b      	cbz	r3, 80016a8 <DMA2_Stream3_IRQHandler+0x48>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800169c:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800169e:	4a28      	ldr	r2, [pc, #160]	@ (8001740 <DMA2_Stream3_IRQHandler+0xe0>)
 80016a0:	6893      	ldr	r3, [r2, #8]
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	0199      	lsls	r1, r3, #6
 80016ac:	d50c      	bpl.n	80016c8 <DMA2_Stream3_IRQHandler+0x68>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <DMA2_Stream3_IRQHandler+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	0752      	lsls	r2, r2, #29
 80016b6:	d507      	bpl.n	80016c8 <DMA2_Stream3_IRQHandler+0x68>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	b12b      	cbz	r3, 80016c8 <DMA2_Stream3_IRQHandler+0x68>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016bc:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80016be:	4a20      	ldr	r2, [pc, #128]	@ (8001740 <DMA2_Stream3_IRQHandler+0xe0>)
 80016c0:	6893      	ldr	r3, [r2, #8]
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	d518      	bpl.n	8001700 <DMA2_Stream3_IRQHandler+0xa0>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80016ce:	4d1e      	ldr	r5, [pc, #120]	@ (8001748 <DMA2_Stream3_IRQHandler+0xe8>)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	0716      	lsls	r6, r2, #28
 80016d6:	d513      	bpl.n	8001700 <DMA2_Stream3_IRQHandler+0xa0>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	b18b      	cbz	r3, 8001700 <DMA2_Stream3_IRQHandler+0xa0>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016dc:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80016de:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <DMA2_Stream3_IRQHandler+0xe0>)
 80016e0:	6893      	ldr	r3, [r2, #8]
 80016e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016e6:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016ec:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80016f0:	d106      	bne.n	8001700 <DMA2_Stream3_IRQHandler+0xa0>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	0355      	lsls	r5, r2, #13
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016f8:	bf4c      	ite	mi
 80016fa:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016fc:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80016fe:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	0118      	lsls	r0, r3, #4
 8001704:	d51a      	bpl.n	800173c <DMA2_Stream3_IRQHandler+0xdc>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001706:	4c10      	ldr	r4, [pc, #64]	@ (8001748 <DMA2_Stream3_IRQHandler+0xe8>)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	06d1      	lsls	r1, r2, #27
 800170e:	d515      	bpl.n	800173c <DMA2_Stream3_IRQHandler+0xdc>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	b19b      	cbz	r3, 800173c <DMA2_Stream3_IRQHandler+0xdc>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001714:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <DMA2_Stream3_IRQHandler+0xe0>)
 8001718:	6893      	ldr	r3, [r2, #8]
 800171a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800171e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001724:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001728:	d108      	bne.n	800173c <DMA2_Stream3_IRQHandler+0xdc>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	0352      	lsls	r2, r2, #13
					}
				}
			}
		}
	}
}
 8001730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001734:	bf4c      	ite	mi
 8001736:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001738:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800173a:	4718      	bx	r3
}
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	bf00      	nop
 8001740:	40026400 	.word	0x40026400
 8001744:	20000214 	.word	0x20000214
 8001748:	20000228 	.word	0x20000228

0800174c <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 800174c:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 800174e:	4d2f      	ldr	r5, [pc, #188]	@ (800180c <DMA2_Stream4_IRQHandler+0xc0>)
 8001750:	4c2f      	ldr	r4, [pc, #188]	@ (8001810 <DMA2_Stream4_IRQHandler+0xc4>)
 8001752:	686b      	ldr	r3, [r5, #4]
 8001754:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	07da      	lsls	r2, r3, #31
 800175a:	d508      	bpl.n	800176e <DMA2_Stream4_IRQHandler+0x22>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <DMA2_Stream4_IRQHandler+0xc8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001762:	b123      	cbz	r3, 800176e <DMA2_Stream4_IRQHandler+0x22>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001764:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001766:	68ab      	ldr	r3, [r5, #8]
 8001768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176c:	60ab      	str	r3, [r5, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	075b      	lsls	r3, r3, #29
 8001772:	d509      	bpl.n	8001788 <DMA2_Stream4_IRQHandler+0x3c>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <DMA2_Stream4_IRQHandler+0xc8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	b12b      	cbz	r3, 8001788 <DMA2_Stream4_IRQHandler+0x3c>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800177c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800177e:	4a23      	ldr	r2, [pc, #140]	@ (800180c <DMA2_Stream4_IRQHandler+0xc0>)
 8001780:	68d3      	ldr	r3, [r2, #12]
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	071e      	lsls	r6, r3, #28
 800178c:	d509      	bpl.n	80017a2 <DMA2_Stream4_IRQHandler+0x56>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <DMA2_Stream4_IRQHandler+0xc8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001794:	b12b      	cbz	r3, 80017a2 <DMA2_Stream4_IRQHandler+0x56>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001796:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001798:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <DMA2_Stream4_IRQHandler+0xc0>)
 800179a:	68d3      	ldr	r3, [r2, #12]
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	06dd      	lsls	r5, r3, #27
 80017a6:	d515      	bpl.n	80017d4 <DMA2_Stream4_IRQHandler+0x88>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80017a8:	4d1a      	ldr	r5, [pc, #104]	@ (8001814 <DMA2_Stream4_IRQHandler+0xc8>)
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ae:	b18b      	cbz	r3, 80017d4 <DMA2_Stream4_IRQHandler+0x88>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80017b0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80017b2:	4a16      	ldr	r2, [pc, #88]	@ (800180c <DMA2_Stream4_IRQHandler+0xc0>)
 80017b4:	68d3      	ldr	r3, [r2, #12]
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017c0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80017c4:	d106      	bne.n	80017d4 <DMA2_Stream4_IRQHandler+0x88>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80017cc:	bf4c      	ite	mi
 80017ce:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80017d0:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80017d2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	0699      	lsls	r1, r3, #26
 80017d8:	d517      	bpl.n	800180a <DMA2_Stream4_IRQHandler+0xbe>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80017da:	4c0e      	ldr	r4, [pc, #56]	@ (8001814 <DMA2_Stream4_IRQHandler+0xc8>)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	b19b      	cbz	r3, 800180a <DMA2_Stream4_IRQHandler+0xbe>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80017e2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <DMA2_Stream4_IRQHandler+0xc0>)
 80017e6:	68d3      	ldr	r3, [r2, #12]
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017f2:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80017f6:	d108      	bne.n	800180a <DMA2_Stream4_IRQHandler+0xbe>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	0352      	lsls	r2, r2, #13
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80017fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001802:	bf4c      	ite	mi
 8001804:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001806:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001808:	4718      	bx	r3
}
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	40026400 	.word	0x40026400
 8001810:	20000210 	.word	0x20000210
 8001814:	20000224 	.word	0x20000224

08001818 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8001818:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 800181a:	4d2f      	ldr	r5, [pc, #188]	@ (80018d8 <DMA2_Stream5_IRQHandler+0xc0>)
 800181c:	4c2f      	ldr	r4, [pc, #188]	@ (80018dc <DMA2_Stream5_IRQHandler+0xc4>)
 800181e:	686b      	ldr	r3, [r5, #4]
 8001820:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	065a      	lsls	r2, r3, #25
 8001826:	d508      	bpl.n	800183a <DMA2_Stream5_IRQHandler+0x22>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <DMA2_Stream5_IRQHandler+0xc8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800182e:	b123      	cbz	r3, 800183a <DMA2_Stream5_IRQHandler+0x22>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001830:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001832:	68eb      	ldr	r3, [r5, #12]
 8001834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001838:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	d509      	bpl.n	8001854 <DMA2_Stream5_IRQHandler+0x3c>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <DMA2_Stream5_IRQHandler+0xc8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	b12b      	cbz	r3, 8001854 <DMA2_Stream5_IRQHandler+0x3c>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001848:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800184a:	4a23      	ldr	r2, [pc, #140]	@ (80018d8 <DMA2_Stream5_IRQHandler+0xc0>)
 800184c:	68d3      	ldr	r3, [r2, #12]
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	059e      	lsls	r6, r3, #22
 8001858:	d509      	bpl.n	800186e <DMA2_Stream5_IRQHandler+0x56>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <DMA2_Stream5_IRQHandler+0xc8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	b12b      	cbz	r3, 800186e <DMA2_Stream5_IRQHandler+0x56>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001862:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001864:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <DMA2_Stream5_IRQHandler+0xc0>)
 8001866:	68d3      	ldr	r3, [r2, #12]
 8001868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	055d      	lsls	r5, r3, #21
 8001872:	d515      	bpl.n	80018a0 <DMA2_Stream5_IRQHandler+0x88>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001874:	4d1a      	ldr	r5, [pc, #104]	@ (80018e0 <DMA2_Stream5_IRQHandler+0xc8>)
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187a:	b18b      	cbz	r3, 80018a0 <DMA2_Stream5_IRQHandler+0x88>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800187c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800187e:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <DMA2_Stream5_IRQHandler+0xc0>)
 8001880:	68d3      	ldr	r3, [r2, #12]
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800188c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001890:	d106      	bne.n	80018a0 <DMA2_Stream5_IRQHandler+0x88>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001898:	bf4c      	ite	mi
 800189a:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800189c:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800189e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	0519      	lsls	r1, r3, #20
 80018a4:	d517      	bpl.n	80018d6 <DMA2_Stream5_IRQHandler+0xbe>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80018a6:	4c0e      	ldr	r4, [pc, #56]	@ (80018e0 <DMA2_Stream5_IRQHandler+0xc8>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	b19b      	cbz	r3, 80018d6 <DMA2_Stream5_IRQHandler+0xbe>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80018ae:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80018b0:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <DMA2_Stream5_IRQHandler+0xc0>)
 80018b2:	68d3      	ldr	r3, [r2, #12]
 80018b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018b8:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018be:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80018c2:	d108      	bne.n	80018d6 <DMA2_Stream5_IRQHandler+0xbe>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	0352      	lsls	r2, r2, #13
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018ce:	bf4c      	ite	mi
 80018d0:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018d2:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80018d4:	4718      	bx	r3
}
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	40026400 	.word	0x40026400
 80018dc:	20000210 	.word	0x20000210
 80018e0:	20000220 	.word	0x20000220

080018e4 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80018e4:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 80018e6:	4d2f      	ldr	r5, [pc, #188]	@ (80019a4 <DMA2_Stream6_IRQHandler+0xc0>)
 80018e8:	4c2f      	ldr	r4, [pc, #188]	@ (80019a8 <DMA2_Stream6_IRQHandler+0xc4>)
 80018ea:	686b      	ldr	r3, [r5, #4]
 80018ec:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	03da      	lsls	r2, r3, #15
 80018f2:	d508      	bpl.n	8001906 <DMA2_Stream6_IRQHandler+0x22>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80018f4:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <DMA2_Stream6_IRQHandler+0xc8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fa:	b123      	cbz	r3, 8001906 <DMA2_Stream6_IRQHandler+0x22>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018fc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80018fe:	68eb      	ldr	r3, [r5, #12]
 8001900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001904:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	035b      	lsls	r3, r3, #13
 800190a:	d509      	bpl.n	8001920 <DMA2_Stream6_IRQHandler+0x3c>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <DMA2_Stream6_IRQHandler+0xc8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	b12b      	cbz	r3, 8001920 <DMA2_Stream6_IRQHandler+0x3c>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001914:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001916:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <DMA2_Stream6_IRQHandler+0xc0>)
 8001918:	68d3      	ldr	r3, [r2, #12]
 800191a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	031e      	lsls	r6, r3, #12
 8001924:	d509      	bpl.n	800193a <DMA2_Stream6_IRQHandler+0x56>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <DMA2_Stream6_IRQHandler+0xc8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	b12b      	cbz	r3, 800193a <DMA2_Stream6_IRQHandler+0x56>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800192e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001930:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <DMA2_Stream6_IRQHandler+0xc0>)
 8001932:	68d3      	ldr	r3, [r2, #12]
 8001934:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001938:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	02dd      	lsls	r5, r3, #11
 800193e:	d515      	bpl.n	800196c <DMA2_Stream6_IRQHandler+0x88>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001940:	4d1a      	ldr	r5, [pc, #104]	@ (80019ac <DMA2_Stream6_IRQHandler+0xc8>)
 8001942:	682b      	ldr	r3, [r5, #0]
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	b18b      	cbz	r3, 800196c <DMA2_Stream6_IRQHandler+0x88>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001948:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <DMA2_Stream6_IRQHandler+0xc0>)
 800194c:	68d3      	ldr	r3, [r2, #12]
 800194e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001952:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001958:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800195c:	d106      	bne.n	800196c <DMA2_Stream6_IRQHandler+0x88>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001964:	bf4c      	ite	mi
 8001966:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001968:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 800196a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	0299      	lsls	r1, r3, #10
 8001970:	d517      	bpl.n	80019a2 <DMA2_Stream6_IRQHandler+0xbe>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001972:	4c0e      	ldr	r4, [pc, #56]	@ (80019ac <DMA2_Stream6_IRQHandler+0xc8>)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	b19b      	cbz	r3, 80019a2 <DMA2_Stream6_IRQHandler+0xbe>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800197a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800197c:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <DMA2_Stream6_IRQHandler+0xc0>)
 800197e:	68d3      	ldr	r3, [r2, #12]
 8001980:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001984:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800198a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800198e:	d108      	bne.n	80019a2 <DMA2_Stream6_IRQHandler+0xbe>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	0352      	lsls	r2, r2, #13
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800199a:	bf4c      	ite	mi
 800199c:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800199e:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 80019a0:	4718      	bx	r3
}
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	40026400 	.word	0x40026400
 80019a8:	20000210 	.word	0x20000210
 80019ac:	2000021c 	.word	0x2000021c

080019b0 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
	DMA_HISR = DMA2 -> HISR;
 80019b2:	4d2f      	ldr	r5, [pc, #188]	@ (8001a70 <DMA2_Stream7_IRQHandler+0xc0>)
 80019b4:	4c2f      	ldr	r4, [pc, #188]	@ (8001a74 <DMA2_Stream7_IRQHandler+0xc4>)
 80019b6:	686b      	ldr	r3, [r5, #4]
 80019b8:	6023      	str	r3, [r4, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	025a      	lsls	r2, r3, #9
 80019be:	d508      	bpl.n	80019d2 <DMA2_Stream7_IRQHandler+0x22>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <DMA2_Stream7_IRQHandler+0xc8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c6:	b123      	cbz	r3, 80019d2 <DMA2_Stream7_IRQHandler+0x22>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80019c8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80019ca:	68eb      	ldr	r3, [r5, #12]
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019d0:	60eb      	str	r3, [r5, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	01db      	lsls	r3, r3, #7
 80019d6:	d509      	bpl.n	80019ec <DMA2_Stream7_IRQHandler+0x3c>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <DMA2_Stream7_IRQHandler+0xc8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	b12b      	cbz	r3, 80019ec <DMA2_Stream7_IRQHandler+0x3c>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80019e0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80019e2:	4a23      	ldr	r2, [pc, #140]	@ (8001a70 <DMA2_Stream7_IRQHandler+0xc0>)
 80019e4:	68d3      	ldr	r3, [r2, #12]
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	019e      	lsls	r6, r3, #6
 80019f0:	d509      	bpl.n	8001a06 <DMA2_Stream7_IRQHandler+0x56>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <DMA2_Stream7_IRQHandler+0xc8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	b12b      	cbz	r3, 8001a06 <DMA2_Stream7_IRQHandler+0x56>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80019fa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80019fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <DMA2_Stream7_IRQHandler+0xc0>)
 80019fe:	68d3      	ldr	r3, [r2, #12]
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	015d      	lsls	r5, r3, #5
 8001a0a:	d515      	bpl.n	8001a38 <DMA2_Stream7_IRQHandler+0x88>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001a0c:	4d1a      	ldr	r5, [pc, #104]	@ (8001a78 <DMA2_Stream7_IRQHandler+0xc8>)
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	b18b      	cbz	r3, 8001a38 <DMA2_Stream7_IRQHandler+0x88>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001a14:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <DMA2_Stream7_IRQHandler+0xc0>)
 8001a18:	68d3      	ldr	r3, [r2, #12]
 8001a1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a1e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a24:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001a28:	d106      	bne.n	8001a38 <DMA2_Stream7_IRQHandler+0x88>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	0350      	lsls	r0, r2, #13
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a30:	bf4c      	ite	mi
 8001a32:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a34:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001a36:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	0119      	lsls	r1, r3, #4
 8001a3c:	d517      	bpl.n	8001a6e <DMA2_Stream7_IRQHandler+0xbe>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001a3e:	4c0e      	ldr	r4, [pc, #56]	@ (8001a78 <DMA2_Stream7_IRQHandler+0xc8>)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	b19b      	cbz	r3, 8001a6e <DMA2_Stream7_IRQHandler+0xbe>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001a46:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <DMA2_Stream7_IRQHandler+0xc0>)
 8001a4a:	68d3      	ldr	r3, [r2, #12]
 8001a4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a50:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a56:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001a5a:	d108      	bne.n	8001a6e <DMA2_Stream7_IRQHandler+0xbe>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	0352      	lsls	r2, r2, #13
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a66:	bf4c      	ite	mi
 8001a68:	6d1b      	ldrmi	r3, [r3, #80]	@ 0x50
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a6a:	6d5b      	ldrpl	r3, [r3, #84]	@ 0x54
 8001a6c:	4718      	bx	r3
}
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	40026400 	.word	0x40026400
 8001a74:	20000210 	.word	0x20000210
 8001a78:	20000218 	.word	0x20000218

08001a7c <DMA_Clock_Enable>:
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
	if(config -> Request.Controller == DMA1){
 8001a7c:	6803      	ldr	r3, [r0, #0]
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <DMA_Clock_Enable+0x28>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d106      	bne.n	8001a92 <DMA_Clock_Enable+0x16>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8001a84:	f5a2 5220 	sub.w	r2, r2, #10240	@ 0x2800
 8001a88:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
	}
	if(config -> Request.Controller == DMA2)
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001a8e:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 8001a90:	4770      	bx	lr
	if(config -> Request.Controller == DMA2)
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <DMA_Clock_Enable+0x2c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d1fb      	bne.n	8001a90 <DMA_Clock_Enable+0x14>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001a98:	f5a2 5230 	sub.w	r2, r2, #11264	@ 0x2c00
 8001a9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001a9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa2:	e7f4      	b.n	8001a8e <DMA_Clock_Enable+0x12>
 8001aa4:	40026000 	.word	0x40026000
 8001aa8:	40026400 	.word	0x40026400

08001aac <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8001aac:	b510      	push	{r4, lr}
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001aae:	f7ff ffe5 	bl	8001a7c <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 8001ab2:	6843      	ldr	r3, [r0, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	07d1      	lsls	r1, r2, #31
{
 8001ab8:	4604      	mov	r4, r0
	if (config->Request.Stream->CR & DMA_SxCR_EN)
 8001aba:	d506      	bpl.n	8001aca <DMA_Init+0x1e>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	07d2      	lsls	r2, r2, #31
 8001ac8:	d4fc      	bmi.n	8001ac4 <DMA_Init+0x18>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	7a21      	ldrb	r1, [r4, #8]
 8001ace:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001ad2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	69a1      	ldr	r1, [r4, #24]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68e1      	ldr	r1, [r4, #12]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	6961      	ldr	r1, [r4, #20]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	6921      	ldr	r1, [r4, #16]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8001b04:	69e2      	ldr	r2, [r4, #28]
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d029      	beq.n	8001b5e <DMA_Init+0xb2>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001b0a:	0610      	lsls	r0, r2, #24
		{
			config->Request.Stream->FCR |= config->interrupts;
 8001b0c:	bf42      	ittt	mi
 8001b0e:	6959      	ldrmi	r1, [r3, #20]
 8001b10:	4311      	orrmi	r1, r2
 8001b12:	6159      	strmi	r1, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001b14:	06d1      	lsls	r1, r2, #27
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8001b16:	bf42      	ittt	mi
 8001b18:	6819      	ldrmi	r1, [r3, #0]
 8001b1a:	f041 0110 	orrmi.w	r1, r1, #16
 8001b1e:	6019      	strmi	r1, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001b20:	0710      	lsls	r0, r2, #28
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8001b22:	bf42      	ittt	mi
 8001b24:	6819      	ldrmi	r1, [r3, #0]
 8001b26:	f041 0108 	orrmi.w	r1, r1, #8
 8001b2a:	6019      	strmi	r1, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001b2c:	0751      	lsls	r1, r2, #29
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8001b2e:	bf42      	ittt	mi
 8001b30:	6819      	ldrmi	r1, [r3, #0]
 8001b32:	f041 0104 	orrmi.w	r1, r1, #4
 8001b36:	6019      	strmi	r1, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001b38:	0792      	lsls	r2, r2, #30
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8001b3a:	bf48      	it	mi
 8001b3c:	681a      	ldrmi	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 8001b3e:	494b      	ldr	r1, [pc, #300]	@ (8001c6c <DMA_Init+0x1c0>)
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8001b40:	bf44      	itt	mi
 8001b42:	f042 0202 	orrmi.w	r2, r2, #2
 8001b46:	601a      	strmi	r2, [r3, #0]
		if(config->Request.Controller == DMA1)
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	428a      	cmp	r2, r1
 8001b4c:	d14b      	bne.n	8001be6 <DMA_Init+0x13a>
		{
			if(config->Request.Stream == DMA1_Stream0){
 8001b4e:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <DMA_Init+0x1c4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d117      	bne.n	8001b84 <DMA_Init+0xd8>
				__DMA1_Stream0_Config__ = config;
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <DMA_Init+0x1c8>)
 8001b56:	200b      	movs	r0, #11
 8001b58:	601c      	str	r4, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f7ff f8c3 	bl	8000ce4 <__NVIC_EnableIRQ.part.0>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	8c22      	ldrh	r2, [r4, #32]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001b70:	69a2      	ldr	r2, [r4, #24]
 8001b72:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001b76:	d171      	bne.n	8001c5c <DMA_Init+0x1b0>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b7e:	601a      	str	r2, [r3, #0]
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
	}

	return 1;  // Return 1 on successful initialization
 8001b80:	2001      	movs	r0, #1
}
 8001b82:	bd10      	pop	{r4, pc}
			else if(config->Request.Stream == DMA1_Stream1){
 8001b84:	4a3c      	ldr	r2, [pc, #240]	@ (8001c78 <DMA_Init+0x1cc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d103      	bne.n	8001b92 <DMA_Init+0xe6>
				__DMA1_Stream1_Config__ = config;
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <DMA_Init+0x1d0>)
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	601c      	str	r4, [r3, #0]
 8001b90:	e7e3      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream2){
 8001b92:	4a3b      	ldr	r2, [pc, #236]	@ (8001c80 <DMA_Init+0x1d4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d103      	bne.n	8001ba0 <DMA_Init+0xf4>
				__DMA1_Stream2_Config__ = config;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <DMA_Init+0x1d8>)
 8001b9a:	200d      	movs	r0, #13
 8001b9c:	601c      	str	r4, [r3, #0]
 8001b9e:	e7dc      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream3){
 8001ba0:	4a39      	ldr	r2, [pc, #228]	@ (8001c88 <DMA_Init+0x1dc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d103      	bne.n	8001bae <DMA_Init+0x102>
				__DMA1_Stream3_Config__ = config;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <DMA_Init+0x1e0>)
 8001ba8:	200e      	movs	r0, #14
 8001baa:	601c      	str	r4, [r3, #0]
 8001bac:	e7d5      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream4){
 8001bae:	4a38      	ldr	r2, [pc, #224]	@ (8001c90 <DMA_Init+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d103      	bne.n	8001bbc <DMA_Init+0x110>
				__DMA1_Stream4_Config__ = config;
 8001bb4:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <DMA_Init+0x1e8>)
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	601c      	str	r4, [r3, #0]
 8001bba:	e7ce      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream5){
 8001bbc:	4a36      	ldr	r2, [pc, #216]	@ (8001c98 <DMA_Init+0x1ec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <DMA_Init+0x11e>
				__DMA1_Stream5_Config__ = config;
 8001bc2:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <DMA_Init+0x1f0>)
 8001bc4:	2010      	movs	r0, #16
 8001bc6:	601c      	str	r4, [r3, #0]
 8001bc8:	e7c7      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream6) {
 8001bca:	4a35      	ldr	r2, [pc, #212]	@ (8001ca0 <DMA_Init+0x1f4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d103      	bne.n	8001bd8 <DMA_Init+0x12c>
				__DMA1_Stream6_Config__ = config;
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <DMA_Init+0x1f8>)
 8001bd2:	2011      	movs	r0, #17
 8001bd4:	601c      	str	r4, [r3, #0]
 8001bd6:	e7c0      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA1_Stream7){
 8001bd8:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <DMA_Init+0x1fc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d1bf      	bne.n	8001b5e <DMA_Init+0xb2>
				__DMA1_Stream7_Config__ = config;
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <DMA_Init+0x200>)
 8001be0:	202f      	movs	r0, #47	@ 0x2f
 8001be2:	601c      	str	r4, [r3, #0]
 8001be4:	e7b9      	b.n	8001b5a <DMA_Init+0xae>
		else if(config->Request.Controller == DMA2)
 8001be6:	4932      	ldr	r1, [pc, #200]	@ (8001cb0 <DMA_Init+0x204>)
 8001be8:	428a      	cmp	r2, r1
 8001bea:	d1b8      	bne.n	8001b5e <DMA_Init+0xb2>
			if(config->Request.Stream == DMA2_Stream0){
 8001bec:	4a31      	ldr	r2, [pc, #196]	@ (8001cb4 <DMA_Init+0x208>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d103      	bne.n	8001bfa <DMA_Init+0x14e>
				__DMA2_Stream0_Config__ = config;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <DMA_Init+0x20c>)
 8001bf4:	2038      	movs	r0, #56	@ 0x38
 8001bf6:	601c      	str	r4, [r3, #0]
 8001bf8:	e7af      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream1){
 8001bfa:	4a30      	ldr	r2, [pc, #192]	@ (8001cbc <DMA_Init+0x210>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d103      	bne.n	8001c08 <DMA_Init+0x15c>
				__DMA2_Stream1_Config__ = config;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <DMA_Init+0x214>)
 8001c02:	2039      	movs	r0, #57	@ 0x39
 8001c04:	601c      	str	r4, [r3, #0]
 8001c06:	e7a8      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream2){
 8001c08:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <DMA_Init+0x218>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d103      	bne.n	8001c16 <DMA_Init+0x16a>
				__DMA2_Stream2_Config__ = config;
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <DMA_Init+0x21c>)
 8001c10:	203a      	movs	r0, #58	@ 0x3a
 8001c12:	601c      	str	r4, [r3, #0]
 8001c14:	e7a1      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream3){
 8001c16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <DMA_Init+0x220>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d103      	bne.n	8001c24 <DMA_Init+0x178>
				__DMA2_Stream3_Config__ = config;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <DMA_Init+0x224>)
 8001c1e:	203b      	movs	r0, #59	@ 0x3b
 8001c20:	601c      	str	r4, [r3, #0]
 8001c22:	e79a      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream4){
 8001c24:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <DMA_Init+0x228>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d103      	bne.n	8001c32 <DMA_Init+0x186>
				__DMA2_Stream4_Config__ = config;
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd8 <DMA_Init+0x22c>)
 8001c2c:	203c      	movs	r0, #60	@ 0x3c
 8001c2e:	601c      	str	r4, [r3, #0]
 8001c30:	e793      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream5){
 8001c32:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <DMA_Init+0x230>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d103      	bne.n	8001c40 <DMA_Init+0x194>
				__DMA2_Stream5_Config__ = config;
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <DMA_Init+0x234>)
 8001c3a:	2044      	movs	r0, #68	@ 0x44
 8001c3c:	601c      	str	r4, [r3, #0]
 8001c3e:	e78c      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream6){
 8001c40:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <DMA_Init+0x238>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d103      	bne.n	8001c4e <DMA_Init+0x1a2>
				__DMA2_Stream6_Config__ = config;
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <DMA_Init+0x23c>)
 8001c48:	2045      	movs	r0, #69	@ 0x45
 8001c4a:	601c      	str	r4, [r3, #0]
 8001c4c:	e785      	b.n	8001b5a <DMA_Init+0xae>
			else if(config->Request.Stream == DMA2_Stream7){
 8001c4e:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <DMA_Init+0x240>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d184      	bne.n	8001b5e <DMA_Init+0xb2>
				__DMA2_Stream7_Config__ = config;
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <DMA_Init+0x244>)
 8001c56:	2046      	movs	r0, #70	@ 0x46
 8001c58:	601c      	str	r4, [r3, #0]
 8001c5a:	e77e      	b.n	8001b5a <DMA_Init+0xae>
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001c5c:	b91a      	cbnz	r2, 8001c66 <DMA_Init+0x1ba>
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c64:	e78b      	b.n	8001b7e <DMA_Init+0xd2>
		return -1;  // Return -1 if circular mode configuration is invalid
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6a:	e78a      	b.n	8001b82 <DMA_Init+0xd6>
 8001c6c:	40026000 	.word	0x40026000
 8001c70:	40026010 	.word	0x40026010
 8001c74:	20000254 	.word	0x20000254
 8001c78:	40026028 	.word	0x40026028
 8001c7c:	20000250 	.word	0x20000250
 8001c80:	40026040 	.word	0x40026040
 8001c84:	2000024c 	.word	0x2000024c
 8001c88:	40026058 	.word	0x40026058
 8001c8c:	20000248 	.word	0x20000248
 8001c90:	40026070 	.word	0x40026070
 8001c94:	20000244 	.word	0x20000244
 8001c98:	40026088 	.word	0x40026088
 8001c9c:	20000240 	.word	0x20000240
 8001ca0:	400260a0 	.word	0x400260a0
 8001ca4:	2000023c 	.word	0x2000023c
 8001ca8:	400260b8 	.word	0x400260b8
 8001cac:	20000238 	.word	0x20000238
 8001cb0:	40026400 	.word	0x40026400
 8001cb4:	40026410 	.word	0x40026410
 8001cb8:	20000234 	.word	0x20000234
 8001cbc:	40026428 	.word	0x40026428
 8001cc0:	20000230 	.word	0x20000230
 8001cc4:	40026440 	.word	0x40026440
 8001cc8:	2000022c 	.word	0x2000022c
 8001ccc:	40026458 	.word	0x40026458
 8001cd0:	20000228 	.word	0x20000228
 8001cd4:	40026470 	.word	0x40026470
 8001cd8:	20000224 	.word	0x20000224
 8001cdc:	40026488 	.word	0x40026488
 8001ce0:	20000220 	.word	0x20000220
 8001ce4:	400264a0 	.word	0x400264a0
 8001ce8:	2000021c 	.word	0x2000021c
 8001cec:	400264b8 	.word	0x400264b8
 8001cf0:	20000218 	.word	0x20000218

08001cf4 <DMA_Set_Target>:
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8001cf4:	6843      	ldr	r3, [r0, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001cfe:	6982      	ldr	r2, [r0, #24]
 8001d00:	b9d2      	cbnz	r2, 8001d38 <DMA_Set_Target+0x44>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8001d08:	601a      	str	r2, [r3, #0]
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8001d0a:	681a      	ldr	r2, [r3, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001d0c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8001d0e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8001d12:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 8001d22:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8001d24:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d2c:	601a      	str	r2, [r3, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8001d2e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8001d30:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8001d32:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8001d34:	609a      	str	r2, [r3, #8]
}
 8001d36:	4770      	bx	lr
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001d38:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001d3c:	d1e5      	bne.n	8001d0a <DMA_Set_Target+0x16>
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d44:	e7e0      	b.n	8001d08 <DMA_Set_Target+0x14>
	...

08001d48 <DMA_Set_Trigger>:
{
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8001d48:	6803      	ldr	r3, [r0, #0]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <DMA_Set_Trigger+0x6c>)
 8001d4c:	4293      	cmp	r3, r2
{
 8001d4e:	b510      	push	{r4, lr}
	if (controller == DMA1 || controller == DMA2)
 8001d50:	d003      	beq.n	8001d5a <DMA_Set_Trigger+0x12>
 8001d52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d112      	bne.n	8001d80 <DMA_Set_Trigger+0x38>
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8001d5a:	6841      	ldr	r1, [r0, #4]
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8001d5c:	4a16      	ldr	r2, [pc, #88]	@ (8001db8 <DMA_Set_Trigger+0x70>)
 8001d5e:	440a      	add	r2, r1
 8001d60:	2a48      	cmp	r2, #72	@ 0x48
 8001d62:	d80e      	bhi.n	8001d82 <DMA_Set_Trigger+0x3a>
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
		}
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
		{
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001d64:	4c15      	ldr	r4, [pc, #84]	@ (8001dbc <DMA_Set_Trigger+0x74>)
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d66:	6898      	ldr	r0, [r3, #8]
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001d68:	10d2      	asrs	r2, r2, #3
 8001d6a:	4362      	muls	r2, r4
 8001d6c:	4c14      	ldr	r4, [pc, #80]	@ (8001dc0 <DMA_Set_Trigger+0x78>)
 8001d6e:	5ca4      	ldrb	r4, [r4, r2]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d70:	223f      	movs	r2, #63	@ 0x3f
 8001d72:	40a2      	lsls	r2, r4
 8001d74:	4302      	orrs	r2, r0
 8001d76:	609a      	str	r2, [r3, #8]
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8001d78:	680b      	ldr	r3, [r1, #0]
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	600b      	str	r3, [r1, #0]
	}
}
 8001d80:	bd10      	pop	{r4, pc}
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <DMA_Set_Trigger+0x7c>)
 8001d84:	440a      	add	r2, r1
 8001d86:	2a48      	cmp	r2, #72	@ 0x48
 8001d88:	d80a      	bhi.n	8001da0 <DMA_Set_Trigger+0x58>
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8001d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8001dbc <DMA_Set_Trigger+0x74>)
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d8c:	68d8      	ldr	r0, [r3, #12]
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8001d8e:	10d2      	asrs	r2, r2, #3
 8001d90:	4362      	muls	r2, r4
 8001d92:	4c0d      	ldr	r4, [pc, #52]	@ (8001dc8 <DMA_Set_Trigger+0x80>)
 8001d94:	5ca4      	ldrb	r4, [r4, r2]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d96:	223f      	movs	r2, #63	@ 0x3f
 8001d98:	40a2      	lsls	r2, r4
 8001d9a:	4302      	orrs	r2, r0
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	e7eb      	b.n	8001d78 <DMA_Set_Trigger+0x30>
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <DMA_Set_Trigger+0x84>)
 8001da2:	440a      	add	r2, r1
 8001da4:	2a48      	cmp	r2, #72	@ 0x48
 8001da6:	d9dd      	bls.n	8001d64 <DMA_Set_Trigger+0x1c>
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8001da8:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <DMA_Set_Trigger+0x88>)
 8001daa:	440a      	add	r2, r1
 8001dac:	2a48      	cmp	r2, #72	@ 0x48
 8001dae:	d8e3      	bhi.n	8001d78 <DMA_Set_Trigger+0x30>
 8001db0:	e7eb      	b.n	8001d8a <DMA_Set_Trigger+0x42>
 8001db2:	bf00      	nop
 8001db4:	40026000 	.word	0x40026000
 8001db8:	bffd9ff0 	.word	0xbffd9ff0
 8001dbc:	aaaaaaab 	.word	0xaaaaaaab
 8001dc0:	080036d0 	.word	0x080036d0
 8001dc4:	bffd9f90 	.word	0xbffd9f90
 8001dc8:	080036d0 	.word	0x080036d0
 8001dcc:	bffd9bf0 	.word	0xbffd9bf0
 8001dd0:	bffd9b90 	.word	0xbffd9b90

08001dd4 <DMA_Memory_To_Memory_Transfer>:

void DMA_Memory_To_Memory_Transfer(volatile void *source,
		uint8_t source_data_size, bool source_increment,
		volatile void *destination, uint8_t dest_data_size,
		bool destination_increment, uint16_t length)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Enable DMA2 clock
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001dd6:	4d39      	ldr	r5, [pc, #228]	@ (8001ebc <DMA_Memory_To_Memory_Transfer+0xe8>)
{
 8001dd8:	f89d 7014 	ldrb.w	r7, [sp, #20]
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001ddc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
{
 8001dde:	f89d 6018 	ldrb.w	r6, [sp, #24]
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001de2:	f444 0480 	orr.w	r4, r4, #4194304	@ 0x400000
 8001de6:	632c      	str	r4, [r5, #48]	@ 0x30

	// Clear the channel selection and set the transfer direction to memory-to-memory
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 8001de8:	4c35      	ldr	r4, [pc, #212]	@ (8001ec0 <DMA_Memory_To_Memory_Transfer+0xec>)
 8001dea:	6925      	ldr	r5, [r4, #16]
 8001dec:	f005 6560 	and.w	r5, r5, #234881024	@ 0xe000000
 8001df0:	6125      	str	r5, [r4, #16]
	DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 8001df2:	6925      	ldr	r5, [r4, #16]
 8001df4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8001df8:	6125      	str	r5, [r4, #16]

	// Set the transfer complete interrupt and priority level
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8001dfa:	6925      	ldr	r5, [r4, #16]
 8001dfc:	f445 3540 	orr.w	r5, r5, #196608	@ 0x30000
 8001e00:	f045 0510 	orr.w	r5, r5, #16

	// Set the peripheral data size based on the source data size
	if(source_data_size == 32)
 8001e04:	2920      	cmp	r1, #32
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8001e06:	6125      	str	r5, [r4, #16]
	if(source_data_size == 32)
 8001e08:	d138      	bne.n	8001e7c <DMA_Memory_To_Memory_Transfer+0xa8>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 8001e0a:	6921      	ldr	r1, [r4, #16]
 8001e0c:	f441 51c0 	orr.w	r1, r1, #6144	@ 0x1800
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8001e10:	6121      	str	r1, [r4, #16]
	}

	// Set the memory data size based on the destination data size
	if(dest_data_size == 32)
 8001e12:	492b      	ldr	r1, [pc, #172]	@ (8001ec0 <DMA_Memory_To_Memory_Transfer+0xec>)
 8001e14:	2f20      	cmp	r7, #32
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8001e16:	690c      	ldr	r4, [r1, #16]
	if(dest_data_size == 32)
 8001e18:	d13d      	bne.n	8001e96 <DMA_Memory_To_Memory_Transfer+0xc2>
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8001e1a:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8001e1e:	610c      	str	r4, [r1, #16]
	}

	// Configure source address increment mode
	if(source_increment)
 8001e20:	4927      	ldr	r1, [pc, #156]	@ (8001ec0 <DMA_Memory_To_Memory_Transfer+0xec>)
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d043      	beq.n	8001eae <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 8001e26:	690a      	ldr	r2, [r1, #16]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8001e2c:	610a      	str	r2, [r1, #16]
	}

	// Configure destination address increment mode
	if(destination_increment)
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8001e2e:	690a      	ldr	r2, [r1, #16]
	if(destination_increment)
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d040      	beq.n	8001eb6 <DMA_Memory_To_Memory_Transfer+0xe2>
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8001e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
	}
	else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 8001e38:	610a      	str	r2, [r1, #16]
	}

	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8001e3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <DMA_Memory_To_Memory_Transfer+0xec>)
 8001e3c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001e3e:	f041 0104 	orr.w	r1, r1, #4
 8001e42:	6251      	str	r1, [r2, #36]	@ 0x24

	// Set the peripheral address (source)
	DMA2_Stream0->PAR = (uint32_t)(source);
 8001e44:	6190      	str	r0, [r2, #24]

	// Set the memory address (destination)
	DMA2_Stream0->M0AR = (uint32_t)(destination);
 8001e46:	61d3      	str	r3, [r2, #28]

	// Set the number of data items to transfer
	DMA2_Stream0->NDTR = (uint16_t)length;
 8001e48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8001e4c:	6153      	str	r3, [r2, #20]

	// Enable the DMA stream
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8001e4e:	6913      	ldr	r3, [r2, #16]
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6113      	str	r3, [r2, #16]

	// Wait for the transfer to complete
	while((DMA2->LISR & (DMA_LISR_TCIF0_Msk)) == 0) {}
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	069b      	lsls	r3, r3, #26
 8001e5a:	d5fc      	bpl.n	8001e56 <DMA_Memory_To_Memory_Transfer+0x82>

	// Clear the transfer complete flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 8001e5c:	6893      	ldr	r3, [r2, #8]
 8001e5e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001e62:	6093      	str	r3, [r2, #8]

	// Disable the DMA stream

	DMA2_Stream0->CR = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	6113      	str	r3, [r2, #16]
	DMA2_Stream0->FCR = 0;
 8001e68:	6253      	str	r3, [r2, #36]	@ 0x24
	DMA2_Stream0->M0AR = 0;
 8001e6a:	61d3      	str	r3, [r2, #28]
	DMA2_Stream0->M1AR = 0;
 8001e6c:	6213      	str	r3, [r2, #32]
	DMA2_Stream0->NDTR= 0;
 8001e6e:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->PAR = 0;
 8001e70:	6193      	str	r3, [r2, #24]

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8001e72:	6913      	ldr	r3, [r2, #16]
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6113      	str	r3, [r2, #16]
}
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(source_data_size == 16)
 8001e7c:	2910      	cmp	r1, #16
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8001e7e:	6921      	ldr	r1, [r4, #16]
 8001e80:	bf03      	ittte	eq
 8001e82:	f441 6100 	orreq.w	r1, r1, #2048	@ 0x800
 8001e86:	6121      	streq	r1, [r4, #16]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001e88:	6921      	ldreq	r1, [r4, #16]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8001e8a:	f421 51c0 	bicne.w	r1, r1, #6144	@ 0x1800
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001e8e:	bf08      	it	eq
 8001e90:	f421 5180 	biceq.w	r1, r1, #4096	@ 0x1000
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8001e94:	e7bc      	b.n	8001e10 <DMA_Memory_To_Memory_Transfer+0x3c>
	else if(dest_data_size == 16)
 8001e96:	2f10      	cmp	r7, #16
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8001e98:	bf03      	ittte	eq
 8001e9a:	f444 5400 	orreq.w	r4, r4, #8192	@ 0x2000
 8001e9e:	610c      	streq	r4, [r1, #16]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8001ea0:	690c      	ldreq	r4, [r1, #16]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8001ea2:	f424 44c0 	bicne.w	r4, r4, #24576	@ 0x6000
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8001ea6:	bf08      	it	eq
 8001ea8:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8001eac:	e7b7      	b.n	8001e1e <DMA_Memory_To_Memory_Transfer+0x4a>
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8001eae:	690a      	ldr	r2, [r1, #16]
 8001eb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eb4:	e7ba      	b.n	8001e2c <DMA_Memory_To_Memory_Transfer+0x58>
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eba:	e7bd      	b.n	8001e38 <DMA_Memory_To_Memory_Transfer+0x64>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40026400 	.word	0x40026400

08001ec4 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001ec4:	b508      	push	{r3, lr}
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <EXTI0_IRQHandler+0x18>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b103      	cbz	r3, 8001ece <EXTI0_IRQHandler+0xa>
 8001ecc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <EXTI0_IRQHandler+0x1c>)
 8001ed0:	6953      	ldr	r3, [r2, #20]
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6153      	str	r3, [r2, #20]
}
 8001ed8:	bd08      	pop	{r3, pc}
 8001eda:	bf00      	nop
 8001edc:	20000258 	.word	0x20000258
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001ee4:	b508      	push	{r3, lr}
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <EXTI1_IRQHandler+0x18>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	b103      	cbz	r3, 8001eee <EXTI1_IRQHandler+0xa>
 8001eec:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <EXTI1_IRQHandler+0x1c>)
 8001ef0:	6953      	ldr	r3, [r2, #20]
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6153      	str	r3, [r2, #20]
}
 8001ef8:	bd08      	pop	{r3, pc}
 8001efa:	bf00      	nop
 8001efc:	20000258 	.word	0x20000258
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001f04:	b508      	push	{r3, lr}
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <EXTI2_IRQHandler+0x18>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	b103      	cbz	r3, 8001f0e <EXTI2_IRQHandler+0xa>
 8001f0c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <EXTI2_IRQHandler+0x1c>)
 8001f10:	6953      	ldr	r3, [r2, #20]
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6153      	str	r3, [r2, #20]
}
 8001f18:	bd08      	pop	{r3, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000258 	.word	0x20000258
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001f24:	b508      	push	{r3, lr}
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <EXTI3_IRQHandler+0x18>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	b103      	cbz	r3, 8001f2e <EXTI3_IRQHandler+0xa>
 8001f2c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <EXTI3_IRQHandler+0x1c>)
 8001f30:	6953      	ldr	r3, [r2, #20]
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	6153      	str	r3, [r2, #20]
}
 8001f38:	bd08      	pop	{r3, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000258 	.word	0x20000258
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001f44:	b508      	push	{r3, lr}
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <EXTI4_IRQHandler+0x18>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	b103      	cbz	r3, 8001f4e <EXTI4_IRQHandler+0xa>
 8001f4c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <EXTI4_IRQHandler+0x1c>)
 8001f50:	6953      	ldr	r3, [r2, #20]
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	6153      	str	r3, [r2, #20]
}
 8001f58:	bd08      	pop	{r3, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000258 	.word	0x20000258
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 5; i <= 9; ++i) {
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001f68:	4e0a      	ldr	r6, [pc, #40]	@ (8001f94 <EXTI9_5_IRQHandler+0x30>)
 8001f6a:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 8001f98 <EXTI9_5_IRQHandler+0x34>
    for (int i = 5; i <= 9; ++i) {
 8001f6e:	2405      	movs	r4, #5
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001f70:	2701      	movs	r7, #1
 8001f72:	6973      	ldr	r3, [r6, #20]
 8001f74:	fa07 f504 	lsl.w	r5, r7, r4
 8001f78:	422b      	tst	r3, r5
 8001f7a:	d006      	beq.n	8001f8a <EXTI9_5_IRQHandler+0x26>
 8001f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001f80:	b11b      	cbz	r3, 8001f8a <EXTI9_5_IRQHandler+0x26>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001f82:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001f84:	6973      	ldr	r3, [r6, #20]
 8001f86:	431d      	orrs	r5, r3
 8001f88:	6175      	str	r5, [r6, #20]
    for (int i = 5; i <= 9; ++i) {
 8001f8a:	3401      	adds	r4, #1
 8001f8c:	2c0a      	cmp	r4, #10
 8001f8e:	d1f0      	bne.n	8001f72 <EXTI9_5_IRQHandler+0xe>
        }
    }
}
 8001f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f94:	40013c00 	.word	0x40013c00
 8001f98:	20000258 	.word	0x20000258

08001f9c <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 10; i <= 15; ++i) {
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001fa0:	4e0a      	ldr	r6, [pc, #40]	@ (8001fcc <EXTI15_10_IRQHandler+0x30>)
 8001fa2:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 8001fd0 <EXTI15_10_IRQHandler+0x34>
    for (int i = 10; i <= 15; ++i) {
 8001fa6:	240a      	movs	r4, #10
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001fa8:	2701      	movs	r7, #1
 8001faa:	6973      	ldr	r3, [r6, #20]
 8001fac:	fa07 f504 	lsl.w	r5, r7, r4
 8001fb0:	422b      	tst	r3, r5
 8001fb2:	d006      	beq.n	8001fc2 <EXTI15_10_IRQHandler+0x26>
 8001fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001fb8:	b11b      	cbz	r3, 8001fc2 <EXTI15_10_IRQHandler+0x26>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001fba:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001fbc:	6973      	ldr	r3, [r6, #20]
 8001fbe:	431d      	orrs	r5, r3
 8001fc0:	6175      	str	r5, [r6, #20]
    for (int i = 10; i <= 15; ++i) {
 8001fc2:	3401      	adds	r4, #1
 8001fc4:	2c10      	cmp	r4, #16
 8001fc6:	d1f0      	bne.n	8001faa <EXTI15_10_IRQHandler+0xe>
        }
    }
}
 8001fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fcc:	40013c00 	.word	0x40013c00
 8001fd0:	20000258 	.word	0x20000258

08001fd4 <GPIO_Clock_Enable>:
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
    switch ((uint32_t)PORT) {
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <GPIO_Clock_Enable+0x88>)
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d030      	beq.n	800203c <GPIO_Clock_Enable+0x68>
 8001fda:	d80e      	bhi.n	8001ffa <GPIO_Clock_Enable+0x26>
 8001fdc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d021      	beq.n	8002028 <GPIO_Clock_Enable+0x54>
 8001fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	d022      	beq.n	8002032 <GPIO_Clock_Enable+0x5e>
 8001fec:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001ff0:	4298      	cmp	r0, r3
 8001ff2:	d012      	beq.n	800201a <GPIO_Clock_Enable+0x46>
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	4770      	bx	lr
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <GPIO_Clock_Enable+0x8c>)
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	d022      	beq.n	8002046 <GPIO_Clock_Enable+0x72>
 8002000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002004:	4298      	cmp	r0, r3
 8002006:	d023      	beq.n	8002050 <GPIO_Clock_Enable+0x7c>
 8002008:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
 800200c:	4298      	cmp	r0, r3
 800200e:	d1f1      	bne.n	8001ff4 <GPIO_Clock_Enable+0x20>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002010:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 8002012:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	e003      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 800201c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
        default: return GPIO_INVALID_PORT;
    }
    return GPIO_SUCCESS;
 8002024:	2000      	movs	r0, #0
}
 8002026:	4770      	bx	lr
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002028:	4a0e      	ldr	r2, [pc, #56]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 800202a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	e7f7      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002032:	4a0c      	ldr	r2, [pc, #48]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 8002034:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	e7f2      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 800203c:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 800203e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	e7ed      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002046:	4a07      	ldr	r2, [pc, #28]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 8002048:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	e7e8      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <GPIO_Clock_Enable+0x90>)
 8002052:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002058:	e7e3      	b.n	8002022 <GPIO_Clock_Enable+0x4e>
 800205a:	bf00      	nop
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021400 	.word	0x40021400
 8002064:	40023800 	.word	0x40023800

08002068 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800206c:	4604      	mov	r4, r0
 800206e:	461d      	mov	r5, r3
 8002070:	4617      	mov	r7, r2
 8002072:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8002076:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 800207a:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 800207e:	f7ff ffa9 	bl	8001fd4 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002082:	f8d4 e000 	ldr.w	lr, [r4]
 8002086:	004b      	lsls	r3, r1, #1
 8002088:	2203      	movs	r2, #3
 800208a:	409a      	lsls	r2, r3
 800208c:	ea6f 0c02 	mvn.w	ip, r2
 8002090:	ea2e 0202 	bic.w	r2, lr, r2
 8002094:	6022      	str	r2, [r4, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002096:	f8d4 e000 	ldr.w	lr, [r4]
 800209a:	fa07 f203 	lsl.w	r2, r7, r3
 800209e:	ea42 020e 	orr.w	r2, r2, lr
 80020a2:	6022      	str	r2, [r4, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 80020a4:	6862      	ldr	r2, [r4, #4]
 80020a6:	f04f 0e01 	mov.w	lr, #1
 80020aa:	fa0e fe01 	lsl.w	lr, lr, r1
 80020ae:	ea22 020e 	bic.w	r2, r2, lr
 80020b2:	6062      	str	r2, [r4, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 80020b4:	2d02      	cmp	r5, #2
        Port->OTYPER |= output_type << pin;
 80020b6:	bf1f      	itttt	ne
 80020b8:	f8d4 e004 	ldrne.w	lr, [r4, #4]
 80020bc:	fa05 f201 	lslne.w	r2, r5, r1
 80020c0:	ea42 020e 	orrne.w	r2, r2, lr
 80020c4:	6062      	strne	r2, [r4, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 80020c6:	68a2      	ldr	r2, [r4, #8]
 80020c8:	ea0c 0202 	and.w	r2, ip, r2
 80020cc:	60a2      	str	r2, [r4, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 80020ce:	f1b9 0f04 	cmp.w	r9, #4
        Port->OSPEEDR |= speed << PIN_POS(pin);
 80020d2:	bf1f      	itttt	ne
 80020d4:	68a2      	ldrne	r2, [r4, #8]
 80020d6:	fa09 f503 	lslne.w	r5, r9, r3
 80020da:	4315      	orrne	r5, r2
 80020dc:	60a5      	strne	r5, [r4, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80020de:	68e2      	ldr	r2, [r4, #12]
 80020e0:	ea0c 0202 	and.w	r2, ip, r2
    if (pull != GPIO_Configuration.Pull.None) {
 80020e4:	f1b8 0f04 	cmp.w	r8, #4
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80020e8:	60e2      	str	r2, [r4, #12]
        Port->PUPDR |= pull << PIN_POS(pin);
 80020ea:	bf1f      	itttt	ne
 80020ec:	68e2      	ldrne	r2, [r4, #12]
 80020ee:	fa08 f303 	lslne.w	r3, r8, r3
 80020f2:	4313      	orrne	r3, r2
 80020f4:	60e3      	strne	r3, [r4, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 80020f6:	2f02      	cmp	r7, #2
    Port->MODER &= ~(3 << PIN_POS(pin));
 80020f8:	b208      	sxth	r0, r1
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 80020fa:	d10e      	bne.n	800211a <GPIO_Pin_Init+0xb2>
        if (pin < GPIO_AF_SPLIT_POINT) {
 80020fc:	2907      	cmp	r1, #7
 80020fe:	f04f 020f 	mov.w	r2, #15
 8002102:	d80d      	bhi.n	8002120 <GPIO_Pin_Init+0xb8>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002104:	6a21      	ldr	r1, [r4, #32]
 8002106:	0083      	lsls	r3, r0, #2
 8002108:	409a      	lsls	r2, r3
 800210a:	ea21 0202 	bic.w	r2, r1, r2
 800210e:	6222      	str	r2, [r4, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002110:	6a22      	ldr	r2, [r4, #32]
 8002112:	fa06 f303 	lsl.w	r3, r6, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	6223      	str	r3, [r4, #32]
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
        }
    }

    return GPIO_SUCCESS;
}
 800211a:	2000      	movs	r0, #0
 800211c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002120:	3908      	subs	r1, #8
 8002122:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002124:	0089      	lsls	r1, r1, #2
 8002126:	408a      	lsls	r2, r1
 8002128:	ea23 0302 	bic.w	r3, r3, r2
 800212c:	6263      	str	r3, [r4, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 800212e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002130:	408e      	lsls	r6, r1
 8002132:	431e      	orrs	r6, r3
 8002134:	6266      	str	r6, [r4, #36]	@ 0x24
 8002136:	e7f0      	b.n	800211a <GPIO_Pin_Init+0xb2>

08002138 <USART1_TX_ISR>:

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
	U1TX_Complete = 1;
 8002138:	4b01      	ldr	r3, [pc, #4]	@ (8002140 <USART1_TX_ISR+0x8>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
}
 800213e:	4770      	bx	lr
 8002140:	200002a3 	.word	0x200002a3

08002144 <USART1_RX_ISR>:

void USART1_RX_ISR() {
	U1RX_Complete = 1;
 8002144:	4b01      	ldr	r3, [pc, #4]	@ (800214c <USART1_RX_ISR+0x8>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
}
 800214a:	4770      	bx	lr
 800214c:	200002a2 	.word	0x200002a2

08002150 <USART2_TX_ISR>:

void USART2_TX_ISR() {
	U2TX_Complete = 1;
 8002150:	4b01      	ldr	r3, [pc, #4]	@ (8002158 <USART2_TX_ISR+0x8>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
}
 8002156:	4770      	bx	lr
 8002158:	200002a1 	.word	0x200002a1

0800215c <USART2_RX_ISR>:

void USART2_RX_ISR() {
	U2RX_Complete = 1;
 800215c:	4b01      	ldr	r3, [pc, #4]	@ (8002164 <USART2_RX_ISR+0x8>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	4770      	bx	lr
 8002164:	200002a0 	.word	0x200002a0

08002168 <USART3_TX_ISR>:

void USART3_TX_ISR() {
	U3TX_Complete = 1;
 8002168:	4b01      	ldr	r3, [pc, #4]	@ (8002170 <USART3_TX_ISR+0x8>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	4770      	bx	lr
 8002170:	2000029f 	.word	0x2000029f

08002174 <USART3_RX_ISR>:

void USART3_RX_ISR() {
	U3RX_Complete = 1;
 8002174:	4b01      	ldr	r3, [pc, #4]	@ (800217c <USART3_RX_ISR+0x8>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	4770      	bx	lr
 800217c:	2000029e 	.word	0x2000029e

08002180 <USART4_TX_ISR>:

void USART4_TX_ISR() {
	U4TX_Complete = 1;
 8002180:	4b01      	ldr	r3, [pc, #4]	@ (8002188 <USART4_TX_ISR+0x8>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	4770      	bx	lr
 8002188:	2000029d 	.word	0x2000029d

0800218c <USART4_RX_ISR>:

void USART4_RX_ISR() {
	U4RX_Complete = 1;
 800218c:	4b01      	ldr	r3, [pc, #4]	@ (8002194 <USART4_RX_ISR+0x8>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	4770      	bx	lr
 8002194:	2000029c 	.word	0x2000029c

08002198 <USART5_TX_ISR>:

void USART5_TX_ISR() {
	U5TX_Complete = 1;
 8002198:	4b01      	ldr	r3, [pc, #4]	@ (80021a0 <USART5_TX_ISR+0x8>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
}
 800219e:	4770      	bx	lr
 80021a0:	2000029b 	.word	0x2000029b

080021a4 <USART5_RX_ISR>:

void USART5_RX_ISR() {
	U5RX_Complete = 1;
 80021a4:	4b01      	ldr	r3, [pc, #4]	@ (80021ac <USART5_RX_ISR+0x8>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
}
 80021aa:	4770      	bx	lr
 80021ac:	2000029a 	.word	0x2000029a

080021b0 <USART6_TX_ISR>:

void USART6_TX_ISR() {
	U6TX_Complete = 1;
 80021b0:	4b01      	ldr	r3, [pc, #4]	@ (80021b8 <USART6_TX_ISR+0x8>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
}
 80021b6:	4770      	bx	lr
 80021b8:	20000299 	.word	0x20000299

080021bc <USART6_RX_ISR>:

void USART6_RX_ISR() {
	U6RX_Complete = 1;
 80021bc:	4b01      	ldr	r3, [pc, #4]	@ (80021c4 <USART6_RX_ISR+0x8>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
}
 80021c2:	4770      	bx	lr
 80021c4:	20000298 	.word	0x20000298

080021c8 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80021c8:	b538      	push	{r3, r4, r5, lr}
	USART_SR = UART4 -> SR;
 80021ca:	4d33      	ldr	r5, [pc, #204]	@ (8002298 <UART4_IRQHandler+0xd0>)
 80021cc:	4c33      	ldr	r4, [pc, #204]	@ (800229c <UART4_IRQHandler+0xd4>)
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	8023      	strh	r3, [r4, #0]
	if(USART_SR & USART_SR_CTS)
 80021d4:	8823      	ldrh	r3, [r4, #0]
 80021d6:	059a      	lsls	r2, r3, #22
 80021d8:	d509      	bpl.n	80021ee <UART4_IRQHandler+0x26>
	{
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80021da:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021e2:	b123      	cbz	r3, 80021ee <UART4_IRQHandler+0x26>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80021e4:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021ec:	602b      	str	r3, [r5, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80021ee:	8823      	ldrh	r3, [r4, #0]
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	d50a      	bpl.n	800220a <UART4_IRQHandler+0x42>
	{
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fc:	b12b      	cbz	r3, 800220a <UART4_IRQHandler+0x42>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80021fe:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8002200:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <UART4_IRQHandler+0xd0>)
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002208:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 800220a:	8823      	ldrh	r3, [r4, #0]
 800220c:	061d      	lsls	r5, r3, #24
 800220e:	d50a      	bpl.n	8002226 <UART4_IRQHandler+0x5e>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8002210:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002218:	b12b      	cbz	r3, 8002226 <UART4_IRQHandler+0x5e>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800221a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800221c:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <UART4_IRQHandler+0xd0>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002224:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 8002226:	8823      	ldrh	r3, [r4, #0]
 8002228:	0658      	lsls	r0, r3, #25
 800222a:	d50a      	bpl.n	8002242 <UART4_IRQHandler+0x7a>
	{
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 800222c:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002234:	b12b      	cbz	r3, 8002242 <UART4_IRQHandler+0x7a>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8002236:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <UART4_IRQHandler+0xd0>)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002240:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8002242:	8823      	ldrh	r3, [r4, #0]
 8002244:	0699      	lsls	r1, r3, #26
 8002246:	d50a      	bpl.n	800225e <UART4_IRQHandler+0x96>
	{
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002250:	b12b      	cbz	r3, 800225e <UART4_IRQHandler+0x96>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8002252:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8002254:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <UART4_IRQHandler+0xd0>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	f023 0320 	bic.w	r3, r3, #32
 800225c:	6013      	str	r3, [r2, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 800225e:	8823      	ldrh	r3, [r4, #0]
 8002260:	06da      	lsls	r2, r3, #27
 8002262:	d50a      	bpl.n	800227a <UART4_IRQHandler+0xb2>
	{
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800226c:	b12b      	cbz	r3, 800227a <UART4_IRQHandler+0xb2>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 800226e:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8002270:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <UART4_IRQHandler+0xd0>)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f023 0310 	bic.w	r3, r3, #16
 8002278:	6013      	str	r3, [r2, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 800227a:	8823      	ldrh	r3, [r4, #0]
 800227c:	07db      	lsls	r3, r3, #31
 800227e:	d50a      	bpl.n	8002296 <UART4_IRQHandler+0xce>
	{
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <UART4_IRQHandler+0xd8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002288:	b12b      	cbz	r3, 8002296 <UART4_IRQHandler+0xce>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 800228a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800228c:	4a02      	ldr	r2, [pc, #8]	@ (8002298 <UART4_IRQHandler+0xd0>)
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]
		}
	}

}
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	40004c00 	.word	0x40004c00
 800229c:	200002a4 	.word	0x200002a4
 80022a0:	200002ac 	.word	0x200002ac

080022a4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80022a4:	b538      	push	{r3, r4, r5, lr}
	USART_SR = USART1 -> SR;
 80022a6:	4c30      	ldr	r4, [pc, #192]	@ (8002368 <USART1_IRQHandler+0xc4>)
 80022a8:	4d30      	ldr	r5, [pc, #192]	@ (800236c <USART1_IRQHandler+0xc8>)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	802b      	strh	r3, [r5, #0]
	if(USART_SR & USART_SR_CTS)
 80022b0:	882b      	ldrh	r3, [r5, #0]
 80022b2:	0599      	lsls	r1, r3, #22
 80022b4:	d509      	bpl.n	80022ca <USART1_IRQHandler+0x26>
	{
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <USART1_IRQHandler+0xcc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022be:	b123      	cbz	r3, 80022ca <USART1_IRQHandler+0x26>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80022c0:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022c8:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_LBD)
 80022ca:	882b      	ldrh	r3, [r5, #0]
 80022cc:	05da      	lsls	r2, r3, #23
 80022ce:	d509      	bpl.n	80022e4 <USART1_IRQHandler+0x40>
	{
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80022d0:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <USART1_IRQHandler+0xcc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d8:	b123      	cbz	r3, 80022e4 <USART1_IRQHandler+0x40>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80022da:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e2:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_TXE)
 80022e4:	882b      	ldrh	r3, [r5, #0]
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	d509      	bpl.n	80022fe <USART1_IRQHandler+0x5a>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <USART1_IRQHandler+0xcc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80022f2:	b123      	cbz	r3, 80022fe <USART1_IRQHandler+0x5a>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80022f4:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022fc:	6023      	str	r3, [r4, #0]
		}
	}


	if(USART_SR & USART_SR_TC)
 80022fe:	882b      	ldrh	r3, [r5, #0]
 8002300:	0658      	lsls	r0, r3, #25
 8002302:	d509      	bpl.n	8002318 <USART1_IRQHandler+0x74>
	{
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <USART1_IRQHandler+0xcc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800230c:	b123      	cbz	r3, 8002318 <USART1_IRQHandler+0x74>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800230e:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002316:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_RXNE)
 8002318:	882b      	ldrh	r3, [r5, #0]
 800231a:	0699      	lsls	r1, r3, #26
 800231c:	d509      	bpl.n	8002332 <USART1_IRQHandler+0x8e>
	{
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <USART1_IRQHandler+0xcc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002326:	b123      	cbz	r3, 8002332 <USART1_IRQHandler+0x8e>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8002328:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	f023 0320 	bic.w	r3, r3, #32
 8002330:	6023      	str	r3, [r4, #0]
		}
	}


	if(USART_SR & USART_SR_IDLE)
 8002332:	882b      	ldrh	r3, [r5, #0]
 8002334:	06da      	lsls	r2, r3, #27
 8002336:	d509      	bpl.n	800234c <USART1_IRQHandler+0xa8>
	{
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <USART1_IRQHandler+0xcc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002340:	b123      	cbz	r3, 800234c <USART1_IRQHandler+0xa8>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8002342:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f023 0310 	bic.w	r3, r3, #16
 800234a:	6023      	str	r3, [r4, #0]
		}
	}

	if(USART_SR & USART_SR_PE)
 800234c:	882b      	ldrh	r3, [r5, #0]
 800234e:	07db      	lsls	r3, r3, #31
 8002350:	d509      	bpl.n	8002366 <USART1_IRQHandler+0xc2>
	{
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <USART1_IRQHandler+0xcc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800235a:	b123      	cbz	r3, 8002366 <USART1_IRQHandler+0xc2>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 800235c:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6023      	str	r3, [r4, #0]
		}
	}

}
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	40011000 	.word	0x40011000
 800236c:	200002a4 	.word	0x200002a4
 8002370:	200002b8 	.word	0x200002b8

08002374 <USART_Get_Instance_Number>:



int8_t USART_Get_Instance_Number(USART_Config *config)
{
	if(config->Port == USART1) {return 0;}
 8002374:	6800      	ldr	r0, [r0, #0]
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <USART_Get_Instance_Number+0x4c>)
 8002378:	4298      	cmp	r0, r3
 800237a:	d017      	beq.n	80023ac <USART_Get_Instance_Number+0x38>
	else if(config->Port == USART2) {return 1;}
 800237c:	f5a3 434c 	sub.w	r3, r3, #52224	@ 0xcc00
 8002380:	4298      	cmp	r0, r3
 8002382:	d015      	beq.n	80023b0 <USART_Get_Instance_Number+0x3c>
	else if(config->Port == USART3) {return 2;}
 8002384:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002388:	4298      	cmp	r0, r3
 800238a:	d013      	beq.n	80023b4 <USART_Get_Instance_Number+0x40>
	else if(config->Port == UART4) {return 3;}
 800238c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002390:	4298      	cmp	r0, r3
 8002392:	d011      	beq.n	80023b8 <USART_Get_Instance_Number+0x44>
	else if(config->Port == UART5) {return 4;}
 8002394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002398:	4298      	cmp	r0, r3
 800239a:	d00f      	beq.n	80023bc <USART_Get_Instance_Number+0x48>
	else if(config->Port == USART6) {return 5;}
 800239c:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 80023a0:	4298      	cmp	r0, r3
 80023a2:	bf14      	ite	ne
 80023a4:	f04f 30ff 	movne.w	r0, #4294967295
 80023a8:	2005      	moveq	r0, #5
 80023aa:	4770      	bx	lr
	if(config->Port == USART1) {return 0;}
 80023ac:	2000      	movs	r0, #0
 80023ae:	4770      	bx	lr
	else if(config->Port == USART2) {return 1;}
 80023b0:	2001      	movs	r0, #1
 80023b2:	4770      	bx	lr
	else if(config->Port == USART3) {return 2;}
 80023b4:	2002      	movs	r0, #2
 80023b6:	4770      	bx	lr
	else if(config->Port == UART4) {return 3;}
 80023b8:	2003      	movs	r0, #3
 80023ba:	4770      	bx	lr
	else if(config->Port == UART5) {return 4;}
 80023bc:	2004      	movs	r0, #4
	else {return -1;}
}
 80023be:	4770      	bx	lr
 80023c0:	40011000 	.word	0x40011000

080023c4 <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
	config->mode = USART_Configuration.Mode.Disable;
 80023c4:	2300      	movs	r3, #0
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
	config->baudrate = 9600;
 80023c6:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
	config->mode = USART_Configuration.Mode.Disable;
 80023ca:	7203      	strb	r3, [r0, #8]
	config->baudrate = 9600;
 80023cc:	6042      	str	r2, [r0, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 80023ce:	7443      	strb	r3, [r0, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 80023d0:	81c3      	strh	r3, [r0, #14]
}
 80023d2:	4770      	bx	lr

080023d4 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
	if(config->Port == USART1)
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002450 <USART_Clock_Enable+0x7c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d107      	bne.n	80023ec <USART_Clock_Enable+0x18>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80023dc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80023e0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else
	{
		return -1;
	}
	return 1;
 80023e8:	2001      	movs	r0, #1
 80023ea:	4770      	bx	lr
	else if(config->Port == USART2)
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <USART_Clock_Enable+0x80>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d106      	bne.n	8002400 <USART_Clock_Enable+0x2c>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80023f2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80023f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80023fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fe:	e7f3      	b.n	80023e8 <USART_Clock_Enable+0x14>
	else if(config->Port == USART3)
 8002400:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <USART_Clock_Enable+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d105      	bne.n	8002412 <USART_Clock_Enable+0x3e>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002406:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800240a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800240c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002410:	e7f4      	b.n	80023fc <USART_Clock_Enable+0x28>
	else if(config->Port == UART4)
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <USART_Clock_Enable+0x88>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d105      	bne.n	8002424 <USART_Clock_Enable+0x50>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8002418:	f502 32f6 	add.w	r2, r2, #125952	@ 0x1ec00
 800241c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800241e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002422:	e7eb      	b.n	80023fc <USART_Clock_Enable+0x28>
	else if(config->Port == UART5)
 8002424:	4a0e      	ldr	r2, [pc, #56]	@ (8002460 <USART_Clock_Enable+0x8c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d105      	bne.n	8002436 <USART_Clock_Enable+0x62>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800242a:	f502 32f4 	add.w	r2, r2, #124928	@ 0x1e800
 800242e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002434:	e7e2      	b.n	80023fc <USART_Clock_Enable+0x28>
	else if(config->Port == USART6)
 8002436:	4a0b      	ldr	r2, [pc, #44]	@ (8002464 <USART_Clock_Enable+0x90>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d105      	bne.n	8002448 <USART_Clock_Enable+0x74>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800243c:	f502 3292 	add.w	r2, r2, #74752	@ 0x12400
 8002440:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	e7ce      	b.n	80023e6 <USART_Clock_Enable+0x12>
		return -1;
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40011000 	.word	0x40011000
 8002454:	40004400 	.word	0x40004400
 8002458:	40004800 	.word	0x40004800
 800245c:	40004c00 	.word	0x40004c00
 8002460:	40005000 	.word	0x40005000
 8002464:	40011400 	.word	0x40011400

08002468 <USART_Init>:

}


int8_t USART_Init(USART_Config *config)
{
 8002468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246c:	4604      	mov	r4, r0
 800246e:	b085      	sub	sp, #20
	USART_Clock_Enable(config);
 8002470:	f7ff ffb0 	bl	80023d4 <USART_Clock_Enable>
	if(config->Port == USART1)
 8002474:	4ea3      	ldr	r6, [pc, #652]	@ (8002704 <USART_Init+0x29c>)
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	42b3      	cmp	r3, r6
 800247a:	f040 8097 	bne.w	80025ac <USART_Init+0x144>
		__usart_1_config__ = config;
 800247e:	4ba2      	ldr	r3, [pc, #648]	@ (8002708 <USART_Init+0x2a0>)
 8002480:	601c      	str	r4, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002482:	7a23      	ldrb	r3, [r4, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d008      	beq.n	800249a <USART_Init+0x32>
 8002488:	3b02      	subs	r3, #2
 800248a:	2b05      	cmp	r3, #5
 800248c:	f200 825c 	bhi.w	8002948 <USART_Init+0x4e0>
 8002490:	e8df f003 	tbb	[pc, r3]
 8002494:	03037403 	.word	0x03037403
 8002498:	7474      	.short	0x7474
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800249a:	7a61      	ldrb	r1, [r4, #9]
 800249c:	2909      	cmp	r1, #9
 800249e:	d15a      	bne.n	8002556 <USART_Init+0xee>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2507      	movs	r5, #7
 80024a4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	4898      	ldr	r0, [pc, #608]	@ (800270c <USART_Init+0x2a4>)
 80024ac:	9200      	str	r2, [sp, #0]
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80024ae:	f7ff fddb 	bl	8002068 <GPIO_Pin_Init>
			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80024b2:	7aa1      	ldrb	r1, [r4, #10]
 80024b4:	290a      	cmp	r1, #10
 80024b6:	d158      	bne.n	800256a <USART_Init+0x102>
 80024b8:	2207      	movs	r2, #7
 80024ba:	2300      	movs	r3, #0
 80024bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80024c0:	4892      	ldr	r0, [pc, #584]	@ (800270c <USART_Init+0x2a4>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	9200      	str	r2, [sp, #0]
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80024c6:	f7ff fdcf 	bl	8002068 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80024ca:	7a22      	ldrb	r2, [r4, #8]
 80024cc:	2a02      	cmp	r2, #2
 80024ce:	d10b      	bne.n	80024e8 <USART_Init+0x80>
 80024d0:	7ae1      	ldrb	r1, [r4, #11]
 80024d2:	2908      	cmp	r1, #8
 80024d4:	d108      	bne.n	80024e8 <USART_Init+0x80>
 80024d6:	2300      	movs	r3, #0
 80024d8:	f04f 0b07 	mov.w	fp, #7
 80024dc:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 80024e0:	488a      	ldr	r0, [pc, #552]	@ (800270c <USART_Init+0x2a4>)
 80024e2:	9200      	str	r2, [sp, #0]
 80024e4:	f7ff fdc0 	bl	8002068 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80024e8:	7be3      	ldrb	r3, [r4, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 822c 	beq.w	8002948 <USART_Init+0x4e0>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10a      	bne.n	800250a <USART_Init+0xa2>
 80024f4:	2300      	movs	r3, #0
 80024f6:	f04f 0a07 	mov.w	sl, #7
 80024fa:	2202      	movs	r2, #2
 80024fc:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 8002500:	4882      	ldr	r0, [pc, #520]	@ (800270c <USART_Init+0x2a4>)
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	210b      	movs	r1, #11
 8002506:	f7ff fdaf 	bl	8002068 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800250a:	7be2      	ldrb	r2, [r4, #15]
 800250c:	2a02      	cmp	r2, #2
 800250e:	d109      	bne.n	8002524 <USART_Init+0xbc>
 8002510:	2300      	movs	r3, #0
 8002512:	f04f 0907 	mov.w	r9, #7
 8002516:	e9cd 3901 	strd	r3, r9, [sp, #4]
 800251a:	487c      	ldr	r0, [pc, #496]	@ (800270c <USART_Init+0x2a4>)
 800251c:	9200      	str	r2, [sp, #0]
 800251e:	210c      	movs	r1, #12
 8002520:	f7ff fda2 	bl	8002068 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8002524:	7be3      	ldrb	r3, [r4, #15]
 8002526:	2b03      	cmp	r3, #3
 8002528:	f040 820e 	bne.w	8002948 <USART_Init+0x4e0>
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800252c:	2700      	movs	r7, #0
 800252e:	2502      	movs	r5, #2
 8002530:	f04f 0807 	mov.w	r8, #7
 8002534:	463b      	mov	r3, r7
 8002536:	462a      	mov	r2, r5
 8002538:	210b      	movs	r1, #11
 800253a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800253e:	4873      	ldr	r0, [pc, #460]	@ (800270c <USART_Init+0x2a4>)
 8002540:	9500      	str	r5, [sp, #0]
 8002542:	f7ff fd91 	bl	8002068 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002546:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800254a:	9500      	str	r5, [sp, #0]
 800254c:	463b      	mov	r3, r7
 800254e:	462a      	mov	r2, r5
 8002550:	210c      	movs	r1, #12
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002552:	486e      	ldr	r0, [pc, #440]	@ (800270c <USART_Init+0x2a4>)
 8002554:	e160      	b.n	8002818 <USART_Init+0x3b0>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002556:	2906      	cmp	r1, #6
 8002558:	d1ab      	bne.n	80024b2 <USART_Init+0x4a>
 800255a:	2007      	movs	r0, #7
 800255c:	2300      	movs	r3, #0
 800255e:	2202      	movs	r2, #2
 8002560:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	486a      	ldr	r0, [pc, #424]	@ (8002710 <USART_Init+0x2a8>)
 8002568:	e7a1      	b.n	80024ae <USART_Init+0x46>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800256a:	2907      	cmp	r1, #7
 800256c:	d1ad      	bne.n	80024ca <USART_Init+0x62>
 800256e:	2202      	movs	r2, #2
 8002570:	2300      	movs	r3, #0
 8002572:	e9cd 2300 	strd	r2, r3, [sp]
 8002576:	4866      	ldr	r0, [pc, #408]	@ (8002710 <USART_Init+0x2a8>)
 8002578:	9102      	str	r1, [sp, #8]
 800257a:	e7a4      	b.n	80024c6 <USART_Init+0x5e>
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800257c:	7a61      	ldrb	r1, [r4, #9]
 800257e:	2909      	cmp	r1, #9
 8002580:	d109      	bne.n	8002596 <USART_Init+0x12e>
 8002582:	2300      	movs	r3, #0
 8002584:	f04f 0807 	mov.w	r8, #7
 8002588:	2202      	movs	r2, #2
 800258a:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800258e:	485f      	ldr	r0, [pc, #380]	@ (800270c <USART_Init+0x2a4>)
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	f7ff fd69 	bl	8002068 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002596:	7a23      	ldrb	r3, [r4, #8]
 8002598:	2b07      	cmp	r3, #7
 800259a:	f040 81d5 	bne.w	8002948 <USART_Init+0x4e0>
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2202      	movs	r2, #2
 80025a2:	2300      	movs	r3, #0
 80025a4:	e9cd 2300 	strd	r2, r3, [sp]
 80025a8:	2108      	movs	r1, #8
 80025aa:	e7d2      	b.n	8002552 <USART_Init+0xea>
	else if(config->Port == USART2)
 80025ac:	4a59      	ldr	r2, [pc, #356]	@ (8002714 <USART_Init+0x2ac>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 80b6 	bne.w	8002720 <USART_Init+0x2b8>
		__usart_2_config__ = config;
 80025b4:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <USART_Init+0x2b0>)
 80025b6:	601c      	str	r4, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80025b8:	7a23      	ldrb	r3, [r4, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d008      	beq.n	80025d0 <USART_Init+0x168>
 80025be:	3b02      	subs	r3, #2
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	f200 81c1 	bhi.w	8002948 <USART_Init+0x4e0>
 80025c6:	e8df f003 	tbb	[pc, r3]
 80025ca:	7a03      	.short	0x7a03
 80025cc:	7a7a0303 	.word	0x7a7a0303
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80025d0:	7a61      	ldrb	r1, [r4, #9]
 80025d2:	2902      	cmp	r1, #2
 80025d4:	d143      	bne.n	800265e <USART_Init+0x1f6>
 80025d6:	2300      	movs	r3, #0
 80025d8:	f04f 0e07 	mov.w	lr, #7
 80025dc:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 80025e0:	484a      	ldr	r0, [pc, #296]	@ (800270c <USART_Init+0x2a4>)
 80025e2:	9100      	str	r1, [sp, #0]
 80025e4:	460a      	mov	r2, r1
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80025e6:	f7ff fd3f 	bl	8002068 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80025ea:	7aa1      	ldrb	r1, [r4, #10]
 80025ec:	2903      	cmp	r1, #3
 80025ee:	d141      	bne.n	8002674 <USART_Init+0x20c>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2707      	movs	r7, #7
 80025f4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4844      	ldr	r0, [pc, #272]	@ (800270c <USART_Init+0x2a4>)
 80025fc:	9200      	str	r2, [sp, #0]
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80025fe:	f7ff fd33 	bl	8002068 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8002602:	7a22      	ldrb	r2, [r4, #8]
 8002604:	2a02      	cmp	r2, #2
 8002606:	d10a      	bne.n	800261e <USART_Init+0x1b6>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002608:	7ae1      	ldrb	r1, [r4, #11]
 800260a:	2904      	cmp	r1, #4
 800260c:	d13c      	bne.n	8002688 <USART_Init+0x220>
 800260e:	2307      	movs	r3, #7
 8002610:	9302      	str	r3, [sp, #8]
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002612:	2300      	movs	r3, #0
 8002614:	e9cd 2300 	strd	r2, r3, [sp]
 8002618:	483c      	ldr	r0, [pc, #240]	@ (800270c <USART_Init+0x2a4>)
 800261a:	f7ff fd25 	bl	8002068 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800261e:	7be3      	ldrb	r3, [r4, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8191 	beq.w	8002948 <USART_Init+0x4e0>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10a      	bne.n	8002640 <USART_Init+0x1d8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 800262a:	7ae1      	ldrb	r1, [r4, #11]
 800262c:	bb81      	cbnz	r1, 8002690 <USART_Init+0x228>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800262e:	2307      	movs	r3, #7
 8002630:	2202      	movs	r2, #2
 8002632:	4836      	ldr	r0, [pc, #216]	@ (800270c <USART_Init+0x2a4>)
 8002634:	9200      	str	r2, [sp, #0]
 8002636:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800263a:	460b      	mov	r3, r1
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800263c:	f7ff fd14 	bl	8002068 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002640:	7be3      	ldrb	r3, [r4, #15]
 8002642:	3b02      	subs	r3, #2
 8002644:	2b01      	cmp	r3, #1
 8002646:	f200 817f 	bhi.w	8002948 <USART_Init+0x4e0>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 800264a:	7ae1      	ldrb	r1, [r4, #11]
 800264c:	2901      	cmp	r1, #1
 800264e:	d12a      	bne.n	80026a6 <USART_Init+0x23e>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002650:	2307      	movs	r3, #7
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8002652:	9302      	str	r3, [sp, #8]
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002654:	2202      	movs	r2, #2
 8002656:	2300      	movs	r3, #0
 8002658:	e9cd 2300 	strd	r2, r3, [sp]
 800265c:	e779      	b.n	8002552 <USART_Init+0xea>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800265e:	2905      	cmp	r1, #5
 8002660:	d1c3      	bne.n	80025ea <USART_Init+0x182>
 8002662:	2300      	movs	r3, #0
 8002664:	f04f 0c07 	mov.w	ip, #7
 8002668:	2202      	movs	r2, #2
 800266a:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 800266e:	482b      	ldr	r0, [pc, #172]	@ (800271c <USART_Init+0x2b4>)
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	e7b8      	b.n	80025e6 <USART_Init+0x17e>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002674:	2906      	cmp	r1, #6
 8002676:	d1c4      	bne.n	8002602 <USART_Init+0x19a>
 8002678:	2300      	movs	r3, #0
 800267a:	2507      	movs	r5, #7
 800267c:	2202      	movs	r2, #2
 800267e:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8002682:	4826      	ldr	r0, [pc, #152]	@ (800271c <USART_Init+0x2b4>)
 8002684:	9200      	str	r2, [sp, #0]
 8002686:	e7ba      	b.n	80025fe <USART_Init+0x196>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002688:	2907      	cmp	r1, #7
 800268a:	d1c8      	bne.n	800261e <USART_Init+0x1b6>
 800268c:	9102      	str	r1, [sp, #8]
 800268e:	e7c0      	b.n	8002612 <USART_Init+0x1aa>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8002690:	2903      	cmp	r1, #3
 8002692:	f040 8159 	bne.w	8002948 <USART_Init+0x4e0>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002696:	2007      	movs	r0, #7
 8002698:	2300      	movs	r3, #0
 800269a:	2202      	movs	r2, #2
 800269c:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80026a0:	9200      	str	r2, [sp, #0]
 80026a2:	481e      	ldr	r0, [pc, #120]	@ (800271c <USART_Init+0x2b4>)
 80026a4:	e7ca      	b.n	800263c <USART_Init+0x1d4>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80026a6:	2904      	cmp	r1, #4
 80026a8:	f040 814e 	bne.w	8002948 <USART_Init+0x4e0>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80026ac:	2107      	movs	r1, #7
 80026ae:	2300      	movs	r3, #0
 80026b0:	2202      	movs	r2, #2
 80026b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80026b6:	9200      	str	r2, [sp, #0]
 80026b8:	2104      	movs	r1, #4
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80026ba:	4818      	ldr	r0, [pc, #96]	@ (800271c <USART_Init+0x2b4>)
 80026bc:	e0ac      	b.n	8002818 <USART_Init+0x3b0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80026be:	7a61      	ldrb	r1, [r4, #9]
 80026c0:	2902      	cmp	r1, #2
 80026c2:	d114      	bne.n	80026ee <USART_Init+0x286>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80026c4:	2207      	movs	r2, #7
 80026c6:	2300      	movs	r3, #0
 80026c8:	4810      	ldr	r0, [pc, #64]	@ (800270c <USART_Init+0x2a4>)
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80026d0:	460a      	mov	r2, r1
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80026d2:	f7ff fcc9 	bl	8002068 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 80026d6:	7a23      	ldrb	r3, [r4, #8]
 80026d8:	2b07      	cmp	r3, #7
 80026da:	f040 8135 	bne.w	8002948 <USART_Init+0x4e0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 80026de:	7ae1      	ldrb	r1, [r4, #11]
 80026e0:	2904      	cmp	r1, #4
 80026e2:	d0b6      	beq.n	8002652 <USART_Init+0x1ea>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 80026e4:	2907      	cmp	r1, #7
 80026e6:	f040 812f 	bne.w	8002948 <USART_Init+0x4e0>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80026ea:	9102      	str	r1, [sp, #8]
 80026ec:	e7b2      	b.n	8002654 <USART_Init+0x1ec>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80026ee:	2905      	cmp	r1, #5
 80026f0:	d1f1      	bne.n	80026d6 <USART_Init+0x26e>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80026f2:	2300      	movs	r3, #0
 80026f4:	f04f 0b07 	mov.w	fp, #7
 80026f8:	2202      	movs	r2, #2
 80026fa:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 80026fe:	4807      	ldr	r0, [pc, #28]	@ (800271c <USART_Init+0x2b4>)
 8002700:	9200      	str	r2, [sp, #0]
 8002702:	e7e6      	b.n	80026d2 <USART_Init+0x26a>
 8002704:	40011000 	.word	0x40011000
 8002708:	200002b8 	.word	0x200002b8
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40004400 	.word	0x40004400
 8002718:	200002b4 	.word	0x200002b4
 800271c:	40020c00 	.word	0x40020c00
	else if(config->Port == USART3)
 8002720:	4a73      	ldr	r2, [pc, #460]	@ (80028f0 <USART_Init+0x488>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f040 80b4 	bne.w	8002890 <USART_Init+0x428>
		__usart_3_config__ = config;
 8002728:	4b72      	ldr	r3, [pc, #456]	@ (80028f4 <USART_Init+0x48c>)
 800272a:	601c      	str	r4, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800272c:	7a23      	ldrb	r3, [r4, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d008      	beq.n	8002744 <USART_Init+0x2dc>
 8002732:	3b02      	subs	r3, #2
 8002734:	2b05      	cmp	r3, #5
 8002736:	f200 8107 	bhi.w	8002948 <USART_Init+0x4e0>
 800273a:	e8df f003 	tbb	[pc, r3]
 800273e:	8303      	.short	0x8303
 8002740:	83830303 	.word	0x83830303
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002744:	7a61      	ldrb	r1, [r4, #9]
 8002746:	290b      	cmp	r1, #11
 8002748:	d10a      	bne.n	8002760 <USART_Init+0x2f8>
 800274a:	2300      	movs	r3, #0
 800274c:	f04f 0a07 	mov.w	sl, #7
 8002750:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	4868      	ldr	r0, [pc, #416]	@ (80028f8 <USART_Init+0x490>)
 8002758:	9200      	str	r2, [sp, #0]
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800275a:	f7ff fc85 	bl	8002068 <GPIO_Pin_Init>
 800275e:	e00c      	b.n	800277a <USART_Init+0x312>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002760:	290a      	cmp	r1, #10
 8002762:	d108      	bne.n	8002776 <USART_Init+0x30e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002764:	2300      	movs	r3, #0
 8002766:	f04f 0907 	mov.w	r9, #7
 800276a:	2202      	movs	r2, #2
 800276c:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8002770:	4862      	ldr	r0, [pc, #392]	@ (80028fc <USART_Init+0x494>)
 8002772:	9200      	str	r2, [sp, #0]
 8002774:	e7f1      	b.n	800275a <USART_Init+0x2f2>
 8002776:	2908      	cmp	r1, #8
 8002778:	d0f4      	beq.n	8002764 <USART_Init+0x2fc>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800277a:	7aa1      	ldrb	r1, [r4, #10]
 800277c:	290a      	cmp	r1, #10
 800277e:	d10a      	bne.n	8002796 <USART_Init+0x32e>
 8002780:	2300      	movs	r3, #0
 8002782:	f04f 0807 	mov.w	r8, #7
 8002786:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	485a      	ldr	r0, [pc, #360]	@ (80028f8 <USART_Init+0x490>)
 800278e:	9200      	str	r2, [sp, #0]
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002790:	f7ff fc6a 	bl	8002068 <GPIO_Pin_Init>
 8002794:	e00d      	b.n	80027b2 <USART_Init+0x34a>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002796:	290b      	cmp	r1, #11
 8002798:	d108      	bne.n	80027ac <USART_Init+0x344>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800279a:	2300      	movs	r3, #0
 800279c:	f04f 0e07 	mov.w	lr, #7
 80027a0:	2202      	movs	r2, #2
 80027a2:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 80027a6:	4855      	ldr	r0, [pc, #340]	@ (80028fc <USART_Init+0x494>)
 80027a8:	9200      	str	r2, [sp, #0]
 80027aa:	e7f1      	b.n	8002790 <USART_Init+0x328>
 80027ac:	7a61      	ldrb	r1, [r4, #9]
 80027ae:	2908      	cmp	r1, #8
 80027b0:	d0f3      	beq.n	800279a <USART_Init+0x332>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 80027b2:	7a22      	ldrb	r2, [r4, #8]
 80027b4:	2a02      	cmp	r2, #2
 80027b6:	d10b      	bne.n	80027d0 <USART_Init+0x368>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80027b8:	7ae1      	ldrb	r1, [r4, #11]
 80027ba:	290c      	cmp	r1, #12
 80027bc:	d12f      	bne.n	800281e <USART_Init+0x3b6>
 80027be:	2300      	movs	r3, #0
 80027c0:	f04f 0c07 	mov.w	ip, #7
 80027c4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80027c8:	484c      	ldr	r0, [pc, #304]	@ (80028fc <USART_Init+0x494>)
 80027ca:	9200      	str	r2, [sp, #0]
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80027cc:	f7ff fc4c 	bl	8002068 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80027d0:	7be3      	ldrb	r3, [r4, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80b8 	beq.w	8002948 <USART_Init+0x4e0>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80027d8:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10a      	bne.n	80027f6 <USART_Init+0x38e>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80027e0:	7ae1      	ldrb	r1, [r4, #11]
 80027e2:	bb29      	cbnz	r1, 8002830 <USART_Init+0x3c8>
 80027e4:	2307      	movs	r3, #7
 80027e6:	2202      	movs	r2, #2
 80027e8:	4844      	ldr	r0, [pc, #272]	@ (80028fc <USART_Init+0x494>)
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80027f0:	460b      	mov	r3, r1
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80027f2:	f7ff fc39 	bl	8002068 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80027f6:	7be3      	ldrb	r3, [r4, #15]
 80027f8:	3b02      	subs	r3, #2
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f200 80a4 	bhi.w	8002948 <USART_Init+0x4e0>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002800:	7ae1      	ldrb	r1, [r4, #11]
 8002802:	2901      	cmp	r1, #1
 8002804:	f47f af4f 	bne.w	80026a6 <USART_Init+0x23e>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002808:	2300      	movs	r3, #0
 800280a:	f04f 0b07 	mov.w	fp, #7
 800280e:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	4839      	ldr	r0, [pc, #228]	@ (80028fc <USART_Init+0x494>)
 8002816:	9200      	str	r2, [sp, #0]
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002818:	f7ff fc26 	bl	8002068 <GPIO_Pin_Init>
 800281c:	e094      	b.n	8002948 <USART_Init+0x4e0>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800281e:	290a      	cmp	r1, #10
 8002820:	d1d6      	bne.n	80027d0 <USART_Init+0x368>
 8002822:	2300      	movs	r3, #0
 8002824:	2707      	movs	r7, #7
 8002826:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800282a:	4835      	ldr	r0, [pc, #212]	@ (8002900 <USART_Init+0x498>)
 800282c:	9200      	str	r2, [sp, #0]
 800282e:	e7cd      	b.n	80027cc <USART_Init+0x364>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002830:	2903      	cmp	r1, #3
 8002832:	d1e0      	bne.n	80027f6 <USART_Init+0x38e>
 8002834:	2300      	movs	r3, #0
 8002836:	2507      	movs	r5, #7
 8002838:	2202      	movs	r2, #2
 800283a:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800283e:	4830      	ldr	r0, [pc, #192]	@ (8002900 <USART_Init+0x498>)
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	e7d6      	b.n	80027f2 <USART_Init+0x38a>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002844:	7a61      	ldrb	r1, [r4, #9]
 8002846:	290b      	cmp	r1, #11
 8002848:	d109      	bne.n	800285e <USART_Init+0x3f6>
 800284a:	2007      	movs	r0, #7
 800284c:	2300      	movs	r3, #0
 800284e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	4828      	ldr	r0, [pc, #160]	@ (80028f8 <USART_Init+0x490>)
 8002856:	9200      	str	r2, [sp, #0]
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002858:	f7ff fc06 	bl	8002068 <GPIO_Pin_Init>
 800285c:	e00b      	b.n	8002876 <USART_Init+0x40e>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800285e:	290a      	cmp	r1, #10
 8002860:	d107      	bne.n	8002872 <USART_Init+0x40a>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002862:	2207      	movs	r2, #7
 8002864:	2300      	movs	r3, #0
 8002866:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	4823      	ldr	r0, [pc, #140]	@ (80028fc <USART_Init+0x494>)
 800286e:	9200      	str	r2, [sp, #0]
 8002870:	e7f2      	b.n	8002858 <USART_Init+0x3f0>
 8002872:	2908      	cmp	r1, #8
 8002874:	d0f5      	beq.n	8002862 <USART_Init+0x3fa>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002876:	7ae1      	ldrb	r1, [r4, #11]
 8002878:	290c      	cmp	r1, #12
 800287a:	d0c5      	beq.n	8002808 <USART_Init+0x3a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800287c:	290a      	cmp	r1, #10
 800287e:	d163      	bne.n	8002948 <USART_Init+0x4e0>
 8002880:	2300      	movs	r3, #0
 8002882:	f04f 0a07 	mov.w	sl, #7
 8002886:	2202      	movs	r2, #2
 8002888:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 800288c:	9200      	str	r2, [sp, #0]
 800288e:	e714      	b.n	80026ba <USART_Init+0x252>
	else if(config -> Port == UART4)
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <USART_Init+0x49c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d13c      	bne.n	8002910 <USART_Init+0x4a8>
		__usart_4_config__ = config;
 8002896:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <USART_Init+0x4a0>)
 8002898:	601c      	str	r4, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800289a:	7a23      	ldrb	r3, [r4, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d002      	beq.n	80028a6 <USART_Init+0x43e>
 80028a0:	3b04      	subs	r3, #4
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d850      	bhi.n	8002948 <USART_Init+0x4e0>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80028a6:	7a61      	ldrb	r1, [r4, #9]
 80028a8:	b969      	cbnz	r1, 80028c6 <USART_Init+0x45e>
 80028aa:	2308      	movs	r3, #8
 80028ac:	2202      	movs	r2, #2
 80028ae:	4812      	ldr	r0, [pc, #72]	@ (80028f8 <USART_Init+0x490>)
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80028b6:	460b      	mov	r3, r1
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80028b8:	f7ff fbd6 	bl	8002068 <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80028bc:	7aa1      	ldrb	r1, [r4, #10]
 80028be:	2901      	cmp	r1, #1
 80028c0:	d10c      	bne.n	80028dc <USART_Init+0x474>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 80028c2:	2308      	movs	r3, #8
 80028c4:	e6c5      	b.n	8002652 <USART_Init+0x1ea>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80028c6:	290a      	cmp	r1, #10
 80028c8:	d1f8      	bne.n	80028bc <USART_Init+0x454>
 80028ca:	2300      	movs	r3, #0
 80028cc:	f04f 0908 	mov.w	r9, #8
 80028d0:	2202      	movs	r2, #2
 80028d2:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80028d6:	480d      	ldr	r0, [pc, #52]	@ (800290c <USART_Init+0x4a4>)
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	e7ed      	b.n	80028b8 <USART_Init+0x450>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80028dc:	290b      	cmp	r1, #11
 80028de:	d133      	bne.n	8002948 <USART_Init+0x4e0>
 80028e0:	2308      	movs	r3, #8
 80028e2:	9302      	str	r3, [sp, #8]
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80028e4:	2202      	movs	r2, #2
 80028e6:	2300      	movs	r3, #0
 80028e8:	e9cd 2300 	strd	r2, r3, [sp]
 80028ec:	4807      	ldr	r0, [pc, #28]	@ (800290c <USART_Init+0x4a4>)
 80028ee:	e793      	b.n	8002818 <USART_Init+0x3b0>
 80028f0:	40004800 	.word	0x40004800
 80028f4:	200002b0 	.word	0x200002b0
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40004c00 	.word	0x40004c00
 8002908:	200002ac 	.word	0x200002ac
 800290c:	40020800 	.word	0x40020800
	else if(config -> Port == UART5)
 8002910:	4a9f      	ldr	r2, [pc, #636]	@ (8002b90 <USART_Init+0x728>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f040 80ee 	bne.w	8002af4 <USART_Init+0x68c>
		__usart_5_config__ = config;
 8002918:	4b9e      	ldr	r3, [pc, #632]	@ (8002b94 <USART_Init+0x72c>)
 800291a:	601c      	str	r4, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800291c:	7a23      	ldrb	r3, [r4, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d002      	beq.n	8002928 <USART_Init+0x4c0>
 8002922:	3b04      	subs	r3, #4
 8002924:	2b01      	cmp	r3, #1
 8002926:	d80f      	bhi.n	8002948 <USART_Init+0x4e0>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8002928:	7a62      	ldrb	r2, [r4, #9]
 800292a:	2a02      	cmp	r2, #2
 800292c:	d109      	bne.n	8002942 <USART_Init+0x4da>
 800292e:	2300      	movs	r3, #0
 8002930:	f04f 0808 	mov.w	r8, #8
 8002934:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8002938:	4897      	ldr	r0, [pc, #604]	@ (8002b98 <USART_Init+0x730>)
 800293a:	9200      	str	r2, [sp, #0]
 800293c:	4611      	mov	r1, r2
 800293e:	f7ff fb93 	bl	8002068 <GPIO_Pin_Init>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8002942:	7aa1      	ldrb	r1, [r4, #10]
 8002944:	290c      	cmp	r1, #12
 8002946:	d0bc      	beq.n	80028c2 <USART_Init+0x45a>
	PIN_Setup(config);

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fd13 	bl	8002374 <USART_Get_Instance_Number>
 800294e:	4f93      	ldr	r7, [pc, #588]	@ (8002b9c <USART_Init+0x734>)
	if(usart_dma_instance_number == -1) return -1;
 8002950:	1c45      	adds	r5, r0, #1
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8002952:	7038      	strb	r0, [r7, #0]
	if(usart_dma_instance_number == -1) return -1;
 8002954:	f000 80cb 	beq.w	8002aee <USART_Init+0x686>
		mantissa_1 = (int)(ceil(mantissa));
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 8002958:	e9d4 5000 	ldrd	r5, r0, [r4]
 800295c:	f7fd fd76 	bl	800044c <__aeabi_ui2d>

void BSP_Init(void);

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002960:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba0 <USART_Init+0x738>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba4 <USART_Init+0x73c>)
	if((config -> Port == USART1) || (config -> Port == USART6))
 8002966:	42b5      	cmp	r5, r6
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 8002968:	4689      	mov	r9, r1
}

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	498e      	ldr	r1, [pc, #568]	@ (8002ba8 <USART_Init+0x740>)
 800296e:	4680      	mov	r8, r0
	if((config -> Port == USART1) || (config -> Port == USART6))
 8002970:	d003      	beq.n	800297a <USART_Init+0x512>
 8002972:	488e      	ldr	r0, [pc, #568]	@ (8002bac <USART_Init+0x744>)
 8002974:	4285      	cmp	r5, r0
 8002976:	f040 80ff 	bne.w	8002b78 <USART_Init+0x710>
 800297a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800297e:	5cc8      	ldrb	r0, [r1, r3]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002980:	fa22 f000 	lsr.w	r0, r2, r0
 8002984:	f7fd fd62 	bl	800044c <__aeabi_ui2d>
 8002988:	4b89      	ldr	r3, [pc, #548]	@ (8002bb0 <USART_Init+0x748>)
 800298a:	4682      	mov	sl, r0
 800298c:	468b      	mov	fp, r1
 800298e:	2200      	movs	r2, #0
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 8002990:	4640      	mov	r0, r8
 8002992:	4649      	mov	r1, r9
 8002994:	f7fd fdd4 	bl	8000540 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4650      	mov	r0, sl
 800299e:	4659      	mov	r1, fp
 80029a0:	f7fd fef8 	bl	8000794 <__aeabi_ddiv>
 80029a4:	4682      	mov	sl, r0
 80029a6:	468b      	mov	fp, r1
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
    *integralPart = (double)((int64_t)number);
 80029a8:	f7fe f88c 	bl	8000ac4 <__aeabi_d2lz>
 80029ac:	f7fd fd9a 	bl	80004e4 <__aeabi_l2d>
    *fractionalPart = number - *integralPart;
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
    *integralPart = (double)((int64_t)number);
 80029b4:	4680      	mov	r8, r0
 80029b6:	4689      	mov	r9, r1
    *fractionalPart = number - *integralPart;
 80029b8:	4650      	mov	r0, sl
 80029ba:	4659      	mov	r1, fp
 80029bc:	f7fd fc08 	bl	80001d0 <__aeabi_dsub>
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80029c0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <USART_Init+0x74c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	f7fd fdbc 	bl	8000540 <__aeabi_dmul>
 80029c8:	ec41 0b10 	vmov	d0, r0, r1
 80029cc:	f000 fdf8 	bl	80035c0 <ceil>
 80029d0:	ec51 0b10 	vmov	r0, r1, d0
 80029d4:	f7fe f84e 	bl	8000a74 <__aeabi_d2iz>
		mantissa_1 = (int)(ceil(mantissa));
 80029d8:	4649      	mov	r1, r9
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80029da:	4682      	mov	sl, r0
		mantissa_1 = (int)(ceil(mantissa));
 80029dc:	4640      	mov	r0, r8
 80029de:	f7fe f849 	bl	8000a74 <__aeabi_d2iz>

	}

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 80029e2:	ea4a 1000 	orr.w	r0, sl, r0, lsl #4
 80029e6:	60a8      	str	r0, [r5, #8]
	config->Port->CR1 |= config->parity ;
 80029e8:	68ea      	ldr	r2, [r5, #12]
 80029ea:	7ca3      	ldrb	r3, [r4, #18]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60eb      	str	r3, [r5, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 80029f0:	7ba3      	ldrb	r3, [r4, #14]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80ee 	bne.w	8002bd4 <USART_Init+0x76c>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 80029f8:	68eb      	ldr	r3, [r5, #12]
 80029fa:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 80029fe:	60eb      	str	r3, [r5, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 8002a00:	692b      	ldr	r3, [r5, #16]
 8002a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a06:	612b      	str	r3, [r5, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 8002a08:	696b      	ldr	r3, [r5, #20]
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	616b      	str	r3, [r5, #20]
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	7c23      	ldrb	r3, [r4, #16]
 8002a18:	6911      	ldr	r1, [r2, #16]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6113      	str	r3, [r2, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 8002a1e:	7c63      	ldrb	r3, [r4, #17]
 8002a20:	079b      	lsls	r3, r3, #30
 8002a22:	f140 816c 	bpl.w	8002cfe <USART_Init+0x896>
	{


		if(config->Port == USART1)
 8002a26:	42b2      	cmp	r2, r6
 8002a28:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <USART_Init+0x750>)
 8002a2a:	f040 811c 	bne.w	8002c66 <USART_Init+0x7fe>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8002a2e:	4a63      	ldr	r2, [pc, #396]	@ (8002bbc <USART_Init+0x754>)
 8002a30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002a36:	2210      	movs	r2, #16
 8002a38:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 8002a3a:	4a61      	ldr	r2, [pc, #388]	@ (8002bc0 <USART_Init+0x758>)
 8002a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002a3e:	f997 1000 	ldrsb.w	r1, [r7]
 8002a42:	2258      	movs	r2, #88	@ 0x58
 8002a44:	fb02 3501 	mla	r5, r2, r1, r3
 8002a48:	2300      	movs	r3, #0
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002a4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8002a4e:	e9c5 1308 	strd	r1, r3, [r5, #32]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 8002a52:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8002a56:	e9c5 3104 	strd	r3, r1, [r5, #16]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8002a5a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8002a5e:	4629      	mov	r1, r5
		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002a60:	61ab      	str	r3, [r5, #24]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002a62:	60eb      	str	r3, [r5, #12]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8002a64:	62ab      	str	r3, [r5, #40]	@ 0x28
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8002a66:	f000 fd9b 	bl	80035a0 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f7ff f81e 	bl	8001aac <DMA_Init>
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 8002a70:	7c63      	ldrb	r3, [r4, #17]
	{



		if(config->Port == USART1)
 8002a72:	6822      	ldr	r2, [r4, #0]
	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 8002a74:	07dd      	lsls	r5, r3, #31
 8002a76:	f140 8193 	bpl.w	8002da0 <USART_Init+0x938>
		if(config->Port == USART1)
 8002a7a:	42b2      	cmp	r2, r6
 8002a7c:	4b51      	ldr	r3, [pc, #324]	@ (8002bc4 <USART_Init+0x75c>)
 8002a7e:	f040 8143 	bne.w	8002d08 <USART_Init+0x8a0>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8002a82:	4a51      	ldr	r2, [pc, #324]	@ (8002bc8 <USART_Init+0x760>)
 8002a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 8002a8e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bcc <USART_Init+0x764>)
 8002a90:	64da      	str	r2, [r3, #76]	@ 0x4c
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002a92:	f997 1000 	ldrsb.w	r1, [r7]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002a96:	2258      	movs	r2, #88	@ 0x58
 8002a98:	fb02 3501 	mla	r5, r2, r1, r3
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2140      	movs	r1, #64	@ 0x40
 8002aa0:	e9c5 3103 	strd	r3, r1, [r5, #12]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002aa4:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002aa8:	e9c5 1305 	strd	r1, r3, [r5, #20]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002aac:	2010      	movs	r0, #16
 8002aae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ab2:	e9c5 0107 	strd	r0, r1, [r5, #28]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f104 0014 	add.w	r0, r4, #20
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8002abc:	e9c5 3309 	strd	r3, r3, [r5, #36]	@ 0x24
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8002ac0:	f000 fd6e 	bl	80035a0 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7fe fff1 	bl	8001aac <DMA_Init>
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002aca:	7a22      	ldrb	r2, [r4, #8]
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	2a03      	cmp	r2, #3
 8002ad0:	f040 816b 	bne.w	8002daa <USART_Init+0x942>
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	f042 020c 	orr.w	r2, r2, #12
 8002ae2:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aea:	60da      	str	r2, [r3, #12]

	return 1;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	b005      	add	sp, #20
 8002af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(config->Port == USART6)
 8002af4:	4a2d      	ldr	r2, [pc, #180]	@ (8002bac <USART_Init+0x744>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	f47f af26 	bne.w	8002948 <USART_Init+0x4e0>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002afc:	7a23      	ldrb	r3, [r4, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d008      	beq.n	8002b14 <USART_Init+0x6ac>
 8002b02:	3b02      	subs	r3, #2
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	f63f af1f 	bhi.w	8002948 <USART_Init+0x4e0>
 8002b0a:	e8df f003 	tbb	[pc, r3]
 8002b0e:	2303      	.short	0x2303
 8002b10:	23230303 	.word	0x23230303
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002b14:	7a61      	ldrb	r1, [r4, #9]
 8002b16:	2906      	cmp	r1, #6
 8002b18:	d109      	bne.n	8002b2e <USART_Init+0x6c6>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f04f 0e08 	mov.w	lr, #8
 8002b20:	2202      	movs	r2, #2
 8002b22:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 8002b26:	482a      	ldr	r0, [pc, #168]	@ (8002bd0 <USART_Init+0x768>)
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	f7ff fa9d 	bl	8002068 <GPIO_Pin_Init>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002b2e:	7aa1      	ldrb	r1, [r4, #10]
 8002b30:	2907      	cmp	r1, #7
 8002b32:	d109      	bne.n	8002b48 <USART_Init+0x6e0>
 8002b34:	2300      	movs	r3, #0
 8002b36:	f04f 0c08 	mov.w	ip, #8
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8002b40:	4823      	ldr	r0, [pc, #140]	@ (8002bd0 <USART_Init+0x768>)
 8002b42:	9200      	str	r2, [sp, #0]
 8002b44:	f7ff fa90 	bl	8002068 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002b48:	7ae1      	ldrb	r1, [r4, #11]
 8002b4a:	2908      	cmp	r1, #8
 8002b4c:	f47f aefc 	bne.w	8002948 <USART_Init+0x4e0>
 8002b50:	9102      	str	r1, [sp, #8]
 8002b52:	e6c7      	b.n	80028e4 <USART_Init+0x47c>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002b54:	7a61      	ldrb	r1, [r4, #9]
 8002b56:	2906      	cmp	r1, #6
 8002b58:	d108      	bne.n	8002b6c <USART_Init+0x704>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2708      	movs	r7, #8
 8002b5e:	2202      	movs	r2, #2
 8002b60:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8002b64:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <USART_Init+0x730>)
 8002b66:	9200      	str	r2, [sp, #0]
 8002b68:	f7ff fa7e 	bl	8002068 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8002b6c:	7a23      	ldrb	r3, [r4, #8]
 8002b6e:	2b07      	cmp	r3, #7
 8002b70:	f47f aeea 	bne.w	8002948 <USART_Init+0x4e0>
 8002b74:	2108      	movs	r1, #8
 8002b76:	e5b8      	b.n	80026ea <USART_Init+0x282>
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b78:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b7c:	5cc8      	ldrb	r0, [r1, r3]
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 8002b7e:	fa22 f000 	lsr.w	r0, r2, r0
 8002b82:	f7fd fc63 	bl	800044c <__aeabi_ui2d>
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <USART_Init+0x74c>)
 8002b88:	4682      	mov	sl, r0
 8002b8a:	468b      	mov	fp, r1
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	e6ff      	b.n	8002990 <USART_Init+0x528>
 8002b90:	40005000 	.word	0x40005000
 8002b94:	200002a8 	.word	0x200002a8
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	200002bc 	.word	0x200002bc
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08003ad8 	.word	0x08003ad8
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40400000 	.word	0x40400000
 8002bb4:	40300000 	.word	0x40300000
 8002bb8:	200004d0 	.word	0x200004d0
 8002bbc:	08003794 	.word	0x08003794
 8002bc0:	08002145 	.word	0x08002145
 8002bc4:	200002c0 	.word	0x200002c0
 8002bc8:	080037a0 	.word	0x080037a0
 8002bcc:	08002139 	.word	0x08002139
 8002bd0:	40020800 	.word	0x40020800
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 8002bd4:	0619      	lsls	r1, r3, #24
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 8002bd6:	bf42      	ittt	mi
 8002bd8:	68ea      	ldrmi	r2, [r5, #12]
 8002bda:	f042 0280 	orrmi.w	r2, r2, #128	@ 0x80
 8002bde:	60ea      	strmi	r2, [r5, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 8002be0:	065a      	lsls	r2, r3, #25
			config -> Port -> CR1 |= USART_CR1_TCIE;
 8002be2:	bf42      	ittt	mi
 8002be4:	68ea      	ldrmi	r2, [r5, #12]
 8002be6:	f042 0240 	orrmi.w	r2, r2, #64	@ 0x40
 8002bea:	60ea      	strmi	r2, [r5, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8002bec:	0698      	lsls	r0, r3, #26
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8002bee:	bf42      	ittt	mi
 8002bf0:	68ea      	ldrmi	r2, [r5, #12]
 8002bf2:	f042 0220 	orrmi.w	r2, r2, #32
 8002bf6:	60ea      	strmi	r2, [r5, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8002bf8:	06d9      	lsls	r1, r3, #27
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8002bfa:	bf42      	ittt	mi
 8002bfc:	68ea      	ldrmi	r2, [r5, #12]
 8002bfe:	f042 0210 	orrmi.w	r2, r2, #16
 8002c02:	60ea      	strmi	r2, [r5, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 8002c04:	07da      	lsls	r2, r3, #31
			config -> Port -> CR3 |= USART_CR3_EIE;
 8002c06:	bf42      	ittt	mi
 8002c08:	696b      	ldrmi	r3, [r5, #20]
 8002c0a:	f043 0301 	orrmi.w	r3, r3, #1
 8002c0e:	616b      	strmi	r3, [r5, #20]
		if(config -> Port == USART1)
 8002c10:	42b5      	cmp	r5, r6
 8002c12:	d106      	bne.n	8002c22 <USART_Init+0x7ba>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	4b68      	ldr	r3, [pc, #416]	@ (8002db8 <USART_Init+0x950>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	605a      	str	r2, [r3, #4]
}
 8002c20:	e6f8      	b.n	8002a14 <USART_Init+0x5ac>
		else if(config -> Port == USART2)
 8002c22:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <USART_Init+0x954>)
 8002c24:	429d      	cmp	r5, r3
 8002c26:	d102      	bne.n	8002c2e <USART_Init+0x7c6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c28:	4b63      	ldr	r3, [pc, #396]	@ (8002db8 <USART_Init+0x950>)
 8002c2a:	2240      	movs	r2, #64	@ 0x40
 8002c2c:	e7f7      	b.n	8002c1e <USART_Init+0x7b6>
		else if(config -> Port == USART3)
 8002c2e:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <USART_Init+0x958>)
 8002c30:	429d      	cmp	r5, r3
 8002c32:	d102      	bne.n	8002c3a <USART_Init+0x7d2>
 8002c34:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <USART_Init+0x950>)
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	e7f1      	b.n	8002c1e <USART_Init+0x7b6>
		else if(config -> Port == UART4)
 8002c3a:	4b62      	ldr	r3, [pc, #392]	@ (8002dc4 <USART_Init+0x95c>)
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d103      	bne.n	8002c48 <USART_Init+0x7e0>
 8002c40:	4b5d      	ldr	r3, [pc, #372]	@ (8002db8 <USART_Init+0x950>)
 8002c42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c46:	e7ea      	b.n	8002c1e <USART_Init+0x7b6>
		else if(config -> Port == UART5)
 8002c48:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc8 <USART_Init+0x960>)
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	d103      	bne.n	8002c56 <USART_Init+0x7ee>
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002db8 <USART_Init+0x950>)
 8002c50:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002c54:	e7e3      	b.n	8002c1e <USART_Init+0x7b6>
		else if(config -> Port == USART6)
 8002c56:	4b5d      	ldr	r3, [pc, #372]	@ (8002dcc <USART_Init+0x964>)
 8002c58:	429d      	cmp	r5, r3
 8002c5a:	f47f aedb 	bne.w	8002a14 <USART_Init+0x5ac>
 8002c5e:	4b56      	ldr	r3, [pc, #344]	@ (8002db8 <USART_Init+0x950>)
 8002c60:	2280      	movs	r2, #128	@ 0x80
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e7dc      	b.n	8002c20 <USART_Init+0x7b8>
		else if(config->Port == USART2)
 8002c66:	4955      	ldr	r1, [pc, #340]	@ (8002dbc <USART_Init+0x954>)
 8002c68:	428a      	cmp	r2, r1
 8002c6a:	d10b      	bne.n	8002c84 <USART_Init+0x81c>
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8002c6c:	4a58      	ldr	r2, [pc, #352]	@ (8002dd0 <USART_Init+0x968>)
 8002c6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c70:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 8002c74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002c78:	2210      	movs	r2, #16
 8002c7a:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 8002c7c:	4a55      	ldr	r2, [pc, #340]	@ (8002dd4 <USART_Init+0x96c>)
 8002c7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002c82:	e6dc      	b.n	8002a3e <USART_Init+0x5d6>
		else if(config->Port == USART3)
 8002c84:	494e      	ldr	r1, [pc, #312]	@ (8002dc0 <USART_Init+0x958>)
 8002c86:	428a      	cmp	r2, r1
 8002c88:	d10c      	bne.n	8002ca4 <USART_Init+0x83c>
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 8002c8a:	4a53      	ldr	r2, [pc, #332]	@ (8002dd8 <USART_Init+0x970>)
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	f103 05b0 	add.w	r5, r3, #176	@ 0xb0
 8002c92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002c96:	2210      	movs	r2, #16
 8002c98:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ddc <USART_Init+0x974>)
 8002c9e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8002ca2:	e6cc      	b.n	8002a3e <USART_Init+0x5d6>
		else if(config->Port == UART4)
 8002ca4:	4947      	ldr	r1, [pc, #284]	@ (8002dc4 <USART_Init+0x95c>)
 8002ca6:	428a      	cmp	r2, r1
 8002ca8:	d10c      	bne.n	8002cc4 <USART_Init+0x85c>
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8002caa:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <USART_Init+0x978>)
 8002cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cae:	f503 7584 	add.w	r5, r3, #264	@ 0x108
 8002cb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 8002cbc:	4a49      	ldr	r2, [pc, #292]	@ (8002de4 <USART_Init+0x97c>)
 8002cbe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8002cc2:	e6bc      	b.n	8002a3e <USART_Init+0x5d6>
		else if(config->Port == UART5)
 8002cc4:	4940      	ldr	r1, [pc, #256]	@ (8002dc8 <USART_Init+0x960>)
 8002cc6:	428a      	cmp	r2, r1
 8002cc8:	d10c      	bne.n	8002ce4 <USART_Init+0x87c>
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 8002cca:	4a47      	ldr	r2, [pc, #284]	@ (8002de8 <USART_Init+0x980>)
 8002ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cce:	f503 75b0 	add.w	r5, r3, #352	@ 0x160
 8002cd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 8002cdc:	4a43      	ldr	r2, [pc, #268]	@ (8002dec <USART_Init+0x984>)
 8002cde:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8002ce2:	e6ac      	b.n	8002a3e <USART_Init+0x5d6>
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8002ce4:	4a42      	ldr	r2, [pc, #264]	@ (8002df0 <USART_Init+0x988>)
 8002ce6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ce8:	f503 75dc 	add.w	r5, r3, #440	@ 0x1b8
 8002cec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 8002cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <USART_Init+0x98c>)
 8002cf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002cfc:	e69f      	b.n	8002a3e <USART_Init+0x5d6>
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8002cfe:	6953      	ldr	r3, [r2, #20]
 8002d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d04:	6153      	str	r3, [r2, #20]
 8002d06:	e6b3      	b.n	8002a70 <USART_Init+0x608>
		else if(config->Port == USART2)
 8002d08:	492c      	ldr	r1, [pc, #176]	@ (8002dbc <USART_Init+0x954>)
 8002d0a:	428a      	cmp	r2, r1
 8002d0c:	d10b      	bne.n	8002d26 <USART_Init+0x8be>
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8002d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002df8 <USART_Init+0x990>)
 8002d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d12:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 8002d16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 8002d1e:	4a37      	ldr	r2, [pc, #220]	@ (8002dfc <USART_Init+0x994>)
 8002d20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002d24:	e6b5      	b.n	8002a92 <USART_Init+0x62a>
		else if(config->Port == USART3)
 8002d26:	4926      	ldr	r1, [pc, #152]	@ (8002dc0 <USART_Init+0x958>)
 8002d28:	428a      	cmp	r2, r1
 8002d2a:	d10c      	bne.n	8002d46 <USART_Init+0x8de>
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8002d2c:	4a34      	ldr	r2, [pc, #208]	@ (8002e00 <USART_Init+0x998>)
 8002d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d30:	f103 05b0 	add.w	r5, r3, #176	@ 0xb0
 8002d34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002d38:	2210      	movs	r2, #16
 8002d3a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 8002d3e:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <USART_Init+0x99c>)
 8002d40:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8002d44:	e6a5      	b.n	8002a92 <USART_Init+0x62a>
		else if(config->Port == UART4)
 8002d46:	491f      	ldr	r1, [pc, #124]	@ (8002dc4 <USART_Init+0x95c>)
 8002d48:	428a      	cmp	r2, r1
 8002d4a:	d10c      	bne.n	8002d66 <USART_Init+0x8fe>
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <USART_Init+0x9a0>)
 8002d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d50:	f503 7584 	add.w	r5, r3, #264	@ 0x108
 8002d54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002d58:	2210      	movs	r2, #16
 8002d5a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <USART_Init+0x9a4>)
 8002d60:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8002d64:	e695      	b.n	8002a92 <USART_Init+0x62a>
		else if(config->Port == UART5)
 8002d66:	4918      	ldr	r1, [pc, #96]	@ (8002dc8 <USART_Init+0x960>)
 8002d68:	428a      	cmp	r2, r1
 8002d6a:	d10c      	bne.n	8002d86 <USART_Init+0x91e>
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8002d6c:	4a28      	ldr	r2, [pc, #160]	@ (8002e10 <USART_Init+0x9a8>)
 8002d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d70:	f503 75b0 	add.w	r5, r3, #352	@ 0x160
 8002d74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 8002d7e:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <USART_Init+0x9ac>)
 8002d80:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8002d84:	e685      	b.n	8002a92 <USART_Init+0x62a>
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <USART_Init+0x9b0>)
 8002d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8a:	f503 75dc 	add.w	r5, r3, #440	@ 0x1b8
 8002d8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002d92:	2210      	movs	r2, #16
 8002d94:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 8002d98:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <USART_Init+0x9b4>)
 8002d9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002d9e:	e678      	b.n	8002a92 <USART_Init+0x62a>
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8002da0:	6953      	ldr	r3, [r2, #20]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da6:	6153      	str	r3, [r2, #20]
 8002da8:	e68f      	b.n	8002aca <USART_Init+0x662>
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002daa:	2a05      	cmp	r2, #5
 8002dac:	bf02      	ittt	eq
 8002dae:	691a      	ldreq	r2, [r3, #16]
 8002db0:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
 8002db4:	611a      	streq	r2, [r3, #16]
 8002db6:	e691      	b.n	8002adc <USART_Init+0x674>
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	40004400 	.word	0x40004400
 8002dc0:	40004800 	.word	0x40004800
 8002dc4:	40004c00 	.word	0x40004c00
 8002dc8:	40005000 	.word	0x40005000
 8002dcc:	40011400 	.word	0x40011400
 8002dd0:	080037ac 	.word	0x080037ac
 8002dd4:	0800215d 	.word	0x0800215d
 8002dd8:	080037c4 	.word	0x080037c4
 8002ddc:	08002175 	.word	0x08002175
 8002de0:	080037dc 	.word	0x080037dc
 8002de4:	0800218d 	.word	0x0800218d
 8002de8:	080037f4 	.word	0x080037f4
 8002dec:	080021a5 	.word	0x080021a5
 8002df0:	0800380c 	.word	0x0800380c
 8002df4:	080021bd 	.word	0x080021bd
 8002df8:	080037b8 	.word	0x080037b8
 8002dfc:	08002151 	.word	0x08002151
 8002e00:	080037d0 	.word	0x080037d0
 8002e04:	08002169 	.word	0x08002169
 8002e08:	080037e8 	.word	0x080037e8
 8002e0c:	08002181 	.word	0x08002181
 8002e10:	08003800 	.word	0x08003800
 8002e14:	08002199 	.word	0x08002199
 8002e18:	08003818 	.word	0x08003818
 8002e1c:	080021b1 	.word	0x080021b1

08002e20 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	4604      	mov	r4, r0
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8002e24:	f7ff faa6 	bl	8002374 <USART_Get_Instance_Number>
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8002e28:	7c63      	ldrb	r3, [r4, #17]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8002e2a:	4e29      	ldr	r6, [pc, #164]	@ (8002ed0 <USART_TX_Buffer+0xb0>)
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	7463      	strb	r3, [r4, #17]
		config -> Port -> SR &= ~USART_SR_TC;
 8002e32:	6823      	ldr	r3, [r4, #0]
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8002e34:	7030      	strb	r0, [r6, #0]
		config -> Port -> SR &= ~USART_SR_TC;
 8002e36:	681d      	ldr	r5, [r3, #0]
 8002e38:	f025 0540 	bic.w	r5, r5, #64	@ 0x40
 8002e3c:	f843 5b04 	str.w	r5, [r3], #4
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8002e40:	4d24      	ldr	r5, [pc, #144]	@ (8002ed4 <USART_TX_Buffer+0xb4>)
 8002e42:	2758      	movs	r7, #88	@ 0x58
 8002e44:	fb07 5000 	mla	r0, r7, r0, r5
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8002e48:	e9c0 310b 	strd	r3, r1, [r0, #44]	@ 0x2c
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8002e4c:	8682      	strh	r2, [r0, #52]	@ 0x34
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8002e4e:	f7fe ff51 	bl	8001cf4 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8002e52:	f996 0000 	ldrsb.w	r0, [r6]
 8002e56:	fb00 5007 	mla	r0, r0, r7, r5
 8002e5a:	f7fe ff75 	bl	8001d48 <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e66:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8002e68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <USART_TX_Buffer+0xb8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d107      	bne.n	8002e7e <USART_TX_Buffer+0x5e>
		{
			while(!U1TX_Complete){}
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <USART_TX_Buffer+0xbc>)
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d0fc      	beq.n	8002e70 <USART_TX_Buffer+0x50>
			U5TX_Complete = 0;
		}
		else if(config->Port == USART6)
		{
			while(!U6TX_Complete){}
			U6TX_Complete = 0;
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
		}
	}

	return 1;

}
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if(config->Port == USART2)
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <USART_TX_Buffer+0xc0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d104      	bne.n	8002e8e <USART_TX_Buffer+0x6e>
			while(!U2TX_Complete){}
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <USART_TX_Buffer+0xc4>)
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d0fc      	beq.n	8002e86 <USART_TX_Buffer+0x66>
 8002e8c:	e7f3      	b.n	8002e76 <USART_TX_Buffer+0x56>
		else if(config->Port == USART3)
 8002e8e:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <USART_TX_Buffer+0xc8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d104      	bne.n	8002e9e <USART_TX_Buffer+0x7e>
			while(!U3TX_Complete){}
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <USART_TX_Buffer+0xcc>)
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	d0fc      	beq.n	8002e96 <USART_TX_Buffer+0x76>
 8002e9c:	e7eb      	b.n	8002e76 <USART_TX_Buffer+0x56>
		else if(config->Port == UART4)
 8002e9e:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <USART_TX_Buffer+0xd0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d104      	bne.n	8002eae <USART_TX_Buffer+0x8e>
			while(!U4TX_Complete){}
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <USART_TX_Buffer+0xd4>)
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d0fc      	beq.n	8002ea6 <USART_TX_Buffer+0x86>
 8002eac:	e7e3      	b.n	8002e76 <USART_TX_Buffer+0x56>
		else if(config->Port == UART5)
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <USART_TX_Buffer+0xd8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d104      	bne.n	8002ebe <USART_TX_Buffer+0x9e>
			while(!U5TX_Complete){}
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <USART_TX_Buffer+0xdc>)
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d0fc      	beq.n	8002eb6 <USART_TX_Buffer+0x96>
 8002ebc:	e7db      	b.n	8002e76 <USART_TX_Buffer+0x56>
		else if(config->Port == USART6)
 8002ebe:	4a10      	ldr	r2, [pc, #64]	@ (8002f00 <USART_TX_Buffer+0xe0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d1da      	bne.n	8002e7a <USART_TX_Buffer+0x5a>
			while(!U6TX_Complete){}
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <USART_TX_Buffer+0xe4>)
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d0fc      	beq.n	8002ec6 <USART_TX_Buffer+0xa6>
 8002ecc:	e7d3      	b.n	8002e76 <USART_TX_Buffer+0x56>
 8002ece:	bf00      	nop
 8002ed0:	200002bc 	.word	0x200002bc
 8002ed4:	200002c0 	.word	0x200002c0
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	200002a3 	.word	0x200002a3
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	200002a1 	.word	0x200002a1
 8002ee8:	40004800 	.word	0x40004800
 8002eec:	2000029f 	.word	0x2000029f
 8002ef0:	40004c00 	.word	0x40004c00
 8002ef4:	2000029d 	.word	0x2000029d
 8002ef8:	40005000 	.word	0x40005000
 8002efc:	2000029b 	.word	0x2000029b
 8002f00:	40011400 	.word	0x40011400
 8002f04:	20000299 	.word	0x20000299

08002f08 <USART_RX_Buffer>:

int8_t USART_RX_Buffer(USART_Config *config, uint8_t *rx_buffer, uint16_t length, bool circular_buffer_enable)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
	{
		if(circular_buffer_enable == 1)
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f0c:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8002ff0 <USART_RX_Buffer+0xe8>
 8002f10:	4e2a      	ldr	r6, [pc, #168]	@ (8002fbc <USART_RX_Buffer+0xb4>)
 8002f12:	f998 4000 	ldrsb.w	r4, [r8]
{
 8002f16:	4605      	mov	r5, r0
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8002f18:	7c40      	ldrb	r0, [r0, #17]
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f1a:	2758      	movs	r7, #88	@ 0x58
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8002f1c:	f040 0002 	orr.w	r0, r0, #2
 8002f20:	7468      	strb	r0, [r5, #17]
		if(circular_buffer_enable == 1)
 8002f22:	f083 0301 	eor.w	r3, r3, #1
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f26:	fb07 6004 	mla	r0, r7, r4, r6
		if(circular_buffer_enable == 1)
 8002f2a:	021b      	lsls	r3, r3, #8
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f2c:	6183      	str	r3, [r0, #24]
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Enable;
		}

		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8002f2e:	682b      	ldr	r3, [r5, #0]
		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
 8002f30:	6301      	str	r1, [r0, #48]	@ 0x30
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8002f32:	3304      	adds	r3, #4
 8002f34:	62c3      	str	r3, [r0, #44]	@ 0x2c
		xUSART_RX[usart_dma_instance_number].buffer_length = length;
 8002f36:	8682      	strh	r2, [r0, #52]	@ 0x34
		DMA_Set_Target(&xUSART_RX[usart_dma_instance_number]);
 8002f38:	f7fe fedc 	bl	8001cf4 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_RX[usart_dma_instance_number]);
 8002f3c:	f998 0000 	ldrsb.w	r0, [r8]
 8002f40:	fb00 6007 	mla	r0, r0, r7, r6
 8002f44:	f7fe ff00 	bl	8001d48 <DMA_Set_Trigger>
		config -> Port -> CR3 |= USART_CR3_DMAR;
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f50:	615a      	str	r2, [r3, #20]


		if(config->Port == USART1)
 8002f52:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc0 <USART_RX_Buffer+0xb8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d108      	bne.n	8002f6a <USART_RX_Buffer+0x62>
		{
			while(!U1RX_Complete){}
 8002f58:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <USART_RX_Buffer+0xbc>)
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d0fc      	beq.n	8002f5a <USART_RX_Buffer+0x52>
			U5RX_Complete = 0;
		}
		else if(config->Port == USART6)
		{
			while(!U6RX_Complete){}
			U6RX_Complete = 0;
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
		}
	}

	return 1;

}
 8002f64:	2001      	movs	r0, #1
 8002f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if(config->Port == USART2)
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <USART_RX_Buffer+0xc0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d104      	bne.n	8002f7a <USART_RX_Buffer+0x72>
			while(!U2RX_Complete){}
 8002f70:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <USART_RX_Buffer+0xc4>)
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d0fc      	beq.n	8002f72 <USART_RX_Buffer+0x6a>
 8002f78:	e7f2      	b.n	8002f60 <USART_RX_Buffer+0x58>
		else if(config->Port == USART3)
 8002f7a:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <USART_RX_Buffer+0xc8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d104      	bne.n	8002f8a <USART_RX_Buffer+0x82>
			while(!U3RX_Complete){}
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <USART_RX_Buffer+0xcc>)
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d0fc      	beq.n	8002f82 <USART_RX_Buffer+0x7a>
 8002f88:	e7ea      	b.n	8002f60 <USART_RX_Buffer+0x58>
		else if(config->Port == UART4)
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <USART_RX_Buffer+0xd0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d104      	bne.n	8002f9a <USART_RX_Buffer+0x92>
			while(!U4RX_Complete){}
 8002f90:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <USART_RX_Buffer+0xd4>)
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d0fc      	beq.n	8002f92 <USART_RX_Buffer+0x8a>
 8002f98:	e7e2      	b.n	8002f60 <USART_RX_Buffer+0x58>
		else if(config->Port == UART5)
 8002f9a:	4a11      	ldr	r2, [pc, #68]	@ (8002fe0 <USART_RX_Buffer+0xd8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d104      	bne.n	8002faa <USART_RX_Buffer+0xa2>
			while(!U5RX_Complete){}
 8002fa0:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <USART_RX_Buffer+0xdc>)
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d0fc      	beq.n	8002fa2 <USART_RX_Buffer+0x9a>
 8002fa8:	e7da      	b.n	8002f60 <USART_RX_Buffer+0x58>
		else if(config->Port == USART6)
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <USART_RX_Buffer+0xe0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d1d9      	bne.n	8002f64 <USART_RX_Buffer+0x5c>
			while(!U6RX_Complete){}
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <USART_RX_Buffer+0xe4>)
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d0fc      	beq.n	8002fb2 <USART_RX_Buffer+0xaa>
 8002fb8:	e7d2      	b.n	8002f60 <USART_RX_Buffer+0x58>
 8002fba:	bf00      	nop
 8002fbc:	200004d0 	.word	0x200004d0
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	200002a2 	.word	0x200002a2
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	200002a0 	.word	0x200002a0
 8002fd0:	40004800 	.word	0x40004800
 8002fd4:	2000029e 	.word	0x2000029e
 8002fd8:	40004c00 	.word	0x40004c00
 8002fdc:	2000029c 	.word	0x2000029c
 8002fe0:	40005000 	.word	0x40005000
 8002fe4:	2000029a 	.word	0x2000029a
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	20000298 	.word	0x20000298
 8002ff0:	200002bc 	.word	0x200002bc

08002ff4 <USART_TX_Single_Byte>:

void USART_TX_Single_Byte(USART_Config *config, uint8_t data)
{
	config->Port->DR = data;
 8002ff4:	6803      	ldr	r3, [r0, #0]
 8002ff6:	6059      	str	r1, [r3, #4]
	while(!(config->Port->SR & USART_SR_TXE));
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	0612      	lsls	r2, r2, #24
 8002ffc:	d5fc      	bpl.n	8002ff8 <USART_TX_Single_Byte+0x4>
}
 8002ffe:	4770      	bx	lr

08003000 <Delay_ms.constprop.0.isra.0>:
	SysTick->LOAD =  x ;
 8003000:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003004:	4a05      	ldr	r2, [pc, #20]	@ (800301c <Delay_ms.constprop.0.isra.0+0x1c>)
 8003006:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
	SysTick->CTRL |= 1;
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	611a      	str	r2, [r3, #16]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	03d2      	lsls	r2, r2, #15
 8003018:	d5fc      	bpl.n	8003014 <Delay_ms.constprop.0.isra.0+0x14>
}
 800301a:	4770      	bx	lr
 800301c:	00029040 	.word	0x00029040

08003020 <Connect_Device_Func>:
		}
	}
}

void Connect_Device_Func(void)
{
 8003020:	b530      	push	{r4, r5, lr}
	buffer[0] = 0xAA;
 8003022:	4c1a      	ldr	r4, [pc, #104]	@ (800308c <Connect_Device_Func+0x6c>)
 8003024:	23aa      	movs	r3, #170	@ 0xaa
 8003026:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 8003028:	2355      	movs	r3, #85	@ 0x55
 800302a:	7063      	strb	r3, [r4, #1]
	buffer[2] = Connect_Device;
 800302c:	23a1      	movs	r3, #161	@ 0xa1
 800302e:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 8003030:	2302      	movs	r3, #2
{
 8003032:	b085      	sub	sp, #20
	buffer[4] = 0x01;
 8003034:	2501      	movs	r5, #1
	buffer[5] = 0x01;
	buffer[6] = 0x01;
	buffer[7] = 0x01;
	buffer[8] = 0x01;
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003036:	18e0      	adds	r0, r4, r3
 8003038:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 800303a:	70e3      	strb	r3, [r4, #3]
	buffer[4] = 0x01;
 800303c:	7125      	strb	r5, [r4, #4]
	buffer[5] = 0x01;
 800303e:	7165      	strb	r5, [r4, #5]
	buffer[6] = 0x01;
 8003040:	71a5      	strb	r5, [r4, #6]
	buffer[7] = 0x01;
 8003042:	71e5      	strb	r5, [r4, #7]
	buffer[8] = 0x01;
 8003044:	7225      	strb	r5, [r4, #8]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003046:	f7fd fda3 	bl	8000b90 <CRC_Compute_8Bit_Block>
 800304a:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <Connect_Device_Func+0x70>)
 800304c:	6018      	str	r0, [r3, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 800304e:	0e03      	lsrs	r3, r0, #24
 8003050:	7263      	strb	r3, [r4, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 8003052:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003056:	72a3      	strb	r3, [r4, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8003058:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800305c:	72e3      	strb	r3, [r4, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 800305e:	b2c0      	uxtb	r0, r0
	buffer[13] = 0xBB;
 8003060:	23bb      	movs	r3, #187	@ 0xbb
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8003062:	7320      	strb	r0, [r4, #12]
	buffer[14] = 0x66;
	Custom_Comm_Send(buffer, 14);
 8003064:	210e      	movs	r1, #14
	buffer[13] = 0xBB;
 8003066:	7363      	strb	r3, [r4, #13]
	Custom_Comm_Send(buffer, 14);
 8003068:	4620      	mov	r0, r4
	buffer[14] = 0x66;
 800306a:	2366      	movs	r3, #102	@ 0x66
 800306c:	73a3      	strb	r3, [r4, #14]
	Custom_Comm_Send(buffer, 14);
 800306e:	f7fd fdef 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8003072:	2108      	movs	r1, #8
 8003074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003078:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800307c:	4805      	ldr	r0, [pc, #20]	@ (8003094 <Connect_Device_Func+0x74>)
 800307e:	9100      	str	r1, [sp, #0]
 8003080:	4623      	mov	r3, r4
 8003082:	2200      	movs	r2, #0
 8003084:	f7fe fea6 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>

//	DMA_Memory_To_Memory_Transfer(buffer1, 8,8, (uint8_t *)buffer, 0, 1, 256);
}
 8003088:	b005      	add	sp, #20
 800308a:	bd30      	pop	{r4, r5, pc}
 800308c:	200006ea 	.word	0x200006ea
 8003090:	200006e4 	.word	0x200006e4
 8003094:	200007ea 	.word	0x200007ea

08003098 <Disconnect_Device_Func>:

void Disconnect_Device_Func(void)
{
 8003098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = 0xAA;
 800309a:	4c17      	ldr	r4, [pc, #92]	@ (80030f8 <Disconnect_Device_Func+0x60>)
 800309c:	23aa      	movs	r3, #170	@ 0xaa
 800309e:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 80030a0:	2355      	movs	r3, #85	@ 0x55
 80030a2:	7063      	strb	r3, [r4, #1]
	buffer[2] = Disconnect_Device;
 80030a4:	23a2      	movs	r3, #162	@ 0xa2
 80030a6:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 80030a8:	2302      	movs	r3, #2
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80030aa:	18e0      	adds	r0, r4, r3
 80030ac:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 80030ae:	70e3      	strb	r3, [r4, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80030b0:	f7fd fd6e 	bl	8000b90 <CRC_Compute_8Bit_Block>
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <Disconnect_Device_Func+0x64>)
 80030b6:	6018      	str	r0, [r3, #0]
	buffer[4]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80030b8:	0e03      	lsrs	r3, r0, #24
 80030ba:	7123      	strb	r3, [r4, #4]
	buffer[5]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 80030bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80030c0:	7163      	strb	r3, [r4, #5]
	buffer[6]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 80030c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80030c6:	71a3      	strb	r3, [r4, #6]
	buffer[7] = (CRC_Rec1 & 0x000000FF) >> 0;
 80030c8:	b2c0      	uxtb	r0, r0
	buffer[8] = 0xBB;
 80030ca:	23bb      	movs	r3, #187	@ 0xbb
	buffer[7] = (CRC_Rec1 & 0x000000FF) >> 0;
 80030cc:	71e0      	strb	r0, [r4, #7]
	buffer[9] = 0x66;
	Custom_Comm_Send(buffer, 10);
 80030ce:	210a      	movs	r1, #10
	buffer[8] = 0xBB;
 80030d0:	7223      	strb	r3, [r4, #8]
	Custom_Comm_Send(buffer, 10);
 80030d2:	4620      	mov	r0, r4
	buffer[9] = 0x66;
 80030d4:	2366      	movs	r3, #102	@ 0x66
 80030d6:	7263      	strb	r3, [r4, #9]
	Custom_Comm_Send(buffer, 10);
 80030d8:	f7fd fdba 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80030dc:	2108      	movs	r1, #8
 80030de:	2301      	movs	r3, #1
 80030e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030e8:	4805      	ldr	r0, [pc, #20]	@ (8003100 <Disconnect_Device_Func+0x68>)
 80030ea:	9100      	str	r1, [sp, #0]
 80030ec:	4623      	mov	r3, r4
 80030ee:	2200      	movs	r2, #0
 80030f0:	f7fe fe70 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
}
 80030f4:	b004      	add	sp, #16
 80030f6:	bd10      	pop	{r4, pc}
 80030f8:	200006ea 	.word	0x200006ea
 80030fc:	200006e4 	.word	0x200006e4
 8003100:	200007ea 	.word	0x200007ea

08003104 <Write_Firmware_Func>:


void Write_Firmware_Func(void)
{
 8003104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Write Flash Memory

	buffer[0] = 0xAA;
 8003106:	4c17      	ldr	r4, [pc, #92]	@ (8003164 <Write_Firmware_Func+0x60>)
 8003108:	23aa      	movs	r3, #170	@ 0xaa
 800310a:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 800310c:	2355      	movs	r3, #85	@ 0x55
 800310e:	7063      	strb	r3, [r4, #1]
	buffer[2] = Write_Firmware;
 8003110:	23a3      	movs	r3, #163	@ 0xa3
 8003112:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 8003114:	2302      	movs	r3, #2

	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003116:	18e0      	adds	r0, r4, r3
 8003118:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 800311a:	70e3      	strb	r3, [r4, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 800311c:	f7fd fd38 	bl	8000b90 <CRC_Compute_8Bit_Block>
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <Write_Firmware_Func+0x64>)
 8003122:	6018      	str	r0, [r3, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8003124:	0e03      	lsrs	r3, r0, #24
 8003126:	7263      	strb	r3, [r4, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 8003128:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800312c:	72a3      	strb	r3, [r4, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 800312e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003132:	72e3      	strb	r3, [r4, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8003134:	b2c0      	uxtb	r0, r0
	buffer[13] = 0xBB;
 8003136:	23bb      	movs	r3, #187	@ 0xbb
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8003138:	7320      	strb	r0, [r4, #12]
	buffer[14] = 0x66;
	Custom_Comm_Send(buffer, 14);
 800313a:	210e      	movs	r1, #14
	buffer[13] = 0xBB;
 800313c:	7363      	strb	r3, [r4, #13]
	Custom_Comm_Send(buffer, 14);
 800313e:	4620      	mov	r0, r4
	buffer[14] = 0x66;
 8003140:	2366      	movs	r3, #102	@ 0x66
 8003142:	73a3      	strb	r3, [r4, #14]
	Custom_Comm_Send(buffer, 14);
 8003144:	f7fd fd84 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8003148:	2108      	movs	r1, #8
 800314a:	2301      	movs	r3, #1
 800314c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003150:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003154:	4805      	ldr	r0, [pc, #20]	@ (800316c <Write_Firmware_Func+0x68>)
 8003156:	9100      	str	r1, [sp, #0]
 8003158:	4623      	mov	r3, r4
 800315a:	2200      	movs	r2, #0
 800315c:	f7fe fe3a 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
//	DMA_Memory_To_Memory_Transfer(buffer1, 8, 8, (uint8_t *)buffer, 0, 1, 256);
}
 8003160:	b004      	add	sp, #16
 8003162:	bd10      	pop	{r4, pc}
 8003164:	200006ea 	.word	0x200006ea
 8003168:	200006e4 	.word	0x200006e4
 800316c:	200007ea 	.word	0x200007ea

08003170 <Read_Firmware_Func>:

void Read_Firmware_Func(void)
{
 8003170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = 0xAA;
 8003172:	4c17      	ldr	r4, [pc, #92]	@ (80031d0 <Read_Firmware_Func+0x60>)
 8003174:	23aa      	movs	r3, #170	@ 0xaa
 8003176:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 8003178:	2355      	movs	r3, #85	@ 0x55
 800317a:	7063      	strb	r3, [r4, #1]
	buffer[2] = Read_Firmware;
 800317c:	23a4      	movs	r3, #164	@ 0xa4
 800317e:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 8003180:	2302      	movs	r3, #2
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003182:	18e0      	adds	r0, r4, r3
 8003184:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 8003186:	70e3      	strb	r3, [r4, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003188:	f7fd fd02 	bl	8000b90 <CRC_Compute_8Bit_Block>
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <Read_Firmware_Func+0x64>)
 800318e:	6018      	str	r0, [r3, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8003190:	0e03      	lsrs	r3, r0, #24
 8003192:	7263      	strb	r3, [r4, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 8003194:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003198:	72a3      	strb	r3, [r4, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 800319a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800319e:	72e3      	strb	r3, [r4, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80031a0:	b2c0      	uxtb	r0, r0
	buffer[13] = 0xBB;
 80031a2:	23bb      	movs	r3, #187	@ 0xbb
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 80031a4:	7320      	strb	r0, [r4, #12]
	buffer[14] = 0x66;
	Custom_Comm_Send(buffer, 14);
 80031a6:	210e      	movs	r1, #14
	buffer[13] = 0xBB;
 80031a8:	7363      	strb	r3, [r4, #13]
	Custom_Comm_Send(buffer, 14);
 80031aa:	4620      	mov	r0, r4
	buffer[14] = 0x66;
 80031ac:	2366      	movs	r3, #102	@ 0x66
 80031ae:	73a3      	strb	r3, [r4, #14]
	Custom_Comm_Send(buffer, 14);
 80031b0:	f7fd fd4e 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 80031b4:	2108      	movs	r1, #8
 80031b6:	2301      	movs	r3, #1
 80031b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031c0:	4805      	ldr	r0, [pc, #20]	@ (80031d8 <Read_Firmware_Func+0x68>)
 80031c2:	9100      	str	r1, [sp, #0]
 80031c4:	4623      	mov	r3, r4
 80031c6:	2200      	movs	r2, #0
 80031c8:	f7fe fe04 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
//	DMA_Memory_To_Memory_Transfer(buffer1, 8, 8, (uint8_t *)buffer, 0, 1, 256);
}
 80031cc:	b004      	add	sp, #16
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	200006ea 	.word	0x200006ea
 80031d4:	200006e4 	.word	0x200006e4
 80031d8:	200007ea 	.word	0x200007ea

080031dc <Erase_Firmware_Func>:

void Erase_Firmware_Func(void)
{
 80031dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = 0xAA;
 80031de:	4c17      	ldr	r4, [pc, #92]	@ (800323c <Erase_Firmware_Func+0x60>)
 80031e0:	23aa      	movs	r3, #170	@ 0xaa
 80031e2:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 80031e4:	2355      	movs	r3, #85	@ 0x55
 80031e6:	7063      	strb	r3, [r4, #1]
	buffer[2] = Erase_Firmware;
 80031e8:	23a5      	movs	r3, #165	@ 0xa5
 80031ea:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 80031ec:	2302      	movs	r3, #2
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80031ee:	18e0      	adds	r0, r4, r3
 80031f0:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 80031f2:	70e3      	strb	r3, [r4, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 80031f4:	f7fd fccc 	bl	8000b90 <CRC_Compute_8Bit_Block>
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <Erase_Firmware_Func+0x64>)
 80031fa:	6018      	str	r0, [r3, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 80031fc:	0e03      	lsrs	r3, r0, #24
 80031fe:	7263      	strb	r3, [r4, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 8003200:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003204:	72a3      	strb	r3, [r4, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8003206:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800320a:	72e3      	strb	r3, [r4, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 800320c:	b2c0      	uxtb	r0, r0
	buffer[13] = 0xBB;
 800320e:	23bb      	movs	r3, #187	@ 0xbb
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8003210:	7320      	strb	r0, [r4, #12]
	buffer[14] = 0x66;
	Custom_Comm_Send(buffer, 14);
 8003212:	210e      	movs	r1, #14
	buffer[13] = 0xBB;
 8003214:	7363      	strb	r3, [r4, #13]
	Custom_Comm_Send(buffer, 14);
 8003216:	4620      	mov	r0, r4
	buffer[14] = 0x66;
 8003218:	2366      	movs	r3, #102	@ 0x66
 800321a:	73a3      	strb	r3, [r4, #14]
	Custom_Comm_Send(buffer, 14);
 800321c:	f7fd fd18 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 8003220:	2108      	movs	r1, #8
 8003222:	2301      	movs	r3, #1
 8003224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003228:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800322c:	4805      	ldr	r0, [pc, #20]	@ (8003244 <Erase_Firmware_Func+0x68>)
 800322e:	9100      	str	r1, [sp, #0]
 8003230:	4623      	mov	r3, r4
 8003232:	2200      	movs	r2, #0
 8003234:	f7fe fdce 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
//	DMA_Memory_To_Memory_Transfer(buffer1, 8,8, (uint8_t *)buffer, 0, 1, 256);
}
 8003238:	b004      	add	sp, #16
 800323a:	bd10      	pop	{r4, pc}
 800323c:	200006ea 	.word	0x200006ea
 8003240:	200006e4 	.word	0x200006e4
 8003244:	200007ea 	.word	0x200007ea

08003248 <Reboot_MCU_Func>:

void Reboot_MCU_Func(void)
{
 8003248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = 0xAA;
 800324a:	4c17      	ldr	r4, [pc, #92]	@ (80032a8 <Reboot_MCU_Func+0x60>)
 800324c:	23aa      	movs	r3, #170	@ 0xaa
 800324e:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0x55;
 8003250:	2355      	movs	r3, #85	@ 0x55
 8003252:	7063      	strb	r3, [r4, #1]
	buffer[2] = Reboot_MCU;
 8003254:	23a6      	movs	r3, #166	@ 0xa6
 8003256:	70a3      	strb	r3, [r4, #2]
	buffer[3] = Req_ACK;
 8003258:	2302      	movs	r3, #2
	//Read Flash Memory
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 800325a:	18e0      	adds	r0, r4, r3
 800325c:	2107      	movs	r1, #7
	buffer[3] = Req_ACK;
 800325e:	70e3      	strb	r3, [r4, #3]
	CRC_Rec1 = CRC_Compute_8Bit_Block(&buffer[2], 7);
 8003260:	f7fd fc96 	bl	8000b90 <CRC_Compute_8Bit_Block>
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <Reboot_MCU_Func+0x64>)
 8003266:	6018      	str	r0, [r3, #0]
	buffer[9]  = (CRC_Rec1 & 0xFF000000) >> 24;
 8003268:	0e03      	lsrs	r3, r0, #24
 800326a:	7263      	strb	r3, [r4, #9]
	buffer[10]  = (CRC_Rec1 & 0x00FF0000) >> 16;
 800326c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003270:	72a3      	strb	r3, [r4, #10]
	buffer[11]  = (CRC_Rec1 & 0x0000FF00) >> 8;
 8003272:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003276:	72e3      	strb	r3, [r4, #11]
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 8003278:	b2c0      	uxtb	r0, r0
	buffer[13] = 0xBB;
 800327a:	23bb      	movs	r3, #187	@ 0xbb
	buffer[12] = (CRC_Rec1 & 0x000000FF) >> 0;
 800327c:	7320      	strb	r0, [r4, #12]
	buffer[14] = 0x66;
	Custom_Comm_Send(buffer, 14);
 800327e:	210e      	movs	r1, #14
	buffer[13] = 0xBB;
 8003280:	7363      	strb	r3, [r4, #13]
	Custom_Comm_Send(buffer, 14);
 8003282:	4620      	mov	r0, r4
	buffer[14] = 0x66;
 8003284:	2366      	movs	r3, #102	@ 0x66
 8003286:	73a3      	strb	r3, [r4, #14]
	Custom_Comm_Send(buffer, 14);
 8003288:	f7fd fce2 	bl	8000c50 <Custom_Comm_Send>
	DMA_Memory_To_Memory_Transfer(buffer1, 8,0, (uint8_t *)buffer, 8, 1, 256);
 800328c:	2108      	movs	r1, #8
 800328e:	2301      	movs	r3, #1
 8003290:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003294:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003298:	4805      	ldr	r0, [pc, #20]	@ (80032b0 <Reboot_MCU_Func+0x68>)
 800329a:	9100      	str	r1, [sp, #0]
 800329c:	4623      	mov	r3, r4
 800329e:	2200      	movs	r2, #0
 80032a0:	f7fe fd98 	bl	8001dd4 <DMA_Memory_To_Memory_Transfer>
}
 80032a4:	b004      	add	sp, #16
 80032a6:	bd10      	pop	{r4, pc}
 80032a8:	200006ea 	.word	0x200006ea
 80032ac:	200006e4 	.word	0x200006e4
 80032b0:	200007ea 	.word	0x200007ea

080032b4 <Bootloader>:
{
 80032b4:	b570      	push	{r4, r5, r6, lr}
		uint16_t len = Custom_Comm_Receive(buffer);
 80032b6:	4c29      	ldr	r4, [pc, #164]	@ (800335c <Bootloader+0xa8>)
 80032b8:	4828      	ldr	r0, [pc, #160]	@ (800335c <Bootloader+0xa8>)
 80032ba:	f7fd fcdb 	bl	8000c74 <Custom_Comm_Receive>
		if(buffer[0] == 0xAA && buffer[1] == 0x55)
 80032be:	7823      	ldrb	r3, [r4, #0]
 80032c0:	2baa      	cmp	r3, #170	@ 0xaa
 80032c2:	d1f9      	bne.n	80032b8 <Bootloader+0x4>
 80032c4:	7863      	ldrb	r3, [r4, #1]
 80032c6:	2b55      	cmp	r3, #85	@ 0x55
 80032c8:	d1f6      	bne.n	80032b8 <Bootloader+0x4>
			if(buffer[0] == 0xAA && buffer[1] == 0x55)
 80032ca:	7823      	ldrb	r3, [r4, #0]
 80032cc:	2baa      	cmp	r3, #170	@ 0xaa
 80032ce:	d1f3      	bne.n	80032b8 <Bootloader+0x4>
 80032d0:	7863      	ldrb	r3, [r4, #1]
 80032d2:	2b55      	cmp	r3, #85	@ 0x55
 80032d4:	d1f0      	bne.n	80032b8 <Bootloader+0x4>
				if(buffer[len-2] == 0xBB && buffer[len-1] == 0x66)
 80032d6:	1e83      	subs	r3, r0, #2
 80032d8:	5ce3      	ldrb	r3, [r4, r3]
 80032da:	2bbb      	cmp	r3, #187	@ 0xbb
 80032dc:	d1ec      	bne.n	80032b8 <Bootloader+0x4>
 80032de:	1e43      	subs	r3, r0, #1
 80032e0:	5ce3      	ldrb	r3, [r4, r3]
 80032e2:	2b66      	cmp	r3, #102	@ 0x66
 80032e4:	d1e8      	bne.n	80032b8 <Bootloader+0x4>
					CRC_Rec2 = (((uint32_t)buffer[len-6] << 24) | ((uint32_t)buffer[len-5] << 16) | ((uint32_t)buffer[len-4] << 8) | ((uint32_t)buffer[len-3] << 0)) ;
 80032e6:	1f83      	subs	r3, r0, #6
 80032e8:	1f02      	subs	r2, r0, #4
 80032ea:	5ce6      	ldrb	r6, [r4, r3]
 80032ec:	4d1c      	ldr	r5, [pc, #112]	@ (8003360 <Bootloader+0xac>)
 80032ee:	1f43      	subs	r3, r0, #5
 80032f0:	1ec1      	subs	r1, r0, #3
 80032f2:	5ce3      	ldrb	r3, [r4, r3]
 80032f4:	5ca2      	ldrb	r2, [r4, r2]
 80032f6:	5c61      	ldrb	r1, [r4, r1]
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80032fe:	430b      	orrs	r3, r1
 8003300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					CRC_Rec2 = CRC_Compute_8Bit_Block(&buffer[2], len-8);
 8003304:	f1a0 0108 	sub.w	r1, r0, #8
 8003308:	4816      	ldr	r0, [pc, #88]	@ (8003364 <Bootloader+0xb0>)
					CRC_Rec2 = (((uint32_t)buffer[len-6] << 24) | ((uint32_t)buffer[len-5] << 16) | ((uint32_t)buffer[len-4] << 8) | ((uint32_t)buffer[len-3] << 0)) ;
 800330a:	602b      	str	r3, [r5, #0]
					CRC_Rec2 = CRC_Compute_8Bit_Block(&buffer[2], len-8);
 800330c:	f7fd fc40 	bl	8000b90 <CRC_Compute_8Bit_Block>
					if(CRC_Rec1 == CRC_Rec2)
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <Bootloader+0xb4>)
					CRC_Rec2 = CRC_Compute_8Bit_Block(&buffer[2], len-8);
 8003312:	6028      	str	r0, [r5, #0]
					if(CRC_Rec1 == CRC_Rec2)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4298      	cmp	r0, r3
 8003318:	d1ce      	bne.n	80032b8 <Bootloader+0x4>
						Command_RX = buffer[2];
 800331a:	78a3      	ldrb	r3, [r4, #2]
 800331c:	4a13      	ldr	r2, [pc, #76]	@ (800336c <Bootloader+0xb8>)
						Req_RX = buffer[3];
 800331e:	78e1      	ldrb	r1, [r4, #3]
						Command_RX = buffer[2];
 8003320:	b2db      	uxtb	r3, r3
 8003322:	7013      	strb	r3, [r2, #0]
						Req_RX = buffer[3];
 8003324:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <Bootloader+0xbc>)
						switch (Command_RX)
 8003326:	3ba1      	subs	r3, #161	@ 0xa1
						Req_RX = buffer[3];
 8003328:	7011      	strb	r1, [r2, #0]
						switch (Command_RX)
 800332a:	2b05      	cmp	r3, #5
 800332c:	d8c4      	bhi.n	80032b8 <Bootloader+0x4>
 800332e:	e8df f003 	tbb	[pc, r3]
 8003332:	0603      	.short	0x0603
 8003334:	120f0c09 	.word	0x120f0c09
							Connect_Device_Func();
 8003338:	f7ff fe72 	bl	8003020 <Connect_Device_Func>
						break;
 800333c:	e7bc      	b.n	80032b8 <Bootloader+0x4>
							Disconnect_Device_Func();
 800333e:	f7ff feab 	bl	8003098 <Disconnect_Device_Func>
						break;
 8003342:	e7b9      	b.n	80032b8 <Bootloader+0x4>
							Write_Firmware_Func();
 8003344:	f7ff fede 	bl	8003104 <Write_Firmware_Func>
						break;
 8003348:	e7b6      	b.n	80032b8 <Bootloader+0x4>
							Read_Firmware_Func();
 800334a:	f7ff ff11 	bl	8003170 <Read_Firmware_Func>
						break;
 800334e:	e7b3      	b.n	80032b8 <Bootloader+0x4>
							Erase_Firmware_Func();
 8003350:	f7ff ff44 	bl	80031dc <Erase_Firmware_Func>
						break;
 8003354:	e7b0      	b.n	80032b8 <Bootloader+0x4>
							Reboot_MCU_Func();
 8003356:	f7ff ff77 	bl	8003248 <Reboot_MCU_Func>
						break;
 800335a:	e7ad      	b.n	80032b8 <Bootloader+0x4>
 800335c:	200006ea 	.word	0x200006ea
 8003360:	200006e0 	.word	0x200006e0
 8003364:	200006ec 	.word	0x200006ec
 8003368:	200006e4 	.word	0x200006e4
 800336c:	200006e9 	.word	0x200006e9
 8003370:	200006e8 	.word	0x200006e8

08003374 <main>:
{
 8003374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	SystemInit();
 8003376:	f000 f885 	bl	8003484 <SystemInit>
	RCC->PLLCFGR = 0x00000000;
 800337a:	4b3c      	ldr	r3, [pc, #240]	@ (800346c <main+0xf8>)
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003386:	601a      	str	r2, [r3, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	0390      	lsls	r0, r2, #14
 800338c:	d5fc      	bpl.n	8003388 <main+0x14>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800338e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003390:	4937      	ldr	r1, [pc, #220]	@ (8003470 <main+0xfc>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8003392:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003398:	680a      	ldr	r2, [r1, #0]
 800339a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800339e:	600a      	str	r2, [r1, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80033a0:	f501 31e6 	add.w	r1, r1, #117760	@ 0x1cc00
 80033a4:	680a      	ldr	r2, [r1, #0]
 80033a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80033aa:	f042 0205 	orr.w	r2, r2, #5
 80033ae:	600a      	str	r2, [r1, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <main+0x100>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80033be:	605a      	str	r2, [r3, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 80033ca:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033d2:	609a      	str	r2, [r3, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80033da:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <main+0xf8>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	0191      	lsls	r1, r2, #6
 80033e2:	d5fc      	bpl.n	80033de <main+0x6a>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	f042 0202 	orr.w	r2, r2, #2
 80033ea:	609a      	str	r2, [r3, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	0712      	lsls	r2, r2, #28
 80033f0:	d5fc      	bpl.n	80033ec <main+0x78>
	SystemCoreClockUpdate();
 80033f2:	f000 f851 	bl	8003498 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <main+0x104>)
 80033f8:	22a8      	movs	r2, #168	@ 0xa8
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003400:	3b01      	subs	r3, #1
 8003402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003406:	d20a      	bcs.n	800341e <main+0xaa>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003408:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	4b1a      	ldr	r3, [pc, #104]	@ (800347c <main+0x108>)
 8003412:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003416:	2300      	movs	r3, #0
 8003418:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341a:	2307      	movs	r3, #7
 800341c:	6113      	str	r3, [r2, #16]
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800341e:	4a13      	ldr	r2, [pc, #76]	@ (800346c <main+0xf8>)
	GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8003420:	4d17      	ldr	r5, [pc, #92]	@ (8003480 <main+0x10c>)
 8003422:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003428:	6453      	str	r3, [r2, #68]	@ 0x44
	SysTick->CTRL = 0;
 800342a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800342e:	2400      	movs	r4, #0
	SysTick->LOAD = 0x00FFFFFF;
 8003430:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
	SysTick->CTRL = 0;
 8003434:	611c      	str	r4, [r3, #16]
	SysTick->LOAD = 0x00FFFFFF;
 8003436:	615a      	str	r2, [r3, #20]
	SysTick->CTRL = 5;
 8003438:	2205      	movs	r2, #5
	SysTick->VAL = 0;
 800343a:	619c      	str	r4, [r3, #24]
	SysTick->CTRL = 5;
 800343c:	611a      	str	r2, [r3, #16]
	CRC_Init();
 800343e:	f7fd fb97 	bl	8000b70 <CRC_Init>
	GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8003442:	2304      	movs	r3, #4
 8003444:	e9cd 3300 	strd	r3, r3, [sp]
 8003448:	9402      	str	r4, [sp, #8]
 800344a:	2302      	movs	r3, #2
 800344c:	4622      	mov	r2, r4
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f7fe fe09 	bl	8002068 <GPIO_Pin_Init>
	if((GPIOC -> IDR & GPIO_IDR_ID0) == true)
 8003456:	692b      	ldr	r3, [r5, #16]
 8003458:	07db      	lsls	r3, r3, #31
 800345a:	d505      	bpl.n	8003468 <main+0xf4>
		Custom_Comm_Init(115200);
 800345c:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8003460:	f7fd fbd4 	bl	8000c0c <Custom_Comm_Init>
		Bootloader();
 8003464:	f7ff ff26 	bl	80032b4 <Bootloader>
		Blink_App();
 8003468:	f004 fdca 	bl	8008000 <Blink_App>
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000
 8003474:	07005408 	.word	0x07005408
 8003478:	20000000 	.word	0x20000000
 800347c:	e000ed00 	.word	0xe000ed00
 8003480:	40020800 	.word	0x40020800

08003484 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003484:	4a03      	ldr	r2, [pc, #12]	@ (8003494 <SystemInit+0x10>)
 8003486:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800348a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800348e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003498:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <SystemCoreClockUpdate+0x58>)
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80034a0:	2a04      	cmp	r2, #4
 80034a2:	d021      	beq.n	80034e8 <SystemCoreClockUpdate+0x50>
 80034a4:	2a08      	cmp	r2, #8
 80034a6:	d121      	bne.n	80034ec <SystemCoreClockUpdate+0x54>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80034a8:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034aa:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034ac:	685b      	ldr	r3, [r3, #4]
      if (pllsource != 0)
 80034ae:	0249      	lsls	r1, r1, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034b0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80034b4:	bf4c      	ite	mi
 80034b6:	490f      	ldrmi	r1, [pc, #60]	@ (80034f4 <SystemCoreClockUpdate+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034b8:	490f      	ldrpl	r1, [pc, #60]	@ (80034f8 <SystemCoreClockUpdate+0x60>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034be:	fbb1 f2f2 	udiv	r2, r1, r2
 80034c2:	4353      	muls	r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80034c4:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <SystemCoreClockUpdate+0x58>)
 80034c6:	6852      	ldr	r2, [r2, #4]
 80034c8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80034cc:	3201      	adds	r2, #1
 80034ce:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80034d0:	fbb3 f3f2 	udiv	r3, r3, r2
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80034d4:	4a06      	ldr	r2, [pc, #24]	@ (80034f0 <SystemCoreClockUpdate+0x58>)
 80034d6:	4909      	ldr	r1, [pc, #36]	@ (80034fc <SystemCoreClockUpdate+0x64>)
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80034de:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80034e0:	40d3      	lsrs	r3, r2
 80034e2:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <SystemCoreClockUpdate+0x68>)
 80034e4:	6013      	str	r3, [r2, #0]
}
 80034e6:	4770      	bx	lr
  switch (tmp)
 80034e8:	4b02      	ldr	r3, [pc, #8]	@ (80034f4 <SystemCoreClockUpdate+0x5c>)
 80034ea:	e7f3      	b.n	80034d4 <SystemCoreClockUpdate+0x3c>
 80034ec:	4b02      	ldr	r3, [pc, #8]	@ (80034f8 <SystemCoreClockUpdate+0x60>)
 80034ee:	e7f1      	b.n	80034d4 <SystemCoreClockUpdate+0x3c>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	08003ae0 	.word	0x08003ae0
 8003500:	20000000 	.word	0x20000000

08003504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003504:	480d      	ldr	r0, [pc, #52]	@ (800353c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003508:	f7ff ffbc 	bl	8003484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800350c:	480c      	ldr	r0, [pc, #48]	@ (8003540 <LoopForever+0x6>)
  ldr r1, =_edata
 800350e:	490d      	ldr	r1, [pc, #52]	@ (8003544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003510:	4a0d      	ldr	r2, [pc, #52]	@ (8003548 <LoopForever+0xe>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003514:	e002      	b.n	800351c <LoopCopyDataInit>

08003516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800351a:	3304      	adds	r3, #4

0800351c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800351c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003520:	d3f9      	bcc.n	8003516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003524:	4c0a      	ldr	r4, [pc, #40]	@ (8003550 <LoopForever+0x16>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003528:	e001      	b.n	800352e <LoopFillZerobss>

0800352a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800352a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800352c:	3204      	adds	r2, #4

0800352e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003530:	d3fb      	bcc.n	800352a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003532:	f000 f811 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003536:	f7ff ff1d 	bl	8003374 <main>

0800353a <LoopForever>:

LoopForever:
  b LoopForever
 800353a:	e7fe      	b.n	800353a <LoopForever>
  ldr   r0, =_estack
 800353c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003544:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003548:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 800354c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003550:	200007f0 	.word	0x200007f0

08003554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003554:	e7fe      	b.n	8003554 <ADC_IRQHandler>
	...

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	4d0d      	ldr	r5, [pc, #52]	@ (8003590 <__libc_init_array+0x38>)
 800355c:	4c0d      	ldr	r4, [pc, #52]	@ (8003594 <__libc_init_array+0x3c>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	2600      	movs	r6, #0
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	4d0b      	ldr	r5, [pc, #44]	@ (8003598 <__libc_init_array+0x40>)
 800356a:	4c0c      	ldr	r4, [pc, #48]	@ (800359c <__libc_init_array+0x44>)
 800356c:	f000 f8a4 	bl	80036b8 <_init>
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	2600      	movs	r6, #0
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	f855 3b04 	ldr.w	r3, [r5], #4
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	08003af0 	.word	0x08003af0
 8003594:	08003af0 	.word	0x08003af0
 8003598:	08003af0 	.word	0x08003af0
 800359c:	08003af4 	.word	0x08003af4

080035a0 <memcpy>:
 80035a0:	440a      	add	r2, r1
 80035a2:	4291      	cmp	r1, r2
 80035a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035a8:	d100      	bne.n	80035ac <memcpy+0xc>
 80035aa:	4770      	bx	lr
 80035ac:	b510      	push	{r4, lr}
 80035ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035b6:	4291      	cmp	r1, r2
 80035b8:	d1f9      	bne.n	80035ae <memcpy+0xe>
 80035ba:	bd10      	pop	{r4, pc}
 80035bc:	0000      	movs	r0, r0
	...

080035c0 <ceil>:
 80035c0:	ec51 0b10 	vmov	r0, r1, d0
 80035c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80035d0:	2e13      	cmp	r6, #19
 80035d2:	460c      	mov	r4, r1
 80035d4:	4605      	mov	r5, r0
 80035d6:	4680      	mov	r8, r0
 80035d8:	dc2e      	bgt.n	8003638 <ceil+0x78>
 80035da:	2e00      	cmp	r6, #0
 80035dc:	da11      	bge.n	8003602 <ceil+0x42>
 80035de:	a332      	add	r3, pc, #200	@ (adr r3, 80036a8 <ceil+0xe8>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc fdf6 	bl	80001d4 <__adddf3>
 80035e8:	2200      	movs	r2, #0
 80035ea:	2300      	movs	r3, #0
 80035ec:	f7fd fa38 	bl	8000a60 <__aeabi_dcmpgt>
 80035f0:	b120      	cbz	r0, 80035fc <ceil+0x3c>
 80035f2:	2c00      	cmp	r4, #0
 80035f4:	db4f      	blt.n	8003696 <ceil+0xd6>
 80035f6:	4325      	orrs	r5, r4
 80035f8:	d151      	bne.n	800369e <ceil+0xde>
 80035fa:	462c      	mov	r4, r5
 80035fc:	4621      	mov	r1, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	e023      	b.n	800364a <ceil+0x8a>
 8003602:	4f2b      	ldr	r7, [pc, #172]	@ (80036b0 <ceil+0xf0>)
 8003604:	4137      	asrs	r7, r6
 8003606:	ea01 0307 	and.w	r3, r1, r7
 800360a:	4303      	orrs	r3, r0
 800360c:	d01d      	beq.n	800364a <ceil+0x8a>
 800360e:	a326      	add	r3, pc, #152	@ (adr r3, 80036a8 <ceil+0xe8>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fc fdde 	bl	80001d4 <__adddf3>
 8003618:	2200      	movs	r2, #0
 800361a:	2300      	movs	r3, #0
 800361c:	f7fd fa20 	bl	8000a60 <__aeabi_dcmpgt>
 8003620:	2800      	cmp	r0, #0
 8003622:	d0eb      	beq.n	80035fc <ceil+0x3c>
 8003624:	2c00      	cmp	r4, #0
 8003626:	bfc2      	ittt	gt
 8003628:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800362c:	4133      	asrgt	r3, r6
 800362e:	18e4      	addgt	r4, r4, r3
 8003630:	ea24 0407 	bic.w	r4, r4, r7
 8003634:	2500      	movs	r5, #0
 8003636:	e7e1      	b.n	80035fc <ceil+0x3c>
 8003638:	2e33      	cmp	r6, #51	@ 0x33
 800363a:	dd0a      	ble.n	8003652 <ceil+0x92>
 800363c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003640:	d103      	bne.n	800364a <ceil+0x8a>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	f7fc fdc5 	bl	80001d4 <__adddf3>
 800364a:	ec41 0b10 	vmov	d0, r0, r1
 800364e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003652:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8003656:	f04f 37ff 	mov.w	r7, #4294967295
 800365a:	40df      	lsrs	r7, r3
 800365c:	4238      	tst	r0, r7
 800365e:	d0f4      	beq.n	800364a <ceil+0x8a>
 8003660:	a311      	add	r3, pc, #68	@ (adr r3, 80036a8 <ceil+0xe8>)
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	f7fc fdb5 	bl	80001d4 <__adddf3>
 800366a:	2200      	movs	r2, #0
 800366c:	2300      	movs	r3, #0
 800366e:	f7fd f9f7 	bl	8000a60 <__aeabi_dcmpgt>
 8003672:	2800      	cmp	r0, #0
 8003674:	d0c2      	beq.n	80035fc <ceil+0x3c>
 8003676:	2c00      	cmp	r4, #0
 8003678:	dd0a      	ble.n	8003690 <ceil+0xd0>
 800367a:	2e14      	cmp	r6, #20
 800367c:	d101      	bne.n	8003682 <ceil+0xc2>
 800367e:	3401      	adds	r4, #1
 8003680:	e006      	b.n	8003690 <ceil+0xd0>
 8003682:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003686:	2301      	movs	r3, #1
 8003688:	40b3      	lsls	r3, r6
 800368a:	441d      	add	r5, r3
 800368c:	45a8      	cmp	r8, r5
 800368e:	d8f6      	bhi.n	800367e <ceil+0xbe>
 8003690:	ea25 0507 	bic.w	r5, r5, r7
 8003694:	e7b2      	b.n	80035fc <ceil+0x3c>
 8003696:	2500      	movs	r5, #0
 8003698:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800369c:	e7ae      	b.n	80035fc <ceil+0x3c>
 800369e:	4c05      	ldr	r4, [pc, #20]	@ (80036b4 <ceil+0xf4>)
 80036a0:	2500      	movs	r5, #0
 80036a2:	e7ab      	b.n	80035fc <ceil+0x3c>
 80036a4:	f3af 8000 	nop.w
 80036a8:	8800759c 	.word	0x8800759c
 80036ac:	7e37e43c 	.word	0x7e37e43c
 80036b0:	000fffff 	.word	0x000fffff
 80036b4:	3ff00000 	.word	0x3ff00000

080036b8 <_init>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr

080036c4 <_fini>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

Disassembly of section .app_section:

08008000 <Blink_App>:
{
 8008000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 8008002:	2204      	movs	r2, #4
 8008004:	2300      	movs	r3, #0
 8008006:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	9200      	str	r2, [sp, #0]
 800800e:	210c      	movs	r1, #12
 8008010:	480c      	ldr	r0, [pc, #48]	@ (8008044 <Blink_App+0x44>)
 8008012:	2201      	movs	r2, #1
 8008014:	f7fa f828 	bl	8002068 <GPIO_Pin_Init>
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
	Port -> ODR |= 1 << pin;
 8008018:	490a      	ldr	r1, [pc, #40]	@ (8008044 <Blink_App+0x44>)
 800801a:	694b      	ldr	r3, [r1, #20]
 800801c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008020:	614b      	str	r3, [r1, #20]
 8008022:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		Delay_ms(1);
 8008026:	f7fa ffeb 	bl	8003000 <Delay_ms.constprop.0.isra.0>
	for (; s>0; s--)
 800802a:	3801      	subs	r0, #1
 800802c:	d1fb      	bne.n	8008026 <Blink_App+0x26>
	Port -> ODR &= ~(1 << pin);
 800802e:	694b      	ldr	r3, [r1, #20]
 8008030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008034:	614b      	str	r3, [r1, #20]
 8008036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		Delay_ms(1);
 800803a:	f7fa ffe1 	bl	8003000 <Delay_ms.constprop.0.isra.0>
	for (; s>0; s--)
 800803e:	3801      	subs	r0, #1
 8008040:	d1fb      	bne.n	800803a <Blink_App+0x3a>
 8008042:	e7ea      	b.n	800801a <Blink_App+0x1a>
 8008044:	40020c00 	.word	0x40020c00
